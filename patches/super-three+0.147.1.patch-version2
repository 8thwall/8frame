diff --git a/node_modules/super-three/build/three.cjs b/node_modules/super-three/build/three.cjs
index 3bd7eaf..19ee4a3 100644
--- a/node_modules/super-three/build/three.cjs
+++ b/node_modules/super-three/build/three.cjs
@@ -104,7 +104,6 @@ const UnsignedShort5551Type = 1018;
 const UnsignedInt248Type = 1020;
 const AlphaFormat = 1021;
 const RGBFormat = 1022; // @deprecated since r137
-
 const RGBAFormat = 1023;
 const LuminanceFormat = 1024;
 const LuminanceAlphaFormat = 1025;
@@ -160,8 +159,9 @@ const sRGBEncoding = 3001;
 const BasicDepthPacking = 3200;
 const RGBADepthPacking = 3201;
 const TangentSpaceNormalMap = 0;
-const ObjectSpaceNormalMap = 1; // Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
+const ObjectSpaceNormalMap = 1;
 
+// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
 const NoColorSpace = '';
 const SRGBColorSpace = 'srgb';
 const LinearSRGBColorSpace = 'srgb-linear';
@@ -197,179 +197,168 @@ const _SRGBAFormat = 1035; // fallback for WebGL 1
 /**
  * https://github.com/mrdoob/eventdispatcher.js/
  */
+
 class EventDispatcher {
 	addEventListener(type, listener) {
 		if (this._listeners === undefined) this._listeners = {};
 		const listeners = this._listeners;
-
 		if (listeners[type] === undefined) {
 			listeners[type] = [];
 		}
-
 		if (listeners[type].indexOf(listener) === -1) {
 			listeners[type].push(listener);
 		}
 	}
-
 	hasEventListener(type, listener) {
 		if (this._listeners === undefined) return false;
 		const listeners = this._listeners;
 		return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
 	}
-
 	removeEventListener(type, listener) {
 		if (this._listeners === undefined) return;
 		const listeners = this._listeners;
 		const listenerArray = listeners[type];
-
 		if (listenerArray !== undefined) {
 			const index = listenerArray.indexOf(listener);
-
 			if (index !== -1) {
 				listenerArray.splice(index, 1);
 			}
 		}
 	}
-
 	dispatchEvent(event) {
 		if (this._listeners === undefined) return;
 		const listeners = this._listeners;
 		const listenerArray = listeners[event.type];
-
 		if (listenerArray !== undefined) {
-			event.target = this; // Make a copy, in case listeners are removed while iterating.
+			event.target = this;
 
+			// Make a copy, in case listeners are removed while iterating.
 			const array = listenerArray.slice(0);
-
 			for (let i = 0, l = array.length; i < l; i++) {
 				array[i].call(this, event);
 			}
-
 			event.target = null;
 		}
 	}
-
 }
 
 const _lut = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'];
 let _seed = 1234567;
 const DEG2RAD = Math.PI / 180;
-const RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
+const RAD2DEG = 180 / Math.PI;
 
+// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
 function generateUUID() {
 	const d0 = Math.random() * 0xffffffff | 0;
 	const d1 = Math.random() * 0xffffffff | 0;
 	const d2 = Math.random() * 0xffffffff | 0;
 	const d3 = Math.random() * 0xffffffff | 0;
-	const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toLowerCase() here flattens concatenated strings to save heap memory space.
+	const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];
 
+	// .toLowerCase() here flattens concatenated strings to save heap memory space.
 	return uuid.toLowerCase();
 }
-
 function clamp(value, min, max) {
 	return Math.max(min, Math.min(max, value));
-} // compute euclidean modulo of m % n
-// https://en.wikipedia.org/wiki/Modulo_operation
-
+}
 
+// compute euclidean modulo of m % n
+// https://en.wikipedia.org/wiki/Modulo_operation
 function euclideanModulo(n, m) {
 	return (n % m + m) % m;
-} // Linear mapping from range <a1, a2> to range <b1, b2>
-
+}
 
+// Linear mapping from range <a1, a2> to range <b1, b2>
 function mapLinear(x, a1, a2, b1, b2) {
 	return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
-} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
-
+}
 
+// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
 function inverseLerp(x, y, value) {
 	if (x !== y) {
 		return (value - x) / (y - x);
 	} else {
 		return 0;
 	}
-} // https://en.wikipedia.org/wiki/Linear_interpolation
-
+}
 
+// https://en.wikipedia.org/wiki/Linear_interpolation
 function lerp(x, y, t) {
 	return (1 - t) * x + t * y;
-} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
-
+}
 
+// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
 function damp(x, y, lambda, dt) {
 	return lerp(x, y, 1 - Math.exp(-lambda * dt));
-} // https://www.desmos.com/calculator/vcsjnyz7x4
-
+}
 
+// https://www.desmos.com/calculator/vcsjnyz7x4
 function pingpong(x, length = 1) {
 	return length - Math.abs(euclideanModulo(x, length * 2) - length);
-} // http://en.wikipedia.org/wiki/Smoothstep
-
+}
 
+// http://en.wikipedia.org/wiki/Smoothstep
 function smoothstep(x, min, max) {
 	if (x <= min) return 0;
 	if (x >= max) return 1;
 	x = (x - min) / (max - min);
 	return x * x * (3 - 2 * x);
 }
-
 function smootherstep(x, min, max) {
 	if (x <= min) return 0;
 	if (x >= max) return 1;
 	x = (x - min) / (max - min);
 	return x * x * x * (x * (x * 6 - 15) + 10);
-} // Random integer from <low, high> interval
-
+}
 
+// Random integer from <low, high> interval
 function randInt(low, high) {
 	return low + Math.floor(Math.random() * (high - low + 1));
-} // Random float from <low, high> interval
-
+}
 
+// Random float from <low, high> interval
 function randFloat(low, high) {
 	return low + Math.random() * (high - low);
-} // Random float from <-range/2, range/2> interval
-
+}
 
+// Random float from <-range/2, range/2> interval
 function randFloatSpread(range) {
 	return range * (0.5 - Math.random());
-} // Deterministic pseudo-random float in the interval [ 0, 1 ]
-
+}
 
+// Deterministic pseudo-random float in the interval [ 0, 1 ]
 function seededRandom(s) {
-	if (s !== undefined) _seed = s; // Mulberry32 generator
+	if (s !== undefined) _seed = s;
+
+	// Mulberry32 generator
 
 	let t = _seed += 0x6D2B79F5;
 	t = Math.imul(t ^ t >>> 15, t | 1);
 	t ^= t + Math.imul(t ^ t >>> 7, t | 61);
 	return ((t ^ t >>> 14) >>> 0) / 4294967296;
 }
-
 function degToRad(degrees) {
 	return degrees * DEG2RAD;
 }
-
 function radToDeg(radians) {
 	return radians * RAD2DEG;
 }
-
 function isPowerOfTwo(value) {
 	return (value & value - 1) === 0 && value !== 0;
 }
-
 function ceilPowerOfTwo(value) {
 	return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
 }
-
 function floorPowerOfTwo(value) {
 	return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
 }
-
 function setQuaternionFromProperEuler(q, a, b, c, order) {
 	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
+
 	// rotations are applied to the axes in the order specified by 'order'
 	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
 	// angles are in radians
+
 	const cos = Math.cos;
 	const sin = Math.sin;
 	const c2 = cos(b / 2);
@@ -380,76 +369,57 @@ function setQuaternionFromProperEuler(q, a, b, c, order) {
 	const s1_3 = sin((a - c) / 2);
 	const c3_1 = cos((c - a) / 2);
 	const s3_1 = sin((c - a) / 2);
-
 	switch (order) {
 		case 'XYX':
 			q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
 			break;
-
 		case 'YZY':
 			q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
 			break;
-
 		case 'ZXZ':
 			q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
 			break;
-
 		case 'XZX':
 			q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
 			break;
-
 		case 'YXY':
 			q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
 			break;
-
 		case 'ZYZ':
 			q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
 			break;
-
 		default:
 			console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
 	}
 }
-
 function denormalize(value, array) {
 	switch (array.constructor) {
 		case Float32Array:
 			return value;
-
 		case Uint16Array:
 			return value / 65535.0;
-
 		case Uint8Array:
 			return value / 255.0;
-
 		case Int16Array:
 			return Math.max(value / 32767.0, -1.0);
-
 		case Int8Array:
 			return Math.max(value / 127.0, -1.0);
-
 		default:
 			throw new Error('Invalid component type.');
 	}
 }
-
 function normalize(value, array) {
 	switch (array.constructor) {
 		case Float32Array:
 			return value;
-
 		case Uint16Array:
 			return Math.round(value * 65535.0);
-
 		case Uint8Array:
 			return Math.round(value * 255.0);
-
 		case Int16Array:
 			return Math.round(value * 32767.0);
-
 		case Int8Array:
 			return Math.round(value * 127.0);
-
 		default:
 			throw new Error('Invalid component type.');
 	}
@@ -489,321 +459,263 @@ class Vector2 {
 		this.x = x;
 		this.y = y;
 	}
-
 	get width() {
 		return this.x;
 	}
-
 	set width(value) {
 		this.x = value;
 	}
-
 	get height() {
 		return this.y;
 	}
-
 	set height(value) {
 		this.y = value;
 	}
-
 	set(x, y) {
 		this.x = x;
 		this.y = y;
 		return this;
 	}
-
 	setScalar(scalar) {
 		this.x = scalar;
 		this.y = scalar;
 		return this;
 	}
-
 	setX(x) {
 		this.x = x;
 		return this;
 	}
-
 	setY(y) {
 		this.y = y;
 		return this;
 	}
-
 	setComponent(index, value) {
 		switch (index) {
 			case 0:
 				this.x = value;
 				break;
-
 			case 1:
 				this.y = value;
 				break;
-
 			default:
 				throw new Error('index is out of range: ' + index);
 		}
-
 		return this;
 	}
-
 	getComponent(index) {
 		switch (index) {
 			case 0:
 				return this.x;
-
 			case 1:
 				return this.y;
-
 			default:
 				throw new Error('index is out of range: ' + index);
 		}
 	}
-
 	clone() {
 		return new this.constructor(this.x, this.y);
 	}
-
 	copy(v) {
 		this.x = v.x;
 		this.y = v.y;
 		return this;
 	}
-
 	add(v) {
 		this.x += v.x;
 		this.y += v.y;
 		return this;
 	}
-
 	addScalar(s) {
 		this.x += s;
 		this.y += s;
 		return this;
 	}
-
 	addVectors(a, b) {
 		this.x = a.x + b.x;
 		this.y = a.y + b.y;
 		return this;
 	}
-
 	addScaledVector(v, s) {
 		this.x += v.x * s;
 		this.y += v.y * s;
 		return this;
 	}
-
 	sub(v) {
 		this.x -= v.x;
 		this.y -= v.y;
 		return this;
 	}
-
 	subScalar(s) {
 		this.x -= s;
 		this.y -= s;
 		return this;
 	}
-
 	subVectors(a, b) {
 		this.x = a.x - b.x;
 		this.y = a.y - b.y;
 		return this;
 	}
-
 	multiply(v) {
 		this.x *= v.x;
 		this.y *= v.y;
 		return this;
 	}
-
 	multiplyScalar(scalar) {
 		this.x *= scalar;
 		this.y *= scalar;
 		return this;
 	}
-
 	divide(v) {
 		this.x /= v.x;
 		this.y /= v.y;
 		return this;
 	}
-
 	divideScalar(scalar) {
 		return this.multiplyScalar(1 / scalar);
 	}
-
 	applyMatrix3(m) {
 		const x = this.x,
-					y = this.y;
+			y = this.y;
 		const e = m.elements;
 		this.x = e[0] * x + e[3] * y + e[6];
 		this.y = e[1] * x + e[4] * y + e[7];
 		return this;
 	}
-
 	min(v) {
 		this.x = Math.min(this.x, v.x);
 		this.y = Math.min(this.y, v.y);
 		return this;
 	}
-
 	max(v) {
 		this.x = Math.max(this.x, v.x);
 		this.y = Math.max(this.y, v.y);
 		return this;
 	}
-
 	clamp(min, max) {
 		// assumes min < max, componentwise
+
 		this.x = Math.max(min.x, Math.min(max.x, this.x));
 		this.y = Math.max(min.y, Math.min(max.y, this.y));
 		return this;
 	}
-
 	clampScalar(minVal, maxVal) {
 		this.x = Math.max(minVal, Math.min(maxVal, this.x));
 		this.y = Math.max(minVal, Math.min(maxVal, this.y));
 		return this;
 	}
-
 	clampLength(min, max) {
 		const length = this.length();
 		return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
 	}
-
 	floor() {
 		this.x = Math.floor(this.x);
 		this.y = Math.floor(this.y);
 		return this;
 	}
-
 	ceil() {
 		this.x = Math.ceil(this.x);
 		this.y = Math.ceil(this.y);
 		return this;
 	}
-
 	round() {
 		this.x = Math.round(this.x);
 		this.y = Math.round(this.y);
 		return this;
 	}
-
 	roundToZero() {
 		this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
 		this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
 		return this;
 	}
-
 	negate() {
 		this.x = -this.x;
 		this.y = -this.y;
 		return this;
 	}
-
 	dot(v) {
 		return this.x * v.x + this.y * v.y;
 	}
-
 	cross(v) {
 		return this.x * v.y - this.y * v.x;
 	}
-
 	lengthSq() {
 		return this.x * this.x + this.y * this.y;
 	}
-
 	length() {
 		return Math.sqrt(this.x * this.x + this.y * this.y);
 	}
-
 	manhattanLength() {
 		return Math.abs(this.x) + Math.abs(this.y);
 	}
-
 	normalize() {
 		return this.divideScalar(this.length() || 1);
 	}
-
 	angle() {
 		// computes the angle in radians with respect to the positive x-axis
+
 		const angle = Math.atan2(-this.y, -this.x) + Math.PI;
 		return angle;
 	}
-
 	distanceTo(v) {
 		return Math.sqrt(this.distanceToSquared(v));
 	}
-
 	distanceToSquared(v) {
 		const dx = this.x - v.x,
-					dy = this.y - v.y;
+			dy = this.y - v.y;
 		return dx * dx + dy * dy;
 	}
-
 	manhattanDistanceTo(v) {
 		return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
 	}
-
 	setLength(length) {
 		return this.normalize().multiplyScalar(length);
 	}
-
 	lerp(v, alpha) {
 		this.x += (v.x - this.x) * alpha;
 		this.y += (v.y - this.y) * alpha;
 		return this;
 	}
-
 	lerpVectors(v1, v2, alpha) {
 		this.x = v1.x + (v2.x - v1.x) * alpha;
 		this.y = v1.y + (v2.y - v1.y) * alpha;
 		return this;
 	}
-
 	equals(v) {
 		return v.x === this.x && v.y === this.y;
 	}
-
 	fromArray(array, offset = 0) {
 		this.x = array[offset];
 		this.y = array[offset + 1];
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		array[offset] = this.x;
 		array[offset + 1] = this.y;
 		return array;
 	}
-
 	fromBufferAttribute(attribute, index) {
 		this.x = attribute.getX(index);
 		this.y = attribute.getY(index);
 		return this;
 	}
-
 	rotateAround(center, angle) {
 		const c = Math.cos(angle),
-					s = Math.sin(angle);
+			s = Math.sin(angle);
 		const x = this.x - center.x;
 		const y = this.y - center.y;
 		this.x = x * c - y * s + center.x;
 		this.y = x * s + y * c + center.y;
 		return this;
 	}
-
 	random() {
 		this.x = Math.random();
 		this.y = Math.random();
 		return this;
 	}
-
 	*[Symbol.iterator]() {
 		yield this.x;
 		yield this.y;
 	}
-
 }
 
 class Matrix3 {
@@ -811,7 +723,6 @@ class Matrix3 {
 		Matrix3.prototype.isMatrix3 = true;
 		this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
 	}
-
 	set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
 		const te = this.elements;
 		te[0] = n11;
@@ -825,12 +736,10 @@ class Matrix3 {
 		te[8] = n33;
 		return this;
 	}
-
 	identity() {
 		this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
 		return this;
 	}
-
 	copy(m) {
 		const te = this.elements;
 		const me = m.elements;
@@ -845,50 +754,45 @@ class Matrix3 {
 		te[8] = me[8];
 		return this;
 	}
-
 	extractBasis(xAxis, yAxis, zAxis) {
 		xAxis.setFromMatrix3Column(this, 0);
 		yAxis.setFromMatrix3Column(this, 1);
 		zAxis.setFromMatrix3Column(this, 2);
 		return this;
 	}
-
 	setFromMatrix4(m) {
 		const me = m.elements;
 		this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
 		return this;
 	}
-
 	multiply(m) {
 		return this.multiplyMatrices(this, m);
 	}
-
 	premultiply(m) {
 		return this.multiplyMatrices(m, this);
 	}
-
 	multiplyMatrices(a, b) {
 		const ae = a.elements;
 		const be = b.elements;
 		const te = this.elements;
 		const a11 = ae[0],
-					a12 = ae[3],
-					a13 = ae[6];
+			a12 = ae[3],
+			a13 = ae[6];
 		const a21 = ae[1],
-					a22 = ae[4],
-					a23 = ae[7];
+			a22 = ae[4],
+			a23 = ae[7];
 		const a31 = ae[2],
-					a32 = ae[5],
-					a33 = ae[8];
+			a32 = ae[5],
+			a33 = ae[8];
 		const b11 = be[0],
-					b12 = be[3],
-					b13 = be[6];
+			b12 = be[3],
+			b13 = be[6];
 		const b21 = be[1],
-					b22 = be[4],
-					b23 = be[7];
+			b22 = be[4],
+			b23 = be[7];
 		const b31 = be[2],
-					b32 = be[5],
-					b33 = be[8];
+			b32 = be[5],
+			b33 = be[8];
 		te[0] = a11 * b11 + a12 * b21 + a13 * b31;
 		te[3] = a11 * b12 + a12 * b22 + a13 * b32;
 		te[6] = a11 * b13 + a12 * b23 + a13 * b33;
@@ -900,7 +804,6 @@ class Matrix3 {
 		te[8] = a31 * b13 + a32 * b23 + a33 * b33;
 		return this;
 	}
-
 	multiplyScalar(s) {
 		const te = this.elements;
 		te[0] *= s;
@@ -914,36 +817,34 @@ class Matrix3 {
 		te[8] *= s;
 		return this;
 	}
-
 	determinant() {
 		const te = this.elements;
 		const a = te[0],
-					b = te[1],
-					c = te[2],
-					d = te[3],
-					e = te[4],
-					f = te[5],
-					g = te[6],
-					h = te[7],
-					i = te[8];
+			b = te[1],
+			c = te[2],
+			d = te[3],
+			e = te[4],
+			f = te[5],
+			g = te[6],
+			h = te[7],
+			i = te[8];
 		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
 	}
-
 	invert() {
 		const te = this.elements,
-					n11 = te[0],
-					n21 = te[1],
-					n31 = te[2],
-					n12 = te[3],
-					n22 = te[4],
-					n32 = te[5],
-					n13 = te[6],
-					n23 = te[7],
-					n33 = te[8],
-					t11 = n33 * n22 - n32 * n23,
-					t12 = n32 * n13 - n33 * n12,
-					t13 = n23 * n12 - n22 * n13,
-					det = n11 * t11 + n21 * t12 + n31 * t13;
+			n11 = te[0],
+			n21 = te[1],
+			n31 = te[2],
+			n12 = te[3],
+			n22 = te[4],
+			n32 = te[5],
+			n13 = te[6],
+			n23 = te[7],
+			n33 = te[8],
+			t11 = n33 * n22 - n32 * n23,
+			t12 = n32 * n13 - n33 * n12,
+			t13 = n23 * n12 - n22 * n13,
+			det = n11 * t11 + n21 * t12 + n31 * t13;
 		if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
 		const detInv = 1 / det;
 		te[0] = t11 * detInv;
@@ -957,7 +858,6 @@ class Matrix3 {
 		te[8] = (n22 * n11 - n21 * n12) * detInv;
 		return this;
 	}
-
 	transpose() {
 		let tmp;
 		const m = this.elements;
@@ -972,11 +872,9 @@ class Matrix3 {
 		m[7] = tmp;
 		return this;
 	}
-
 	getNormalMatrix(matrix4) {
 		return this.setFromMatrix4(matrix4).invert().transpose();
 	}
-
 	transposeIntoArray(r) {
 		const m = this.elements;
 		r[0] = m[0];
@@ -990,69 +888,63 @@ class Matrix3 {
 		r[8] = m[8];
 		return this;
 	}
-
 	setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
 		const c = Math.cos(rotation);
 		const s = Math.sin(rotation);
 		this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
 		return this;
-	} //
+	}
 
+	//
 
 	scale(sx, sy) {
 		this.premultiply(_m3.makeScale(sx, sy));
 		return this;
 	}
-
 	rotate(theta) {
 		this.premultiply(_m3.makeRotation(-theta));
 		return this;
 	}
-
 	translate(tx, ty) {
 		this.premultiply(_m3.makeTranslation(tx, ty));
 		return this;
-	} // for 2D Transforms
+	}
 
+	// for 2D Transforms
 
 	makeTranslation(x, y) {
 		this.set(1, 0, x, 0, 1, y, 0, 0, 1);
 		return this;
 	}
-
 	makeRotation(theta) {
 		// counterclockwise
+
 		const c = Math.cos(theta);
 		const s = Math.sin(theta);
 		this.set(c, -s, 0, s, c, 0, 0, 0, 1);
 		return this;
 	}
-
 	makeScale(x, y) {
 		this.set(x, 0, 0, 0, y, 0, 0, 0, 1);
 		return this;
-	} //
+	}
 
+	//
 
 	equals(matrix) {
 		const te = this.elements;
 		const me = matrix.elements;
-
 		for (let i = 0; i < 9; i++) {
 			if (te[i] !== me[i]) return false;
 		}
-
 		return true;
 	}
-
 	fromArray(array, offset = 0) {
 		for (let i = 0; i < 9; i++) {
 			this.elements[i] = array[i + offset];
 		}
-
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		const te = this.elements;
 		array[offset] = te[0];
@@ -1066,24 +958,21 @@ class Matrix3 {
 		array[offset + 8] = te[8];
 		return array;
 	}
-
 	clone() {
 		return new this.constructor().fromArray(this.elements);
 	}
-
 }
-
 const _m3 = /*@__PURE__*/new Matrix3();
 
 function arrayNeedsUint32(array) {
 	// assumes larger values usually on last
+
 	for (let i = array.length - 1; i >= 0; --i) {
 		if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565
 	}
 
 	return false;
 }
-
 const TYPED_ARRAYS = {
 	Int8Array: Int8Array,
 	Uint8Array: Uint8Array,
@@ -1095,11 +984,9 @@ const TYPED_ARRAYS = {
 	Float32Array: Float32Array,
 	Float64Array: Float64Array
 };
-
 function getTypedArray(type, buffer) {
 	return new TYPED_ARRAYS[type](buffer);
 }
-
 function createElementNS(name) {
 	return document.createElementNS('http://www.w3.org/1999/xhtml', name);
 }
@@ -1109,9 +996,10 @@ function SRGBToLinear(c) {
 }
 function LinearToSRGB(c) {
 	return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
-} // JavaScript RGB-to-RGB transforms, defined as
-// FN[InputColorSpace][OutputColorSpace] callback functions.
+}
 
+// JavaScript RGB-to-RGB transforms, defined as
+// FN[InputColorSpace][OutputColorSpace] callback functions.
 const FN = {
 	[SRGBColorSpace]: {
 		[LinearSRGBColorSpace]: SRGBToLinear
@@ -1122,20 +1010,16 @@ const FN = {
 };
 const ColorManagement = {
 	legacyMode: true,
-
 	get workingColorSpace() {
 		return LinearSRGBColorSpace;
 	},
-
 	set workingColorSpace(colorSpace) {
 		console.warn('THREE.ColorManagement: .workingColorSpace is readonly.');
 	},
-
 	convert: function (color, sourceColorSpace, targetColorSpace) {
 		if (this.legacyMode || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
 			return color;
 		}
-
 		if (FN[sourceColorSpace] && FN[sourceColorSpace][targetColorSpace] !== undefined) {
 			const fn = FN[sourceColorSpace][targetColorSpace];
 			color.r = fn(color.r);
@@ -1143,7 +1027,6 @@ const ColorManagement = {
 			color.b = fn(color.b);
 			return color;
 		}
-
 		throw new Error('Unsupported color space conversion.');
 	},
 	fromWorkingColorSpace: function (color, targetColorSpace) {
@@ -1319,7 +1202,6 @@ const _hslB = {
 	s: 0,
 	l: 0
 };
-
 function hue2rgb(p, q, t) {
 	if (t < 0) t += 1;
 	if (t > 1) t -= 1;
@@ -1328,29 +1210,24 @@ function hue2rgb(p, q, t) {
 	if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
 	return p;
 }
-
 function toComponents(source, target) {
 	target.r = source.r;
 	target.g = source.g;
 	target.b = source.b;
 	return target;
 }
-
 class Color {
 	constructor(r, g, b) {
 		this.isColor = true;
 		this.r = 1;
 		this.g = 1;
 		this.b = 1;
-
 		if (g === undefined && b === undefined) {
 			// r is THREE.Color, hex or string
 			return this.set(r);
 		}
-
 		return this.setRGB(r, g, b);
 	}
-
 	set(value) {
 		if (value && value.isColor) {
 			this.copy(value);
@@ -1359,17 +1236,14 @@ class Color {
 		} else if (typeof value === 'string') {
 			this.setStyle(value);
 		}
-
 		return this;
 	}
-
 	setScalar(scalar) {
 		this.r = scalar;
 		this.g = scalar;
 		this.b = scalar;
 		return this;
 	}
-
 	setHex(hex, colorSpace = SRGBColorSpace) {
 		hex = Math.floor(hex);
 		this.r = (hex >> 16 & 255) / 255;
@@ -1378,7 +1252,6 @@ class Color {
 		ColorManagement.toWorkingColorSpace(this, colorSpace);
 		return this;
 	}
-
 	setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
 		this.r = r;
 		this.g = g;
@@ -1386,13 +1259,11 @@ class Color {
 		ColorManagement.toWorkingColorSpace(this, colorSpace);
 		return this;
 	}
-
 	setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
 		// h,s,l ranges are in 0.0 - 1.0
 		h = euclideanModulo(h, 1);
 		s = clamp(s, 0, 1);
 		l = clamp(l, 0, 1);
-
 		if (s === 0) {
 			this.r = this.g = this.b = l;
 		} else {
@@ -1402,28 +1273,23 @@ class Color {
 			this.g = hue2rgb(q, p, h);
 			this.b = hue2rgb(q, p, h - 1 / 3);
 		}
-
 		ColorManagement.toWorkingColorSpace(this, colorSpace);
 		return this;
 	}
-
 	setStyle(style, colorSpace = SRGBColorSpace) {
 		function handleAlpha(string) {
 			if (string === undefined) return;
-
 			if (parseFloat(string) < 1) {
 				console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
 			}
 		}
-
 		let m;
-
 		if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
 			// rgb / hsl
+
 			let color;
 			const name = m[1];
 			const components = m[2];
-
 			switch (name) {
 				case 'rgb':
 				case 'rgba':
@@ -1436,7 +1302,6 @@ class Color {
 						handleAlpha(color[4]);
 						return this;
 					}
-
 					if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
 						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
 						this.r = Math.min(100, parseInt(color[1], 10)) / 100;
@@ -1446,9 +1311,7 @@ class Color {
 						handleAlpha(color[4]);
 						return this;
 					}
-
 					break;
-
 				case 'hsl':
 				case 'hsla':
 					if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
@@ -1459,14 +1322,13 @@ class Color {
 						handleAlpha(color[4]);
 						return this.setHSL(h, s, l, colorSpace);
 					}
-
 					break;
 			}
 		} else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
 			// hex color
+
 			const hex = m[1];
 			const size = hex.length;
-
 			if (size === 3) {
 				// #ff0
 				this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
@@ -1483,18 +1345,14 @@ class Color {
 				return this;
 			}
 		}
-
 		if (style && style.length > 0) {
 			return this.setColorName(style, colorSpace);
 		}
-
 		return this;
 	}
-
 	setColorName(style, colorSpace = SRGBColorSpace) {
 		// color keywords
 		const hex = _colorKeywords[style.toLowerCase()];
-
 		if (hex !== undefined) {
 			// red
 			this.setHex(hex, colorSpace);
@@ -1502,95 +1360,79 @@ class Color {
 			// unknown color
 			console.warn('THREE.Color: Unknown color ' + style);
 		}
-
 		return this;
 	}
-
 	clone() {
 		return new this.constructor(this.r, this.g, this.b);
 	}
-
 	copy(color) {
 		this.r = color.r;
 		this.g = color.g;
 		this.b = color.b;
 		return this;
 	}
-
 	copySRGBToLinear(color) {
 		this.r = SRGBToLinear(color.r);
 		this.g = SRGBToLinear(color.g);
 		this.b = SRGBToLinear(color.b);
 		return this;
 	}
-
 	copyLinearToSRGB(color) {
 		this.r = LinearToSRGB(color.r);
 		this.g = LinearToSRGB(color.g);
 		this.b = LinearToSRGB(color.b);
 		return this;
 	}
-
 	convertSRGBToLinear() {
 		this.copySRGBToLinear(this);
 		return this;
 	}
-
 	convertLinearToSRGB() {
 		this.copyLinearToSRGB(this);
 		return this;
 	}
-
 	getHex(colorSpace = SRGBColorSpace) {
 		ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb$1), colorSpace);
 		return clamp(_rgb$1.r * 255, 0, 255) << 16 ^ clamp(_rgb$1.g * 255, 0, 255) << 8 ^ clamp(_rgb$1.b * 255, 0, 255) << 0;
 	}
-
 	getHexString(colorSpace = SRGBColorSpace) {
 		return ('000000' + this.getHex(colorSpace).toString(16)).slice(-6);
 	}
-
 	getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
 		// h,s,l ranges are in 0.0 - 1.0
+
 		ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb$1), colorSpace);
 		const r = _rgb$1.r,
-					g = _rgb$1.g,
-					b = _rgb$1.b;
+			g = _rgb$1.g,
+			b = _rgb$1.b;
 		const max = Math.max(r, g, b);
 		const min = Math.min(r, g, b);
 		let hue, saturation;
 		const lightness = (min + max) / 2.0;
-
 		if (min === max) {
 			hue = 0;
 			saturation = 0;
 		} else {
 			const delta = max - min;
 			saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
-
 			switch (max) {
 				case r:
 					hue = (g - b) / delta + (g < b ? 6 : 0);
 					break;
-
 				case g:
 					hue = (b - r) / delta + 2;
 					break;
-
 				case b:
 					hue = (r - g) / delta + 4;
 					break;
 			}
-
 			hue /= 6;
 		}
-
 		target.h = hue;
 		target.s = saturation;
 		target.l = lightness;
 		return target;
 	}
-
 	getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
 		ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb$1), colorSpace);
 		target.r = _rgb$1.r;
@@ -1598,18 +1440,14 @@ class Color {
 		target.b = _rgb$1.b;
 		return target;
 	}
-
 	getStyle(colorSpace = SRGBColorSpace) {
 		ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb$1), colorSpace);
-
 		if (colorSpace !== SRGBColorSpace) {
 			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
 			return `color(${colorSpace} ${_rgb$1.r} ${_rgb$1.g} ${_rgb$1.b})`;
 		}
-
 		return `rgb(${_rgb$1.r * 255 | 0},${_rgb$1.g * 255 | 0},${_rgb$1.b * 255 | 0})`;
 	}
-
 	offsetHSL(h, s, l) {
 		this.getHSL(_hslA);
 		_hslA.h += h;
@@ -1618,63 +1456,54 @@ class Color {
 		this.setHSL(_hslA.h, _hslA.s, _hslA.l);
 		return this;
 	}
-
 	add(color) {
 		this.r += color.r;
 		this.g += color.g;
 		this.b += color.b;
 		return this;
 	}
-
 	addColors(color1, color2) {
 		this.r = color1.r + color2.r;
 		this.g = color1.g + color2.g;
 		this.b = color1.b + color2.b;
 		return this;
 	}
-
 	addScalar(s) {
 		this.r += s;
 		this.g += s;
 		this.b += s;
 		return this;
 	}
-
 	sub(color) {
 		this.r = Math.max(0, this.r - color.r);
 		this.g = Math.max(0, this.g - color.g);
 		this.b = Math.max(0, this.b - color.b);
 		return this;
 	}
-
 	multiply(color) {
 		this.r *= color.r;
 		this.g *= color.g;
 		this.b *= color.b;
 		return this;
 	}
-
 	multiplyScalar(s) {
 		this.r *= s;
 		this.g *= s;
 		this.b *= s;
 		return this;
 	}
-
 	lerp(color, alpha) {
 		this.r += (color.r - this.r) * alpha;
 		this.g += (color.g - this.g) * alpha;
 		this.b += (color.b - this.b) * alpha;
 		return this;
 	}
-
 	lerpColors(color1, color2, alpha) {
 		this.r = color1.r + (color2.r - color1.r) * alpha;
 		this.g = color1.g + (color2.g - color1.g) * alpha;
 		this.b = color1.b + (color2.b - color1.b) * alpha;
 		return this;
 	}
-
 	lerpHSL(color, alpha) {
 		this.getHSL(_hslA);
 		color.getHSL(_hslB);
@@ -1684,78 +1513,62 @@ class Color {
 		this.setHSL(h, s, l);
 		return this;
 	}
-
 	equals(c) {
 		return c.r === this.r && c.g === this.g && c.b === this.b;
 	}
-
 	fromArray(array, offset = 0) {
 		this.r = array[offset];
 		this.g = array[offset + 1];
 		this.b = array[offset + 2];
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		array[offset] = this.r;
 		array[offset + 1] = this.g;
 		array[offset + 2] = this.b;
 		return array;
 	}
-
 	fromBufferAttribute(attribute, index) {
 		this.r = attribute.getX(index);
 		this.g = attribute.getY(index);
 		this.b = attribute.getZ(index);
 		return this;
 	}
-
 	toJSON() {
 		return this.getHex();
 	}
-
 	*[Symbol.iterator]() {
 		yield this.r;
 		yield this.g;
 		yield this.b;
 	}
-
 }
-
 Color.NAMES = _colorKeywords;
 
 let _canvas;
-
 class ImageUtils {
 	static getDataURL(image) {
 		if (/^data:/i.test(image.src)) {
 			return image.src;
 		}
-
 		if (typeof HTMLCanvasElement == 'undefined') {
 			return image.src;
 		}
-
 		let canvas;
-
 		if (image instanceof HTMLCanvasElement) {
 			canvas = image;
 		} else {
 			if (_canvas === undefined) _canvas = createElementNS('canvas');
 			_canvas.width = image.width;
 			_canvas.height = image.height;
-
 			const context = _canvas.getContext('2d');
-
 			if (image instanceof ImageData) {
 				context.putImageData(image, 0, 0);
 			} else {
 				context.drawImage(image, 0, 0, image.width, image.height);
 			}
-
 			canvas = _canvas;
 		}
-
 		if (canvas.width > 2048 || canvas.height > 2048) {
 			console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);
 			return canvas.toDataURL('image/jpeg', 0.6);
@@ -1763,7 +1576,6 @@ class ImageUtils {
 			return canvas.toDataURL('image/png');
 		}
 	}
-
 	static sRGBToLinear(image) {
 		if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
 			const canvas = createElementNS('canvas');
@@ -1773,25 +1585,22 @@ class ImageUtils {
 			context.drawImage(image, 0, 0, image.width, image.height);
 			const imageData = context.getImageData(0, 0, image.width, image.height);
 			const data = imageData.data;
-
 			for (let i = 0; i < data.length; i++) {
 				data[i] = SRGBToLinear(data[i] / 255) * 255;
 			}
-
 			context.putImageData(imageData, 0, 0);
 			return canvas;
 		} else if (image.data) {
 			const data = image.data.slice(0);
-
 			for (let i = 0; i < data.length; i++) {
 				if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
 					data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
 				} else {
 					// assuming float
+
 					data[i] = SRGBToLinear(data[i]);
 				}
 			}
-
 			return {
 				data: data,
 				width: image.width,
@@ -1802,7 +1611,6 @@ class ImageUtils {
 			return image;
 		}
 	}
-
 }
 
 class Source {
@@ -1812,31 +1620,25 @@ class Source {
 		this.data = data;
 		this.version = 0;
 	}
-
 	set needsUpdate(value) {
 		if (value === true) this.version++;
 	}
-
 	toJSON(meta) {
 		const isRootObject = meta === undefined || typeof meta === 'string';
-
 		if (!isRootObject && meta.images[this.uuid] !== undefined) {
 			return meta.images[this.uuid];
 		}
-
 		const output = {
 			uuid: this.uuid,
 			url: ''
 		};
 		const data = this.data;
-
 		if (data !== null) {
 			let url;
-
 			if (Array.isArray(data)) {
 				// cube texture
-				url = [];
 
+				url = [];
 				for (let i = 0, l = data.length; i < l; i++) {
 					if (data[i].isDataTexture) {
 						url.push(serializeImage(data[i].image));
@@ -1846,28 +1648,26 @@ class Source {
 				}
 			} else {
 				// texture
+
 				url = serializeImage(data);
 			}
-
 			output.url = url;
 		}
-
 		if (!isRootObject) {
 			meta.images[this.uuid] = output;
 		}
-
 		return output;
 	}
-
 }
-
 function serializeImage(image) {
 	if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
 		// default images
+
 		return ImageUtils.getDataURL(image);
 	} else {
 		if (image.data) {
 			// images of DataTexture
+
 			return {
 				data: Array.from(image.data),
 				width: image.width,
@@ -1882,7 +1682,6 @@ function serializeImage(image) {
 }
 
 let textureId = 0;
-
 class Texture extends EventDispatcher {
 	constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, encoding = LinearEncoding) {
 		super();
@@ -1913,36 +1712,31 @@ class Texture extends EventDispatcher {
 		this.premultiplyAlpha = false;
 		this.flipY = true;
 		this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
+
 		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
 		//
 		// Also changing the encoding after already used by a Material will not automatically make the Material
 		// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
-
 		this.encoding = encoding;
 		this.userData = {};
 		this.version = 0;
 		this.onUpdate = null;
 		this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
-
 		this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
 	}
 
 	get image() {
 		return this.source.data;
 	}
-
 	set image(value) {
 		this.source.data = value;
 	}
-
 	updateMatrix() {
 		this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	copy(source) {
 		this.name = source.name;
 		this.source = source.source;
@@ -1971,14 +1765,11 @@ class Texture extends EventDispatcher {
 		this.needsUpdate = true;
 		return this;
 	}
-
 	toJSON(meta) {
 		const isRootObject = meta === undefined || typeof meta === 'string';
-
 		if (!isRootObject && meta.textures[this.uuid] !== undefined) {
 			return meta.textures[this.uuid];
 		}
-
 		const output = {
 			metadata: {
 				version: 4.5,
@@ -2005,82 +1796,65 @@ class Texture extends EventDispatcher {
 			unpackAlignment: this.unpackAlignment
 		};
 		if (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;
-
 		if (!isRootObject) {
 			meta.textures[this.uuid] = output;
 		}
-
 		return output;
 	}
-
 	dispose() {
 		this.dispatchEvent({
 			type: 'dispose'
 		});
 	}
-
 	transformUv(uv) {
 		if (this.mapping !== UVMapping) return uv;
 		uv.applyMatrix3(this.matrix);
-
 		if (uv.x < 0 || uv.x > 1) {
 			switch (this.wrapS) {
 				case RepeatWrapping:
 					uv.x = uv.x - Math.floor(uv.x);
 					break;
-
 				case ClampToEdgeWrapping:
 					uv.x = uv.x < 0 ? 0 : 1;
 					break;
-
 				case MirroredRepeatWrapping:
 					if (Math.abs(Math.floor(uv.x) % 2) === 1) {
 						uv.x = Math.ceil(uv.x) - uv.x;
 					} else {
 						uv.x = uv.x - Math.floor(uv.x);
 					}
-
 					break;
 			}
 		}
-
 		if (uv.y < 0 || uv.y > 1) {
 			switch (this.wrapT) {
 				case RepeatWrapping:
 					uv.y = uv.y - Math.floor(uv.y);
 					break;
-
 				case ClampToEdgeWrapping:
 					uv.y = uv.y < 0 ? 0 : 1;
 					break;
-
 				case MirroredRepeatWrapping:
 					if (Math.abs(Math.floor(uv.y) % 2) === 1) {
 						uv.y = Math.ceil(uv.y) - uv.y;
 					} else {
 						uv.y = uv.y - Math.floor(uv.y);
 					}
-
 					break;
 			}
 		}
-
 		if (this.flipY) {
 			uv.y = 1 - uv.y;
 		}
-
 		return uv;
 	}
-
 	set needsUpdate(value) {
 		if (value === true) {
 			this.version++;
 			this.source.needsUpdate = true;
 		}
 	}
-
 }
-
 Texture.DEFAULT_IMAGE = null;
 Texture.DEFAULT_MAPPING = UVMapping;
 Texture.DEFAULT_ANISOTROPY = 1;
@@ -2093,23 +1867,18 @@ class Vector4 {
 		this.z = z;
 		this.w = w;
 	}
-
 	get width() {
 		return this.z;
 	}
-
 	set width(value) {
 		this.z = value;
 	}
-
 	get height() {
 		return this.w;
 	}
-
 	set height(value) {
 		this.w = value;
 	}
-
 	set(x, y, z, w) {
 		this.x = x;
 		this.y = y;
@@ -2117,7 +1886,6 @@ class Vector4 {
 		this.w = w;
 		return this;
 	}
-
 	setScalar(scalar) {
 		this.x = scalar;
 		this.y = scalar;
@@ -2125,75 +1893,58 @@ class Vector4 {
 		this.w = scalar;
 		return this;
 	}
-
 	setX(x) {
 		this.x = x;
 		return this;
 	}
-
 	setY(y) {
 		this.y = y;
 		return this;
 	}
-
 	setZ(z) {
 		this.z = z;
 		return this;
 	}
-
 	setW(w) {
 		this.w = w;
 		return this;
 	}
-
 	setComponent(index, value) {
 		switch (index) {
 			case 0:
 				this.x = value;
 				break;
-
 			case 1:
 				this.y = value;
 				break;
-
 			case 2:
 				this.z = value;
 				break;
-
 			case 3:
 				this.w = value;
 				break;
-
 			default:
 				throw new Error('index is out of range: ' + index);
 		}
-
 		return this;
 	}
-
 	getComponent(index) {
 		switch (index) {
 			case 0:
 				return this.x;
-
 			case 1:
 				return this.y;
-
 			case 2:
 				return this.z;
-
 			case 3:
 				return this.w;
-
 			default:
 				throw new Error('index is out of range: ' + index);
 		}
 	}
-
 	clone() {
 		return new this.constructor(this.x, this.y, this.z, this.w);
 	}
-
 	copy(v) {
 		this.x = v.x;
 		this.y = v.y;
@@ -2201,7 +1952,6 @@ class Vector4 {
 		this.w = v.w !== undefined ? v.w : 1;
 		return this;
 	}
-
 	add(v) {
 		this.x += v.x;
 		this.y += v.y;
@@ -2209,7 +1959,6 @@ class Vector4 {
 		this.w += v.w;
 		return this;
 	}
-
 	addScalar(s) {
 		this.x += s;
 		this.y += s;
@@ -2217,7 +1966,6 @@ class Vector4 {
 		this.w += s;
 		return this;
 	}
-
 	addVectors(a, b) {
 		this.x = a.x + b.x;
 		this.y = a.y + b.y;
@@ -2225,7 +1973,6 @@ class Vector4 {
 		this.w = a.w + b.w;
 		return this;
 	}
-
 	addScaledVector(v, s) {
 		this.x += v.x * s;
 		this.y += v.y * s;
@@ -2233,7 +1980,6 @@ class Vector4 {
 		this.w += v.w * s;
 		return this;
 	}
-
 	sub(v) {
 		this.x -= v.x;
 		this.y -= v.y;
@@ -2241,7 +1987,6 @@ class Vector4 {
 		this.w -= v.w;
 		return this;
 	}
-
 	subScalar(s) {
 		this.x -= s;
 		this.y -= s;
@@ -2249,7 +1994,6 @@ class Vector4 {
 		this.w -= s;
 		return this;
 	}
-
 	subVectors(a, b) {
 		this.x = a.x - b.x;
 		this.y = a.y - b.y;
@@ -2257,7 +2001,6 @@ class Vector4 {
 		this.w = a.w - b.w;
 		return this;
 	}
-
 	multiply(v) {
 		this.x *= v.x;
 		this.y *= v.y;
@@ -2265,7 +2008,6 @@ class Vector4 {
 		this.w *= v.w;
 		return this;
 	}
-
 	multiplyScalar(scalar) {
 		this.x *= scalar;
 		this.y *= scalar;
@@ -2273,12 +2015,11 @@ class Vector4 {
 		this.w *= scalar;
 		return this;
 	}
-
 	applyMatrix4(m) {
 		const x = this.x,
-					y = this.y,
-					z = this.z,
-					w = this.w;
+			y = this.y,
+			z = this.z,
+			w = this.w;
 		const e = m.elements;
 		this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
 		this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
@@ -2286,17 +2027,16 @@ class Vector4 {
 		this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
 		return this;
 	}
-
 	divideScalar(scalar) {
 		return this.multiplyScalar(1 / scalar);
 	}
-
 	setAxisAngleFromQuaternion(q) {
 		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
+
 		// q is assumed to be normalized
+
 		this.w = 2 * Math.acos(q.w);
 		const s = Math.sqrt(1 - q.w * q.w);
-
 		if (s < 0.0001) {
 			this.x = 1;
 			this.y = 0;
@@ -2306,40 +2046,42 @@ class Vector4 {
 			this.y = q.y / s;
 			this.z = q.z / s;
 		}
-
 		return this;
 	}
-
 	setAxisAngleFromRotationMatrix(m) {
 		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
+
 		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
-		let angle, x, y, z; // variables for result
 
+		let angle, x, y, z; // variables for result
 		const epsilon = 0.01,
-					// margin to allow for rounding errors
-		epsilon2 = 0.1,
-					// margin to distinguish between 0 and 180 degrees
-		te = m.elements,
-					m11 = te[0],
-					m12 = te[4],
-					m13 = te[8],
-					m21 = te[1],
-					m22 = te[5],
-					m23 = te[9],
-					m31 = te[2],
-					m32 = te[6],
-					m33 = te[10];
-
+			// margin to allow for rounding errors
+			epsilon2 = 0.1,
+			// margin to distinguish between 0 and 180 degrees
+
+			te = m.elements,
+			m11 = te[0],
+			m12 = te[4],
+			m13 = te[8],
+			m21 = te[1],
+			m22 = te[5],
+			m23 = te[9],
+			m31 = te[2],
+			m32 = te[6],
+			m33 = te[10];
 		if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
 			// singularity found
 			// first check for identity matrix which must have +1 for all terms
 			// in leading diagonal and zero in other terms
+
 			if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
 				// this singularity is identity matrix so angle = 0
+
 				this.set(1, 0, 0, 0);
 				return this; // zero angle, arbitrary axis
-			} // otherwise this singularity is angle = 180
+			}
 
+			// otherwise this singularity is angle = 180
 
 			angle = Math.PI;
 			const xx = (m11 + 1) / 2;
@@ -2348,9 +2090,9 @@ class Vector4 {
 			const xy = (m12 + m21) / 4;
 			const xz = (m13 + m31) / 4;
 			const yz = (m23 + m32) / 4;
-
 			if (xx > yy && xx > zz) {
 				// m11 is the largest diagonal term
+
 				if (xx < epsilon) {
 					x = 0;
 					y = 0.707106781;
@@ -2362,6 +2104,7 @@ class Vector4 {
 				}
 			} else if (yy > zz) {
 				// m22 is the largest diagonal term
+
 				if (yy < epsilon) {
 					x = 0.707106781;
 					y = 0;
@@ -2373,6 +2116,7 @@ class Vector4 {
 				}
 			} else {
 				// m33 is the largest diagonal term so base result on this
+
 				if (zz < epsilon) {
 					x = 0.707106781;
 					y = 0.707106781;
@@ -2383,15 +2127,17 @@ class Vector4 {
 					y = yz / z;
 				}
 			}
-
 			this.set(x, y, z, angle);
 			return this; // return 180 deg rotation
-		} // as we have reached here there are no singularities so we can handle normally
+		}
 
+		// as we have reached here there are no singularities so we can handle normally
 
 		let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize
 
-		if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be
+		if (Math.abs(s) < 0.001) s = 1;
+
+		// prevent divide by zero, should not happen if matrix is orthogonal and should be
 		// caught by singularity test above, but I've left it in just in case
 
 		this.x = (m32 - m23) / s;
@@ -2400,7 +2146,6 @@ class Vector4 {
 		this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
 		return this;
 	}
-
 	min(v) {
 		this.x = Math.min(this.x, v.x);
 		this.y = Math.min(this.y, v.y);
@@ -2408,7 +2153,6 @@ class Vector4 {
 		this.w = Math.min(this.w, v.w);
 		return this;
 	}
-
 	max(v) {
 		this.x = Math.max(this.x, v.x);
 		this.y = Math.max(this.y, v.y);
@@ -2416,16 +2160,15 @@ class Vector4 {
 		this.w = Math.max(this.w, v.w);
 		return this;
 	}
-
 	clamp(min, max) {
 		// assumes min < max, componentwise
+
 		this.x = Math.max(min.x, Math.min(max.x, this.x));
 		this.y = Math.max(min.y, Math.min(max.y, this.y));
 		this.z = Math.max(min.z, Math.min(max.z, this.z));
 		this.w = Math.max(min.w, Math.min(max.w, this.w));
 		return this;
 	}
-
 	clampScalar(minVal, maxVal) {
 		this.x = Math.max(minVal, Math.min(maxVal, this.x));
 		this.y = Math.max(minVal, Math.min(maxVal, this.y));
@@ -2433,12 +2176,10 @@ class Vector4 {
 		this.w = Math.max(minVal, Math.min(maxVal, this.w));
 		return this;
 	}
-
 	clampLength(min, max) {
 		const length = this.length();
 		return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
 	}
-
 	floor() {
 		this.x = Math.floor(this.x);
 		this.y = Math.floor(this.y);
@@ -2446,7 +2187,6 @@ class Vector4 {
 		this.w = Math.floor(this.w);
 		return this;
 	}
-
 	ceil() {
 		this.x = Math.ceil(this.x);
 		this.y = Math.ceil(this.y);
@@ -2454,7 +2194,6 @@ class Vector4 {
 		this.w = Math.ceil(this.w);
 		return this;
 	}
-
 	round() {
 		this.x = Math.round(this.x);
 		this.y = Math.round(this.y);
@@ -2462,7 +2201,6 @@ class Vector4 {
 		this.w = Math.round(this.w);
 		return this;
 	}
-
 	roundToZero() {
 		this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
 		this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
@@ -2470,7 +2208,6 @@ class Vector4 {
 		this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
 		return this;
 	}
-
 	negate() {
 		this.x = -this.x;
 		this.y = -this.y;
@@ -2478,31 +2215,24 @@ class Vector4 {
 		this.w = -this.w;
 		return this;
 	}
-
 	dot(v) {
 		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
 	}
-
 	lengthSq() {
 		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
 	}
-
 	length() {
 		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
 	}
-
 	manhattanLength() {
 		return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
 	}
-
 	normalize() {
 		return this.divideScalar(this.length() || 1);
 	}
-
 	setLength(length) {
 		return this.normalize().multiplyScalar(length);
 	}
-
 	lerp(v, alpha) {
 		this.x += (v.x - this.x) * alpha;
 		this.y += (v.y - this.y) * alpha;
@@ -2510,7 +2240,6 @@ class Vector4 {
 		this.w += (v.w - this.w) * alpha;
 		return this;
 	}
-
 	lerpVectors(v1, v2, alpha) {
 		this.x = v1.x + (v2.x - v1.x) * alpha;
 		this.y = v1.y + (v2.y - v1.y) * alpha;
@@ -2518,11 +2247,9 @@ class Vector4 {
 		this.w = v1.w + (v2.w - v1.w) * alpha;
 		return this;
 	}
-
 	equals(v) {
 		return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
 	}
-
 	fromArray(array, offset = 0) {
 		this.x = array[offset];
 		this.y = array[offset + 1];
@@ -2530,7 +2257,6 @@ class Vector4 {
 		this.w = array[offset + 3];
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		array[offset] = this.x;
 		array[offset + 1] = this.y;
@@ -2538,7 +2264,6 @@ class Vector4 {
 		array[offset + 3] = this.w;
 		return array;
 	}
-
 	fromBufferAttribute(attribute, index) {
 		this.x = attribute.getX(index);
 		this.y = attribute.getY(index);
@@ -2546,7 +2271,6 @@ class Vector4 {
 		this.w = attribute.getW(index);
 		return this;
 	}
-
 	random() {
 		this.x = Math.random();
 		this.y = Math.random();
@@ -2554,14 +2278,12 @@ class Vector4 {
 		this.w = Math.random();
 		return this;
 	}
-
 	*[Symbol.iterator]() {
 		yield this.x;
 		yield this.y;
 		yield this.z;
 		yield this.w;
 	}
-
 }
 
 /*
@@ -2569,7 +2291,6 @@ class Vector4 {
  * Texture parameters for an auto-generated target texture
  * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
 */
-
 class WebGLRenderTarget extends EventDispatcher {
 	constructor(width = 1, height = 1, options = {}) {
 		super();
@@ -2596,7 +2317,6 @@ class WebGLRenderTarget extends EventDispatcher {
 		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
 		this.samples = options.samples !== undefined ? options.samples : 0;
 	}
-
 	setSize(width, height, depth = 1) {
 		if (this.width !== width || this.height !== height || this.depth !== depth) {
 			this.width = width;
@@ -2607,22 +2327,21 @@ class WebGLRenderTarget extends EventDispatcher {
 			this.texture.image.depth = depth;
 			this.dispose();
 		}
-
 		this.viewport.set(0, 0, width, height);
 		this.scissor.set(0, 0, width, height);
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	copy(source) {
 		this.width = source.width;
 		this.height = source.height;
 		this.depth = source.depth;
 		this.viewport.copy(source.viewport);
 		this.texture = source.texture.clone();
-		this.texture.isRenderTargetTexture = true; // ensure image object is not shared, see #20328
+		this.texture.isRenderTargetTexture = true;
+
+		// ensure image object is not shared, see #20328
 
 		const image = Object.assign({}, source.texture.image);
 		this.texture.source = new Source(image);
@@ -2632,13 +2351,11 @@ class WebGLRenderTarget extends EventDispatcher {
 		this.samples = source.samples;
 		return this;
 	}
-
 	dispose() {
 		this.dispatchEvent({
 			type: 'dispose'
 		});
 	}
-
 }
 
 class DataArrayTexture extends Texture {
@@ -2658,7 +2375,6 @@ class DataArrayTexture extends Texture {
 		this.flipY = false;
 		this.unpackAlignment = 1;
 	}
-
 }
 
 class WebGLArrayRenderTarget extends WebGLRenderTarget {
@@ -2669,7 +2385,6 @@ class WebGLArrayRenderTarget extends WebGLRenderTarget {
 		this.texture = new DataArrayTexture(null, width, height, depth);
 		this.texture.isRenderTargetTexture = true;
 	}
-
 }
 
 class Data3DTexture extends Texture {
@@ -2681,6 +2396,7 @@ class Data3DTexture extends Texture {
 		// 	texture.anisotropy = 16;
 		//
 		// See #14839
+
 		super(null);
 		this.isData3DTexture = true;
 		this.image = {
@@ -2696,7 +2412,6 @@ class Data3DTexture extends Texture {
 		this.flipY = false;
 		this.unpackAlignment = 1;
 	}
-
 }
 
 class WebGL3DRenderTarget extends WebGLRenderTarget {
@@ -2707,7 +2422,6 @@ class WebGL3DRenderTarget extends WebGLRenderTarget {
 		this.texture = new Data3DTexture(null, width, height, depth);
 		this.texture.isRenderTargetTexture = true;
 	}
-
 }
 
 class WebGLMultipleRenderTargets extends WebGLRenderTarget {
@@ -2716,33 +2430,27 @@ class WebGLMultipleRenderTargets extends WebGLRenderTarget {
 		this.isWebGLMultipleRenderTargets = true;
 		const texture = this.texture;
 		this.texture = [];
-
 		for (let i = 0; i < count; i++) {
 			this.texture[i] = texture.clone();
 			this.texture[i].isRenderTargetTexture = true;
 		}
 	}
-
 	setSize(width, height, depth = 1) {
 		if (this.width !== width || this.height !== height || this.depth !== depth) {
 			this.width = width;
 			this.height = height;
 			this.depth = depth;
-
 			for (let i = 0, il = this.texture.length; i < il; i++) {
 				this.texture[i].image.width = width;
 				this.texture[i].image.height = height;
 				this.texture[i].image.depth = depth;
 			}
-
 			this.dispose();
 		}
-
 		this.viewport.set(0, 0, width, height);
 		this.scissor.set(0, 0, width, height);
 		return this;
 	}
-
 	copy(source) {
 		this.dispose();
 		this.width = source.width;
@@ -2754,15 +2462,12 @@ class WebGLMultipleRenderTargets extends WebGLRenderTarget {
 		this.stencilBuffer = source.stencilBuffer;
 		if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
 		this.texture.length = 0;
-
 		for (let i = 0, il = source.texture.length; i < il; i++) {
 			this.texture[i] = source.texture[i].clone();
 			this.texture[i].isRenderTargetTexture = true;
 		}
-
 		return this;
 	}
-
 }
 
 class Quaternion {
@@ -2773,18 +2478,17 @@ class Quaternion {
 		this._z = z;
 		this._w = w;
 	}
-
 	static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
 		// fuzz-free, array-based Quaternion SLERP operation
+
 		let x0 = src0[srcOffset0 + 0],
-				y0 = src0[srcOffset0 + 1],
-				z0 = src0[srcOffset0 + 2],
-				w0 = src0[srcOffset0 + 3];
+			y0 = src0[srcOffset0 + 1],
+			z0 = src0[srcOffset0 + 2],
+			w0 = src0[srcOffset0 + 3];
 		const x1 = src1[srcOffset1 + 0],
-					y1 = src1[srcOffset1 + 1],
-					z1 = src1[srcOffset1 + 2],
-					w1 = src1[srcOffset1 + 3];
-
+			y1 = src1[srcOffset1 + 1],
+			z1 = src1[srcOffset1 + 2],
+			w1 = src1[srcOffset1 + 3];
 		if (t === 0) {
 			dst[dstOffset + 0] = x0;
 			dst[dstOffset + 1] = y0;
@@ -2792,7 +2496,6 @@ class Quaternion {
 			dst[dstOffset + 3] = w0;
 			return;
 		}
-
 		if (t === 1) {
 			dst[dstOffset + 0] = x1;
 			dst[dstOffset + 1] = y1;
@@ -2800,26 +2503,26 @@ class Quaternion {
 			dst[dstOffset + 3] = w1;
 			return;
 		}
-
 		if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
 			let s = 1 - t;
 			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
-						dir = cos >= 0 ? 1 : -1,
-						sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:
+				dir = cos >= 0 ? 1 : -1,
+				sqrSin = 1 - cos * cos;
 
+			// Skip the Slerp for tiny steps to avoid numeric problems:
 			if (sqrSin > Number.EPSILON) {
 				const sin = Math.sqrt(sqrSin),
-							len = Math.atan2(sin, cos * dir);
+					len = Math.atan2(sin, cos * dir);
 				s = Math.sin(s * len) / sin;
 				t = Math.sin(t * len) / sin;
 			}
-
 			const tDir = t * dir;
 			x0 = x0 * s + x1 * tDir;
 			y0 = y0 * s + y1 * tDir;
 			z0 = z0 * s + z1 * tDir;
-			w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:
+			w0 = w0 * s + w1 * tDir;
 
+			// Normalize in case we just did a lerp:
 			if (s === 1 - t) {
 				const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
 				x0 *= f;
@@ -2828,13 +2531,11 @@ class Quaternion {
 				w0 *= f;
 			}
 		}
-
 		dst[dstOffset] = x0;
 		dst[dstOffset + 1] = y0;
 		dst[dstOffset + 2] = z0;
 		dst[dstOffset + 3] = w0;
 	}
-
 	static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
 		const x0 = src0[srcOffset0];
 		const y0 = src0[srcOffset0 + 1];
@@ -2850,78 +2551,60 @@ class Quaternion {
 		dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
 		return dst;
 	}
-
 	get x() {
 		return this._x;
 	}
-
 	set x(value) {
 		this._x = value;
-
 		this._onChangeCallback();
 	}
-
 	get y() {
 		return this._y;
 	}
-
 	set y(value) {
 		this._y = value;
-
 		this._onChangeCallback();
 	}
-
 	get z() {
 		return this._z;
 	}
-
 	set z(value) {
 		this._z = value;
-
 		this._onChangeCallback();
 	}
-
 	get w() {
 		return this._w;
 	}
-
 	set w(value) {
 		this._w = value;
-
 		this._onChangeCallback();
 	}
-
 	set(x, y, z, w) {
 		this._x = x;
 		this._y = y;
 		this._z = z;
 		this._w = w;
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	clone() {
 		return new this.constructor(this._x, this._y, this._z, this._w);
 	}
-
 	copy(quaternion) {
 		this._x = quaternion.x;
 		this._y = quaternion.y;
 		this._z = quaternion.z;
 		this._w = quaternion.w;
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	setFromEuler(euler, update) {
 		const x = euler._x,
-					y = euler._y,
-					z = euler._z,
-					order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/
+			y = euler._y,
+			z = euler._z,
+			order = euler._order;
+
+		// http://www.mathworks.com/matlabcentral/fileexchange/
 		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
 		//	content/SpinCalc.m
 
@@ -2933,7 +2616,6 @@ class Quaternion {
 		const s1 = sin(x / 2);
 		const s2 = sin(y / 2);
 		const s3 = sin(z / 2);
-
 		switch (order) {
 			case 'XYZ':
 				this._x = s1 * c2 * c3 + c1 * s2 * s3;
@@ -2941,80 +2623,72 @@ class Quaternion {
 				this._z = c1 * c2 * s3 + s1 * s2 * c3;
 				this._w = c1 * c2 * c3 - s1 * s2 * s3;
 				break;
-
 			case 'YXZ':
 				this._x = s1 * c2 * c3 + c1 * s2 * s3;
 				this._y = c1 * s2 * c3 - s1 * c2 * s3;
 				this._z = c1 * c2 * s3 - s1 * s2 * c3;
 				this._w = c1 * c2 * c3 + s1 * s2 * s3;
 				break;
-
 			case 'ZXY':
 				this._x = s1 * c2 * c3 - c1 * s2 * s3;
 				this._y = c1 * s2 * c3 + s1 * c2 * s3;
 				this._z = c1 * c2 * s3 + s1 * s2 * c3;
 				this._w = c1 * c2 * c3 - s1 * s2 * s3;
 				break;
-
 			case 'ZYX':
 				this._x = s1 * c2 * c3 - c1 * s2 * s3;
 				this._y = c1 * s2 * c3 + s1 * c2 * s3;
 				this._z = c1 * c2 * s3 - s1 * s2 * c3;
 				this._w = c1 * c2 * c3 + s1 * s2 * s3;
 				break;
-
 			case 'YZX':
 				this._x = s1 * c2 * c3 + c1 * s2 * s3;
 				this._y = c1 * s2 * c3 + s1 * c2 * s3;
 				this._z = c1 * c2 * s3 - s1 * s2 * c3;
 				this._w = c1 * c2 * c3 - s1 * s2 * s3;
 				break;
-
 			case 'XZY':
 				this._x = s1 * c2 * c3 - c1 * s2 * s3;
 				this._y = c1 * s2 * c3 - s1 * c2 * s3;
 				this._z = c1 * c2 * s3 + s1 * s2 * c3;
 				this._w = c1 * c2 * c3 + s1 * s2 * s3;
 				break;
-
 			default:
 				console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);
 		}
-
 		if (update !== false) this._onChangeCallback();
 		return this;
 	}
-
 	setFromAxisAngle(axis, angle) {
 		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
+
 		// assumes axis is normalized
+
 		const halfAngle = angle / 2,
-					s = Math.sin(halfAngle);
+			s = Math.sin(halfAngle);
 		this._x = axis.x * s;
 		this._y = axis.y * s;
 		this._z = axis.z * s;
 		this._w = Math.cos(halfAngle);
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	setFromRotationMatrix(m) {
 		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
+
 		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
-		const te = m.elements,
-					m11 = te[0],
-					m12 = te[4],
-					m13 = te[8],
-					m21 = te[1],
-					m22 = te[5],
-					m23 = te[9],
-					m31 = te[2],
-					m32 = te[6],
-					m33 = te[10],
-					trace = m11 + m22 + m33;
 
+		const te = m.elements,
+			m11 = te[0],
+			m12 = te[4],
+			m13 = te[8],
+			m21 = te[1],
+			m22 = te[5],
+			m23 = te[9],
+			m31 = te[2],
+			m32 = te[6],
+			m33 = te[10],
+			trace = m11 + m22 + m33;
 		if (trace > 0) {
 			const s = 0.5 / Math.sqrt(trace + 1.0);
 			this._w = 0.25 / s;
@@ -3040,20 +2714,17 @@ class Quaternion {
 			this._y = (m23 + m32) / s;
 			this._z = 0.25 * s;
 		}
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	setFromUnitVectors(vFrom, vTo) {
 		// assumes direction vectors vFrom and vTo are normalized
-		let r = vFrom.dot(vTo) + 1;
 
+		let r = vFrom.dot(vTo) + 1;
 		if (r < Number.EPSILON) {
 			// vFrom and vTo point in opposite directions
-			r = 0;
 
+			r = 0;
 			if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
 				this._x = -vFrom.y;
 				this._y = vFrom.x;
@@ -3067,19 +2738,17 @@ class Quaternion {
 			}
 		} else {
 			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
+
 			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
 			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
 			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
 			this._w = r;
 		}
-
 		return this.normalize();
 	}
-
 	angleTo(q) {
 		return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
 	}
-
 	rotateTowards(q, step) {
 		const angle = this.angleTo(q);
 		if (angle === 0) return this;
@@ -3087,41 +2756,32 @@ class Quaternion {
 		this.slerp(q, t);
 		return this;
 	}
-
 	identity() {
 		return this.set(0, 0, 0, 1);
 	}
-
 	invert() {
 		// quaternion is assumed to have unit length
+
 		return this.conjugate();
 	}
-
 	conjugate() {
 		this._x *= -1;
 		this._y *= -1;
 		this._z *= -1;
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	dot(v) {
 		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
 	}
-
 	lengthSq() {
 		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
 	}
-
 	length() {
 		return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
 	}
-
 	normalize() {
 		let l = this.length();
-
 		if (l === 0) {
 			this._x = 0;
 			this._y = 0;
@@ -3134,50 +2794,44 @@ class Quaternion {
 			this._z = this._z * l;
 			this._w = this._w * l;
 		}
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	multiply(q) {
 		return this.multiplyQuaternions(this, q);
 	}
-
 	premultiply(q) {
 		return this.multiplyQuaternions(q, this);
 	}
-
 	multiplyQuaternions(a, b) {
 		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
+
 		const qax = a._x,
-					qay = a._y,
-					qaz = a._z,
-					qaw = a._w;
+			qay = a._y,
+			qaz = a._z,
+			qaw = a._w;
 		const qbx = b._x,
-					qby = b._y,
-					qbz = b._z,
-					qbw = b._w;
+			qby = b._y,
+			qbz = b._z,
+			qbw = b._w;
 		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
 		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
 		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
 		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	slerp(qb, t) {
 		if (t === 0) return this;
 		if (t === 1) return this.copy(qb);
 		const x = this._x,
-					y = this._y,
-					z = this._z,
-					w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
+			y = this._y,
+			z = this._z,
+			w = this._w;
 
-		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
+		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
 
+		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
 		if (cosHalfTheta < 0) {
 			this._w = -qb._w;
 			this._x = -qb._x;
@@ -3187,7 +2841,6 @@ class Quaternion {
 		} else {
 			this.copy(qb);
 		}
-
 		if (cosHalfTheta >= 1.0) {
 			this._w = w;
 			this._x = x;
@@ -3195,9 +2848,7 @@ class Quaternion {
 			this._z = z;
 			return this;
 		}
-
 		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
-
 		if (sqrSinHalfTheta <= Number.EPSILON) {
 			const s = 1 - t;
 			this._w = s * w + t * this._w;
@@ -3205,34 +2856,28 @@ class Quaternion {
 			this._y = s * y + t * this._y;
 			this._z = s * z + t * this._z;
 			this.normalize();
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
 		const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
 		const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
-					ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
+			ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
 		this._w = w * ratioA + this._w * ratioB;
 		this._x = x * ratioA + this._x * ratioB;
 		this._y = y * ratioA + this._y * ratioB;
 		this._z = z * ratioA + this._z * ratioB;
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	slerpQuaternions(qa, qb, t) {
 		return this.copy(qa).slerp(qb, t);
 	}
-
 	random() {
 		// Derived from http://planning.cs.uiuc.edu/node198.html
 		// Note, this source uses w, x, y, z ordering,
 		// so we swap the order below.
+
 		const u1 = Math.random();
 		const sqrt1u1 = Math.sqrt(1 - u1);
 		const sqrtu1 = Math.sqrt(u1);
@@ -3240,22 +2885,17 @@ class Quaternion {
 		const u3 = 2 * Math.PI * Math.random();
 		return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
 	}
-
 	equals(quaternion) {
 		return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
 	}
-
 	fromArray(array, offset = 0) {
 		this._x = array[offset];
 		this._y = array[offset + 1];
 		this._z = array[offset + 2];
 		this._w = array[offset + 3];
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		array[offset] = this._x;
 		array[offset + 1] = this._y;
@@ -3263,7 +2903,6 @@ class Quaternion {
 		array[offset + 3] = this._w;
 		return array;
 	}
-
 	fromBufferAttribute(attribute, index) {
 		this._x = attribute.getX(index);
 		this._y = attribute.getY(index);
@@ -3271,21 +2910,17 @@ class Quaternion {
 		this._w = attribute.getW(index);
 		return this;
 	}
-
 	_onChange(callback) {
 		this._onChangeCallback = callback;
 		return this;
 	}
-
 	_onChangeCallback() {}
-
 	*[Symbol.iterator]() {
 		yield this._x;
 		yield this._y;
 		yield this._z;
 		yield this._w;
 	}
-
 }
 
 class Vector3 {
@@ -3295,7 +2930,6 @@ class Vector3 {
 		this.y = y;
 		this.z = z;
 	}
-
 	set(x, y, z) {
 		if (z === undefined) z = this.z; // sprite.scale.set(x,y)
 
@@ -3304,174 +2938,144 @@ class Vector3 {
 		this.z = z;
 		return this;
 	}
-
 	setScalar(scalar) {
 		this.x = scalar;
 		this.y = scalar;
 		this.z = scalar;
 		return this;
 	}
-
 	setX(x) {
 		this.x = x;
 		return this;
 	}
-
 	setY(y) {
 		this.y = y;
 		return this;
 	}
-
 	setZ(z) {
 		this.z = z;
 		return this;
 	}
-
 	setComponent(index, value) {
 		switch (index) {
 			case 0:
 				this.x = value;
 				break;
-
 			case 1:
 				this.y = value;
 				break;
-
 			case 2:
 				this.z = value;
 				break;
-
 			default:
 				throw new Error('index is out of range: ' + index);
 		}
-
 		return this;
 	}
-
 	getComponent(index) {
 		switch (index) {
 			case 0:
 				return this.x;
-
 			case 1:
 				return this.y;
-
 			case 2:
 				return this.z;
-
 			default:
 				throw new Error('index is out of range: ' + index);
 		}
 	}
-
 	clone() {
 		return new this.constructor(this.x, this.y, this.z);
 	}
-
 	copy(v) {
 		this.x = v.x;
 		this.y = v.y;
 		this.z = v.z;
 		return this;
 	}
-
 	add(v) {
 		this.x += v.x;
 		this.y += v.y;
 		this.z += v.z;
 		return this;
 	}
-
 	addScalar(s) {
 		this.x += s;
 		this.y += s;
 		this.z += s;
 		return this;
 	}
-
 	addVectors(a, b) {
 		this.x = a.x + b.x;
 		this.y = a.y + b.y;
 		this.z = a.z + b.z;
 		return this;
 	}
-
 	addScaledVector(v, s) {
 		this.x += v.x * s;
 		this.y += v.y * s;
 		this.z += v.z * s;
 		return this;
 	}
-
 	sub(v) {
 		this.x -= v.x;
 		this.y -= v.y;
 		this.z -= v.z;
 		return this;
 	}
-
 	subScalar(s) {
 		this.x -= s;
 		this.y -= s;
 		this.z -= s;
 		return this;
 	}
-
 	subVectors(a, b) {
 		this.x = a.x - b.x;
 		this.y = a.y - b.y;
 		this.z = a.z - b.z;
 		return this;
 	}
-
 	multiply(v) {
 		this.x *= v.x;
 		this.y *= v.y;
 		this.z *= v.z;
 		return this;
 	}
-
 	multiplyScalar(scalar) {
 		this.x *= scalar;
 		this.y *= scalar;
 		this.z *= scalar;
 		return this;
 	}
-
 	multiplyVectors(a, b) {
 		this.x = a.x * b.x;
 		this.y = a.y * b.y;
 		this.z = a.z * b.z;
 		return this;
 	}
-
 	applyEuler(euler) {
 		return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
 	}
-
 	applyAxisAngle(axis, angle) {
 		return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
 	}
-
 	applyMatrix3(m) {
 		const x = this.x,
-					y = this.y,
-					z = this.z;
+			y = this.y,
+			z = this.z;
 		const e = m.elements;
 		this.x = e[0] * x + e[3] * y + e[6] * z;
 		this.y = e[1] * x + e[4] * y + e[7] * z;
 		this.z = e[2] * x + e[5] * y + e[8] * z;
 		return this;
 	}
-
 	applyNormalMatrix(m) {
 		return this.applyMatrix3(m).normalize();
 	}
-
 	applyMatrix4(m) {
 		const x = this.x,
-					y = this.y,
-					z = this.z;
+			y = this.y,
+			z = this.z;
 		const e = m.elements;
 		const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
 		this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
@@ -3479,230 +3083,205 @@ class Vector3 {
 		this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
 		return this;
 	}
-
 	applyQuaternion(q) {
 		const x = this.x,
-					y = this.y,
-					z = this.z;
+			y = this.y,
+			z = this.z;
 		const qx = q.x,
-					qy = q.y,
-					qz = q.z,
-					qw = q.w; // calculate quat * vector
+			qy = q.y,
+			qz = q.z,
+			qw = q.w;
+
+		// calculate quat * vector
 
 		const ix = qw * x + qy * z - qz * y;
 		const iy = qw * y + qz * x - qx * z;
 		const iz = qw * z + qx * y - qy * x;
-		const iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat
+		const iw = -qx * x - qy * y - qz * z;
+
+		// calculate result * inverse quat
 
 		this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
 		this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
 		this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
 		return this;
 	}
-
 	project(camera) {
 		return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
 	}
-
 	unproject(camera) {
 		return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
 	}
-
 	transformDirection(m) {
 		// input: THREE.Matrix4 affine matrix
 		// vector interpreted as a direction
+
 		const x = this.x,
-					y = this.y,
-					z = this.z;
+			y = this.y,
+			z = this.z;
 		const e = m.elements;
 		this.x = e[0] * x + e[4] * y + e[8] * z;
 		this.y = e[1] * x + e[5] * y + e[9] * z;
 		this.z = e[2] * x + e[6] * y + e[10] * z;
 		return this.normalize();
 	}
-
 	divide(v) {
 		this.x /= v.x;
 		this.y /= v.y;
 		this.z /= v.z;
 		return this;
 	}
-
 	divideScalar(scalar) {
 		return this.multiplyScalar(1 / scalar);
 	}
-
 	min(v) {
 		this.x = Math.min(this.x, v.x);
 		this.y = Math.min(this.y, v.y);
 		this.z = Math.min(this.z, v.z);
 		return this;
 	}
-
 	max(v) {
 		this.x = Math.max(this.x, v.x);
 		this.y = Math.max(this.y, v.y);
 		this.z = Math.max(this.z, v.z);
 		return this;
 	}
-
 	clamp(min, max) {
 		// assumes min < max, componentwise
+
 		this.x = Math.max(min.x, Math.min(max.x, this.x));
 		this.y = Math.max(min.y, Math.min(max.y, this.y));
 		this.z = Math.max(min.z, Math.min(max.z, this.z));
 		return this;
 	}
-
 	clampScalar(minVal, maxVal) {
 		this.x = Math.max(minVal, Math.min(maxVal, this.x));
 		this.y = Math.max(minVal, Math.min(maxVal, this.y));
 		this.z = Math.max(minVal, Math.min(maxVal, this.z));
 		return this;
 	}
-
 	clampLength(min, max) {
 		const length = this.length();
 		return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
 	}
-
 	floor() {
 		this.x = Math.floor(this.x);
 		this.y = Math.floor(this.y);
 		this.z = Math.floor(this.z);
 		return this;
 	}
-
 	ceil() {
 		this.x = Math.ceil(this.x);
 		this.y = Math.ceil(this.y);
 		this.z = Math.ceil(this.z);
 		return this;
 	}
-
 	round() {
 		this.x = Math.round(this.x);
 		this.y = Math.round(this.y);
 		this.z = Math.round(this.z);
 		return this;
 	}
-
 	roundToZero() {
 		this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
 		this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
 		this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
 		return this;
 	}
-
 	negate() {
 		this.x = -this.x;
 		this.y = -this.y;
 		this.z = -this.z;
 		return this;
 	}
-
 	dot(v) {
 		return this.x * v.x + this.y * v.y + this.z * v.z;
-	} // TODO lengthSquared?
+	}
 
+	// TODO lengthSquared?
 
 	lengthSq() {
 		return this.x * this.x + this.y * this.y + this.z * this.z;
 	}
-
 	length() {
 		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
 	}
-
 	manhattanLength() {
 		return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
 	}
-
 	normalize() {
 		return this.divideScalar(this.length() || 1);
 	}
-
 	setLength(length) {
 		return this.normalize().multiplyScalar(length);
 	}
-
 	lerp(v, alpha) {
 		this.x += (v.x - this.x) * alpha;
 		this.y += (v.y - this.y) * alpha;
 		this.z += (v.z - this.z) * alpha;
 		return this;
 	}
-
 	lerpVectors(v1, v2, alpha) {
 		this.x = v1.x + (v2.x - v1.x) * alpha;
 		this.y = v1.y + (v2.y - v1.y) * alpha;
 		this.z = v1.z + (v2.z - v1.z) * alpha;
 		return this;
 	}
-
 	cross(v) {
 		return this.crossVectors(this, v);
 	}
-
 	crossVectors(a, b) {
 		const ax = a.x,
-					ay = a.y,
-					az = a.z;
+			ay = a.y,
+			az = a.z;
 		const bx = b.x,
-					by = b.y,
-					bz = b.z;
+			by = b.y,
+			bz = b.z;
 		this.x = ay * bz - az * by;
 		this.y = az * bx - ax * bz;
 		this.z = ax * by - ay * bx;
 		return this;
 	}
-
 	projectOnVector(v) {
 		const denominator = v.lengthSq();
 		if (denominator === 0) return this.set(0, 0, 0);
 		const scalar = v.dot(this) / denominator;
 		return this.copy(v).multiplyScalar(scalar);
 	}
-
 	projectOnPlane(planeNormal) {
 		_vector$c.copy(this).projectOnVector(planeNormal);
-
 		return this.sub(_vector$c);
 	}
-
 	reflect(normal) {
 		// reflect incident vector off plane orthogonal to normal
 		// normal is assumed to have unit length
+
 		return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
 	}
-
 	angleTo(v) {
 		const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
 		if (denominator === 0) return Math.PI / 2;
-		const theta = this.dot(v) / denominator; // clamp, to handle numerical problems
+		const theta = this.dot(v) / denominator;
+
+		// clamp, to handle numerical problems
 
 		return Math.acos(clamp(theta, -1, 1));
 	}
-
 	distanceTo(v) {
 		return Math.sqrt(this.distanceToSquared(v));
 	}
-
 	distanceToSquared(v) {
 		const dx = this.x - v.x,
-					dy = this.y - v.y,
-					dz = this.z - v.z;
+			dy = this.y - v.y,
+			dz = this.z - v.z;
 		return dx * dx + dy * dy + dz * dz;
 	}
-
 	manhattanDistanceTo(v) {
 		return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
 	}
-
 	setFromSpherical(s) {
 		return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
 	}
-
 	setFromSphericalCoords(radius, phi, theta) {
 		const sinPhiRadius = Math.sin(phi) * radius;
 		this.x = sinPhiRadius * Math.sin(theta);
@@ -3710,18 +3289,15 @@ class Vector3 {
 		this.z = sinPhiRadius * Math.cos(theta);
 		return this;
 	}
-
 	setFromCylindrical(c) {
 		return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
 	}
-
 	setFromCylindricalCoords(radius, theta, y) {
 		this.x = radius * Math.sin(theta);
 		this.y = y;
 		this.z = radius * Math.cos(theta);
 		return this;
 	}
-
 	setFromMatrixPosition(m) {
 		const e = m.elements;
 		this.x = e[12];
@@ -3729,7 +3305,6 @@ class Vector3 {
 		this.z = e[14];
 		return this;
 	}
-
 	setFromMatrixScale(m) {
 		const sx = this.setFromMatrixColumn(m, 0).length();
 		const sy = this.setFromMatrixColumn(m, 1).length();
@@ -3739,56 +3314,48 @@ class Vector3 {
 		this.z = sz;
 		return this;
 	}
-
 	setFromMatrixColumn(m, index) {
 		return this.fromArray(m.elements, index * 4);
 	}
-
 	setFromMatrix3Column(m, index) {
 		return this.fromArray(m.elements, index * 3);
 	}
-
 	setFromEuler(e) {
 		this.x = e._x;
 		this.y = e._y;
 		this.z = e._z;
 		return this;
 	}
-
 	equals(v) {
 		return v.x === this.x && v.y === this.y && v.z === this.z;
 	}
-
 	fromArray(array, offset = 0) {
 		this.x = array[offset];
 		this.y = array[offset + 1];
 		this.z = array[offset + 2];
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		array[offset] = this.x;
 		array[offset + 1] = this.y;
 		array[offset + 2] = this.z;
 		return array;
 	}
-
 	fromBufferAttribute(attribute, index) {
 		this.x = attribute.getX(index);
 		this.y = attribute.getY(index);
 		this.z = attribute.getZ(index);
 		return this;
 	}
-
 	random() {
 		this.x = Math.random();
 		this.y = Math.random();
 		this.z = Math.random();
 		return this;
 	}
-
 	randomDirection() {
 		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html
+
 		const u = (Math.random() - 0.5) * 2;
 		const t = Math.random() * Math.PI * 2;
 		const f = Math.sqrt(1 - u ** 2);
@@ -3797,17 +3364,13 @@ class Vector3 {
 		this.z = u;
 		return this;
 	}
-
 	*[Symbol.iterator]() {
 		yield this.x;
 		yield this.y;
 		yield this.z;
 	}
-
 }
-
 const _vector$c = /*@__PURE__*/new Vector3();
-
 const _quaternion$4 = /*@__PURE__*/new Quaternion();
 
 class Box3 {
@@ -3816,13 +3379,11 @@ class Box3 {
 		this.min = min;
 		this.max = max;
 	}
-
 	set(min, max) {
 		this.min.copy(min);
 		this.max.copy(max);
 		return this;
 	}
-
 	setFromArray(array) {
 		let minX = +Infinity;
 		let minY = +Infinity;
@@ -3830,7 +3391,6 @@ class Box3 {
 		let maxX = -Infinity;
 		let maxY = -Infinity;
 		let maxZ = -Infinity;
-
 		for (let i = 0, l = array.length; i < l; i += 3) {
 			const x = array[i];
 			const y = array[i + 1];
@@ -3842,12 +3402,10 @@ class Box3 {
 			if (y > maxY) maxY = y;
 			if (z > maxZ) maxZ = z;
 		}
-
 		this.min.set(minX, minY, minZ);
 		this.max.set(maxX, maxY, maxZ);
 		return this;
 	}
-
 	setFromBufferAttribute(attribute) {
 		let minX = +Infinity;
 		let minY = +Infinity;
@@ -3855,7 +3413,6 @@ class Box3 {
 		let maxX = -Infinity;
 		let maxY = -Infinity;
 		let maxZ = -Infinity;
-
 		for (let i = 0, l = attribute.count; i < l; i++) {
 			const x = attribute.getX(i);
 			const y = attribute.getY(i);
@@ -3867,150 +3424,122 @@ class Box3 {
 			if (y > maxY) maxY = y;
 			if (z > maxZ) maxZ = z;
 		}
-
 		this.min.set(minX, minY, minZ);
 		this.max.set(maxX, maxY, maxZ);
 		return this;
 	}
-
 	setFromPoints(points) {
 		this.makeEmpty();
-
 		for (let i = 0, il = points.length; i < il; i++) {
 			this.expandByPoint(points[i]);
 		}
-
 		return this;
 	}
-
 	setFromCenterAndSize(center, size) {
 		const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
-
 		this.min.copy(center).sub(halfSize);
 		this.max.copy(center).add(halfSize);
 		return this;
 	}
-
 	setFromObject(object, precise = false) {
 		this.makeEmpty();
 		return this.expandByObject(object, precise);
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	copy(box) {
 		this.min.copy(box.min);
 		this.max.copy(box.max);
 		return this;
 	}
-
 	makeEmpty() {
 		this.min.x = this.min.y = this.min.z = +Infinity;
 		this.max.x = this.max.y = this.max.z = -Infinity;
 		return this;
 	}
-
 	isEmpty() {
 		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
+
 		return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
 	}
-
 	getCenter(target) {
 		return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
 	}
-
 	getSize(target) {
 		return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
 	}
-
 	expandByPoint(point) {
 		this.min.min(point);
 		this.max.max(point);
 		return this;
 	}
-
 	expandByVector(vector) {
 		this.min.sub(vector);
 		this.max.add(vector);
 		return this;
 	}
-
 	expandByScalar(scalar) {
 		this.min.addScalar(-scalar);
 		this.max.addScalar(scalar);
 		return this;
 	}
-
 	expandByObject(object, precise = false) {
 		// Computes the world-axis-aligned bounding box of an object (including its children),
 		// accounting for both the object's, and children's, world transforms
+
 		object.updateWorldMatrix(false, false);
 		const geometry = object.geometry;
-
 		if (geometry !== undefined) {
 			if (precise && geometry.attributes != undefined && geometry.attributes.position !== undefined) {
 				const position = geometry.attributes.position;
-
 				for (let i = 0, l = position.count; i < l; i++) {
 					_vector$b.fromBufferAttribute(position, i).applyMatrix4(object.matrixWorld);
-
 					this.expandByPoint(_vector$b);
 				}
 			} else {
 				if (geometry.boundingBox === null) {
 					geometry.computeBoundingBox();
 				}
-
 				_box$3.copy(geometry.boundingBox);
-
 				_box$3.applyMatrix4(object.matrixWorld);
-
 				this.union(_box$3);
 			}
 		}
-
 		const children = object.children;
-
 		for (let i = 0, l = children.length; i < l; i++) {
 			this.expandByObject(children[i], precise);
 		}
-
 		return this;
 	}
-
 	containsPoint(point) {
 		return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
 	}
-
 	containsBox(box) {
 		return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
 	}
-
 	getParameter(point, target) {
 		// This can potentially have a divide by zero if the box
 		// has a size dimension of 0.
+
 		return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
 	}
-
 	intersectsBox(box) {
 		// using 6 splitting planes to rule out intersections.
 		return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
 	}
-
 	intersectsSphere(sphere) {
 		// Find the point on the AABB closest to the sphere center.
-		this.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.
+		this.clampPoint(sphere.center, _vector$b);
 
+		// If that point is inside the sphere, the AABB and sphere intersect.
 		return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
 	}
-
 	intersectsPlane(plane) {
 		// We compute the minimum and maximum dot product values. If those values
 		// are on the same side (back or front) of the plane, then there is no intersection.
-		let min, max;
 
+		let min, max;
 		if (plane.normal.x > 0) {
 			min = plane.normal.x * this.min.x;
 			max = plane.normal.x * this.max.x;
@@ -4018,7 +3547,6 @@ class Box3 {
 			min = plane.normal.x * this.max.x;
 			max = plane.normal.x * this.min.x;
 		}
-
 		if (plane.normal.y > 0) {
 			min += plane.normal.y * this.min.y;
 			max += plane.normal.y * this.max.y;
@@ -4026,7 +3554,6 @@ class Box3 {
 			min += plane.normal.y * this.max.y;
 			max += plane.normal.y * this.min.y;
 		}
-
 		if (plane.normal.z > 0) {
 			min += plane.normal.z * this.min.z;
 			max += plane.normal.z * this.max.z;
@@ -4034,418 +3561,318 @@ class Box3 {
 			min += plane.normal.z * this.max.z;
 			max += plane.normal.z * this.min.z;
 		}
-
 		return min <= -plane.constant && max >= -plane.constant;
 	}
-
 	intersectsTriangle(triangle) {
 		if (this.isEmpty()) {
 			return false;
-		} // compute box center and extents
-
+		}
 
+		// compute box center and extents
 		this.getCenter(_center);
+		_extents.subVectors(this.max, _center);
 
-		_extents.subVectors(this.max, _center); // translate triangle to aabb origin
-
-
+		// translate triangle to aabb origin
 		_v0$2.subVectors(triangle.a, _center);
-
 		_v1$7.subVectors(triangle.b, _center);
+		_v2$4.subVectors(triangle.c, _center);
 
-		_v2$4.subVectors(triangle.c, _center); // compute edge vectors for triangle
-
-
+		// compute edge vectors for triangle
 		_f0.subVectors(_v1$7, _v0$2);
-
 		_f1.subVectors(_v2$4, _v1$7);
+		_f2.subVectors(_v0$2, _v2$4);
 
-		_f2.subVectors(_v0$2, _v2$4); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
+		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
 		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
 		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
-
-
 		let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];
-
 		if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
 			return false;
-		} // test 3 face normals from the aabb
-
+		}
 
+		// test 3 face normals from the aabb
 		axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
-
 		if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
 			return false;
-		} // finally testing the face normal of the triangle
-		// use already existing triangle edge vectors here
-
+		}
 
+		// finally testing the face normal of the triangle
+		// use already existing triangle edge vectors here
 		_triangleNormal.crossVectors(_f0, _f1);
-
 		axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
 		return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
 	}
-
 	clampPoint(point, target) {
 		return target.copy(point).clamp(this.min, this.max);
 	}
-
 	distanceToPoint(point) {
 		const clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);
-
 		return clampedPoint.sub(point).length();
 	}
-
 	getBoundingSphere(target) {
 		this.getCenter(target.center);
 		target.radius = this.getSize(_vector$b).length() * 0.5;
 		return target;
 	}
-
 	intersect(box) {
 		this.min.max(box.min);
-		this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
+		this.max.min(box.max);
 
+		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
 		if (this.isEmpty()) this.makeEmpty();
 		return this;
 	}
-
 	union(box) {
 		this.min.min(box.min);
 		this.max.max(box.max);
 		return this;
 	}
-
 	applyMatrix4(matrix) {
 		// transform of empty box is an empty box.
-		if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below
+		if (this.isEmpty()) return this;
 
+		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
 		_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
-
-
 		_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
-
-
 		_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
-
-
 		_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
-
-
 		_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
-
-
 		_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
-
-
 		_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
-
-
 		_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111
 
-
 		this.setFromPoints(_points);
 		return this;
 	}
-
 	translate(offset) {
 		this.min.add(offset);
 		this.max.add(offset);
 		return this;
 	}
-
 	equals(box) {
 		return box.min.equals(this.min) && box.max.equals(this.max);
 	}
-
 }
-
 const _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];
-
 const _vector$b = /*@__PURE__*/new Vector3();
+const _box$3 = /*@__PURE__*/new Box3();
 
-const _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices
-
+// triangle centered vertices
 
 const _v0$2 = /*@__PURE__*/new Vector3();
-
 const _v1$7 = /*@__PURE__*/new Vector3();
+const _v2$4 = /*@__PURE__*/new Vector3();
 
-const _v2$4 = /*@__PURE__*/new Vector3(); // triangle edge vectors
-
+// triangle edge vectors
 
 const _f0 = /*@__PURE__*/new Vector3();
-
 const _f1 = /*@__PURE__*/new Vector3();
-
 const _f2 = /*@__PURE__*/new Vector3();
-
 const _center = /*@__PURE__*/new Vector3();
-
 const _extents = /*@__PURE__*/new Vector3();
-
 const _triangleNormal = /*@__PURE__*/new Vector3();
-
 const _testAxis = /*@__PURE__*/new Vector3();
-
 function satForAxes(axes, v0, v1, v2, extents) {
 	for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
-		_testAxis.fromArray(axes, i); // project the aabb onto the separating axis
-
-
-		const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the separating axis
-
+		_testAxis.fromArray(axes, i);
+		// project the aabb onto the separating axis
+		const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
+		// project all 3 vertices of the triangle onto the separating axis
 		const p0 = v0.dot(_testAxis);
 		const p1 = v1.dot(_testAxis);
-		const p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r
-
+		const p2 = v2.dot(_testAxis);
+		// actual test, basically see if either of the most extreme of the triangle points intersects r
 		if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
 			// points of the projected triangle are outside the projected half-length of the aabb
 			// the axis is separating and we can exit
 			return false;
 		}
 	}
-
 	return true;
 }
 
 const _box$2 = /*@__PURE__*/new Box3();
-
 const _v1$6 = /*@__PURE__*/new Vector3();
-
 const _v2$3 = /*@__PURE__*/new Vector3();
-
 class Sphere {
 	constructor(center = new Vector3(), radius = -1) {
 		this.center = center;
 		this.radius = radius;
 	}
-
 	set(center, radius) {
 		this.center.copy(center);
 		this.radius = radius;
 		return this;
 	}
-
 	setFromPoints(points, optionalCenter) {
 		const center = this.center;
-
 		if (optionalCenter !== undefined) {
 			center.copy(optionalCenter);
 		} else {
 			_box$2.setFromPoints(points).getCenter(center);
 		}
-
 		let maxRadiusSq = 0;
-
 		for (let i = 0, il = points.length; i < il; i++) {
 			maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
 		}
-
 		this.radius = Math.sqrt(maxRadiusSq);
 		return this;
 	}
-
 	copy(sphere) {
 		this.center.copy(sphere.center);
 		this.radius = sphere.radius;
 		return this;
 	}
-
 	isEmpty() {
 		return this.radius < 0;
 	}
-
 	makeEmpty() {
 		this.center.set(0, 0, 0);
 		this.radius = -1;
 		return this;
 	}
-
 	containsPoint(point) {
 		return point.distanceToSquared(this.center) <= this.radius * this.radius;
 	}
-
 	distanceToPoint(point) {
 		return point.distanceTo(this.center) - this.radius;
 	}
-
 	intersectsSphere(sphere) {
 		const radiusSum = this.radius + sphere.radius;
 		return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
 	}
-
 	intersectsBox(box) {
 		return box.intersectsSphere(this);
 	}
-
 	intersectsPlane(plane) {
 		return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
 	}
-
 	clampPoint(point, target) {
 		const deltaLengthSq = this.center.distanceToSquared(point);
 		target.copy(point);
-
 		if (deltaLengthSq > this.radius * this.radius) {
 			target.sub(this.center).normalize();
 			target.multiplyScalar(this.radius).add(this.center);
 		}
-
 		return target;
 	}
-
 	getBoundingBox(target) {
 		if (this.isEmpty()) {
 			// Empty sphere produces empty bounding box
 			target.makeEmpty();
 			return target;
 		}
-
 		target.set(this.center, this.center);
 		target.expandByScalar(this.radius);
 		return target;
 	}
-
 	applyMatrix4(matrix) {
 		this.center.applyMatrix4(matrix);
 		this.radius = this.radius * matrix.getMaxScaleOnAxis();
 		return this;
 	}
-
 	translate(offset) {
 		this.center.add(offset);
 		return this;
 	}
-
 	expandByPoint(point) {
 		if (this.isEmpty()) {
 			this.center.copy(point);
 			this.radius = 0;
 			return this;
 		}
-
 		_v1$6.subVectors(point, this.center);
-
 		const lengthSq = _v1$6.lengthSq();
-
 		if (lengthSq > this.radius * this.radius) {
 			// calculate the minimal sphere
+
 			const length = Math.sqrt(lengthSq);
 			const delta = (length - this.radius) * 0.5;
 			this.center.addScaledVector(_v1$6, delta / length);
 			this.radius += delta;
 		}
-
 		return this;
 	}
-
 	union(sphere) {
 		if (sphere.isEmpty()) {
 			return this;
 		}
-
 		if (this.isEmpty()) {
 			this.copy(sphere);
 			return this;
 		}
-
 		if (this.center.equals(sphere.center) === true) {
 			this.radius = Math.max(this.radius, sphere.radius);
 		} else {
 			_v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
-
 			this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
 			this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
 		}
-
 		return this;
 	}
-
 	equals(sphere) {
 		return sphere.center.equals(this.center) && sphere.radius === this.radius;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 const _vector$a = /*@__PURE__*/new Vector3();
-
 const _segCenter = /*@__PURE__*/new Vector3();
-
 const _segDir = /*@__PURE__*/new Vector3();
-
 const _diff = /*@__PURE__*/new Vector3();
-
 const _edge1 = /*@__PURE__*/new Vector3();
-
 const _edge2 = /*@__PURE__*/new Vector3();
-
 const _normal$1 = /*@__PURE__*/new Vector3();
-
 class Ray {
 	constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
 		this.origin = origin;
 		this.direction = direction;
 	}
-
 	set(origin, direction) {
 		this.origin.copy(origin);
 		this.direction.copy(direction);
 		return this;
 	}
-
 	copy(ray) {
 		this.origin.copy(ray.origin);
 		this.direction.copy(ray.direction);
 		return this;
 	}
-
 	at(t, target) {
 		return target.copy(this.direction).multiplyScalar(t).add(this.origin);
 	}
-
 	lookAt(v) {
 		this.direction.copy(v).sub(this.origin).normalize();
 		return this;
 	}
-
 	recast(t) {
 		this.origin.copy(this.at(t, _vector$a));
 		return this;
 	}
-
 	closestPointToPoint(point, target) {
 		target.subVectors(point, this.origin);
 		const directionDistance = target.dot(this.direction);
-
 		if (directionDistance < 0) {
 			return target.copy(this.origin);
 		}
-
 		return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
 	}
-
 	distanceToPoint(point) {
 		return Math.sqrt(this.distanceSqToPoint(point));
 	}
-
 	distanceSqToPoint(point) {
-		const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray
+		const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
 
+		// point behind the ray
 
 		if (directionDistance < 0) {
 			return this.origin.distanceToSquared(point);
 		}
-
 		_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
-
 		return _vector$a.distanceToSquared(point);
 	}
-
 	distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
 		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
 		// It returns the min distance between the ray and the segment
@@ -4453,47 +3880,43 @@ class Ray {
 		// It can also set two optional targets :
 		// - The closest point on the ray
 		// - The closest point on the segment
-		_segCenter.copy(v0).add(v1).multiplyScalar(0.5);
 
+		_segCenter.copy(v0).add(v1).multiplyScalar(0.5);
 		_segDir.copy(v1).sub(v0).normalize();
-
 		_diff.copy(this.origin).sub(_segCenter);
-
 		const segExtent = v0.distanceTo(v1) * 0.5;
 		const a01 = -this.direction.dot(_segDir);
-
 		const b0 = _diff.dot(this.direction);
-
 		const b1 = -_diff.dot(_segDir);
-
 		const c = _diff.lengthSq();
-
 		const det = Math.abs(1 - a01 * a01);
 		let s0, s1, sqrDist, extDet;
-
 		if (det > 0) {
 			// The ray and segment are not parallel.
+
 			s0 = a01 * b1 - b0;
 			s1 = a01 * b0 - b1;
 			extDet = segExtent * det;
-
 			if (s0 >= 0) {
 				if (s1 >= -extDet) {
 					if (s1 <= extDet) {
 						// region 0
 						// Minimum at interior points of ray and segment.
+
 						const invDet = 1 / det;
 						s0 *= invDet;
 						s1 *= invDet;
 						sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
 					} else {
 						// region 1
+
 						s1 = segExtent;
 						s0 = Math.max(0, -(a01 * s1 + b0));
 						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
 					}
 				} else {
 					// region 5
+
 					s1 = -segExtent;
 					s0 = Math.max(0, -(a01 * s1 + b0));
 					sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
@@ -4501,16 +3924,19 @@ class Ray {
 			} else {
 				if (s1 <= -extDet) {
 					// region 4
+
 					s0 = Math.max(0, -(-a01 * segExtent + b0));
 					s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
 					sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
 				} else if (s1 <= extDet) {
 					// region 3
+
 					s0 = 0;
 					s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
 					sqrDist = s1 * (s1 + 2 * b1) + c;
 				} else {
 					// region 2
+
 					s0 = Math.max(0, -(a01 * segExtent + b0));
 					s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
 					sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
@@ -4518,102 +3944,94 @@ class Ray {
 			}
 		} else {
 			// Ray and segment are parallel.
+
 			s1 = a01 > 0 ? -segExtent : segExtent;
 			s0 = Math.max(0, -(a01 * s1 + b0));
 			sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
 		}
-
 		if (optionalPointOnRay) {
 			optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
 		}
-
 		if (optionalPointOnSegment) {
 			optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
 		}
-
 		return sqrDist;
 	}
-
 	intersectSphere(sphere, target) {
 		_vector$a.subVectors(sphere.center, this.origin);
-
 		const tca = _vector$a.dot(this.direction);
-
 		const d2 = _vector$a.dot(_vector$a) - tca * tca;
 		const radius2 = sphere.radius * sphere.radius;
 		if (d2 > radius2) return null;
-		const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere
+		const thc = Math.sqrt(radius2 - d2);
 
-		const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere
+		// t0 = first intersect point - entrance on front of sphere
+		const t0 = tca - thc;
 
-		const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null
+		// t1 = second intersect point - exit point on back of sphere
+		const t1 = tca + thc;
 
-		if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:
+		// test to see if both t0 and t1 are behind the ray - if so, return null
+		if (t0 < 0 && t1 < 0) return null;
+
+		// test to see if t0 is behind the ray:
 		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
 		// in order to always return an intersect point that is in front of the ray.
+		if (t0 < 0) return this.at(t1, target);
 
-		if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0
-
+		// else t0 is in front of the ray, so return the first collision point scaled by t0
 		return this.at(t0, target);
 	}
-
 	intersectsSphere(sphere) {
 		return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
 	}
-
 	distanceToPlane(plane) {
 		const denominator = plane.normal.dot(this.direction);
-
 		if (denominator === 0) {
 			// line is coplanar, return origin
 			if (plane.distanceToPoint(this.origin) === 0) {
 				return 0;
-			} // Null is preferable to undefined since undefined means.... it is undefined
+			}
 
+			// Null is preferable to undefined since undefined means.... it is undefined
 
 			return null;
 		}
+		const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
 
-		const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane
+		// Return if the ray never intersects the plane
 
 		return t >= 0 ? t : null;
 	}
-
 	intersectPlane(plane, target) {
 		const t = this.distanceToPlane(plane);
-
 		if (t === null) {
 			return null;
 		}
-
 		return this.at(t, target);
 	}
-
 	intersectsPlane(plane) {
 		// check if the ray lies on the plane first
-		const distToPoint = plane.distanceToPoint(this.origin);
 
+		const distToPoint = plane.distanceToPoint(this.origin);
 		if (distToPoint === 0) {
 			return true;
 		}
-
 		const denominator = plane.normal.dot(this.direction);
-
 		if (denominator * distToPoint < 0) {
 			return true;
-		} // ray origin is behind the plane (and is pointing behind it)
+		}
 
+		// ray origin is behind the plane (and is pointing behind it)
 
 		return false;
 	}
-
 	intersectBox(box, target) {
 		let tmin, tmax, tymin, tymax, tzmin, tzmax;
 		const invdirx = 1 / this.direction.x,
-					invdiry = 1 / this.direction.y,
-					invdirz = 1 / this.direction.z;
+			invdiry = 1 / this.direction.y,
+			invdirz = 1 / this.direction.z;
 		const origin = this.origin;
-
 		if (invdirx >= 0) {
 			tmin = (box.min.x - origin.x) * invdirx;
 			tmax = (box.max.x - origin.x) * invdirx;
@@ -4621,7 +4039,6 @@ class Ray {
 			tmin = (box.max.x - origin.x) * invdirx;
 			tmax = (box.min.x - origin.x) * invdirx;
 		}
-
 		if (invdiry >= 0) {
 			tymin = (box.min.y - origin.y) * invdiry;
 			tymax = (box.max.y - origin.y) * invdiry;
@@ -4629,11 +4046,9 @@ class Ray {
 			tymin = (box.max.y - origin.y) * invdiry;
 			tymax = (box.min.y - origin.y) * invdiry;
 		}
-
 		if (tmin > tymax || tymin > tmax) return null;
 		if (tymin > tmin || isNaN(tmin)) tmin = tymin;
 		if (tymax < tmax || isNaN(tmax)) tmax = tymax;
-
 		if (invdirz >= 0) {
 			tzmin = (box.min.z - origin.z) * invdirz;
 			tzmax = (box.max.z - origin.z) * invdirz;
@@ -4641,36 +4056,34 @@ class Ray {
 			tzmin = (box.max.z - origin.z) * invdirz;
 			tzmax = (box.min.z - origin.z) * invdirz;
 		}
-
 		if (tmin > tzmax || tzmin > tmax) return null;
 		if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
-		if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)
+		if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
+
+		//return point closest to the ray (positive side)
 
 		if (tmax < 0) return null;
 		return this.at(tmin >= 0 ? tmin : tmax, target);
 	}
-
 	intersectsBox(box) {
 		return this.intersectBox(box, _vector$a) !== null;
 	}
-
 	intersectTriangle(a, b, c, backfaceCulling, target) {
 		// Compute the offset origin, edges, and normal.
+
 		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
-		_edge1.subVectors(b, a);
 
+		_edge1.subVectors(b, a);
 		_edge2.subVectors(c, a);
+		_normal$1.crossVectors(_edge1, _edge2);
 
-		_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
+		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
 		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
 		//	 |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
 		//	 |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
 		//	 |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
-
-
 		let DdN = this.direction.dot(_normal$1);
 		let sign;
-
 		if (DdN > 0) {
 			if (backfaceCulling) return null;
 			sign = 1;
@@ -4680,52 +4093,47 @@ class Ray {
 		} else {
 			return null;
 		}
-
 		_diff.subVectors(this.origin, a);
+		const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
 
-		const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection
-
+		// b1 < 0, no intersection
 		if (DdQxE2 < 0) {
 			return null;
 		}
+		const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
 
-		const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection
-
+		// b2 < 0, no intersection
 		if (DdE1xQ < 0) {
 			return null;
-		} // b1+b2 > 1, no intersection
-
+		}
 
+		// b1+b2 > 1, no intersection
 		if (DdQxE2 + DdE1xQ > DdN) {
 			return null;
-		} // Line intersects triangle, check if ray does.
-
-
-		const QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection
+		}
 
+		// Line intersects triangle, check if ray does.
+		const QdN = -sign * _diff.dot(_normal$1);
 
+		// t < 0, no intersection
 		if (QdN < 0) {
 			return null;
-		} // Ray intersects triangle.
-
+		}
 
+		// Ray intersects triangle.
 		return this.at(QdN / DdN, target);
 	}
-
 	applyMatrix4(matrix4) {
 		this.origin.applyMatrix4(matrix4);
 		this.direction.transformDirection(matrix4);
 		return this;
 	}
-
 	equals(ray) {
 		return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 class Matrix4 {
@@ -4733,7 +4141,6 @@ class Matrix4 {
 		Matrix4.prototype.isMatrix4 = true;
 		this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
 	}
-
 	set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
 		const te = this.elements;
 		te[0] = n11;
@@ -4754,16 +4161,13 @@ class Matrix4 {
 		te[15] = n44;
 		return this;
 	}
-
 	identity() {
 		this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	clone() {
 		return new Matrix4().fromArray(this.elements);
 	}
-
 	copy(m) {
 		const te = this.elements;
 		const me = m.elements;
@@ -4785,45 +4189,37 @@ class Matrix4 {
 		te[15] = me[15];
 		return this;
 	}
-
 	copyPosition(m) {
 		const te = this.elements,
-					me = m.elements;
+			me = m.elements;
 		te[12] = me[12];
 		te[13] = me[13];
 		te[14] = me[14];
 		return this;
 	}
-
 	setFromMatrix3(m) {
 		const me = m.elements;
 		this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	extractBasis(xAxis, yAxis, zAxis) {
 		xAxis.setFromMatrixColumn(this, 0);
 		yAxis.setFromMatrixColumn(this, 1);
 		zAxis.setFromMatrixColumn(this, 2);
 		return this;
 	}
-
 	makeBasis(xAxis, yAxis, zAxis) {
 		this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	extractRotation(m) {
 		// this method does not support reflection matrices
+
 		const te = this.elements;
 		const me = m.elements;
-
 		const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
-
 		const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
-
 		const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
-
 		te[0] = me[0] * scaleX;
 		te[1] = me[1] * scaleX;
 		te[2] = me[2] * scaleX;
@@ -4842,24 +4238,22 @@ class Matrix4 {
 		te[15] = 1;
 		return this;
 	}
-
 	makeRotationFromEuler(euler) {
 		const te = this.elements;
 		const x = euler.x,
-					y = euler.y,
-					z = euler.z;
+			y = euler.y,
+			z = euler.z;
 		const a = Math.cos(x),
-					b = Math.sin(x);
+			b = Math.sin(x);
 		const c = Math.cos(y),
-					d = Math.sin(y);
+			d = Math.sin(y);
 		const e = Math.cos(z),
-					f = Math.sin(z);
-
+			f = Math.sin(z);
 		if (euler.order === 'XYZ') {
 			const ae = a * e,
-						af = a * f,
-						be = b * e,
-						bf = b * f;
+				af = a * f,
+				be = b * e,
+				bf = b * f;
 			te[0] = c * e;
 			te[4] = -c * f;
 			te[8] = d;
@@ -4871,9 +4265,9 @@ class Matrix4 {
 			te[10] = a * c;
 		} else if (euler.order === 'YXZ') {
 			const ce = c * e,
-						cf = c * f,
-						de = d * e,
-						df = d * f;
+				cf = c * f,
+				de = d * e,
+				df = d * f;
 			te[0] = ce + df * b;
 			te[4] = de * b - cf;
 			te[8] = a * d;
@@ -4885,9 +4279,9 @@ class Matrix4 {
 			te[10] = a * c;
 		} else if (euler.order === 'ZXY') {
 			const ce = c * e,
-						cf = c * f,
-						de = d * e,
-						df = d * f;
+				cf = c * f,
+				de = d * e,
+				df = d * f;
 			te[0] = ce - df * b;
 			te[4] = -a * f;
 			te[8] = de + cf * b;
@@ -4899,9 +4293,9 @@ class Matrix4 {
 			te[10] = a * c;
 		} else if (euler.order === 'ZYX') {
 			const ae = a * e,
-						af = a * f,
-						be = b * e,
-						bf = b * f;
+				af = a * f,
+				be = b * e,
+				bf = b * f;
 			te[0] = c * e;
 			te[4] = be * d - af;
 			te[8] = ae * d + bf;
@@ -4913,9 +4307,9 @@ class Matrix4 {
 			te[10] = a * c;
 		} else if (euler.order === 'YZX') {
 			const ac = a * c,
-						ad = a * d,
-						bc = b * c,
-						bd = b * d;
+				ad = a * d,
+				bc = b * c,
+				bd = b * d;
 			te[0] = c * e;
 			te[4] = bd - ac * f;
 			te[8] = bc * f + ad;
@@ -4927,9 +4321,9 @@ class Matrix4 {
 			te[10] = ac - bd * f;
 		} else if (euler.order === 'XZY') {
 			const ac = a * c,
-						ad = a * d,
-						bc = b * c,
-						bd = b * d;
+				ad = a * d,
+				bc = b * c,
+				bd = b * d;
 			te[0] = c * e;
 			te[4] = -f;
 			te[8] = d * e;
@@ -4939,55 +4333,46 @@ class Matrix4 {
 			te[2] = bc * f - ad;
 			te[6] = b * e;
 			te[10] = bd * f + ac;
-		} // bottom row
-
+		}
 
+		// bottom row
 		te[3] = 0;
 		te[7] = 0;
-		te[11] = 0; // last column
+		te[11] = 0;
 
+		// last column
 		te[12] = 0;
 		te[13] = 0;
 		te[14] = 0;
 		te[15] = 1;
 		return this;
 	}
-
 	makeRotationFromQuaternion(q) {
 		return this.compose(_zero, q, _one);
 	}
-
 	lookAt(eye, target, up) {
 		const te = this.elements;
-
 		_z.subVectors(eye, target);
-
 		if (_z.lengthSq() === 0) {
 			// eye and target are in the same position
+
 			_z.z = 1;
 		}
-
 		_z.normalize();
-
 		_x.crossVectors(up, _z);
-
 		if (_x.lengthSq() === 0) {
 			// up and z are parallel
+
 			if (Math.abs(up.z) === 1) {
 				_z.x += 0.0001;
 			} else {
 				_z.z += 0.0001;
 			}
-
 			_z.normalize();
-
 			_x.crossVectors(up, _z);
 		}
-
 		_x.normalize();
-
 		_y.crossVectors(_z, _x);
-
 		te[0] = _x.x;
 		te[4] = _y.x;
 		te[8] = _z.x;
@@ -4999,51 +4384,48 @@ class Matrix4 {
 		te[10] = _z.z;
 		return this;
 	}
-
 	multiply(m) {
 		return this.multiplyMatrices(this, m);
 	}
-
 	premultiply(m) {
 		return this.multiplyMatrices(m, this);
 	}
-
 	multiplyMatrices(a, b) {
 		const ae = a.elements;
 		const be = b.elements;
 		const te = this.elements;
 		const a11 = ae[0],
-					a12 = ae[4],
-					a13 = ae[8],
-					a14 = ae[12];
+			a12 = ae[4],
+			a13 = ae[8],
+			a14 = ae[12];
 		const a21 = ae[1],
-					a22 = ae[5],
-					a23 = ae[9],
-					a24 = ae[13];
+			a22 = ae[5],
+			a23 = ae[9],
+			a24 = ae[13];
 		const a31 = ae[2],
-					a32 = ae[6],
-					a33 = ae[10],
-					a34 = ae[14];
+			a32 = ae[6],
+			a33 = ae[10],
+			a34 = ae[14];
 		const a41 = ae[3],
-					a42 = ae[7],
-					a43 = ae[11],
-					a44 = ae[15];
+			a42 = ae[7],
+			a43 = ae[11],
+			a44 = ae[15];
 		const b11 = be[0],
-					b12 = be[4],
-					b13 = be[8],
-					b14 = be[12];
+			b12 = be[4],
+			b13 = be[8],
+			b14 = be[12];
 		const b21 = be[1],
-					b22 = be[5],
-					b23 = be[9],
-					b24 = be[13];
+			b22 = be[5],
+			b23 = be[9],
+			b24 = be[13];
 		const b31 = be[2],
-					b32 = be[6],
-					b33 = be[10],
-					b34 = be[14];
+			b32 = be[6],
+			b33 = be[10],
+			b34 = be[14];
 		const b41 = be[3],
-					b42 = be[7],
-					b43 = be[11],
-					b44 = be[15];
+			b42 = be[7],
+			b43 = be[11],
+			b44 = be[15];
 		te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
 		te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
 		te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
@@ -5062,7 +4444,6 @@ class Matrix4 {
 		te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
 		return this;
 	}
-
 	multiplyScalar(s) {
 		const te = this.elements;
 		te[0] *= s;
@@ -5083,30 +4464,30 @@ class Matrix4 {
 		te[15] *= s;
 		return this;
 	}
-
 	determinant() {
 		const te = this.elements;
 		const n11 = te[0],
-					n12 = te[4],
-					n13 = te[8],
-					n14 = te[12];
+			n12 = te[4],
+			n13 = te[8],
+			n14 = te[12];
 		const n21 = te[1],
-					n22 = te[5],
-					n23 = te[9],
-					n24 = te[13];
+			n22 = te[5],
+			n23 = te[9],
+			n24 = te[13];
 		const n31 = te[2],
-					n32 = te[6],
-					n33 = te[10],
-					n34 = te[14];
+			n32 = te[6],
+			n33 = te[10],
+			n34 = te[14];
 		const n41 = te[3],
-					n42 = te[7],
-					n43 = te[11],
-					n44 = te[15]; //TODO: make this more efficient
+			n42 = te[7],
+			n43 = te[11],
+			n44 = te[15];
+
+		//TODO: make this more efficient
 		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
 
 		return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
 	}
-
 	transpose() {
 		const te = this.elements;
 		let tmp;
@@ -5130,10 +4511,8 @@ class Matrix4 {
 		te[14] = tmp;
 		return this;
 	}
-
 	setPosition(x, y, z) {
 		const te = this.elements;
-
 		if (x.isVector3) {
 			te[12] = x.x;
 			te[13] = x.y;
@@ -5143,33 +4522,31 @@ class Matrix4 {
 			te[13] = y;
 			te[14] = z;
 		}
-
 		return this;
 	}
-
 	invert() {
 		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
 		const te = this.elements,
-					n11 = te[0],
-					n21 = te[1],
-					n31 = te[2],
-					n41 = te[3],
-					n12 = te[4],
-					n22 = te[5],
-					n32 = te[6],
-					n42 = te[7],
-					n13 = te[8],
-					n23 = te[9],
-					n33 = te[10],
-					n43 = te[11],
-					n14 = te[12],
-					n24 = te[13],
-					n34 = te[14],
-					n44 = te[15],
-					t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
-					t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
-					t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
-					t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
+			n11 = te[0],
+			n21 = te[1],
+			n31 = te[2],
+			n41 = te[3],
+			n12 = te[4],
+			n22 = te[5],
+			n32 = te[6],
+			n42 = te[7],
+			n13 = te[8],
+			n23 = te[9],
+			n33 = te[10],
+			n43 = te[11],
+			n14 = te[12],
+			n24 = te[13],
+			n34 = te[14],
+			n44 = te[15],
+			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
+			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
+			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
+			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
 		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
 		if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
 		const detInv = 1 / det;
@@ -5191,12 +4568,11 @@ class Matrix4 {
 		te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
 		return this;
 	}
-
 	scale(v) {
 		const te = this.elements;
 		const x = v.x,
-					y = v.y,
-					z = v.z;
+			y = v.y,
+			z = v.z;
 		te[0] *= x;
 		te[4] *= y;
 		te[8] *= z;
@@ -5211,7 +4587,6 @@ class Matrix4 {
 		te[11] *= z;
 		return this;
 	}
-
 	getMaxScaleOnAxis() {
 		const te = this.elements;
 		const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
@@ -5219,78 +4594,71 @@ class Matrix4 {
 		const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
 		return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
 	}
-
 	makeTranslation(x, y, z) {
 		this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
 		return this;
 	}
-
 	makeRotationX(theta) {
 		const c = Math.cos(theta),
-					s = Math.sin(theta);
+			s = Math.sin(theta);
 		this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	makeRotationY(theta) {
 		const c = Math.cos(theta),
-					s = Math.sin(theta);
+			s = Math.sin(theta);
 		this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	makeRotationZ(theta) {
 		const c = Math.cos(theta),
-					s = Math.sin(theta);
+			s = Math.sin(theta);
 		this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	makeRotationAxis(axis, angle) {
 		// Based on http://www.gamedev.net/reference/articles/article1199.asp
+
 		const c = Math.cos(angle);
 		const s = Math.sin(angle);
 		const t = 1 - c;
 		const x = axis.x,
-					y = axis.y,
-					z = axis.z;
+			y = axis.y,
+			z = axis.z;
 		const tx = t * x,
-					ty = t * y;
+			ty = t * y;
 		this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	makeScale(x, y, z) {
 		this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	makeShear(xy, xz, yx, yz, zx, zy) {
 		this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
 		return this;
 	}
-
 	compose(position, quaternion, scale) {
 		const te = this.elements;
 		const x = quaternion._x,
-					y = quaternion._y,
-					z = quaternion._z,
-					w = quaternion._w;
+			y = quaternion._y,
+			z = quaternion._z,
+			w = quaternion._w;
 		const x2 = x + x,
-					y2 = y + y,
-					z2 = z + z;
+			y2 = y + y,
+			z2 = z + z;
 		const xx = x * x2,
-					xy = x * y2,
-					xz = x * z2;
+			xy = x * y2,
+			xz = x * z2;
 		const yy = y * y2,
-					yz = y * z2,
-					zz = z * z2;
+			yz = y * z2,
+			zz = z * z2;
 		const wx = w * x2,
-					wy = w * y2,
-					wz = w * z2;
+			wy = w * y2,
+			wz = w * z2;
 		const sx = scale.x,
-					sy = scale.y,
-					sz = scale.z;
+			sy = scale.y,
+			sz = scale.z;
 		te[0] = (1 - (yy + zz)) * sx;
 		te[1] = (xy + wz) * sx;
 		te[2] = (xz - wy) * sx;
@@ -5309,25 +4677,21 @@ class Matrix4 {
 		te[15] = 1;
 		return this;
 	}
-
 	decompose(position, quaternion, scale) {
 		const te = this.elements;
-
 		let sx = _v1$5.set(te[0], te[1], te[2]).length();
-
 		const sy = _v1$5.set(te[4], te[5], te[6]).length();
+		const sz = _v1$5.set(te[8], te[9], te[10]).length();
 
-		const sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale
-
-
+		// if determine is negative, we need to invert one scale
 		const det = this.determinant();
 		if (det < 0) sx = -sx;
 		position.x = te[12];
 		position.y = te[13];
-		position.z = te[14]; // scale the rotation part
+		position.z = te[14];
 
+		// scale the rotation part
 		_m1$2.copy(this);
-
 		const invSX = 1 / sx;
 		const invSY = 1 / sy;
 		const invSZ = 1 / sz;
@@ -5346,7 +4710,6 @@ class Matrix4 {
 		scale.z = sz;
 		return this;
 	}
-
 	makePerspective(left, right, top, bottom, near, far) {
 		const te = this.elements;
 		const x = 2 * near / (right - left);
@@ -5373,7 +4736,6 @@ class Matrix4 {
 		te[15] = 0;
 		return this;
 	}
-
 	makeOrthographic(left, right, top, bottom, near, far) {
 		const te = this.elements;
 		const w = 1.0 / (right - left);
@@ -5400,26 +4762,20 @@ class Matrix4 {
 		te[15] = 1;
 		return this;
 	}
-
 	equals(matrix) {
 		const te = this.elements;
 		const me = matrix.elements;
-
 		for (let i = 0; i < 16; i++) {
 			if (te[i] !== me[i]) return false;
 		}
-
 		return true;
 	}
-
 	fromArray(array, offset = 0) {
 		for (let i = 0; i < 16; i++) {
 			this.elements[i] = array[i + offset];
 		}
-
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		const te = this.elements;
 		array[offset] = te[0];
@@ -5440,27 +4796,17 @@ class Matrix4 {
 		array[offset + 15] = te[15];
 		return array;
 	}
-
 }
-
 const _v1$5 = /*@__PURE__*/new Vector3();
-
 const _m1$2 = /*@__PURE__*/new Matrix4();
-
 const _zero = /*@__PURE__*/new Vector3(0, 0, 0);
-
 const _one = /*@__PURE__*/new Vector3(1, 1, 1);
-
 const _x = /*@__PURE__*/new Vector3();
-
 const _y = /*@__PURE__*/new Vector3();
-
 const _z = /*@__PURE__*/new Vector3();
 
 const _matrix$1 = /*@__PURE__*/new Matrix4();
-
 const _quaternion$3 = /*@__PURE__*/new Quaternion();
-
 class Euler {
 	constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {
 		this.isEuler = true;
@@ -5469,90 +4815,69 @@ class Euler {
 		this._z = z;
 		this._order = order;
 	}
-
 	get x() {
 		return this._x;
 	}
-
 	set x(value) {
 		this._x = value;
-
 		this._onChangeCallback();
 	}
-
 	get y() {
 		return this._y;
 	}
-
 	set y(value) {
 		this._y = value;
-
 		this._onChangeCallback();
 	}
-
 	get z() {
 		return this._z;
 	}
-
 	set z(value) {
 		this._z = value;
-
 		this._onChangeCallback();
 	}
-
 	get order() {
 		return this._order;
 	}
-
 	set order(value) {
 		this._order = value;
-
 		this._onChangeCallback();
 	}
-
 	set(x, y, z, order = this._order) {
 		this._x = x;
 		this._y = y;
 		this._z = z;
 		this._order = order;
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	clone() {
 		return new this.constructor(this._x, this._y, this._z, this._order);
 	}
-
 	copy(euler) {
 		this._x = euler._x;
 		this._y = euler._y;
 		this._z = euler._z;
 		this._order = euler._order;
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	setFromRotationMatrix(m, order = this._order, update = true) {
 		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
+
 		const te = m.elements;
 		const m11 = te[0],
-					m12 = te[4],
-					m13 = te[8];
+			m12 = te[4],
+			m13 = te[8];
 		const m21 = te[1],
-					m22 = te[5],
-					m23 = te[9];
+			m22 = te[5],
+			m23 = te[9];
 		const m31 = te[2],
-					m32 = te[6],
-					m33 = te[10];
-
+			m32 = te[6],
+			m33 = te[10];
 		switch (order) {
 			case 'XYZ':
 				this._y = Math.asin(clamp(m13, -1, 1));
-
 				if (Math.abs(m13) < 0.9999999) {
 					this._x = Math.atan2(-m23, m33);
 					this._z = Math.atan2(-m12, m11);
@@ -5560,12 +4885,9 @@ class Euler {
 					this._x = Math.atan2(m32, m22);
 					this._z = 0;
 				}
-
 				break;
-
 			case 'YXZ':
 				this._x = Math.asin(-clamp(m23, -1, 1));
-
 				if (Math.abs(m23) < 0.9999999) {
 					this._y = Math.atan2(m13, m33);
 					this._z = Math.atan2(m21, m22);
@@ -5573,12 +4895,9 @@ class Euler {
 					this._y = Math.atan2(-m31, m11);
 					this._z = 0;
 				}
-
 				break;
-
 			case 'ZXY':
 				this._x = Math.asin(clamp(m32, -1, 1));
-
 				if (Math.abs(m32) < 0.9999999) {
 					this._y = Math.atan2(-m31, m33);
 					this._z = Math.atan2(-m12, m22);
@@ -5586,12 +4905,9 @@ class Euler {
 					this._y = 0;
 					this._z = Math.atan2(m21, m11);
 				}
-
 				break;
-
 			case 'ZYX':
 				this._y = Math.asin(-clamp(m31, -1, 1));
-
 				if (Math.abs(m31) < 0.9999999) {
 					this._x = Math.atan2(m32, m33);
 					this._z = Math.atan2(m21, m11);
@@ -5599,12 +4915,9 @@ class Euler {
 					this._x = 0;
 					this._z = Math.atan2(-m12, m22);
 				}
-
 				break;
-
 			case 'YZX':
 				this._z = Math.asin(clamp(m21, -1, 1));
-
 				if (Math.abs(m21) < 0.9999999) {
 					this._x = Math.atan2(-m23, m22);
 					this._y = Math.atan2(-m31, m11);
@@ -5612,12 +4925,9 @@ class Euler {
 					this._x = 0;
 					this._y = Math.atan2(m13, m33);
 				}
-
 				break;
-
 			case 'XZY':
 				this._z = Math.asin(-clamp(m12, -1, 1));
-
 				if (Math.abs(m12) < 0.9999999) {
 					this._x = Math.atan2(m32, m22);
 					this._y = Math.atan2(m13, m11);
@@ -5625,50 +4935,38 @@ class Euler {
 					this._x = Math.atan2(-m23, m33);
 					this._y = 0;
 				}
-
 				break;
-
 			default:
 				console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);
 		}
-
 		this._order = order;
 		if (update === true) this._onChangeCallback();
 		return this;
 	}
-
 	setFromQuaternion(q, order, update) {
 		_matrix$1.makeRotationFromQuaternion(q);
-
 		return this.setFromRotationMatrix(_matrix$1, order, update);
 	}
-
 	setFromVector3(v, order = this._order) {
 		return this.set(v.x, v.y, v.z, order);
 	}
-
 	reorder(newOrder) {
 		// WARNING: this discards revolution information -bhouston
-		_quaternion$3.setFromEuler(this);
 
+		_quaternion$3.setFromEuler(this);
 		return this.setFromQuaternion(_quaternion$3, newOrder);
 	}
-
 	equals(euler) {
 		return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
 	}
-
 	fromArray(array) {
 		this._x = array[0];
 		this._y = array[1];
 		this._z = array[2];
 		if (array[3] !== undefined) this._order = array[3];
-
 		this._onChangeCallback();
-
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		array[offset] = this._x;
 		array[offset + 1] = this._y;
@@ -5676,28 +4974,24 @@ class Euler {
 		array[offset + 3] = this._order;
 		return array;
 	}
-
 	_onChange(callback) {
 		this._onChangeCallback = callback;
 		return this;
 	}
-
 	_onChangeCallback() {}
-
 	*[Symbol.iterator]() {
 		yield this._x;
 		yield this._y;
 		yield this._z;
 		yield this._order;
-	} // @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53
+	}
 
+	// @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53
 
 	toVector3() {
 		console.error('THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead');
 	}
-
 }
-
 Euler.DefaultOrder = 'XYZ';
 Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];
 
@@ -5705,70 +4999,49 @@ class Layers {
 	constructor() {
 		this.mask = 1 | 0;
 	}
-
 	set(channel) {
 		this.mask = (1 << channel | 0) >>> 0;
 	}
-
 	enable(channel) {
 		this.mask |= 1 << channel | 0;
 	}
-
 	enableAll() {
 		this.mask = 0xffffffff | 0;
 	}
-
 	toggle(channel) {
 		this.mask ^= 1 << channel | 0;
 	}
-
 	disable(channel) {
 		this.mask &= ~(1 << channel | 0);
 	}
-
 	disableAll() {
 		this.mask = 0;
 	}
-
 	test(layers) {
 		return (this.mask & layers.mask) !== 0;
 	}
-
 	isEnabled(channel) {
 		return (this.mask & (1 << channel | 0)) !== 0;
 	}
-
 }
 
 let _object3DId = 0;
-
 const _v1$4 = /*@__PURE__*/new Vector3();
-
 const _q1 = /*@__PURE__*/new Quaternion();
-
 const _m1$1 = /*@__PURE__*/new Matrix4();
-
 const _target = /*@__PURE__*/new Vector3();
-
 const _position$3 = /*@__PURE__*/new Vector3();
-
 const _scale$2 = /*@__PURE__*/new Vector3();
-
 const _quaternion$2 = /*@__PURE__*/new Quaternion();
-
 const _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);
-
 const _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);
-
 const _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);
-
 const _addedEvent = {
 	type: 'added'
 };
 const _removedEvent = {
 	type: 'removed'
 };
-
 class Object3D extends EventDispatcher {
 	constructor() {
 		super();
@@ -5786,19 +5059,14 @@ class Object3D extends EventDispatcher {
 		const rotation = new Euler();
 		const quaternion = new Quaternion();
 		const scale = new Vector3(1, 1, 1);
-
 		function onRotationChange() {
 			quaternion.setFromEuler(rotation, false);
 		}
-
 		function onQuaternionChange() {
 			rotation.setFromQuaternion(quaternion, undefined, false);
 		}
-
 		rotation._onChange(onRotationChange);
-
 		quaternion._onChange(onQuaternionChange);
-
 		Object.defineProperties(this, {
 			position: {
 				configurable: true,
@@ -5842,363 +5110,294 @@ class Object3D extends EventDispatcher {
 		this.animations = [];
 		this.userData = {};
 	}
-
 	onBeforeRender() {}
-
 	onAfterRender() {}
-
 	applyMatrix4(matrix) {
 		if (this.matrixAutoUpdate) this.updateMatrix();
 		this.matrix.premultiply(matrix);
 		this.matrix.decompose(this.position, this.quaternion, this.scale);
 	}
-
 	applyQuaternion(q) {
 		this.quaternion.premultiply(q);
 		return this;
 	}
-
 	setRotationFromAxisAngle(axis, angle) {
 		// assumes axis is normalized
+
 		this.quaternion.setFromAxisAngle(axis, angle);
 	}
-
 	setRotationFromEuler(euler) {
 		this.quaternion.setFromEuler(euler, true);
 	}
-
 	setRotationFromMatrix(m) {
 		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
+
 		this.quaternion.setFromRotationMatrix(m);
 	}
-
 	setRotationFromQuaternion(q) {
 		// assumes q is normalized
+
 		this.quaternion.copy(q);
 	}
-
 	rotateOnAxis(axis, angle) {
 		// rotate object on axis in object space
 		// axis is assumed to be normalized
-		_q1.setFromAxisAngle(axis, angle);
 
+		_q1.setFromAxisAngle(axis, angle);
 		this.quaternion.multiply(_q1);
 		return this;
 	}
-
 	rotateOnWorldAxis(axis, angle) {
 		// rotate object on axis in world space
 		// axis is assumed to be normalized
 		// method assumes no rotated parent
-		_q1.setFromAxisAngle(axis, angle);
 
+		_q1.setFromAxisAngle(axis, angle);
 		this.quaternion.premultiply(_q1);
 		return this;
 	}
-
 	rotateX(angle) {
 		return this.rotateOnAxis(_xAxis, angle);
 	}
-
 	rotateY(angle) {
 		return this.rotateOnAxis(_yAxis, angle);
 	}
-
 	rotateZ(angle) {
 		return this.rotateOnAxis(_zAxis, angle);
 	}
-
 	translateOnAxis(axis, distance) {
 		// translate object by distance along axis in object space
 		// axis is assumed to be normalized
-		_v1$4.copy(axis).applyQuaternion(this.quaternion);
 
+		_v1$4.copy(axis).applyQuaternion(this.quaternion);
 		this.position.add(_v1$4.multiplyScalar(distance));
 		return this;
 	}
-
 	translateX(distance) {
 		return this.translateOnAxis(_xAxis, distance);
 	}
-
 	translateY(distance) {
 		return this.translateOnAxis(_yAxis, distance);
 	}
-
 	translateZ(distance) {
 		return this.translateOnAxis(_zAxis, distance);
 	}
-
 	localToWorld(vector) {
 		return vector.applyMatrix4(this.matrixWorld);
 	}
-
 	worldToLocal(vector) {
 		return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
 	}
-
 	lookAt(x, y, z) {
 		// This method does not support objects having non-uniformly-scaled parent(s)
+
 		if (x.isVector3) {
 			_target.copy(x);
 		} else {
 			_target.set(x, y, z);
 		}
-
 		const parent = this.parent;
 		this.updateWorldMatrix(true, false);
-
 		_position$3.setFromMatrixPosition(this.matrixWorld);
-
 		if (this.isCamera || this.isLight) {
 			_m1$1.lookAt(_position$3, _target, this.up);
 		} else {
 			_m1$1.lookAt(_target, _position$3, this.up);
 		}
-
 		this.quaternion.setFromRotationMatrix(_m1$1);
-
 		if (parent) {
 			_m1$1.extractRotation(parent.matrixWorld);
-
 			_q1.setFromRotationMatrix(_m1$1);
-
 			this.quaternion.premultiply(_q1.invert());
 		}
 	}
-
 	add(object) {
 		if (arguments.length > 1) {
 			for (let i = 0; i < arguments.length; i++) {
 				this.add(arguments[i]);
 			}
-
 			return this;
 		}
-
 		if (object === this) {
 			console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object);
 			return this;
 		}
-
 		if (object && object.isObject3D) {
 			if (object.parent !== null) {
 				object.parent.remove(object);
 			}
-
 			object.parent = this;
 			this.children.push(object);
 			object.dispatchEvent(_addedEvent);
 		} else {
 			console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);
 		}
-
 		return this;
 	}
-
 	remove(object) {
 		if (arguments.length > 1) {
 			for (let i = 0; i < arguments.length; i++) {
 				this.remove(arguments[i]);
 			}
-
 			return this;
 		}
-
 		const index = this.children.indexOf(object);
-
 		if (index !== -1) {
 			object.parent = null;
 			this.children.splice(index, 1);
 			object.dispatchEvent(_removedEvent);
 		}
-
 		return this;
 	}
-
 	removeFromParent() {
 		const parent = this.parent;
-
 		if (parent !== null) {
 			parent.remove(this);
 		}
-
 		return this;
 	}
-
 	clear() {
 		for (let i = 0; i < this.children.length; i++) {
 			const object = this.children[i];
 			object.parent = null;
 			object.dispatchEvent(_removedEvent);
 		}
-
 		this.children.length = 0;
 		return this;
 	}
-
 	attach(object) {
 		// adds object as a child of this, while maintaining the object's world transform
+
 		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
-		this.updateWorldMatrix(true, false);
 
+		this.updateWorldMatrix(true, false);
 		_m1$1.copy(this.matrixWorld).invert();
-
 		if (object.parent !== null) {
 			object.parent.updateWorldMatrix(true, false);
-
 			_m1$1.multiply(object.parent.matrixWorld);
 		}
-
 		object.applyMatrix4(_m1$1);
 		this.add(object);
 		object.updateWorldMatrix(false, true);
 		return this;
 	}
-
 	getObjectById(id) {
 		return this.getObjectByProperty('id', id);
 	}
-
 	getObjectByName(name) {
 		return this.getObjectByProperty('name', name);
 	}
-
 	getObjectByProperty(name, value) {
 		if (this[name] === value) return this;
-
 		for (let i = 0, l = this.children.length; i < l; i++) {
 			const child = this.children[i];
 			const object = child.getObjectByProperty(name, value);
-
 			if (object !== undefined) {
 				return object;
 			}
 		}
-
 		return undefined;
 	}
-
 	getWorldPosition(target) {
 		this.updateWorldMatrix(true, false);
 		return target.setFromMatrixPosition(this.matrixWorld);
 	}
-
 	getWorldQuaternion(target) {
 		this.updateWorldMatrix(true, false);
 		this.matrixWorld.decompose(_position$3, target, _scale$2);
 		return target;
 	}
-
 	getWorldScale(target) {
 		this.updateWorldMatrix(true, false);
 		this.matrixWorld.decompose(_position$3, _quaternion$2, target);
 		return target;
 	}
-
 	getWorldDirection(target) {
 		this.updateWorldMatrix(true, false);
 		const e = this.matrixWorld.elements;
 		return target.set(e[8], e[9], e[10]).normalize();
 	}
-
 	raycast() {}
-
 	traverse(callback) {
 		callback(this);
 		const children = this.children;
-
 		for (let i = 0, l = children.length; i < l; i++) {
 			children[i].traverse(callback);
 		}
 	}
-
 	traverseVisible(callback) {
 		if (this.visible === false) return;
 		callback(this);
 		const children = this.children;
-
 		for (let i = 0, l = children.length; i < l; i++) {
 			children[i].traverseVisible(callback);
 		}
 	}
-
 	traverseAncestors(callback) {
 		const parent = this.parent;
-
 		if (parent !== null) {
 			callback(parent);
 			parent.traverseAncestors(callback);
 		}
 	}
-
 	updateMatrix() {
 		this.matrix.compose(this.position, this.quaternion, this.scale);
 		this.matrixWorldNeedsUpdate = true;
 	}
-
 	updateMatrixWorld(force) {
 		if (this.matrixAutoUpdate) this.updateMatrix();
-
 		if (this.matrixWorldNeedsUpdate || force) {
 			if (this.parent === null) {
 				this.matrixWorld.copy(this.matrix);
 			} else {
 				this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
 			}
-
 			this.matrixWorldNeedsUpdate = false;
 			force = true;
-		} // update children
+		}
 
+		// update children
 
 		const children = this.children;
-
 		for (let i = 0, l = children.length; i < l; i++) {
 			const child = children[i];
-
 			if (child.matrixWorldAutoUpdate === true || force === true) {
 				child.updateMatrixWorld(force);
 			}
 		}
 	}
-
 	updateWorldMatrix(updateParents, updateChildren) {
 		const parent = this.parent;
-
 		if (updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true) {
 			parent.updateWorldMatrix(true, false);
 		}
-
 		if (this.matrixAutoUpdate) this.updateMatrix();
-
 		if (this.parent === null) {
 			this.matrixWorld.copy(this.matrix);
 		} else {
 			this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
-		} // update children
+		}
 
+		// update children
 
 		if (updateChildren === true) {
 			const children = this.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				const child = children[i];
-
 				if (child.matrixWorldAutoUpdate === true) {
 					child.updateWorldMatrix(false, true);
 				}
 			}
 		}
 	}
-
 	toJSON(meta) {
 		// meta is a string when called from JSON.stringify
 		const isRootObject = meta === undefined || typeof meta === 'string';
-		const output = {}; // meta is a hash used to collect geometries, materials.
+		const output = {};
+
+		// meta is a hash used to collect geometries, materials.
 		// not providing it implies that this is the root object
 		// being serialized.
-
 		if (isRootObject) {
 			// initialize meta obj
 			meta = {
@@ -6216,8 +5415,9 @@ class Object3D extends EventDispatcher {
 				type: 'Object',
 				generator: 'Object3D.toJSON'
 			};
-		} // standard Object3D serialization
+		}
 
+		// standard Object3D serialization
 
 		const object = {};
 		object.uuid = this.uuid;
@@ -6231,24 +5431,25 @@ class Object3D extends EventDispatcher {
 		if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
 		object.layers = this.layers.mask;
 		object.matrix = this.matrix.toArray();
-		if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties
+		if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
+
+		// object specific properties
 
 		if (this.isInstancedMesh) {
 			object.type = 'InstancedMesh';
 			object.count = this.count;
 			object.instanceMatrix = this.instanceMatrix.toJSON();
 			if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
-		} //
+		}
 
+		//
 
 		function serialize(library, element) {
 			if (library[element.uuid] === undefined) {
 				library[element.uuid] = element.toJSON(meta);
 			}
-
 			return element.uuid;
 		}
-
 		if (this.isScene) {
 			if (this.background) {
 				if (this.background.isColor) {
@@ -6257,17 +5458,14 @@ class Object3D extends EventDispatcher {
 					object.background = this.background.toJSON(meta).uuid;
 				}
 			}
-
 			if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
 				object.environment = this.environment.toJSON(meta).uuid;
 			}
 		} else if (this.isMesh || this.isLine || this.isPoints) {
 			object.geometry = serialize(meta.geometries, this.geometry);
 			const parameters = this.geometry.parameters;
-
 			if (parameters !== undefined && parameters.shapes !== undefined) {
 				const shapes = parameters.shapes;
-
 				if (Array.isArray(shapes)) {
 					for (let i = 0, l = shapes.length; i < l; i++) {
 						const shape = shapes[i];
@@ -6278,50 +5476,44 @@ class Object3D extends EventDispatcher {
 				}
 			}
 		}
-
 		if (this.isSkinnedMesh) {
 			object.bindMode = this.bindMode;
 			object.bindMatrix = this.bindMatrix.toArray();
-
 			if (this.skeleton !== undefined) {
 				serialize(meta.skeletons, this.skeleton);
 				object.skeleton = this.skeleton.uuid;
 			}
 		}
-
 		if (this.material !== undefined) {
 			if (Array.isArray(this.material)) {
 				const uuids = [];
-
 				for (let i = 0, l = this.material.length; i < l; i++) {
 					uuids.push(serialize(meta.materials, this.material[i]));
 				}
-
 				object.material = uuids;
 			} else {
 				object.material = serialize(meta.materials, this.material);
 			}
-		} //
+		}
 
+		//
 
 		if (this.children.length > 0) {
 			object.children = [];
-
 			for (let i = 0; i < this.children.length; i++) {
 				object.children.push(this.children[i].toJSON(meta).object);
 			}
-		} //
+		}
 
+		//
 
 		if (this.animations.length > 0) {
 			object.animations = [];
-
 			for (let i = 0; i < this.animations.length; i++) {
 				const animation = this.animations[i];
 				object.animations.push(serialize(meta.animations, animation));
 			}
 		}
-
 		if (isRootObject) {
 			const geometries = extractFromCache(meta.geometries);
 			const materials = extractFromCache(meta.materials);
@@ -6340,29 +5532,25 @@ class Object3D extends EventDispatcher {
 			if (animations.length > 0) output.animations = animations;
 			if (nodes.length > 0) output.nodes = nodes;
 		}
-
 		output.object = object;
-		return output; // extract data from the cache hash
+		return output;
+
+		// extract data from the cache hash
 		// remove metadata on each item
 		// and return as array
-
 		function extractFromCache(cache) {
 			const values = [];
-
 			for (const key in cache) {
 				const data = cache[key];
 				delete data.metadata;
 				values.push(data);
 			}
-
 			return values;
 		}
 	}
-
 	clone(recursive) {
 		return new this.constructor().copy(this, recursive);
 	}
-
 	copy(source, recursive = true) {
 		this.name = source.name;
 		this.up.copy(source.up);
@@ -6382,104 +5570,76 @@ class Object3D extends EventDispatcher {
 		this.frustumCulled = source.frustumCulled;
 		this.renderOrder = source.renderOrder;
 		this.userData = JSON.parse(JSON.stringify(source.userData));
-
 		if (recursive === true) {
 			for (let i = 0; i < source.children.length; i++) {
 				const child = source.children[i];
 				this.add(child.clone());
 			}
 		}
-
 		return this;
 	}
-
 }
-
 Object3D.DefaultUp = /*@__PURE__*/new Vector3(0, 1, 0);
 Object3D.DefaultMatrixAutoUpdate = true;
 Object3D.DefaultMatrixWorldAutoUpdate = true;
 
 const _v0$1 = /*@__PURE__*/new Vector3();
-
 const _v1$3 = /*@__PURE__*/new Vector3();
-
 const _v2$2 = /*@__PURE__*/new Vector3();
-
 const _v3$1 = /*@__PURE__*/new Vector3();
-
 const _vab = /*@__PURE__*/new Vector3();
-
 const _vac = /*@__PURE__*/new Vector3();
-
 const _vbc = /*@__PURE__*/new Vector3();
-
 const _vap = /*@__PURE__*/new Vector3();
-
 const _vbp = /*@__PURE__*/new Vector3();
-
 const _vcp = /*@__PURE__*/new Vector3();
-
 class Triangle {
 	constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
 		this.a = a;
 		this.b = b;
 		this.c = c;
 	}
-
 	static getNormal(a, b, c, target) {
 		target.subVectors(c, b);
-
 		_v0$1.subVectors(a, b);
-
 		target.cross(_v0$1);
 		const targetLengthSq = target.lengthSq();
-
 		if (targetLengthSq > 0) {
 			return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
 		}
-
 		return target.set(0, 0, 0);
-	} // static/instance method to calculate barycentric coordinates
-	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
-
+	}
 
+	// static/instance method to calculate barycentric coordinates
+	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
 	static getBarycoord(point, a, b, c, target) {
 		_v0$1.subVectors(c, a);
-
 		_v1$3.subVectors(b, a);
-
 		_v2$2.subVectors(point, a);
-
 		const dot00 = _v0$1.dot(_v0$1);
-
 		const dot01 = _v0$1.dot(_v1$3);
-
 		const dot02 = _v0$1.dot(_v2$2);
-
 		const dot11 = _v1$3.dot(_v1$3);
-
 		const dot12 = _v1$3.dot(_v2$2);
+		const denom = dot00 * dot11 - dot01 * dot01;
 
-		const denom = dot00 * dot11 - dot01 * dot01; // collinear or singular triangle
-
+		// collinear or singular triangle
 		if (denom === 0) {
 			// arbitrary location outside of triangle?
 			// not sure if this is the best idea, maybe should be returning undefined
 			return target.set(-2, -1, -1);
 		}
-
 		const invDenom = 1 / denom;
 		const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
-		const v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1
+		const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
 
+		// barycentric coordinates must always sum to 1
 		return target.set(1 - u - v, v, u);
 	}
-
 	static containsPoint(point, a, b, c) {
 		this.getBarycoord(point, a, b, c, _v3$1);
 		return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
 	}
-
 	static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
 		this.getBarycoord(point, p1, p2, p3, _v3$1);
 		target.set(0, 0);
@@ -6488,177 +5648,137 @@ class Triangle {
 		target.addScaledVector(uv3, _v3$1.z);
 		return target;
 	}
-
 	static isFrontFacing(a, b, c, direction) {
 		_v0$1.subVectors(c, b);
+		_v1$3.subVectors(a, b);
 
-		_v1$3.subVectors(a, b); // strictly front facing
-
-
+		// strictly front facing
 		return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
 	}
-
 	set(a, b, c) {
 		this.a.copy(a);
 		this.b.copy(b);
 		this.c.copy(c);
 		return this;
 	}
-
 	setFromPointsAndIndices(points, i0, i1, i2) {
 		this.a.copy(points[i0]);
 		this.b.copy(points[i1]);
 		this.c.copy(points[i2]);
 		return this;
 	}
-
 	setFromAttributeAndIndices(attribute, i0, i1, i2) {
 		this.a.fromBufferAttribute(attribute, i0);
 		this.b.fromBufferAttribute(attribute, i1);
 		this.c.fromBufferAttribute(attribute, i2);
 		return this;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	copy(triangle) {
 		this.a.copy(triangle.a);
 		this.b.copy(triangle.b);
 		this.c.copy(triangle.c);
 		return this;
 	}
-
 	getArea() {
 		_v0$1.subVectors(this.c, this.b);
-
 		_v1$3.subVectors(this.a, this.b);
-
 		return _v0$1.cross(_v1$3).length() * 0.5;
 	}
-
 	getMidpoint(target) {
 		return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
 	}
-
 	getNormal(target) {
 		return Triangle.getNormal(this.a, this.b, this.c, target);
 	}
-
 	getPlane(target) {
 		return target.setFromCoplanarPoints(this.a, this.b, this.c);
 	}
-
 	getBarycoord(point, target) {
 		return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
 	}
-
 	getUV(point, uv1, uv2, uv3, target) {
 		return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
 	}
-
 	containsPoint(point) {
 		return Triangle.containsPoint(point, this.a, this.b, this.c);
 	}
-
 	isFrontFacing(direction) {
 		return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
 	}
-
 	intersectsBox(box) {
 		return box.intersectsTriangle(this);
 	}
-
 	closestPointToPoint(p, target) {
 		const a = this.a,
-					b = this.b,
-					c = this.c;
-		let v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
+			b = this.b,
+			c = this.c;
+		let v, w;
+
+		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
 		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
 		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
 		// basically, we're distinguishing which of the voronoi regions of the triangle
 		// the point lies in with the minimum amount of redundant computation.
 
 		_vab.subVectors(b, a);
-
 		_vac.subVectors(c, a);
-
 		_vap.subVectors(p, a);
-
 		const d1 = _vab.dot(_vap);
-
 		const d2 = _vac.dot(_vap);
-
 		if (d1 <= 0 && d2 <= 0) {
 			// vertex region of A; barycentric coords (1, 0, 0)
 			return target.copy(a);
 		}
-
 		_vbp.subVectors(p, b);
-
 		const d3 = _vab.dot(_vbp);
-
 		const d4 = _vac.dot(_vbp);
-
 		if (d3 >= 0 && d4 <= d3) {
 			// vertex region of B; barycentric coords (0, 1, 0)
 			return target.copy(b);
 		}
-
 		const vc = d1 * d4 - d3 * d2;
-
 		if (vc <= 0 && d1 >= 0 && d3 <= 0) {
-			v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)
-
+			v = d1 / (d1 - d3);
+			// edge region of AB; barycentric coords (1-v, v, 0)
 			return target.copy(a).addScaledVector(_vab, v);
 		}
-
 		_vcp.subVectors(p, c);
-
 		const d5 = _vab.dot(_vcp);
-
 		const d6 = _vac.dot(_vcp);
-
 		if (d6 >= 0 && d5 <= d6) {
 			// vertex region of C; barycentric coords (0, 0, 1)
 			return target.copy(c);
 		}
-
 		const vb = d5 * d2 - d1 * d6;
-
 		if (vb <= 0 && d2 >= 0 && d6 <= 0) {
-			w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)
-
+			w = d2 / (d2 - d6);
+			// edge region of AC; barycentric coords (1-w, 0, w)
 			return target.copy(a).addScaledVector(_vac, w);
 		}
-
 		const va = d3 * d6 - d5 * d4;
-
 		if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
 			_vbc.subVectors(c, b);
-
-			w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)
-
+			w = (d4 - d3) / (d4 - d3 + (d5 - d6));
+			// edge region of BC; barycentric coords (0, 1-w, w)
 			return target.copy(b).addScaledVector(_vbc, w); // edge region of BC
-		} // face region
-
-
-		const denom = 1 / (va + vb + vc); // u = va * denom
+		}
 
+		// face region
+		const denom = 1 / (va + vb + vc);
+		// u = va * denom
 		v = vb * denom;
 		w = vc * denom;
 		return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
 	}
-
 	equals(triangle) {
 		return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
 	}
-
 }
 
 let materialId = 0;
-
 class Material extends EventDispatcher {
 	constructor() {
 		super();
@@ -6710,47 +5830,34 @@ class Material extends EventDispatcher {
 		this.version = 0;
 		this._alphaTest = 0;
 	}
-
 	get alphaTest() {
 		return this._alphaTest;
 	}
-
 	set alphaTest(value) {
 		if (this._alphaTest > 0 !== value > 0) {
 			this.version++;
 		}
-
 		this._alphaTest = value;
 	}
-
 	onBuild() {}
-
 	onBeforeRender() {}
-
 	onBeforeCompile() {}
-
 	customProgramCacheKey() {
 		return this.onBeforeCompile.toString();
 	}
-
 	setValues(values) {
 		if (values === undefined) return;
-
 		for (const key in values) {
 			const newValue = values[key];
-
 			if (newValue === undefined) {
 				console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
 				continue;
 			}
-
 			const currentValue = this[key];
-
 			if (currentValue === undefined) {
 				console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
 				continue;
 			}
-
 			if (currentValue && currentValue.isColor) {
 				currentValue.set(newValue);
 			} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {
@@ -6760,25 +5867,23 @@ class Material extends EventDispatcher {
 			}
 		}
 	}
-
 	toJSON(meta) {
 		const isRootObject = meta === undefined || typeof meta === 'string';
-
 		if (isRootObject) {
 			meta = {
 				textures: {},
 				images: {}
 			};
 		}
-
 		const data = {
 			metadata: {
 				version: 4.5,
 				type: 'Material',
 				generator: 'Material.toJSON'
 			}
-		}; // standard Material serialization
+		};
 
+		// standard Material serialization
 		data.uuid = this.uuid;
 		data.type = this.type;
 		if (this.name !== '') data.name = this.name;
@@ -6796,83 +5901,66 @@ class Material extends EventDispatcher {
 		if (this.shininess !== undefined) data.shininess = this.shininess;
 		if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
 		if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;
-
 		if (this.clearcoatMap && this.clearcoatMap.isTexture) {
 			data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
 		}
-
 		if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
 			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
 		}
-
 		if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
 			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
 			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
 		}
-
 		if (this.iridescence !== undefined) data.iridescence = this.iridescence;
 		if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;
 		if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
-
 		if (this.iridescenceMap && this.iridescenceMap.isTexture) {
 			data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
 		}
-
 		if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
 			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
 		}
-
 		if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
 		if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
 		if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
-
 		if (this.lightMap && this.lightMap.isTexture) {
 			data.lightMap = this.lightMap.toJSON(meta).uuid;
 			data.lightMapIntensity = this.lightMapIntensity;
 		}
-
 		if (this.aoMap && this.aoMap.isTexture) {
 			data.aoMap = this.aoMap.toJSON(meta).uuid;
 			data.aoMapIntensity = this.aoMapIntensity;
 		}
-
 		if (this.bumpMap && this.bumpMap.isTexture) {
 			data.bumpMap = this.bumpMap.toJSON(meta).uuid;
 			data.bumpScale = this.bumpScale;
 		}
-
 		if (this.normalMap && this.normalMap.isTexture) {
 			data.normalMap = this.normalMap.toJSON(meta).uuid;
 			data.normalMapType = this.normalMapType;
 			data.normalScale = this.normalScale.toArray();
 		}
-
 		if (this.displacementMap && this.displacementMap.isTexture) {
 			data.displacementMap = this.displacementMap.toJSON(meta).uuid;
 			data.displacementScale = this.displacementScale;
 			data.displacementBias = this.displacementBias;
 		}
-
 		if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
 		if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
 		if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
 		if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
 		if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
 		if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
-
 		if (this.envMap && this.envMap.isTexture) {
 			data.envMap = this.envMap.toJSON(meta).uuid;
 			if (this.combine !== undefined) data.combine = this.combine;
 		}
-
 		if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
 		if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
 		if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;
-
 		if (this.gradientMap && this.gradientMap.isTexture) {
 			data.gradientMap = this.gradientMap.toJSON(meta).uuid;
 		}
-
 		if (this.transmission !== undefined) data.transmission = this.transmission;
 		if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
 		if (this.thickness !== undefined) data.thickness = this.thickness;
@@ -6898,8 +5986,9 @@ class Material extends EventDispatcher {
 		data.stencilFuncMask = this.stencilFuncMask;
 		data.stencilFail = this.stencilFail;
 		data.stencilZFail = this.stencilZFail;
-		data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)
+		data.stencilZPass = this.stencilZPass;
 
+		// rotation (SpriteMaterial)
 		if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;
 		if (this.polygonOffset === true) data.polygonOffset = true;
 		if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
@@ -6920,34 +6009,30 @@ class Material extends EventDispatcher {
 		if (this.visible === false) data.visible = false;
 		if (this.toneMapped === false) data.toneMapped = false;
 		if (this.fog === false) data.fog = false;
-		if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON
+		if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;
+
+		// TODO: Copied from Object3D.toJSON
 
 		function extractFromCache(cache) {
 			const values = [];
-
 			for (const key in cache) {
 				const data = cache[key];
 				delete data.metadata;
 				values.push(data);
 			}
-
 			return values;
 		}
-
 		if (isRootObject) {
 			const textures = extractFromCache(meta.textures);
 			const images = extractFromCache(meta.images);
 			if (textures.length > 0) data.textures = textures;
 			if (images.length > 0) data.images = images;
 		}
-
 		return data;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	copy(source) {
 		this.name = source.name;
 		this.blending = source.blending;
@@ -6974,16 +6059,13 @@ class Material extends EventDispatcher {
 		this.stencilWrite = source.stencilWrite;
 		const srcPlanes = source.clippingPlanes;
 		let dstPlanes = null;
-
 		if (srcPlanes !== null) {
 			const n = srcPlanes.length;
 			dstPlanes = new Array(n);
-
 			for (let i = 0; i !== n; ++i) {
 				dstPlanes[i] = srcPlanes[i].clone();
 			}
 		}
-
 		this.clippingPlanes = dstPlanes;
 		this.clipIntersection = source.clipIntersection;
 		this.clipShadows = source.clipShadows;
@@ -7002,17 +6084,14 @@ class Material extends EventDispatcher {
 		this.userData = JSON.parse(JSON.stringify(source.userData));
 		return this;
 	}
-
 	dispose() {
 		this.dispatchEvent({
 			type: 'dispose'
 		});
 	}
-
 	set needsUpdate(value) {
 		if (value === true) this.version++;
 	}
-
 }
 
 class MeshBasicMaterial extends Material {
@@ -7040,7 +6119,6 @@ class MeshBasicMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.color.copy(source.color);
@@ -7062,19 +6140,15 @@ class MeshBasicMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 const _vector$9 = /*@__PURE__*/new Vector3();
-
 const _vector2$1 = /*@__PURE__*/new Vector2();
-
 class BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		if (Array.isArray(array)) {
 			throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
 		}
-
 		this.isBufferAttribute = true;
 		this.name = '';
 		this.array = array;
@@ -7088,18 +6162,14 @@ class BufferAttribute {
 		};
 		this.version = 0;
 	}
-
 	onUploadCallback() {}
-
 	set needsUpdate(value) {
 		if (value === true) this.version++;
 	}
-
 	setUsage(value) {
 		this.usage = value;
 		return this;
 	}
-
 	copy(source) {
 		this.name = source.name;
 		this.array = new source.array.constructor(source.array);
@@ -7109,189 +6179,146 @@ class BufferAttribute {
 		this.usage = source.usage;
 		return this;
 	}
-
 	copyAt(index1, attribute, index2) {
 		index1 *= this.itemSize;
 		index2 *= attribute.itemSize;
-
 		for (let i = 0, l = this.itemSize; i < l; i++) {
 			this.array[index1 + i] = attribute.array[index2 + i];
 		}
-
 		return this;
 	}
-
 	copyArray(array) {
 		this.array.set(array);
 		return this;
 	}
-
 	applyMatrix3(m) {
 		if (this.itemSize === 2) {
 			for (let i = 0, l = this.count; i < l; i++) {
 				_vector2$1.fromBufferAttribute(this, i);
-
 				_vector2$1.applyMatrix3(m);
-
 				this.setXY(i, _vector2$1.x, _vector2$1.y);
 			}
 		} else if (this.itemSize === 3) {
 			for (let i = 0, l = this.count; i < l; i++) {
 				_vector$9.fromBufferAttribute(this, i);
-
 				_vector$9.applyMatrix3(m);
-
 				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
 			}
 		}
-
 		return this;
 	}
-
 	applyMatrix4(m) {
 		for (let i = 0, l = this.count; i < l; i++) {
 			_vector$9.fromBufferAttribute(this, i);
-
 			_vector$9.applyMatrix4(m);
-
 			this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
 		}
-
 		return this;
 	}
-
 	applyNormalMatrix(m) {
 		for (let i = 0, l = this.count; i < l; i++) {
 			_vector$9.fromBufferAttribute(this, i);
-
 			_vector$9.applyNormalMatrix(m);
-
 			this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
 		}
-
 		return this;
 	}
-
 	transformDirection(m) {
 		for (let i = 0, l = this.count; i < l; i++) {
 			_vector$9.fromBufferAttribute(this, i);
-
 			_vector$9.transformDirection(m);
-
 			this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
 		}
-
 		return this;
 	}
-
 	set(value, offset = 0) {
 		// Matching BufferAttribute constructor, do not normalize the array.
 		this.array.set(value, offset);
 		return this;
 	}
-
 	getX(index) {
 		let x = this.array[index * this.itemSize];
 		if (this.normalized) x = denormalize(x, this.array);
 		return x;
 	}
-
 	setX(index, x) {
 		if (this.normalized) x = normalize(x, this.array);
 		this.array[index * this.itemSize] = x;
 		return this;
 	}
-
 	getY(index) {
 		let y = this.array[index * this.itemSize + 1];
 		if (this.normalized) y = denormalize(y, this.array);
 		return y;
 	}
-
 	setY(index, y) {
 		if (this.normalized) y = normalize(y, this.array);
 		this.array[index * this.itemSize + 1] = y;
 		return this;
 	}
-
 	getZ(index) {
 		let z = this.array[index * this.itemSize + 2];
 		if (this.normalized) z = denormalize(z, this.array);
 		return z;
 	}
-
 	setZ(index, z) {
 		if (this.normalized) z = normalize(z, this.array);
 		this.array[index * this.itemSize + 2] = z;
 		return this;
 	}
-
 	getW(index) {
 		let w = this.array[index * this.itemSize + 3];
 		if (this.normalized) w = denormalize(w, this.array);
 		return w;
 	}
-
 	setW(index, w) {
 		if (this.normalized) w = normalize(w, this.array);
 		this.array[index * this.itemSize + 3] = w;
 		return this;
 	}
-
 	setXY(index, x, y) {
 		index *= this.itemSize;
-
 		if (this.normalized) {
 			x = normalize(x, this.array);
 			y = normalize(y, this.array);
 		}
-
 		this.array[index + 0] = x;
 		this.array[index + 1] = y;
 		return this;
 	}
-
 	setXYZ(index, x, y, z) {
 		index *= this.itemSize;
-
 		if (this.normalized) {
 			x = normalize(x, this.array);
 			y = normalize(y, this.array);
 			z = normalize(z, this.array);
 		}
-
 		this.array[index + 0] = x;
 		this.array[index + 1] = y;
 		this.array[index + 2] = z;
 		return this;
 	}
-
 	setXYZW(index, x, y, z, w) {
 		index *= this.itemSize;
-
 		if (this.normalized) {
 			x = normalize(x, this.array);
 			y = normalize(y, this.array);
 			z = normalize(z, this.array);
 			w = normalize(w, this.array);
 		}
-
 		this.array[index + 0] = x;
 		this.array[index + 1] = y;
 		this.array[index + 2] = z;
 		this.array[index + 3] = w;
 		return this;
 	}
-
 	onUpload(callback) {
 		this.onUploadCallback = callback;
 		return this;
 	}
-
 	clone() {
 		return new this.constructor(this.array, this.itemSize).copy(this);
 	}
-
 	toJSON() {
 		const data = {
 			itemSize: this.itemSize,
@@ -7303,113 +6330,85 @@ class BufferAttribute {
 		if (this.usage !== StaticDrawUsage) data.usage = this.usage;
 		if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
 		return data;
-	} // @deprecated
+	}
 
+	// @deprecated
 
 	copyColorsArray() {
 		console.error('THREE.BufferAttribute: copyColorsArray() was removed in r144.');
 	}
-
 	copyVector2sArray() {
 		console.error('THREE.BufferAttribute: copyVector2sArray() was removed in r144.');
 	}
-
 	copyVector3sArray() {
 		console.error('THREE.BufferAttribute: copyVector3sArray() was removed in r144.');
 	}
-
 	copyVector4sArray() {
 		console.error('THREE.BufferAttribute: copyVector4sArray() was removed in r144.');
 	}
+}
 
-} //
-
+//
 
 class Int8BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Int8Array(array), itemSize, normalized);
 	}
-
 }
-
 class Uint8BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Uint8Array(array), itemSize, normalized);
 	}
-
 }
-
 class Uint8ClampedBufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Uint8ClampedArray(array), itemSize, normalized);
 	}
-
 }
-
 class Int16BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Int16Array(array), itemSize, normalized);
 	}
-
 }
-
 class Uint16BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Uint16Array(array), itemSize, normalized);
 	}
-
 }
-
 class Int32BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Int32Array(array), itemSize, normalized);
 	}
-
 }
-
 class Uint32BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Uint32Array(array), itemSize, normalized);
 	}
-
 }
-
 class Float16BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Uint16Array(array), itemSize, normalized);
 		this.isFloat16BufferAttribute = true;
 	}
-
 }
-
 class Float32BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Float32Array(array), itemSize, normalized);
 	}
-
 }
-
 class Float64BufferAttribute extends BufferAttribute {
 	constructor(array, itemSize, normalized) {
 		super(new Float64Array(array), itemSize, normalized);
 	}
-
-} //
+}
 
 let _id$1 = 0;
-
 const _m1 = /*@__PURE__*/new Matrix4();
-
 const _obj = /*@__PURE__*/new Object3D();
-
 const _offset = /*@__PURE__*/new Vector3();
-
 const _box$1 = /*@__PURE__*/new Box3();
-
 const _boxMorphTargets = /*@__PURE__*/new Box3();
-
 const _vector$8 = /*@__PURE__*/new Vector3();
-
 class BufferGeometry extends EventDispatcher {
 	constructor() {
 		super();
@@ -7433,39 +6432,31 @@ class BufferGeometry extends EventDispatcher {
 		};
 		this.userData = {};
 	}
-
 	getIndex() {
 		return this.index;
 	}
-
 	setIndex(index) {
 		if (Array.isArray(index)) {
 			this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
 		} else {
 			this.index = index;
 		}
-
 		return this;
 	}
-
 	getAttribute(name) {
 		return this.attributes[name];
 	}
-
 	setAttribute(name, attribute) {
 		this.attributes[name] = attribute;
 		return this;
 	}
-
 	deleteAttribute(name) {
 		delete this.attributes[name];
 		return this;
 	}
-
 	hasAttribute(name) {
 		return this.attributes[name] !== undefined;
 	}
-
 	addGroup(start, count, materialIndex = 0) {
 		this.groups.push({
 			start: start,
@@ -7473,155 +6464,123 @@ class BufferGeometry extends EventDispatcher {
 			materialIndex: materialIndex
 		});
 	}
-
 	clearGroups() {
 		this.groups = [];
 	}
-
 	setDrawRange(start, count) {
 		this.drawRange.start = start;
 		this.drawRange.count = count;
 	}
-
 	applyMatrix4(matrix) {
 		const position = this.attributes.position;
-
 		if (position !== undefined) {
 			position.applyMatrix4(matrix);
 			position.needsUpdate = true;
 		}
-
 		const normal = this.attributes.normal;
-
 		if (normal !== undefined) {
 			const normalMatrix = new Matrix3().getNormalMatrix(matrix);
 			normal.applyNormalMatrix(normalMatrix);
 			normal.needsUpdate = true;
 		}
-
 		const tangent = this.attributes.tangent;
-
 		if (tangent !== undefined) {
 			tangent.transformDirection(matrix);
 			tangent.needsUpdate = true;
 		}
-
 		if (this.boundingBox !== null) {
 			this.computeBoundingBox();
 		}
-
 		if (this.boundingSphere !== null) {
 			this.computeBoundingSphere();
 		}
-
 		return this;
 	}
-
 	applyQuaternion(q) {
 		_m1.makeRotationFromQuaternion(q);
-
 		this.applyMatrix4(_m1);
 		return this;
 	}
-
 	rotateX(angle) {
 		// rotate geometry around world x-axis
-		_m1.makeRotationX(angle);
 
+		_m1.makeRotationX(angle);
 		this.applyMatrix4(_m1);
 		return this;
 	}
-
 	rotateY(angle) {
 		// rotate geometry around world y-axis
-		_m1.makeRotationY(angle);
 
+		_m1.makeRotationY(angle);
 		this.applyMatrix4(_m1);
 		return this;
 	}
-
 	rotateZ(angle) {
 		// rotate geometry around world z-axis
-		_m1.makeRotationZ(angle);
 
+		_m1.makeRotationZ(angle);
 		this.applyMatrix4(_m1);
 		return this;
 	}
-
 	translate(x, y, z) {
 		// translate geometry
-		_m1.makeTranslation(x, y, z);
 
+		_m1.makeTranslation(x, y, z);
 		this.applyMatrix4(_m1);
 		return this;
 	}
-
 	scale(x, y, z) {
 		// scale geometry
-		_m1.makeScale(x, y, z);
 
+		_m1.makeScale(x, y, z);
 		this.applyMatrix4(_m1);
 		return this;
 	}
-
 	lookAt(vector) {
 		_obj.lookAt(vector);
-
 		_obj.updateMatrix();
-
 		this.applyMatrix4(_obj.matrix);
 		return this;
 	}
-
 	center() {
 		this.computeBoundingBox();
 		this.boundingBox.getCenter(_offset).negate();
 		this.translate(_offset.x, _offset.y, _offset.z);
 		return this;
 	}
-
 	setFromPoints(points) {
 		const position = [];
-
 		for (let i = 0, l = points.length; i < l; i++) {
 			const point = points[i];
 			position.push(point.x, point.y, point.z || 0);
 		}
-
 		this.setAttribute('position', new Float32BufferAttribute(position, 3));
 		return this;
 	}
-
 	computeBoundingBox() {
 		if (this.boundingBox === null) {
 			this.boundingBox = new Box3();
 		}
-
 		const position = this.attributes.position;
 		const morphAttributesPosition = this.morphAttributes.position;
-
 		if (position && position.isGLBufferAttribute) {
 			console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
 			this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));
 			return;
 		}
-
 		if (position !== undefined) {
-			this.boundingBox.setFromBufferAttribute(position); // process morph attributes if present
+			this.boundingBox.setFromBufferAttribute(position);
+
+			// process morph attributes if present
 
 			if (morphAttributesPosition) {
 				for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
 					const morphAttribute = morphAttributesPosition[i];
-
 					_box$1.setFromBufferAttribute(morphAttribute);
-
 					if (this.morphTargetsRelative) {
 						_vector$8.addVectors(this.boundingBox.min, _box$1.min);
-
 						this.boundingBox.expandByPoint(_vector$8);
-
 						_vector$8.addVectors(this.boundingBox.max, _box$1.max);
-
 						this.boundingBox.expandByPoint(_vector$8);
 					} else {
 						this.boundingBox.expandByPoint(_box$1.min);
@@ -7632,133 +6591,111 @@ class BufferGeometry extends EventDispatcher {
 		} else {
 			this.boundingBox.makeEmpty();
 		}
-
 		if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
 			console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
 		}
 	}
-
 	computeBoundingSphere() {
 		if (this.boundingSphere === null) {
 			this.boundingSphere = new Sphere();
 		}
-
 		const position = this.attributes.position;
 		const morphAttributesPosition = this.morphAttributes.position;
-
 		if (position && position.isGLBufferAttribute) {
 			console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
 			this.boundingSphere.set(new Vector3(), Infinity);
 			return;
 		}
-
 		if (position) {
 			// first, find the center of the bounding sphere
-			const center = this.boundingSphere.center;
 
-			_box$1.setFromBufferAttribute(position); // process morph attributes if present
+			const center = this.boundingSphere.center;
+			_box$1.setFromBufferAttribute(position);
 
+			// process morph attributes if present
 
 			if (morphAttributesPosition) {
 				for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
 					const morphAttribute = morphAttributesPosition[i];
-
 					_boxMorphTargets.setFromBufferAttribute(morphAttribute);
-
 					if (this.morphTargetsRelative) {
 						_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);
-
 						_box$1.expandByPoint(_vector$8);
-
 						_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);
-
 						_box$1.expandByPoint(_vector$8);
 					} else {
 						_box$1.expandByPoint(_boxMorphTargets.min);
-
 						_box$1.expandByPoint(_boxMorphTargets.max);
 					}
 				}
 			}
+			_box$1.getCenter(center);
 
-			_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the
+			// second, try to find a boundingSphere with a radius smaller than the
 			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
 
-
 			let maxRadiusSq = 0;
-
 			for (let i = 0, il = position.count; i < il; i++) {
 				_vector$8.fromBufferAttribute(position, i);
-
 				maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
-			} // process morph attributes if present
+			}
 
+			// process morph attributes if present
 
 			if (morphAttributesPosition) {
 				for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
 					const morphAttribute = morphAttributesPosition[i];
 					const morphTargetsRelative = this.morphTargetsRelative;
-
 					for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
 						_vector$8.fromBufferAttribute(morphAttribute, j);
-
 						if (morphTargetsRelative) {
 							_offset.fromBufferAttribute(position, j);
-
 							_vector$8.add(_offset);
 						}
-
 						maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
 					}
 				}
 			}
-
 			this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
-
 			if (isNaN(this.boundingSphere.radius)) {
 				console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
 			}
 		}
 	}
-
 	computeTangents() {
 		const index = this.index;
-		const attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html
+		const attributes = this.attributes;
+
+		// based on http://www.terathon.com/code/tangent.html
 		// (per vertex tangents)
 
 		if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
 			console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');
 			return;
 		}
-
 		const indices = index.array;
 		const positions = attributes.position.array;
 		const normals = attributes.normal.array;
 		const uvs = attributes.uv.array;
 		const nVertices = positions.length / 3;
-
 		if (this.hasAttribute('tangent') === false) {
 			this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));
 		}
-
 		const tangents = this.getAttribute('tangent').array;
 		const tan1 = [],
-					tan2 = [];
-
+			tan2 = [];
 		for (let i = 0; i < nVertices; i++) {
 			tan1[i] = new Vector3();
 			tan2[i] = new Vector3();
 		}
-
 		const vA = new Vector3(),
-					vB = new Vector3(),
-					vC = new Vector3(),
-					uvA = new Vector2(),
-					uvB = new Vector2(),
-					uvC = new Vector2(),
-					sdir = new Vector3(),
-					tdir = new Vector3();
-
+			vB = new Vector3(),
+			vC = new Vector3(),
+			uvA = new Vector2(),
+			uvB = new Vector2(),
+			uvC = new Vector2(),
+			sdir = new Vector3(),
+			tdir = new Vector3();
 		function handleTriangle(a, b, c) {
 			vA.fromArray(positions, a * 3);
 			vB.fromArray(positions, b * 3);
@@ -7770,7 +6707,9 @@ class BufferGeometry extends EventDispatcher {
 			vC.sub(vA);
 			uvB.sub(uvA);
 			uvC.sub(uvA);
-			const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices
+			const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);
+
+			// silently ignore degenerate uv triangles having coincident or colinear vertices
 
 			if (!isFinite(r)) return;
 			sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
@@ -7782,38 +6721,36 @@ class BufferGeometry extends EventDispatcher {
 			tan2[b].add(tdir);
 			tan2[c].add(tdir);
 		}
-
 		let groups = this.groups;
-
 		if (groups.length === 0) {
 			groups = [{
 				start: 0,
 				count: indices.length
 			}];
 		}
-
 		for (let i = 0, il = groups.length; i < il; ++i) {
 			const group = groups[i];
 			const start = group.start;
 			const count = group.count;
-
 			for (let j = start, jl = start + count; j < jl; j += 3) {
 				handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
 			}
 		}
-
 		const tmp = new Vector3(),
-					tmp2 = new Vector3();
+			tmp2 = new Vector3();
 		const n = new Vector3(),
-					n2 = new Vector3();
-
+			n2 = new Vector3();
 		function handleVertex(v) {
 			n.fromArray(normals, v * 3);
 			n2.copy(n);
-			const t = tan1[v]; // Gram-Schmidt orthogonalize
+			const t = tan1[v];
+
+			// Gram-Schmidt orthogonalize
 
 			tmp.copy(t);
-			tmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness
+			tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
+
+			// Calculate handedness
 
 			tmp2.crossVectors(n2, t);
 			const test = tmp2.dot(tan2[v]);
@@ -7823,12 +6760,10 @@ class BufferGeometry extends EventDispatcher {
 			tangents[v * 4 + 2] = tmp.z;
 			tangents[v * 4 + 3] = w;
 		}
-
 		for (let i = 0, il = groups.length; i < il; ++i) {
 			const group = groups[i];
 			const start = group.start;
 			const count = group.count;
-
 			for (let j = start, jl = start + count; j < jl; j += 3) {
 				handleVertex(indices[j + 0]);
 				handleVertex(indices[j + 1]);
@@ -7836,32 +6771,31 @@ class BufferGeometry extends EventDispatcher {
 			}
 		}
 	}
-
 	computeVertexNormals() {
 		const index = this.index;
 		const positionAttribute = this.getAttribute('position');
-
 		if (positionAttribute !== undefined) {
 			let normalAttribute = this.getAttribute('normal');
-
 			if (normalAttribute === undefined) {
 				normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
 				this.setAttribute('normal', normalAttribute);
 			} else {
 				// reset existing normals to zero
+
 				for (let i = 0, il = normalAttribute.count; i < il; i++) {
 					normalAttribute.setXYZ(i, 0, 0, 0);
 				}
 			}
-
 			const pA = new Vector3(),
-						pB = new Vector3(),
-						pC = new Vector3();
+				pB = new Vector3(),
+				pC = new Vector3();
 			const nA = new Vector3(),
-						nB = new Vector3(),
-						nC = new Vector3();
+				nB = new Vector3(),
+				nC = new Vector3();
 			const cb = new Vector3(),
-						ab = new Vector3(); // indexed elements
+				ab = new Vector3();
+
+			// indexed elements
 
 			if (index) {
 				for (let i = 0, il = index.count; i < il; i += 3) {
@@ -7886,6 +6820,7 @@ class BufferGeometry extends EventDispatcher {
 				}
 			} else {
 				// non-indexed elements (unconnected triangle soup)
+
 				for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
 					pA.fromBufferAttribute(positionAttribute, i + 0);
 					pB.fromBufferAttribute(positionAttribute, i + 1);
@@ -7898,30 +6833,25 @@ class BufferGeometry extends EventDispatcher {
 					normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
 				}
 			}
-
 			this.normalizeNormals();
 			normalAttribute.needsUpdate = true;
 		}
-	} // @deprecated since r144
+	}
 
+	// @deprecated since r144
 
 	merge() {
 		console.error('THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead.');
 		return this;
 	}
-
 	normalizeNormals() {
 		const normals = this.attributes.normal;
-
 		for (let i = 0, il = normals.count; i < il; i++) {
 			_vector$8.fromBufferAttribute(normals, i);
-
 			_vector$8.normalize();
-
 			normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
 		}
 	}
-
 	toNonIndexed() {
 		function convertBufferAttribute(attribute, indices) {
 			const array = attribute.array;
@@ -7929,42 +6859,41 @@ class BufferGeometry extends EventDispatcher {
 			const normalized = attribute.normalized;
 			const array2 = new array.constructor(indices.length * itemSize);
 			let index = 0,
-					index2 = 0;
-
+				index2 = 0;
 			for (let i = 0, l = indices.length; i < l; i++) {
 				if (attribute.isInterleavedBufferAttribute) {
 					index = indices[i] * attribute.data.stride + attribute.offset;
 				} else {
 					index = indices[i] * itemSize;
 				}
-
 				for (let j = 0; j < itemSize; j++) {
 					array2[index2++] = array[index++];
 				}
 			}
-
 			return new BufferAttribute(array2, itemSize, normalized);
-		} //
+		}
 
+		//
 
 		if (this.index === null) {
 			console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');
 			return this;
 		}
-
 		const geometry2 = new BufferGeometry();
 		const indices = this.index.array;
-		const attributes = this.attributes; // attributes
+		const attributes = this.attributes;
+
+		// attributes
 
 		for (const name in attributes) {
 			const attribute = attributes[name];
 			const newAttribute = convertBufferAttribute(attribute, indices);
 			geometry2.setAttribute(name, newAttribute);
-		} // morph attributes
+		}
 
+		// morph attributes
 
 		const morphAttributes = this.morphAttributes;
-
 		for (const name in morphAttributes) {
 			const morphArray = [];
 			const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes
@@ -7974,22 +6903,19 @@ class BufferGeometry extends EventDispatcher {
 				const newAttribute = convertBufferAttribute(attribute, indices);
 				morphArray.push(newAttribute);
 			}
-
 			geometry2.morphAttributes[name] = morphArray;
 		}
+		geometry2.morphTargetsRelative = this.morphTargetsRelative;
 
-		geometry2.morphTargetsRelative = this.morphTargetsRelative; // groups
+		// groups
 
 		const groups = this.groups;
-
 		for (let i = 0, l = groups.length; i < l; i++) {
 			const group = groups[i];
 			geometry2.addGroup(group.start, group.count, group.materialIndex);
 		}
-
 		return geometry2;
 	}
-
 	toJSON() {
 		const data = {
 			metadata: {
@@ -7997,118 +6923,109 @@ class BufferGeometry extends EventDispatcher {
 				type: 'BufferGeometry',
 				generator: 'BufferGeometry.toJSON'
 			}
-		}; // standard BufferGeometry serialization
+		};
+
+		// standard BufferGeometry serialization
 
 		data.uuid = this.uuid;
 		data.type = this.type;
 		if (this.name !== '') data.name = this.name;
 		if (Object.keys(this.userData).length > 0) data.userData = this.userData;
-
 		if (this.parameters !== undefined) {
 			const parameters = this.parameters;
-
 			for (const key in parameters) {
 				if (parameters[key] !== undefined) data[key] = parameters[key];
 			}
-
 			return data;
-		} // for simplicity the code assumes attributes are not shared across geometries, see #15811
+		}
 
+		// for simplicity the code assumes attributes are not shared across geometries, see #15811
 
 		data.data = {
 			attributes: {}
 		};
 		const index = this.index;
-
 		if (index !== null) {
 			data.data.index = {
 				type: index.array.constructor.name,
 				array: Array.prototype.slice.call(index.array)
 			};
 		}
-
 		const attributes = this.attributes;
-
 		for (const key in attributes) {
 			const attribute = attributes[key];
 			data.data.attributes[key] = attribute.toJSON(data.data);
 		}
-
 		const morphAttributes = {};
 		let hasMorphAttributes = false;
-
 		for (const key in this.morphAttributes) {
 			const attributeArray = this.morphAttributes[key];
 			const array = [];
-
 			for (let i = 0, il = attributeArray.length; i < il; i++) {
 				const attribute = attributeArray[i];
 				array.push(attribute.toJSON(data.data));
 			}
-
 			if (array.length > 0) {
 				morphAttributes[key] = array;
 				hasMorphAttributes = true;
 			}
 		}
-
 		if (hasMorphAttributes) {
 			data.data.morphAttributes = morphAttributes;
 			data.data.morphTargetsRelative = this.morphTargetsRelative;
 		}
-
 		const groups = this.groups;
-
 		if (groups.length > 0) {
 			data.data.groups = JSON.parse(JSON.stringify(groups));
 		}
-
 		const boundingSphere = this.boundingSphere;
-
 		if (boundingSphere !== null) {
 			data.data.boundingSphere = {
 				center: boundingSphere.center.toArray(),
 				radius: boundingSphere.radius
 			};
 		}
-
 		return data;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	copy(source) {
 		// reset
+
 		this.index = null;
 		this.attributes = {};
 		this.morphAttributes = {};
 		this.groups = [];
 		this.boundingBox = null;
-		this.boundingSphere = null; // used for storing cloned, shared data
+		this.boundingSphere = null;
 
-		const data = {}; // name
+		// used for storing cloned, shared data
 
-		this.name = source.name; // index
+		const data = {};
 
-		const index = source.index;
+		// name
+
+		this.name = source.name;
 
+		// index
+
+		const index = source.index;
 		if (index !== null) {
 			this.setIndex(index.clone(data));
-		} // attributes
+		}
 
+		// attributes
 
 		const attributes = source.attributes;
-
 		for (const name in attributes) {
 			const attribute = attributes[name];
 			this.setAttribute(name, attribute.clone(data));
-		} // morph attributes
+		}
 
+		// morph attributes
 
 		const morphAttributes = source.morphAttributes;
-
 		for (const name in morphAttributes) {
 			const array = [];
 			const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes
@@ -8116,85 +7033,70 @@ class BufferGeometry extends EventDispatcher {
 			for (let i = 0, l = morphAttribute.length; i < l; i++) {
 				array.push(morphAttribute[i].clone(data));
 			}
-
 			this.morphAttributes[name] = array;
 		}
+		this.morphTargetsRelative = source.morphTargetsRelative;
 
-		this.morphTargetsRelative = source.morphTargetsRelative; // groups
+		// groups
 
 		const groups = source.groups;
-
 		for (let i = 0, l = groups.length; i < l; i++) {
 			const group = groups[i];
 			this.addGroup(group.start, group.count, group.materialIndex);
-		} // bounding box
+		}
 
+		// bounding box
 
 		const boundingBox = source.boundingBox;
-
 		if (boundingBox !== null) {
 			this.boundingBox = boundingBox.clone();
-		} // bounding sphere
+		}
 
+		// bounding sphere
 
 		const boundingSphere = source.boundingSphere;
-
 		if (boundingSphere !== null) {
 			this.boundingSphere = boundingSphere.clone();
-		} // draw range
+		}
 
+		// draw range
 
 		this.drawRange.start = source.drawRange.start;
-		this.drawRange.count = source.drawRange.count; // user data
+		this.drawRange.count = source.drawRange.count;
 
-		this.userData = source.userData; // geometry generator parameters
+		// user data
+
+		this.userData = source.userData;
+
+		// geometry generator parameters
 
 		if (source.parameters !== undefined) this.parameters = Object.assign({}, source.parameters);
 		return this;
 	}
-
 	dispose() {
 		this.dispatchEvent({
 			type: 'dispose'
 		});
 	}
-
 }
 
 const _inverseMatrix$2 = /*@__PURE__*/new Matrix4();
-
 const _ray$2 = /*@__PURE__*/new Ray();
-
 const _sphere$3 = /*@__PURE__*/new Sphere();
-
 const _vA$1 = /*@__PURE__*/new Vector3();
-
 const _vB$1 = /*@__PURE__*/new Vector3();
-
 const _vC$1 = /*@__PURE__*/new Vector3();
-
 const _tempA = /*@__PURE__*/new Vector3();
-
 const _tempB = /*@__PURE__*/new Vector3();
-
 const _tempC = /*@__PURE__*/new Vector3();
-
 const _morphA = /*@__PURE__*/new Vector3();
-
 const _morphB = /*@__PURE__*/new Vector3();
-
 const _morphC = /*@__PURE__*/new Vector3();
-
 const _uvA$1 = /*@__PURE__*/new Vector2();
-
 const _uvB$1 = /*@__PURE__*/new Vector2();
-
 const _uvC$1 = /*@__PURE__*/new Vector2();
-
 const _intersectionPoint = /*@__PURE__*/new Vector3();
-
 const _intersectionPointWorld = /*@__PURE__*/new Vector3();
-
 class Mesh extends Object3D {
 	constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
 		super();
@@ -8204,35 +7106,27 @@ class Mesh extends Object3D {
 		this.material = material;
 		this.updateMorphTargets();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
-
 		if (source.morphTargetInfluences !== undefined) {
 			this.morphTargetInfluences = source.morphTargetInfluences.slice();
 		}
-
 		if (source.morphTargetDictionary !== undefined) {
 			this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
 		}
-
 		this.material = source.material;
 		this.geometry = source.geometry;
 		return this;
 	}
-
 	updateMorphTargets() {
 		const geometry = this.geometry;
 		const morphAttributes = geometry.morphAttributes;
 		const keys = Object.keys(morphAttributes);
-
 		if (keys.length > 0) {
 			const morphAttribute = morphAttributes[keys[0]];
-
 			if (morphAttribute !== undefined) {
 				this.morphTargetInfluences = [];
 				this.morphTargetDictionary = {};
-
 				for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
 					const name = morphAttribute[m].name || String(m);
 					this.morphTargetInfluences.push(0);
@@ -8241,30 +7135,29 @@ class Mesh extends Object3D {
 			}
 		}
 	}
-
 	raycast(raycaster, intersects) {
 		const geometry = this.geometry;
 		const material = this.material;
 		const matrixWorld = this.matrixWorld;
-		if (material === undefined) return; // Checking boundingSphere distance to ray
+		if (material === undefined) return;
 
-		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
+		// Checking boundingSphere distance to ray
 
+		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
 		_sphere$3.copy(geometry.boundingSphere);
-
 		_sphere$3.applyMatrix4(matrixWorld);
+		if (raycaster.ray.intersectsSphere(_sphere$3) === false) return;
 
-		if (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //
+		//
 
 		_inverseMatrix$2.copy(matrixWorld).invert();
+		_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
 
-		_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing
-
+		// Check boundingBox before continuing
 
 		if (geometry.boundingBox !== null) {
 			if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;
 		}
-
 		let intersection;
 		const index = geometry.index;
 		const position = geometry.attributes.position;
@@ -8274,25 +7167,22 @@ class Mesh extends Object3D {
 		const uv2 = geometry.attributes.uv2;
 		const groups = geometry.groups;
 		const drawRange = geometry.drawRange;
-
 		if (index !== null) {
 			// indexed buffer geometry
+
 			if (Array.isArray(material)) {
 				for (let i = 0, il = groups.length; i < il; i++) {
 					const group = groups[i];
 					const groupMaterial = material[group.materialIndex];
 					const start = Math.max(group.start, drawRange.start);
 					const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
-
 					for (let j = start, jl = end; j < jl; j += 3) {
 						const a = index.getX(j);
 						const b = index.getX(j + 1);
 						const c = index.getX(j + 2);
 						intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
-
 						if (intersection) {
 							intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics
-
 							intersection.face.materialIndex = group.materialIndex;
 							intersects.push(intersection);
 						}
@@ -8301,38 +7191,33 @@ class Mesh extends Object3D {
 			} else {
 				const start = Math.max(0, drawRange.start);
 				const end = Math.min(index.count, drawRange.start + drawRange.count);
-
 				for (let i = start, il = end; i < il; i += 3) {
 					const a = index.getX(i);
 					const b = index.getX(i + 1);
 					const c = index.getX(i + 2);
 					intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
-
 					if (intersection) {
 						intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics
-
 						intersects.push(intersection);
 					}
 				}
 			}
 		} else if (position !== undefined) {
 			// non-indexed buffer geometry
+
 			if (Array.isArray(material)) {
 				for (let i = 0, il = groups.length; i < il; i++) {
 					const group = groups[i];
 					const groupMaterial = material[group.materialIndex];
 					const start = Math.max(group.start, drawRange.start);
 					const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
-
 					for (let j = start, jl = end; j < jl; j += 3) {
 						const a = j;
 						const b = j + 1;
 						const c = j + 2;
 						intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
-
 						if (intersection) {
 							intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics
-
 							intersection.face.materialIndex = group.materialIndex;
 							intersects.push(intersection);
 						}
@@ -8341,40 +7226,30 @@ class Mesh extends Object3D {
 			} else {
 				const start = Math.max(0, drawRange.start);
 				const end = Math.min(position.count, drawRange.start + drawRange.count);
-
 				for (let i = start, il = end; i < il; i += 3) {
 					const a = i;
 					const b = i + 1;
 					const c = i + 2;
 					intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
-
 					if (intersection) {
 						intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics
-
 						intersects.push(intersection);
 					}
 				}
 			}
 		}
 	}
-
 }
-
 function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
 	let intersect;
-
 	if (material.side === BackSide) {
 		intersect = ray.intersectTriangle(pC, pB, pA, true, point);
 	} else {
 		intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
 	}
-
 	if (intersect === null) return null;
-
 	_intersectionPointWorld.copy(point);
-
 	_intersectionPointWorld.applyMatrix4(object.matrixWorld);
-
 	const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
 	if (distance < raycaster.near || distance > raycaster.far) return null;
 	return {
@@ -8383,85 +7258,55 @@ function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point)
 		object: object
 	};
 }
-
 function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
 	_vA$1.fromBufferAttribute(position, a);
-
 	_vB$1.fromBufferAttribute(position, b);
-
 	_vC$1.fromBufferAttribute(position, c);
-
 	const morphInfluences = object.morphTargetInfluences;
-
 	if (morphPosition && morphInfluences) {
 		_morphA.set(0, 0, 0);
-
 		_morphB.set(0, 0, 0);
-
 		_morphC.set(0, 0, 0);
-
 		for (let i = 0, il = morphPosition.length; i < il; i++) {
 			const influence = morphInfluences[i];
 			const morphAttribute = morphPosition[i];
 			if (influence === 0) continue;
-
 			_tempA.fromBufferAttribute(morphAttribute, a);
-
 			_tempB.fromBufferAttribute(morphAttribute, b);
-
 			_tempC.fromBufferAttribute(morphAttribute, c);
-
 			if (morphTargetsRelative) {
 				_morphA.addScaledVector(_tempA, influence);
-
 				_morphB.addScaledVector(_tempB, influence);
-
 				_morphC.addScaledVector(_tempC, influence);
 			} else {
 				_morphA.addScaledVector(_tempA.sub(_vA$1), influence);
-
 				_morphB.addScaledVector(_tempB.sub(_vB$1), influence);
-
 				_morphC.addScaledVector(_tempC.sub(_vC$1), influence);
 			}
 		}
-
 		_vA$1.add(_morphA);
-
 		_vB$1.add(_morphB);
-
 		_vC$1.add(_morphC);
 	}
-
 	if (object.isSkinnedMesh) {
 		object.boneTransform(a, _vA$1);
 		object.boneTransform(b, _vB$1);
 		object.boneTransform(c, _vC$1);
 	}
-
 	const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
-
 	if (intersection) {
 		if (uv) {
 			_uvA$1.fromBufferAttribute(uv, a);
-
 			_uvB$1.fromBufferAttribute(uv, b);
-
 			_uvC$1.fromBufferAttribute(uv, c);
-
 			intersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
 		}
-
 		if (uv2) {
 			_uvA$1.fromBufferAttribute(uv2, a);
-
 			_uvB$1.fromBufferAttribute(uv2, b);
-
 			_uvC$1.fromBufferAttribute(uv2, c);
-
 			intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
 		}
-
 		const face = {
 			a: a,
 			b: b,
@@ -8472,7 +7317,6 @@ function checkBufferGeometryIntersection(object, material, raycaster, ray, posit
 		Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
 		intersection.face = face;
 	}
-
 	return intersection;
 }
 
@@ -8488,38 +7332,41 @@ class BoxGeometry extends BufferGeometry {
 			heightSegments: heightSegments,
 			depthSegments: depthSegments
 		};
-		const scope = this; // segments
+		const scope = this;
+
+		// segments
 
 		widthSegments = Math.floor(widthSegments);
 		heightSegments = Math.floor(heightSegments);
-		depthSegments = Math.floor(depthSegments); // buffers
+		depthSegments = Math.floor(depthSegments);
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
-		const uvs = []; // helper variables
+		const uvs = [];
+
+		// helper variables
 
 		let numberOfVertices = 0;
-		let groupStart = 0; // build each side of the box geometry
+		let groupStart = 0;
 
-		buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px
+		// build each side of the box geometry
 
+		buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px
 		buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx
-
 		buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py
-
 		buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny
-
 		buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz
-
 		buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
+
 		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
-
 		function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
 			const segmentWidth = width / gridX;
 			const segmentHeight = height / gridY;
@@ -8530,64 +7377,86 @@ class BoxGeometry extends BufferGeometry {
 			const gridY1 = gridY + 1;
 			let vertexCounter = 0;
 			let groupCount = 0;
-			const vector = new Vector3(); // generate vertices, normals and uvs
+			const vector = new Vector3();
+
+			// generate vertices, normals and uvs
 
 			for (let iy = 0; iy < gridY1; iy++) {
 				const y = iy * segmentHeight - heightHalf;
-
 				for (let ix = 0; ix < gridX1; ix++) {
-					const x = ix * segmentWidth - widthHalf; // set values to correct vector component
+					const x = ix * segmentWidth - widthHalf;
+
+					// set values to correct vector component
 
 					vector[u] = x * udir;
 					vector[v] = y * vdir;
-					vector[w] = depthHalf; // now apply vector to vertex buffer
+					vector[w] = depthHalf;
+
+					// now apply vector to vertex buffer
 
-					vertices.push(vector.x, vector.y, vector.z); // set values to correct vector component
+					vertices.push(vector.x, vector.y, vector.z);
+
+					// set values to correct vector component
 
 					vector[u] = 0;
 					vector[v] = 0;
-					vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer
+					vector[w] = depth > 0 ? 1 : -1;
+
+					// now apply vector to normal buffer
+
+					normals.push(vector.x, vector.y, vector.z);
 
-					normals.push(vector.x, vector.y, vector.z); // uvs
+					// uvs
 
 					uvs.push(ix / gridX);
-					uvs.push(1 - iy / gridY); // counters
+					uvs.push(1 - iy / gridY);
+
+					// counters
 
 					vertexCounter += 1;
 				}
-			} // indices
+			}
+
+			// indices
+
 			// 1. you need three indices to draw a single face
 			// 2. a single segment consists of two faces
 			// 3. so we need to generate six (2*3) indices per segment
 
-
 			for (let iy = 0; iy < gridY; iy++) {
 				for (let ix = 0; ix < gridX; ix++) {
 					const a = numberOfVertices + ix + gridX1 * iy;
 					const b = numberOfVertices + ix + gridX1 * (iy + 1);
 					const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
-					const d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces
+					const d = numberOfVertices + (ix + 1) + gridX1 * iy;
+
+					// faces
 
 					indices.push(a, b, d);
-					indices.push(b, c, d); // increase counter
+					indices.push(b, c, d);
+
+					// increase counter
 
 					groupCount += 6;
 				}
-			} // add a group to the geometry. this will ensure multi material support
+			}
+
+			// add a group to the geometry. this will ensure multi material support
 
+			scope.addGroup(groupStart, groupCount, materialIndex);
 
-			scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups
+			// calculate new start value for groups
 
-			groupStart += groupCount; // update total number of vertices
+			groupStart += groupCount;
+
+			// update total number of vertices
 
 			numberOfVertices += vertexCounter;
 		}
 	}
-
 	static fromJSON(data) {
 		return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
 	}
-
 }
 
 /**
@@ -8596,13 +7465,10 @@ class BoxGeometry extends BufferGeometry {
 
 function cloneUniforms(src) {
 	const dst = {};
-
 	for (const u in src) {
 		dst[u] = {};
-
 		for (const p in src[u]) {
 			const property = src[u][p];
-
 			if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
 				dst[u][p] = property.clone();
 			} else if (Array.isArray(property)) {
@@ -8612,29 +7478,23 @@ function cloneUniforms(src) {
 			}
 		}
 	}
-
 	return dst;
 }
 function mergeUniforms(uniforms) {
 	const merged = {};
-
 	for (let u = 0; u < uniforms.length; u++) {
 		const tmp = cloneUniforms(uniforms[u]);
-
 		for (const p in tmp) {
 			merged[p] = tmp[p];
 		}
 	}
-
 	return merged;
 }
 function cloneUniformsGroups(src) {
 	const dst = [];
-
 	for (let u = 0; u < src.length; u++) {
 		dst.push(src[u].clone());
 	}
-
 	return dst;
 }
 function getUnlitUniformColorSpace(renderer) {
@@ -8642,9 +7502,10 @@ function getUnlitUniformColorSpace(renderer) {
 		// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
 		return renderer.outputEncoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;
 	}
-
 	return LinearSRGBColorSpace;
-} // Legacy
+}
+
+// Legacy
 
 const UniformsUtils = {
 	clone: cloneUniforms,
@@ -8669,9 +7530,7 @@ class ShaderMaterial extends Material {
 		this.wireframe = false;
 		this.wireframeLinewidth = 1;
 		this.fog = false; // set to use scene fog
-
 		this.lights = false; // set to use scene lights
-
 		this.clipping = false; // set to use user-defined clipping planes
 
 		this.extensions = {
@@ -8682,10 +7541,10 @@ class ShaderMaterial extends Material {
 			drawBuffers: false,
 			// set to use draw buffers
 			shaderTextureLOD: false // set to use shader texture LOD
+		};
 
-		}; // When rendered geometry doesn't include these attributes but the material does,
+		// When rendered geometry doesn't include these attributes but the material does,
 		// use these default values in WebGL. This avoids errors when buffer data is missing.
-
 		this.defaultAttributeValues = {
 			'color': [1, 1, 1],
 			'uv': [0, 0],
@@ -8694,12 +7553,10 @@ class ShaderMaterial extends Material {
 		this.index0AttributeName = undefined;
 		this.uniformsNeedUpdate = false;
 		this.glslVersion = null;
-
 		if (parameters !== undefined) {
 			this.setValues(parameters);
 		}
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.fragmentShader = source.fragmentShader;
@@ -8716,16 +7573,13 @@ class ShaderMaterial extends Material {
 		this.glslVersion = source.glslVersion;
 		return this;
 	}
-
 	toJSON(meta) {
 		const data = super.toJSON(meta);
 		data.glslVersion = this.glslVersion;
 		data.uniforms = {};
-
 		for (const name in this.uniforms) {
 			const uniform = this.uniforms[name];
 			const value = uniform.value;
-
 			if (value && value.isTexture) {
 				data.uniforms[name] = {
 					type: 't',
@@ -8764,7 +7618,9 @@ class ShaderMaterial extends Material {
 			} else {
 				data.uniforms[name] = {
 					value: value
-				}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
+				};
+
+				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
 			}
 		}
 
@@ -8772,15 +7628,12 @@ class ShaderMaterial extends Material {
 		data.vertexShader = this.vertexShader;
 		data.fragmentShader = this.fragmentShader;
 		const extensions = {};
-
 		for (const key in this.extensions) {
 			if (this.extensions[key] === true) extensions[key] = true;
 		}
-
 		if (Object.keys(extensions).length > 0) data.extensions = extensions;
 		return data;
 	}
-
 }
 
 class Camera extends Object3D {
@@ -8792,7 +7645,6 @@ class Camera extends Object3D {
 		this.projectionMatrix = new Matrix4();
 		this.projectionMatrixInverse = new Matrix4();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.matrixWorldInverse.copy(source.matrixWorldInverse);
@@ -8800,27 +7652,22 @@ class Camera extends Object3D {
 		this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
 		return this;
 	}
-
 	getWorldDirection(target) {
 		this.updateWorldMatrix(true, false);
 		const e = this.matrixWorld.elements;
 		return target.set(-e[8], -e[9], -e[10]).normalize();
 	}
-
 	updateMatrixWorld(force) {
 		super.updateMatrixWorld(force);
 		this.matrixWorldInverse.copy(this.matrixWorld).invert();
 	}
-
 	updateWorldMatrix(updateParents, updateChildren) {
 		super.updateWorldMatrix(updateParents, updateChildren);
 		this.matrixWorldInverse.copy(this.matrixWorld).invert();
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 class PerspectiveCamera extends Camera {
@@ -8836,12 +7683,10 @@ class PerspectiveCamera extends Camera {
 		this.aspect = aspect;
 		this.view = null;
 		this.filmGauge = 35; // width of the film (default in millimeters)
-
 		this.filmOffset = 0; // horizontal film offset (same unit as gauge)
 
 		this.updateProjectionMatrix();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.fov = source.fov;
@@ -8855,6 +7700,7 @@ class PerspectiveCamera extends Camera {
 		this.filmOffset = source.filmOffset;
 		return this;
 	}
+
 	/**
 	 * Sets the FOV by focal length in respect to the current .filmGauge.
 	 *
@@ -8863,37 +7709,32 @@ class PerspectiveCamera extends Camera {
 	 *
 	 * Values for focal length and film gauge must have the same unit.
 	 */
-
-
 	setFocalLength(focalLength) {
 		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
 		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
 		this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
 		this.updateProjectionMatrix();
 	}
+
 	/**
 	 * Calculates the focal length from the current .fov and .filmGauge.
 	 */
-
-
 	getFocalLength() {
 		const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
 		return 0.5 * this.getFilmHeight() / vExtentSlope;
 	}
-
 	getEffectiveFOV() {
 		return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
 	}
-
 	getFilmWidth() {
 		// film not completely covered in portrait format (aspect < 1)
 		return this.filmGauge * Math.min(this.aspect, 1);
 	}
-
 	getFilmHeight() {
 		// film not completely covered in landscape format (aspect > 1)
 		return this.filmGauge / Math.max(this.aspect, 1);
 	}
+
 	/**
 	 * Sets an offset in a larger frustum. This is useful for multi-window or
 	 * multi-monitor/multi-machine setups.
@@ -8929,11 +7770,8 @@ class PerspectiveCamera extends Camera {
 	 *
 	 *	 Note there is no reason monitors have to be the same size or in a grid.
 	 */
-
-
 	setViewOffset(fullWidth, fullHeight, x, y, width, height) {
 		this.aspect = fullWidth / fullHeight;
-
 		if (this.view === null) {
 			this.view = {
 				enabled: true,
@@ -8945,7 +7783,6 @@ class PerspectiveCamera extends Camera {
 				height: 1
 			};
 		}
-
 		this.view.enabled = true;
 		this.view.fullWidth = fullWidth;
 		this.view.fullHeight = fullHeight;
@@ -8955,15 +7792,12 @@ class PerspectiveCamera extends Camera {
 		this.view.height = height;
 		this.updateProjectionMatrix();
 	}
-
 	clearViewOffset() {
 		if (this.view !== null) {
 			this.view.enabled = false;
 		}
-
 		this.updateProjectionMatrix();
 	}
-
 	updateProjectionMatrix() {
 		const near = this.near;
 		let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
@@ -8971,22 +7805,19 @@ class PerspectiveCamera extends Camera {
 		let width = this.aspect * height;
 		let left = -0.5 * width;
 		const view = this.view;
-
 		if (this.view !== null && this.view.enabled) {
 			const fullWidth = view.fullWidth,
-						fullHeight = view.fullHeight;
+				fullHeight = view.fullHeight;
 			left += view.offsetX * width / fullWidth;
 			top -= view.offsetY * height / fullHeight;
 			width *= view.width / fullWidth;
 			height *= view.height / fullHeight;
 		}
-
 		const skew = this.filmOffset;
 		if (skew !== 0) left += near * skew / this.getFilmWidth();
 		this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
 		this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
 	}
-
 	toJSON(meta) {
 		const data = super.toJSON(meta);
 		data.object.fov = this.fov;
@@ -9000,13 +7831,10 @@ class PerspectiveCamera extends Camera {
 		data.object.filmOffset = this.filmOffset;
 		return data;
 	}
-
 }
 
 const fov = -90; // negative fov is not an error
-
 const aspect = 1;
-
 class CubeCamera extends Object3D {
 	constructor(near, far, renderTarget) {
 		super();
@@ -9043,7 +7871,6 @@ class CubeCamera extends Object3D {
 		cameraNZ.lookAt(0, 0, -1);
 		this.add(cameraNZ);
 	}
-
 	update(renderer, scene) {
 		if (this.parent === null) this.updateMatrixWorld();
 		const renderTarget = this.renderTarget;
@@ -9073,7 +7900,6 @@ class CubeCamera extends Object3D {
 		renderer.xr.enabled = currentXrEnabled;
 		renderTarget.texture.needsPMREMUpdate = true;
 	}
-
 }
 
 class CubeTexture extends Texture {
@@ -9084,15 +7910,12 @@ class CubeTexture extends Texture {
 		this.isCubeTexture = true;
 		this.flipY = false;
 	}
-
 	get images() {
 		return this.image;
 	}
-
 	set images(value) {
 		this.image = value;
 	}
-
 }
 
 class WebGLCubeRenderTarget extends WebGLRenderTarget {
@@ -9105,9 +7928,12 @@ class WebGLCubeRenderTarget extends WebGLRenderTarget {
 			depth: 1
 		};
 		const images = [image, image, image, image, image, image];
-		this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding); // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
+		this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
+
+		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
 		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
 		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
+
 		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
 		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
 		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
@@ -9116,7 +7942,6 @@ class WebGLCubeRenderTarget extends WebGLRenderTarget {
 		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
 		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
 	}
-
 	fromEquirectangularTexture(renderer, texture) {
 		this.texture.type = texture.type;
 		this.texture.encoding = texture.encoding;
@@ -9129,9 +7954,7 @@ class WebGLCubeRenderTarget extends WebGLRenderTarget {
 					value: null
 				}
 			},
-			vertexShader:
-			/* glsl */
-			`
+			vertexShader: /* glsl */`
 
 				varying vec3 vWorldDirection;
 
@@ -9150,9 +7973,7 @@ class WebGLCubeRenderTarget extends WebGLRenderTarget {
 
 				}
 			`,
-			fragmentShader:
-			/* glsl */
-			`
+			fragmentShader: /* glsl */`
 
 				uniform sampler2D tEquirect;
 
@@ -9182,8 +8003,9 @@ class WebGLCubeRenderTarget extends WebGLRenderTarget {
 		});
 		material.uniforms.tEquirect.value = texture;
 		const mesh = new Mesh(geometry, material);
-		const currentMinFilter = texture.minFilter; // Avoid blurred poles
+		const currentMinFilter = texture.minFilter;
 
+		// Avoid blurred poles
 		if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
 		const camera = new CubeCamera(1, 10, this);
 		camera.update(renderer, mesh);
@@ -9192,167 +8014,137 @@ class WebGLCubeRenderTarget extends WebGLRenderTarget {
 		mesh.material.dispose();
 		return this;
 	}
-
 	clear(renderer, color, depth, stencil) {
 		const currentRenderTarget = renderer.getRenderTarget();
-
 		for (let i = 0; i < 6; i++) {
 			renderer.setRenderTarget(this, i);
 			renderer.clear(color, depth, stencil);
 		}
-
 		renderer.setRenderTarget(currentRenderTarget);
 	}
-
 }
 
 const _vector1 = /*@__PURE__*/new Vector3();
-
 const _vector2 = /*@__PURE__*/new Vector3();
-
 const _normalMatrix = /*@__PURE__*/new Matrix3();
-
 class Plane {
 	constructor(normal = new Vector3(1, 0, 0), constant = 0) {
-		this.isPlane = true; // normal is assumed to be normalized
+		this.isPlane = true;
+
+		// normal is assumed to be normalized
 
 		this.normal = normal;
 		this.constant = constant;
 	}
-
 	set(normal, constant) {
 		this.normal.copy(normal);
 		this.constant = constant;
 		return this;
 	}
-
 	setComponents(x, y, z, w) {
 		this.normal.set(x, y, z);
 		this.constant = w;
 		return this;
 	}
-
 	setFromNormalAndCoplanarPoint(normal, point) {
 		this.normal.copy(normal);
 		this.constant = -point.dot(this.normal);
 		return this;
 	}
-
 	setFromCoplanarPoints(a, b, c) {
-		const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
+		const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
 
+		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
 
 		this.setFromNormalAndCoplanarPoint(normal, a);
 		return this;
 	}
-
 	copy(plane) {
 		this.normal.copy(plane.normal);
 		this.constant = plane.constant;
 		return this;
 	}
-
 	normalize() {
 		// Note: will lead to a divide by zero if the plane is invalid.
+
 		const inverseNormalLength = 1.0 / this.normal.length();
 		this.normal.multiplyScalar(inverseNormalLength);
 		this.constant *= inverseNormalLength;
 		return this;
 	}
-
 	negate() {
 		this.constant *= -1;
 		this.normal.negate();
 		return this;
 	}
-
 	distanceToPoint(point) {
 		return this.normal.dot(point) + this.constant;
 	}
-
 	distanceToSphere(sphere) {
 		return this.distanceToPoint(sphere.center) - sphere.radius;
 	}
-
 	projectPoint(point, target) {
 		return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
 	}
-
 	intersectLine(line, target) {
 		const direction = line.delta(_vector1);
 		const denominator = this.normal.dot(direction);
-
 		if (denominator === 0) {
 			// line is coplanar, return origin
 			if (this.distanceToPoint(line.start) === 0) {
 				return target.copy(line.start);
-			} // Unsure if this is the correct method to handle this case.
-
+			}
 
+			// Unsure if this is the correct method to handle this case.
 			return null;
 		}
-
 		const t = -(line.start.dot(this.normal) + this.constant) / denominator;
-
 		if (t < 0 || t > 1) {
 			return null;
 		}
-
 		return target.copy(direction).multiplyScalar(t).add(line.start);
 	}
-
 	intersectsLine(line) {
 		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
+
 		const startSign = this.distanceToPoint(line.start);
 		const endSign = this.distanceToPoint(line.end);
 		return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
 	}
-
 	intersectsBox(box) {
 		return box.intersectsPlane(this);
 	}
-
 	intersectsSphere(sphere) {
 		return sphere.intersectsPlane(this);
 	}
-
 	coplanarPoint(target) {
 		return target.copy(this.normal).multiplyScalar(-this.constant);
 	}
-
 	applyMatrix4(matrix, optionalNormalMatrix) {
 		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
-
 		const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
 		const normal = this.normal.applyMatrix3(normalMatrix).normalize();
 		this.constant = -referencePoint.dot(normal);
 		return this;
 	}
-
 	translate(offset) {
 		this.constant -= offset.dot(this.normal);
 		return this;
 	}
-
 	equals(plane) {
 		return plane.normal.equals(this.normal) && plane.constant === this.constant;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 const _sphere$2 = /*@__PURE__*/new Sphere();
-
 const _vector$7 = /*@__PURE__*/new Vector3();
-
 class Frustum {
 	constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
 		this.planes = [p0, p1, p2, p3, p4, p5];
 	}
-
 	set(p0, p1, p2, p3, p4, p5) {
 		const planes = this.planes;
 		planes[0].copy(p0);
@@ -9363,36 +8155,32 @@ class Frustum {
 		planes[5].copy(p5);
 		return this;
 	}
-
 	copy(frustum) {
 		const planes = this.planes;
-
 		for (let i = 0; i < 6; i++) {
 			planes[i].copy(frustum.planes[i]);
 		}
-
 		return this;
 	}
-
 	setFromProjectionMatrix(m) {
 		const planes = this.planes;
 		const me = m.elements;
 		const me0 = me[0],
-					me1 = me[1],
-					me2 = me[2],
-					me3 = me[3];
+			me1 = me[1],
+			me2 = me[2],
+			me3 = me[3];
 		const me4 = me[4],
-					me5 = me[5],
-					me6 = me[6],
-					me7 = me[7];
+			me5 = me[5],
+			me6 = me[6],
+			me7 = me[7];
 		const me8 = me[8],
-					me9 = me[9],
-					me10 = me[10],
-					me11 = me[11];
+			me9 = me[9],
+			me10 = me[10],
+			me11 = me[11];
 		const me12 = me[12],
-					me13 = me[13],
-					me14 = me[14],
-					me15 = me[15];
+			me13 = me[13],
+			me14 = me[14],
+			me15 = me[15];
 		planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
 		planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
 		planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
@@ -9401,76 +8189,58 @@ class Frustum {
 		planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
 		return this;
 	}
-
 	intersectsObject(object) {
 		const geometry = object.geometry;
 		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
-
 		_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
-
 		return this.intersectsSphere(_sphere$2);
 	}
-
 	intersectsSprite(sprite) {
 		_sphere$2.center.set(0, 0, 0);
-
 		_sphere$2.radius = 0.7071067811865476;
-
 		_sphere$2.applyMatrix4(sprite.matrixWorld);
-
 		return this.intersectsSphere(_sphere$2);
 	}
-
 	intersectsSphere(sphere) {
 		const planes = this.planes;
 		const center = sphere.center;
 		const negRadius = -sphere.radius;
-
 		for (let i = 0; i < 6; i++) {
 			const distance = planes[i].distanceToPoint(center);
-
 			if (distance < negRadius) {
 				return false;
 			}
 		}
-
 		return true;
 	}
-
 	intersectsBox(box) {
 		const planes = this.planes;
-
 		for (let i = 0; i < 6; i++) {
-			const plane = planes[i]; // corner at max distance
+			const plane = planes[i];
+
+			// corner at max distance
 
 			_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
 			_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
 			_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
-
 			if (plane.distanceToPoint(_vector$7) < 0) {
 				return false;
 			}
 		}
-
 		return true;
 	}
-
 	containsPoint(point) {
 		const planes = this.planes;
-
 		for (let i = 0; i < 6; i++) {
 			if (planes[i].distanceToPoint(point) < 0) {
 				return false;
 			}
 		}
-
 		return true;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 function WebGLAnimation() {
@@ -9478,12 +8248,10 @@ function WebGLAnimation() {
 	let isAnimating = false;
 	let animationLoop = null;
 	let requestId = null;
-
 	function onAnimationFrame(time, frame) {
 		animationLoop(time, frame);
 		requestId = context.requestAnimationFrame(onAnimationFrame);
 	}
-
 	return {
 		start: function () {
 			if (isAnimating === true) return;
@@ -9507,7 +8275,6 @@ function WebGLAnimation() {
 function WebGLAttributes(gl, capabilities) {
 	const isWebGL2 = capabilities.isWebGL2;
 	const buffers = new WeakMap();
-
 	function createBuffer(attribute, bufferType) {
 		const array = attribute.array;
 		const usage = attribute.usage;
@@ -9516,7 +8283,6 @@ function WebGLAttributes(gl, capabilities) {
 		gl.bufferData(bufferType, array, usage);
 		attribute.onUploadCallback();
 		let type;
-
 		if (array instanceof Float32Array) {
 			type = gl.FLOAT;
 		} else if (array instanceof Uint16Array) {
@@ -9544,7 +8310,6 @@ function WebGLAttributes(gl, capabilities) {
 		} else {
 			throw new Error('THREE.WebGLAttributes: Unsupported buffer data format: ' + array);
 		}
-
 		return {
 			buffer: buffer,
 			type: type,
@@ -9552,14 +8317,13 @@ function WebGLAttributes(gl, capabilities) {
 			version: attribute.version
 		};
 	}
-
 	function updateBuffer(buffer, attribute, bufferType) {
 		const array = attribute.array;
 		const updateRange = attribute.updateRange;
 		gl.bindBuffer(bufferType, buffer);
-
 		if (updateRange.count === -1) {
 			// Not using update ranges
+
 			gl.bufferSubData(bufferType, 0, array);
 		} else {
 			if (isWebGL2) {
@@ -9567,33 +8331,29 @@ function WebGLAttributes(gl, capabilities) {
 			} else {
 				gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
 			}
-
 			updateRange.count = -1; // reset range
 		}
 
 		attribute.onUploadCallback();
-	} //
+	}
 
+	//
 
 	function get(attribute) {
 		if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
 		return buffers.get(attribute);
 	}
-
 	function remove(attribute) {
 		if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
 		const data = buffers.get(attribute);
-
 		if (data) {
 			gl.deleteBuffer(data.buffer);
 			buffers.delete(attribute);
 		}
 	}
-
 	function update(attribute, bufferType) {
 		if (attribute.isGLBufferAttribute) {
 			const cached = buffers.get(attribute);
-
 			if (!cached || cached.version < attribute.version) {
 				buffers.set(attribute, {
 					buffer: attribute.buffer,
@@ -9602,13 +8362,10 @@ function WebGLAttributes(gl, capabilities) {
 					version: attribute.version
 				});
 			}
-
 			return;
 		}
-
 		if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
 		const data = buffers.get(attribute);
-
 		if (data === undefined) {
 			buffers.set(attribute, createBuffer(attribute, bufferType));
 		} else if (data.version < attribute.version) {
@@ -9616,7 +8373,6 @@ function WebGLAttributes(gl, capabilities) {
 			data.version = attribute.version;
 		}
 	}
-
 	return {
 		get: get,
 		remove: remove,
@@ -9641,16 +8397,16 @@ class PlaneGeometry extends BufferGeometry {
 		const gridX1 = gridX + 1;
 		const gridY1 = gridY + 1;
 		const segment_width = width / gridX;
-		const segment_height = height / gridY; //
+		const segment_height = height / gridY;
+
+		//
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
 		const uvs = [];
-
 		for (let iy = 0; iy < gridY1; iy++) {
 			const y = iy * segment_height - height_half;
-
 			for (let ix = 0; ix < gridX1; ix++) {
 				const x = ix * segment_width - width_half;
 				vertices.push(x, -y, 0);
@@ -9659,7 +8415,6 @@ class PlaneGeometry extends BufferGeometry {
 				uvs.push(1 - iy / gridY);
 			}
 		}
-
 		for (let iy = 0; iy < gridY; iy++) {
 			for (let ix = 0; ix < gridX; ix++) {
 				const a = ix + gridX1 * iy;
@@ -9670,17 +8425,14 @@ class PlaneGeometry extends BufferGeometry {
 				indices.push(b, c, d);
 			}
 		}
-
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 	}
-
 	static fromJSON(data) {
 		return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
 	}
-
 }
 
 var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
@@ -10140,8 +8892,8 @@ const UniformsLib = {
 		refractionRatio: {
 			value: 0.98
 		} // basic, lambert, phong
-
 	},
+
 	aomap: {
 		aoMap: {
 			value: null
@@ -10427,8 +9179,8 @@ const ShaderLib = {
 			envMapIntensity: {
 				value: 1
 			} // temporary
-
 		}]),
+
 		vertexShader: ShaderChunk.meshphysical_vert,
 		fragmentShader: ShaderChunk.meshphysical_frag
 	},
@@ -10673,7 +9425,6 @@ const _rgb = {
 	b: 0,
 	g: 0
 };
-
 function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
 	const clearColor = new Color(0x000000);
 	let clearAlpha = alpha === true ? 0 : 1;
@@ -10682,37 +9433,31 @@ function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha,
 	let currentBackground = null;
 	let currentBackgroundVersion = 0;
 	let currentTonemapping = null;
-
 	function render(renderList, scene) {
 		let forceClear = false;
 		let background = scene.isScene === true ? scene.background : null;
-
 		if (background && background.isTexture) {
 			const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
-
 			background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
-		} // Ignore background in AR
-		// TODO: Reconsider this.
+		}
 
+		// Ignore background in AR
+		// TODO: Reconsider this.
 
 		const xr = renderer.xr;
 		const session = xr.getSession && xr.getSession();
-
 		if (session && session.environmentBlendMode === 'additive') {
 			background = null;
 		}
-
 		if (background === null) {
 			setClear(clearColor, clearAlpha);
 		} else if (background && background.isColor) {
 			setClear(background, 1);
 			forceClear = true;
 		}
-
 		if (renderer.autoClear || forceClear) {
 			renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
 		}
-
 		if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
 			if (boxMesh === undefined) {
 				boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
@@ -10727,12 +9472,11 @@ function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha,
 				}));
 				boxMesh.geometry.deleteAttribute('normal');
 				boxMesh.geometry.deleteAttribute('uv');
-
 				boxMesh.onBeforeRender = function (renderer, scene, camera) {
 					this.matrixWorld.copyPosition(camera.matrixWorld);
-				}; // add "envMap" material property so the renderer can evaluate it like for built-in materials
-
+				};
 
+				// add "envMap" material property so the renderer can evaluate it like for built-in materials
 				Object.defineProperty(boxMesh.material, 'envMap', {
 					get: function () {
 						return this.uniforms.envMap.value;
@@ -10740,21 +9484,19 @@ function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha,
 				});
 				objects.update(boxMesh);
 			}
-
 			boxMesh.material.uniforms.envMap.value = background;
 			boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
 			boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
 			boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
-
 			if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
 				boxMesh.material.needsUpdate = true;
 				currentBackground = background;
 				currentBackgroundVersion = background.version;
 				currentTonemapping = renderer.toneMapping;
 			}
+			boxMesh.layers.enableAll();
 
-			boxMesh.layers.enableAll(); // push to the pre-sorted opaque render list
-
+			// push to the pre-sorted opaque render list
 			renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
 		} else if (background && background.isTexture) {
 			if (planeMesh === undefined) {
@@ -10768,8 +9510,9 @@ function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha,
 					depthWrite: false,
 					fog: false
 				}));
-				planeMesh.geometry.deleteAttribute('normal'); // add "map" material property so the renderer can evaluate it like for built-in materials
+				planeMesh.geometry.deleteAttribute('normal');
 
+				// add "map" material property so the renderer can evaluate it like for built-in materials
 				Object.defineProperty(planeMesh.material, 'map', {
 					get: function () {
 						return this.uniforms.t2D.value;
@@ -10777,34 +9520,28 @@ function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha,
 				});
 				objects.update(planeMesh);
 			}
-
 			planeMesh.material.uniforms.t2D.value = background;
 			planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
-
 			if (background.matrixAutoUpdate === true) {
 				background.updateMatrix();
 			}
-
 			planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
-
 			if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
 				planeMesh.material.needsUpdate = true;
 				currentBackground = background;
 				currentBackgroundVersion = background.version;
 				currentTonemapping = renderer.toneMapping;
 			}
+			planeMesh.layers.enableAll();
 
-			planeMesh.layers.enableAll(); // push to the pre-sorted opaque render list
-
+			// push to the pre-sorted opaque render list
 			renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
 		}
 	}
-
 	function setClear(color, alpha) {
 		color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));
 		state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha);
 	}
-
 	return {
 		getClearColor: function () {
 			return clearColor;
@@ -10833,23 +9570,18 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 	const defaultState = createBindingState(null);
 	let currentState = defaultState;
 	let forceUpdate = false;
-
 	function setup(object, material, program, geometry, index) {
 		let updateBuffers = false;
-
 		if (vaoAvailable) {
 			const state = getBindingState(geometry, program, material);
-
 			if (currentState !== state) {
 				currentState = state;
 				bindVertexArrayObject(currentState.object);
 			}
-
 			updateBuffers = needsUpdate(object, geometry, program, index);
 			if (updateBuffers) saveCache(object, geometry, program, index);
 		} else {
 			const wireframe = material.wireframe === true;
-
 			if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
 				currentState.geometry = geometry.id;
 				currentState.program = program.id;
@@ -10857,73 +9589,57 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 				updateBuffers = true;
 			}
 		}
-
 		if (index !== null) {
 			attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
 		}
-
 		if (updateBuffers || forceUpdate) {
 			forceUpdate = false;
 			setupVertexAttributes(object, material, program, geometry);
-
 			if (index !== null) {
 				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
 			}
 		}
 	}
-
 	function createVertexArrayObject() {
 		if (capabilities.isWebGL2) return gl.createVertexArray();
 		return extension.createVertexArrayOES();
 	}
-
 	function bindVertexArrayObject(vao) {
 		if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
 		return extension.bindVertexArrayOES(vao);
 	}
-
 	function deleteVertexArrayObject(vao) {
 		if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
 		return extension.deleteVertexArrayOES(vao);
 	}
-
 	function getBindingState(geometry, program, material) {
 		const wireframe = material.wireframe === true;
 		let programMap = bindingStates[geometry.id];
-
 		if (programMap === undefined) {
 			programMap = {};
 			bindingStates[geometry.id] = programMap;
 		}
-
 		let stateMap = programMap[program.id];
-
 		if (stateMap === undefined) {
 			stateMap = {};
 			programMap[program.id] = stateMap;
 		}
-
 		let state = stateMap[wireframe];
-
 		if (state === undefined) {
 			state = createBindingState(createVertexArrayObject());
 			stateMap[wireframe] = state;
 		}
-
 		return state;
 	}
-
 	function createBindingState(vao) {
 		const newAttributes = [];
 		const enabledAttributes = [];
 		const attributeDivisors = [];
-
 		for (let i = 0; i < maxVertexAttributes; i++) {
 			newAttributes[i] = 0;
 			enabledAttributes[i] = 0;
 			attributeDivisors[i] = 0;
 		}
-
 		return {
 			// for backward compatibility on non-VAO support browser
 			geometry: null,
@@ -10937,105 +9653,83 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 			index: null
 		};
 	}
-
 	function needsUpdate(object, geometry, program, index) {
 		const cachedAttributes = currentState.attributes;
 		const geometryAttributes = geometry.attributes;
 		let attributesNum = 0;
 		const programAttributes = program.getAttributes();
-
 		for (const name in programAttributes) {
 			const programAttribute = programAttributes[name];
-
 			if (programAttribute.location >= 0) {
 				const cachedAttribute = cachedAttributes[name];
 				let geometryAttribute = geometryAttributes[name];
-
 				if (geometryAttribute === undefined) {
 					if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
 					if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;
 				}
-
 				if (cachedAttribute === undefined) return true;
 				if (cachedAttribute.attribute !== geometryAttribute) return true;
 				if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;
 				attributesNum++;
 			}
 		}
-
 		if (currentState.attributesNum !== attributesNum) return true;
 		if (currentState.index !== index) return true;
 		return false;
 	}
-
 	function saveCache(object, geometry, program, index) {
 		const cache = {};
 		const attributes = geometry.attributes;
 		let attributesNum = 0;
 		const programAttributes = program.getAttributes();
-
 		for (const name in programAttributes) {
 			const programAttribute = programAttributes[name];
-
 			if (programAttribute.location >= 0) {
 				let attribute = attributes[name];
-
 				if (attribute === undefined) {
 					if (name === 'instanceMatrix' && object.instanceMatrix) attribute = object.instanceMatrix;
 					if (name === 'instanceColor' && object.instanceColor) attribute = object.instanceColor;
 				}
-
 				const data = {};
 				data.attribute = attribute;
-
 				if (attribute && attribute.data) {
 					data.data = attribute.data;
 				}
-
 				cache[name] = data;
 				attributesNum++;
 			}
 		}
-
 		currentState.attributes = cache;
 		currentState.attributesNum = attributesNum;
 		currentState.index = index;
 	}
-
 	function initAttributes() {
 		const newAttributes = currentState.newAttributes;
-
 		for (let i = 0, il = newAttributes.length; i < il; i++) {
 			newAttributes[i] = 0;
 		}
 	}
-
 	function enableAttribute(attribute) {
 		enableAttributeAndDivisor(attribute, 0);
 	}
-
 	function enableAttributeAndDivisor(attribute, meshPerAttribute) {
 		const newAttributes = currentState.newAttributes;
 		const enabledAttributes = currentState.enabledAttributes;
 		const attributeDivisors = currentState.attributeDivisors;
 		newAttributes[attribute] = 1;
-
 		if (enabledAttributes[attribute] === 0) {
 			gl.enableVertexAttribArray(attribute);
 			enabledAttributes[attribute] = 1;
 		}
-
 		if (attributeDivisors[attribute] !== meshPerAttribute) {
 			const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');
 			extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);
 			attributeDivisors[attribute] = meshPerAttribute;
 		}
 	}
-
 	function disableUnusedAttributes() {
 		const newAttributes = currentState.newAttributes;
 		const enabledAttributes = currentState.enabledAttributes;
-
 		for (let i = 0, il = enabledAttributes.length; i < il; i++) {
 			if (enabledAttributes[i] !== newAttributes[i]) {
 				gl.disableVertexAttribArray(i);
@@ -11043,7 +9737,6 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 			}
 		}
 	}
-
 	function vertexAttribPointer(index, size, type, normalized, stride, offset) {
 		if (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {
 			gl.vertexAttribIPointer(index, size, type, stride, offset);
@@ -11051,48 +9744,41 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 			gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
 		}
 	}
-
 	function setupVertexAttributes(object, material, program, geometry) {
 		if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
 			if (extensions.get('ANGLE_instanced_arrays') === null) return;
 		}
-
 		initAttributes();
 		const geometryAttributes = geometry.attributes;
 		const programAttributes = program.getAttributes();
 		const materialDefaultAttributeValues = material.defaultAttributeValues;
-
 		for (const name in programAttributes) {
 			const programAttribute = programAttributes[name];
-
 			if (programAttribute.location >= 0) {
 				let geometryAttribute = geometryAttributes[name];
-
 				if (geometryAttribute === undefined) {
 					if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
 					if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;
 				}
-
 				if (geometryAttribute !== undefined) {
 					const normalized = geometryAttribute.normalized;
 					const size = geometryAttribute.itemSize;
-					const attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore
+					const attribute = attributes.get(geometryAttribute);
+
+					// TODO Attribute may not be available on context restore
 
 					if (attribute === undefined) continue;
 					const buffer = attribute.buffer;
 					const type = attribute.type;
 					const bytesPerElement = attribute.bytesPerElement;
-
 					if (geometryAttribute.isInterleavedBufferAttribute) {
 						const data = geometryAttribute.data;
 						const stride = data.stride;
 						const offset = geometryAttribute.offset;
-
 						if (data.isInstancedInterleavedBuffer) {
 							for (let i = 0; i < programAttribute.locationSize; i++) {
 								enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
 							}
-
 							if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {
 								geometry._maxInstanceCount = data.meshPerAttribute * data.count;
 							}
@@ -11101,9 +9787,7 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 								enableAttribute(programAttribute.location + i);
 							}
 						}
-
 						gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
-
 						for (let i = 0; i < programAttribute.locationSize; i++) {
 							vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement);
 						}
@@ -11112,7 +9796,6 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 							for (let i = 0; i < programAttribute.locationSize; i++) {
 								enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
 							}
-
 							if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {
 								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
 							}
@@ -11121,30 +9804,24 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 								enableAttribute(programAttribute.location + i);
 							}
 						}
-
 						gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
-
 						for (let i = 0; i < programAttribute.locationSize; i++) {
 							vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement);
 						}
 					}
 				} else if (materialDefaultAttributeValues !== undefined) {
 					const value = materialDefaultAttributeValues[name];
-
 					if (value !== undefined) {
 						switch (value.length) {
 							case 2:
 								gl.vertexAttrib2fv(programAttribute.location, value);
 								break;
-
 							case 3:
 								gl.vertexAttrib3fv(programAttribute.location, value);
 								break;
-
 							case 4:
 								gl.vertexAttrib4fv(programAttribute.location, value);
 								break;
-
 							default:
 								gl.vertexAttrib1fv(programAttribute.location, value);
 						}
@@ -11152,79 +9829,63 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 				}
 			}
 		}
-
 		disableUnusedAttributes();
 	}
-
 	function dispose() {
 		reset();
-
 		for (const geometryId in bindingStates) {
 			const programMap = bindingStates[geometryId];
-
 			for (const programId in programMap) {
 				const stateMap = programMap[programId];
-
 				for (const wireframe in stateMap) {
 					deleteVertexArrayObject(stateMap[wireframe].object);
 					delete stateMap[wireframe];
 				}
-
 				delete programMap[programId];
 			}
-
 			delete bindingStates[geometryId];
 		}
 	}
-
 	function releaseStatesOfGeometry(geometry) {
 		if (bindingStates[geometry.id] === undefined) return;
 		const programMap = bindingStates[geometry.id];
-
 		for (const programId in programMap) {
 			const stateMap = programMap[programId];
-
 			for (const wireframe in stateMap) {
 				deleteVertexArrayObject(stateMap[wireframe].object);
 				delete stateMap[wireframe];
 			}
-
 			delete programMap[programId];
 		}
-
 		delete bindingStates[geometry.id];
 	}
-
 	function releaseStatesOfProgram(program) {
 		for (const geometryId in bindingStates) {
 			const programMap = bindingStates[geometryId];
 			if (programMap[program.id] === undefined) continue;
 			const stateMap = programMap[program.id];
-
 			for (const wireframe in stateMap) {
 				deleteVertexArrayObject(stateMap[wireframe].object);
 				delete stateMap[wireframe];
 			}
-
 			delete programMap[program.id];
 		}
 	}
-
 	function reset() {
 		resetDefaultState();
 		forceUpdate = true;
 		if (currentState === defaultState) return;
 		currentState = defaultState;
 		bindVertexArrayObject(currentState.object);
-	} // for backward-compatibility
+	}
 
+	// for backward-compatibility
 
 	function resetDefaultState() {
 		defaultState.geometry = null;
 		defaultState.program = null;
 		defaultState.wireframe = false;
 	}
-
 	return {
 		setup: setup,
 		reset: reset,
@@ -11241,37 +9902,32 @@ function WebGLBindingStates(gl, extensions, attributes, capabilities) {
 function WebGLBufferRenderer(gl, extensions, info, capabilities) {
 	const isWebGL2 = capabilities.isWebGL2;
 	let mode;
-
 	function setMode(value) {
 		mode = value;
 	}
-
 	function render(start, count) {
 		gl.drawArrays(mode, start, count);
 		info.update(count, mode, 1);
 	}
-
 	function renderInstances(start, count, primcount) {
 		if (primcount === 0) return;
 		let extension, methodName;
-
 		if (isWebGL2) {
 			extension = gl;
 			methodName = 'drawArraysInstanced';
 		} else {
 			extension = extensions.get('ANGLE_instanced_arrays');
 			methodName = 'drawArraysInstancedANGLE';
-
 			if (extension === null) {
 				console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
 				return;
 			}
 		}
-
 		extension[methodName](mode, start, count, primcount);
 		info.update(count, mode, primcount);
-	} //
+	}
 
+	//
 
 	this.setMode = setMode;
 	this.render = render;
@@ -11280,47 +9936,37 @@ function WebGLBufferRenderer(gl, extensions, info, capabilities) {
 
 function WebGLCapabilities(gl, extensions, parameters) {
 	let maxAnisotropy;
-
 	function getMaxAnisotropy() {
 		if (maxAnisotropy !== undefined) return maxAnisotropy;
-
 		if (extensions.has('EXT_texture_filter_anisotropic') === true) {
 			const extension = extensions.get('EXT_texture_filter_anisotropic');
 			maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
 		} else {
 			maxAnisotropy = 0;
 		}
-
 		return maxAnisotropy;
 	}
-
 	function getMaxPrecision(precision) {
 		if (precision === 'highp') {
 			if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
 				return 'highp';
 			}
-
 			precision = 'mediump';
 		}
-
 		if (precision === 'mediump') {
 			if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
 				return 'mediump';
 			}
 		}
-
 		return 'lowp';
 	}
-
 	const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;
 	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
 	const maxPrecision = getMaxPrecision(precision);
-
 	if (maxPrecision !== precision) {
 		console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');
 		precision = maxPrecision;
 	}
-
 	const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');
 	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
 	const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
@@ -11360,21 +10006,21 @@ function WebGLCapabilities(gl, extensions, parameters) {
 function WebGLClipping(properties) {
 	const scope = this;
 	let globalState = null,
-			numGlobalPlanes = 0,
-			localClippingEnabled = false,
-			renderingShadows = false;
+		numGlobalPlanes = 0,
+		localClippingEnabled = false,
+		renderingShadows = false;
 	const plane = new Plane(),
-				viewNormalMatrix = new Matrix3(),
-				uniform = {
-		value: null,
-		needsUpdate: false
-	};
+		viewNormalMatrix = new Matrix3(),
+		uniform = {
+			value: null,
+			needsUpdate: false
+		};
 	this.uniform = uniform;
 	this.numPlanes = 0;
 	this.numIntersection = 0;
-
 	this.init = function (planes, enableLocalClipping, camera) {
-		const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
+		const enabled = planes.length !== 0 || enableLocalClipping ||
+		// enable state of previous frame - the clipping code has to
 		// run another frame in order to reset the state:
 		numGlobalPlanes !== 0 || localClippingEnabled;
 		localClippingEnabled = enableLocalClipping;
@@ -11382,86 +10028,73 @@ function WebGLClipping(properties) {
 		numGlobalPlanes = planes.length;
 		return enabled;
 	};
-
 	this.beginShadows = function () {
 		renderingShadows = true;
 		projectPlanes(null);
 	};
-
 	this.endShadows = function () {
 		renderingShadows = false;
 		resetGlobalState();
 	};
-
 	this.setState = function (material, camera, useCache) {
 		const planes = material.clippingPlanes,
-					clipIntersection = material.clipIntersection,
-					clipShadows = material.clipShadows;
+			clipIntersection = material.clipIntersection,
+			clipShadows = material.clipShadows;
 		const materialProperties = properties.get(material);
-
 		if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
 			// there's no local clipping
+
 			if (renderingShadows) {
 				// there's no global clipping
+
 				projectPlanes(null);
 			} else {
 				resetGlobalState();
 			}
 		} else {
 			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
-						lGlobal = nGlobal * 4;
+				lGlobal = nGlobal * 4;
 			let dstArray = materialProperties.clippingState || null;
 			uniform.value = dstArray; // ensure unique state
 
 			dstArray = projectPlanes(planes, camera, lGlobal, useCache);
-
 			for (let i = 0; i !== lGlobal; ++i) {
 				dstArray[i] = globalState[i];
 			}
-
 			materialProperties.clippingState = dstArray;
 			this.numIntersection = clipIntersection ? this.numPlanes : 0;
 			this.numPlanes += nGlobal;
 		}
 	};
-
 	function resetGlobalState() {
 		if (uniform.value !== globalState) {
 			uniform.value = globalState;
 			uniform.needsUpdate = numGlobalPlanes > 0;
 		}
-
 		scope.numPlanes = numGlobalPlanes;
 		scope.numIntersection = 0;
 	}
-
 	function projectPlanes(planes, camera, dstOffset, skipTransform) {
 		const nPlanes = planes !== null ? planes.length : 0;
 		let dstArray = null;
-
 		if (nPlanes !== 0) {
 			dstArray = uniform.value;
-
 			if (skipTransform !== true || dstArray === null) {
 				const flatSize = dstOffset + nPlanes * 4,
-							viewMatrix = camera.matrixWorldInverse;
+					viewMatrix = camera.matrixWorldInverse;
 				viewNormalMatrix.getNormalMatrix(viewMatrix);
-
 				if (dstArray === null || dstArray.length < flatSize) {
 					dstArray = new Float32Array(flatSize);
 				}
-
 				for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
 					plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
 					plane.normal.toArray(dstArray, i4);
 					dstArray[i4 + 3] = plane.constant;
 				}
 			}
-
 			uniform.value = dstArray;
 			uniform.needsUpdate = true;
 		}
-
 		scope.numPlanes = nPlanes;
 		scope.numIntersection = 0;
 		return dstArray;
@@ -11470,28 +10103,23 @@ function WebGLClipping(properties) {
 
 function WebGLCubeMaps(renderer) {
 	let cubemaps = new WeakMap();
-
 	function mapTextureMapping(texture, mapping) {
 		if (mapping === EquirectangularReflectionMapping) {
 			texture.mapping = CubeReflectionMapping;
 		} else if (mapping === EquirectangularRefractionMapping) {
 			texture.mapping = CubeRefractionMapping;
 		}
-
 		return texture;
 	}
-
 	function get(texture) {
 		if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
 			const mapping = texture.mapping;
-
 			if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
 				if (cubemaps.has(texture)) {
 					const cubemap = cubemaps.get(texture).texture;
 					return mapTextureMapping(cubemap, texture.mapping);
 				} else {
 					const image = texture.image;
-
 					if (image && image.height > 0) {
 						const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
 						renderTarget.fromEquirectangularTexture(renderer, texture);
@@ -11500,30 +10128,26 @@ function WebGLCubeMaps(renderer) {
 						return mapTextureMapping(renderTarget.texture, texture.mapping);
 					} else {
 						// image not yet ready. try the conversion next frame
+
 						return null;
 					}
 				}
 			}
 		}
-
 		return texture;
 	}
-
 	function onTextureDispose(event) {
 		const texture = event.target;
 		texture.removeEventListener('dispose', onTextureDispose);
 		const cubemap = cubemaps.get(texture);
-
 		if (cubemap !== undefined) {
 			cubemaps.delete(texture);
 			cubemap.dispose();
 		}
 	}
-
 	function dispose() {
 		cubemaps = new WeakMap();
 	}
-
 	return {
 		get: get,
 		dispose: dispose
@@ -11545,7 +10169,6 @@ class OrthographicCamera extends Camera {
 		this.far = far;
 		this.updateProjectionMatrix();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.left = source.left;
@@ -11558,7 +10181,6 @@ class OrthographicCamera extends Camera {
 		this.view = source.view === null ? null : Object.assign({}, source.view);
 		return this;
 	}
-
 	setViewOffset(fullWidth, fullHeight, x, y, width, height) {
 		if (this.view === null) {
 			this.view = {
@@ -11571,7 +10193,6 @@ class OrthographicCamera extends Camera {
 				height: 1
 			};
 		}
-
 		this.view.enabled = true;
 		this.view.fullWidth = fullWidth;
 		this.view.fullHeight = fullHeight;
@@ -11581,15 +10202,12 @@ class OrthographicCamera extends Camera {
 		this.view.height = height;
 		this.updateProjectionMatrix();
 	}
-
 	clearViewOffset() {
 		if (this.view !== null) {
 			this.view.enabled = false;
 		}
-
 		this.updateProjectionMatrix();
 	}
-
 	updateProjectionMatrix() {
 		const dx = (this.right - this.left) / (2 * this.zoom);
 		const dy = (this.top - this.bottom) / (2 * this.zoom);
@@ -11599,7 +10217,6 @@ class OrthographicCamera extends Camera {
 		let right = cx + dx;
 		let top = cy + dy;
 		let bottom = cy - dy;
-
 		if (this.view !== null && this.view.enabled) {
 			const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
 			const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
@@ -11608,11 +10225,9 @@ class OrthographicCamera extends Camera {
 			top -= scaleH * this.view.offsetY;
 			bottom = top - scaleH * this.view.height;
 		}
-
 		this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
 		this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
 	}
-
 	toJSON(meta) {
 		const data = super.toJSON(meta);
 		data.object.zoom = this.zoom;
@@ -11625,30 +10240,31 @@ class OrthographicCamera extends Camera {
 		if (this.view !== null) data.object.view = Object.assign({}, this.view);
 		return data;
 	}
-
 }
 
-const LOD_MIN = 4; // The standard deviations (radians) associated with the extra mips. These are
+const LOD_MIN = 4;
+
+// The standard deviations (radians) associated with the extra mips. These are
 // chosen to approximate a Trowbridge-Reitz distribution function times the
 // geometric shadowing function. These sigma values squared must match the
 // variance #defines in cube_uv_reflection_fragment.glsl.js.
+const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
 
-const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582]; // The maximum length of the blur for loop. Smaller sigmas will use fewer
+// The maximum length of the blur for loop. Smaller sigmas will use fewer
 // samples and exit early, but not recompile the shader.
-
 const MAX_SAMPLES = 20;
-
 const _flatCamera = /*@__PURE__*/new OrthographicCamera();
-
 const _clearColor = /*@__PURE__*/new Color();
+let _oldTarget = null;
 
-let _oldTarget = null; // Golden Ratio
-
+// Golden Ratio
 const PHI = (1 + Math.sqrt(5)) / 2;
-const INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the
-// same axis), used as axis directions evenly spread on a sphere.
+const INV_PHI = 1 / PHI;
 
+// Vertices of a dodecahedron (except the opposites, which represent the
+// same axis), used as axis directions evenly spread on a sphere.
 const _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];
+
 /**
  * This class generates a Prefiltered, Mipmapped Radiance Environment Map
  * (PMREM) from a cubeMap environment texture. This allows different levels of
@@ -11676,9 +10292,9 @@ class PMREMGenerator {
 		this._blurMaterial = null;
 		this._cubemapMaterial = null;
 		this._equirectMaterial = null;
-
 		this._compileMaterial(this._blurMaterial);
 	}
+
 	/**
 	 * Generates a PMREM from a supplied Scene, which can be faster than using an
 	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
@@ -11686,133 +10302,104 @@ class PMREMGenerator {
 	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
 	 * is placed at the origin).
 	 */
-
-
 	fromScene(scene, sigma = 0, near = 0.1, far = 100) {
 		_oldTarget = this._renderer.getRenderTarget();
-
 		this._setSize(256);
-
 		const cubeUVRenderTarget = this._allocateTargets();
-
 		cubeUVRenderTarget.depthBuffer = true;
-
 		this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
-
 		if (sigma > 0) {
 			this._blur(cubeUVRenderTarget, 0, 0, sigma);
 		}
-
 		this._applyPMREM(cubeUVRenderTarget);
-
 		this._cleanup(cubeUVRenderTarget);
-
 		return cubeUVRenderTarget;
 	}
+
 	/**
 	 * Generates a PMREM from an equirectangular texture, which can be either LDR
 	 * or HDR. The ideal input image size is 1k (1024 x 512),
 	 * as this matches best with the 256 x 256 cubemap output.
 	 */
-
-
 	fromEquirectangular(equirectangular, renderTarget = null) {
 		return this._fromTexture(equirectangular, renderTarget);
 	}
+
 	/**
 	 * Generates a PMREM from an cubemap texture, which can be either LDR
 	 * or HDR. The ideal input cube size is 256 x 256,
 	 * as this matches best with the 256 x 256 cubemap output.
 	 */
-
-
 	fromCubemap(cubemap, renderTarget = null) {
 		return this._fromTexture(cubemap, renderTarget);
 	}
+
 	/**
 	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
 	 * your texture's network fetch for increased concurrency.
 	 */
-
-
 	compileCubemapShader() {
 		if (this._cubemapMaterial === null) {
 			this._cubemapMaterial = _getCubemapMaterial();
-
 			this._compileMaterial(this._cubemapMaterial);
 		}
 	}
+
 	/**
 	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
 	 * your texture's network fetch for increased concurrency.
 	 */
-
-
 	compileEquirectangularShader() {
 		if (this._equirectMaterial === null) {
 			this._equirectMaterial = _getEquirectMaterial();
-
 			this._compileMaterial(this._equirectMaterial);
 		}
 	}
+
 	/**
 	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
 	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
 	 * one of them will cause any others to also become unusable.
 	 */
-
-
 	dispose() {
 		this._dispose();
-
 		if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
 		if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
-	} // private interface
+	}
 
+	// private interface
 
 	_setSize(cubeSize) {
 		this._lodMax = Math.floor(Math.log2(cubeSize));
 		this._cubeSize = Math.pow(2, this._lodMax);
 	}
-
 	_dispose() {
 		if (this._blurMaterial !== null) this._blurMaterial.dispose();
 		if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
-
 		for (let i = 0; i < this._lodPlanes.length; i++) {
 			this._lodPlanes[i].dispose();
 		}
 	}
-
 	_cleanup(outputTarget) {
 		this._renderer.setRenderTarget(_oldTarget);
-
 		outputTarget.scissorTest = false;
-
 		_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
 	}
-
 	_fromTexture(texture, renderTarget) {
 		if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
 			this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
 		} else {
 			// Equirectangular
+
 			this._setSize(texture.image.width / 4);
 		}
-
 		_oldTarget = this._renderer.getRenderTarget();
-
 		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
-
 		this._textureToCubeUV(texture, cubeUVRenderTarget);
-
 		this._applyPMREM(cubeUVRenderTarget);
-
 		this._cleanup(cubeUVRenderTarget);
-
 		return cubeUVRenderTarget;
 	}
-
 	_allocateTargets() {
 		const width = 3 * Math.max(this._cubeSize, 16 * 7);
 		const height = 4 * this._cubeSize;
@@ -11825,14 +10412,11 @@ class PMREMGenerator {
 			encoding: LinearEncoding,
 			depthBuffer: false
 		};
-
 		const cubeUVRenderTarget = _createRenderTarget(width, height, params);
-
 		if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width) {
 			if (this._pingPongRenderTarget !== null) {
 				this._dispose();
 			}
-
 			this._pingPongRenderTarget = _createRenderTarget(width, height, params);
 			const {
 				_lodMax
@@ -11844,16 +10428,12 @@ class PMREMGenerator {
 			} = _createPlanes(_lodMax));
 			this._blurMaterial = _getBlurShader(_lodMax, width, height);
 		}
-
 		return cubeUVRenderTarget;
 	}
-
 	_compileMaterial(material) {
 		const tmpMesh = new Mesh(this._lodPlanes[0], material);
-
 		this._renderer.compile(tmpMesh, _flatCamera);
 	}
-
 	_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
 		const fov = 90;
 		const aspect = 1;
@@ -11875,7 +10455,6 @@ class PMREMGenerator {
 		const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
 		let useSolidColor = false;
 		const background = scene.background;
-
 		if (background) {
 			if (background.isColor) {
 				backgroundMaterial.color.copy(background);
@@ -11886,10 +10465,8 @@ class PMREMGenerator {
 			backgroundMaterial.color.copy(_clearColor);
 			useSolidColor = true;
 		}
-
 		for (let i = 0; i < 6; i++) {
 			const col = i % 3;
-
 			if (col === 0) {
 				cubeCamera.up.set(0, upSign[i], 0);
 				cubeCamera.lookAt(forwardSign[i], 0, 0);
@@ -11900,69 +10477,54 @@ class PMREMGenerator {
 				cubeCamera.up.set(0, upSign[i], 0);
 				cubeCamera.lookAt(0, 0, forwardSign[i]);
 			}
-
 			const size = this._cubeSize;
-
 			_setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
-
 			renderer.setRenderTarget(cubeUVRenderTarget);
-
 			if (useSolidColor) {
 				renderer.render(backgroundBox, cubeCamera);
 			}
-
 			renderer.render(scene, cubeCamera);
 		}
-
 		backgroundBox.geometry.dispose();
 		backgroundBox.material.dispose();
 		renderer.toneMapping = toneMapping;
 		renderer.autoClear = originalAutoClear;
 		scene.background = background;
 	}
-
 	_textureToCubeUV(texture, cubeUVRenderTarget) {
 		const renderer = this._renderer;
 		const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
-
 		if (isCubeTexture) {
 			if (this._cubemapMaterial === null) {
 				this._cubemapMaterial = _getCubemapMaterial();
 			}
-
 			this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
 		} else {
 			if (this._equirectMaterial === null) {
 				this._equirectMaterial = _getEquirectMaterial();
 			}
 		}
-
 		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
 		const mesh = new Mesh(this._lodPlanes[0], material);
 		const uniforms = material.uniforms;
 		uniforms['envMap'].value = texture;
 		const size = this._cubeSize;
-
 		_setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
-
 		renderer.setRenderTarget(cubeUVRenderTarget);
 		renderer.render(mesh, _flatCamera);
 	}
-
 	_applyPMREM(cubeUVRenderTarget) {
 		const renderer = this._renderer;
 		const autoClear = renderer.autoClear;
 		renderer.autoClear = false;
-
 		for (let i = 1; i < this._lodPlanes.length; i++) {
 			const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
 			const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
-
 			this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
 		}
-
 		renderer.autoClear = autoClear;
 	}
+
 	/**
 	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
 	 * vertically and horizontally, but this breaks down on a cube. Here we apply
@@ -11970,25 +10532,19 @@ class PMREMGenerator {
 	 * the poles) to approximate the orthogonally-separable blur. It is least
 	 * accurate at the poles, but still does a decent job.
 	 */
-
-
 	_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
 		const pingPongRenderTarget = this._pingPongRenderTarget;
-
 		this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);
-
 		this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);
 	}
-
 	_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
 		const renderer = this._renderer;
 		const blurMaterial = this._blurMaterial;
-
 		if (direction !== 'latitudinal' && direction !== 'longitudinal') {
 			console.error('blur direction must be either latitudinal or longitudinal!');
-		} // Number of standard deviations at which to cut off the discrete approximation.
-
+		}
 
+		// Number of standard deviations at which to cut off the discrete approximation.
 		const STANDARD_DEVIATIONS = 3;
 		const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
 		const blurUniforms = blurMaterial.uniforms;
@@ -11996,39 +10552,31 @@ class PMREMGenerator {
 		const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
 		const sigmaPixels = sigmaRadians / radiansPerPixel;
 		const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
-
 		if (samples > MAX_SAMPLES) {
 			console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
 		}
-
 		const weights = [];
 		let sum = 0;
-
 		for (let i = 0; i < MAX_SAMPLES; ++i) {
 			const x = i / sigmaPixels;
 			const weight = Math.exp(-x * x / 2);
 			weights.push(weight);
-
 			if (i === 0) {
 				sum += weight;
 			} else if (i < samples) {
 				sum += 2 * weight;
 			}
 		}
-
 		for (let i = 0; i < weights.length; i++) {
 			weights[i] = weights[i] / sum;
 		}
-
 		blurUniforms['envMap'].value = targetIn.texture;
 		blurUniforms['samples'].value = samples;
 		blurUniforms['weights'].value = weights;
 		blurUniforms['latitudinal'].value = direction === 'latitudinal';
-
 		if (poleAxis) {
 			blurUniforms['poleAxis'].value = poleAxis;
 		}
-
 		const {
 			_lodMax
 		} = this;
@@ -12037,33 +10585,26 @@ class PMREMGenerator {
 		const outputSize = this._sizeLods[lodOut];
 		const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
 		const y = 4 * (this._cubeSize - outputSize);
-
 		_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
-
 		renderer.setRenderTarget(targetOut);
 		renderer.render(blurMesh, _flatCamera);
 	}
-
 }
-
 function _createPlanes(lodMax) {
 	const lodPlanes = [];
 	const sizeLods = [];
 	const sigmas = [];
 	let lod = lodMax;
 	const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
-
 	for (let i = 0; i < totalLods; i++) {
 		const sizeLod = Math.pow(2, lod);
 		sizeLods.push(sizeLod);
 		let sigma = 1.0 / sizeLod;
-
 		if (i > lodMax - LOD_MIN) {
 			sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
 		} else if (i === 0) {
 			sigma = 0;
 		}
-
 		sigmas.push(sigma);
 		const texelSize = 1.0 / (sizeLod - 2);
 		const min = -texelSize;
@@ -12077,7 +10618,6 @@ function _createPlanes(lodMax) {
 		const position = new Float32Array(positionSize * vertices * cubeFaces);
 		const uv = new Float32Array(uvSize * vertices * cubeFaces);
 		const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
-
 		for (let face = 0; face < cubeFaces; face++) {
 			const x = face % 3 * 2 / 3 - 1;
 			const y = face > 2 ? 0 : -1;
@@ -12087,25 +10627,21 @@ function _createPlanes(lodMax) {
 			const fill = [face, face, face, face, face, face];
 			faceIndex.set(fill, faceIndexSize * vertices * face);
 		}
-
 		const planes = new BufferGeometry();
 		planes.setAttribute('position', new BufferAttribute(position, positionSize));
 		planes.setAttribute('uv', new BufferAttribute(uv, uvSize));
 		planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));
 		lodPlanes.push(planes);
-
 		if (lod > LOD_MIN) {
 			lod--;
 		}
 	}
-
 	return {
 		lodPlanes,
 		sizeLods,
 		sigmas
 	};
 }
-
 function _createRenderTarget(width, height, params) {
 	const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
 	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
@@ -12113,12 +10649,10 @@ function _createRenderTarget(width, height, params) {
 	cubeUVRenderTarget.scissorTest = true;
 	return cubeUVRenderTarget;
 }
-
 function _setViewport(target, x, y, width, height) {
 	target.viewport.set(x, y, width, height);
 	target.scissor.set(x, y, width, height);
 }
-
 function _getBlurShader(lodMax, width, height) {
 	const weights = new Float32Array(MAX_SAMPLES);
 	const poleAxis = new Vector3(0, 1, 0);
@@ -12154,9 +10688,7 @@ function _getBlurShader(lodMax, width, height) {
 			}
 		},
 		vertexShader: _getCommonVertexShader(),
-		fragmentShader:
-		/* glsl */
-		`
+		fragmentShader: /* glsl */`
 
 			precision mediump float;
 			precision mediump int;
@@ -12223,7 +10755,6 @@ function _getBlurShader(lodMax, width, height) {
 	});
 	return shaderMaterial;
 }
-
 function _getEquirectMaterial() {
 	return new ShaderMaterial({
 		name: 'EquirectangularToCubeUV',
@@ -12233,9 +10764,7 @@ function _getEquirectMaterial() {
 			}
 		},
 		vertexShader: _getCommonVertexShader(),
-		fragmentShader:
-		/* glsl */
-		`
+		fragmentShader: /* glsl */`
 
 			precision mediump float;
 			precision mediump int;
@@ -12260,7 +10789,6 @@ function _getEquirectMaterial() {
 		depthWrite: false
 	});
 }
-
 function _getCubemapMaterial() {
 	return new ShaderMaterial({
 		name: 'CubemapToCubeUV',
@@ -12273,9 +10801,7 @@ function _getCubemapMaterial() {
 			}
 		},
 		vertexShader: _getCommonVertexShader(),
-		fragmentShader:
-		/* glsl */
-		`
+		fragmentShader: /* glsl */`
 
 			precision mediump float;
 			precision mediump int;
@@ -12297,11 +10823,8 @@ function _getCubemapMaterial() {
 		depthWrite: false
 	});
 }
-
 function _getCommonVertexShader() {
-	return (
-		/* glsl */
-		`
+	return (/* glsl */`
 
 		precision mediump float;
 		precision mediump int;
@@ -12363,12 +10886,13 @@ function _getCommonVertexShader() {
 function WebGLCubeUVMaps(renderer) {
 	let cubeUVmaps = new WeakMap();
 	let pmremGenerator = null;
-
 	function get(texture) {
 		if (texture && texture.isTexture) {
 			const mapping = texture.mapping;
 			const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
-			const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping; // equirect/cube map to cubeUV conversion
+			const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
+
+			// equirect/cube map to cubeUV conversion
 
 			if (isEquirectMap || isCubeMap) {
 				if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
@@ -12383,7 +10907,6 @@ function WebGLCubeUVMaps(renderer) {
 						return cubeUVmaps.get(texture).texture;
 					} else {
 						const image = texture.image;
-
 						if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
 							if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
 							const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
@@ -12392,47 +10915,39 @@ function WebGLCubeUVMaps(renderer) {
 							return renderTarget.texture;
 						} else {
 							// image not yet ready. try the conversion next frame
+
 							return null;
 						}
 					}
 				}
 			}
 		}
-
 		return texture;
 	}
-
 	function isCubeTextureComplete(image) {
 		let count = 0;
 		const length = 6;
-
 		for (let i = 0; i < length; i++) {
 			if (image[i] !== undefined) count++;
 		}
-
 		return count === length;
 	}
-
 	function onTextureDispose(event) {
 		const texture = event.target;
 		texture.removeEventListener('dispose', onTextureDispose);
 		const cubemapUV = cubeUVmaps.get(texture);
-
 		if (cubemapUV !== undefined) {
 			cubeUVmaps.delete(texture);
 			cubemapUV.dispose();
 		}
 	}
-
 	function dispose() {
 		cubeUVmaps = new WeakMap();
-
 		if (pmremGenerator !== null) {
 			pmremGenerator.dispose();
 			pmremGenerator = null;
 		}
 	}
-
 	return {
 		get: get,
 		dispose: dispose
@@ -12441,39 +10956,30 @@ function WebGLCubeUVMaps(renderer) {
 
 function WebGLExtensions(gl) {
 	const extensions = {};
-
 	function getExtension(name) {
 		if (extensions[name] !== undefined) {
 			return extensions[name];
 		}
-
 		let extension;
-
 		switch (name) {
 			case 'WEBGL_depth_texture':
 				extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
 				break;
-
 			case 'EXT_texture_filter_anisotropic':
 				extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
 				break;
-
 			case 'WEBGL_compressed_texture_s3tc':
 				extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
 				break;
-
 			case 'WEBGL_compressed_texture_pvrtc':
 				extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
 				break;
-
 			default:
 				extension = gl.getExtension(name);
 		}
-
 		extensions[name] = extension;
 		return extension;
 	}
-
 	return {
 		has: function (name) {
 			return getExtension(name) !== null;
@@ -12491,18 +10997,15 @@ function WebGLExtensions(gl) {
 				getExtension('OES_vertex_array_object');
 				getExtension('ANGLE_instanced_arrays');
 			}
-
 			getExtension('OES_texture_float_linear');
 			getExtension('EXT_color_buffer_half_float');
 			getExtension('WEBGL_multisampled_render_to_texture');
 		},
 		get: function (name) {
 			const extension = getExtension(name);
-
 			if (extension === null) {
 				console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');
 			}
-
 			return extension;
 		}
 	};
@@ -12511,37 +11014,30 @@ function WebGLExtensions(gl) {
 function WebGLGeometries(gl, attributes, info, bindingStates) {
 	const geometries = {};
 	const wireframeAttributes = new WeakMap();
-
 	function onGeometryDispose(event) {
 		const geometry = event.target;
-
 		if (geometry.index !== null) {
 			attributes.remove(geometry.index);
 		}
-
 		for (const name in geometry.attributes) {
 			attributes.remove(geometry.attributes[name]);
 		}
-
 		geometry.removeEventListener('dispose', onGeometryDispose);
 		delete geometries[geometry.id];
 		const attribute = wireframeAttributes.get(geometry);
-
 		if (attribute) {
 			attributes.remove(attribute);
 			wireframeAttributes.delete(geometry);
 		}
-
 		bindingStates.releaseStatesOfGeometry(geometry);
-
 		if (geometry.isInstancedBufferGeometry === true) {
 			delete geometry._maxInstanceCount;
-		} //
+		}
 
+		//
 
 		info.memory.geometries--;
 	}
-
 	function get(object, geometry) {
 		if (geometries[geometry.id] === true) return geometry;
 		geometry.addEventListener('dispose', onGeometryDispose);
@@ -12549,36 +11045,33 @@ function WebGLGeometries(gl, attributes, info, bindingStates) {
 		info.memory.geometries++;
 		return geometry;
 	}
-
 	function update(geometry) {
-		const geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.
+		const geometryAttributes = geometry.attributes;
+
+		// Updating index buffer in VAO now. See WebGLBindingStates.
 
 		for (const name in geometryAttributes) {
 			attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
-		} // morph targets
+		}
 
+		// morph targets
 
 		const morphAttributes = geometry.morphAttributes;
-
 		for (const name in morphAttributes) {
 			const array = morphAttributes[name];
-
 			for (let i = 0, l = array.length; i < l; i++) {
 				attributes.update(array[i], gl.ARRAY_BUFFER);
 			}
 		}
 	}
-
 	function updateWireframeAttribute(geometry) {
 		const indices = [];
 		const geometryIndex = geometry.index;
 		const geometryPosition = geometry.attributes.position;
 		let version = 0;
-
 		if (geometryIndex !== null) {
 			const array = geometryIndex.array;
 			version = geometryIndex.version;
-
 			for (let i = 0, l = array.length; i < l; i += 3) {
 				const a = array[i + 0];
 				const b = array[i + 1];
@@ -12588,7 +11081,6 @@ function WebGLGeometries(gl, attributes, info, bindingStates) {
 		} else {
 			const array = geometryPosition.array;
 			version = geometryPosition.version;
-
 			for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
 				const a = i + 0;
 				const b = i + 1;
@@ -12596,25 +11088,27 @@ function WebGLGeometries(gl, attributes, info, bindingStates) {
 				indices.push(a, b, b, c, c, a);
 			}
 		}
-
 		const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
-		attribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates
+		attribute.version = version;
+
+		// Updating index buffer in VAO now. See WebGLBindingStates
+
 		//
 
 		const previousAttribute = wireframeAttributes.get(geometry);
-		if (previousAttribute) attributes.remove(previousAttribute); //
+		if (previousAttribute) attributes.remove(previousAttribute);
+
+		//
 
 		wireframeAttributes.set(geometry, attribute);
 	}
-
 	function getWireframeAttribute(geometry) {
 		const currentAttribute = wireframeAttributes.get(geometry);
-
 		if (currentAttribute) {
 			const geometryIndex = geometry.index;
-
 			if (geometryIndex !== null) {
 				// if the attribute is obsolete, create a new one
+
 				if (currentAttribute.version < geometryIndex.version) {
 					updateWireframeAttribute(geometry);
 				}
@@ -12622,10 +11116,8 @@ function WebGLGeometries(gl, attributes, info, bindingStates) {
 		} else {
 			updateWireframeAttribute(geometry);
 		}
-
 		return wireframeAttributes.get(geometry);
 	}
-
 	return {
 		get: get,
 		update: update,
@@ -12636,44 +11128,37 @@ function WebGLGeometries(gl, attributes, info, bindingStates) {
 function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
 	const isWebGL2 = capabilities.isWebGL2;
 	let mode;
-
 	function setMode(value) {
 		mode = value;
 	}
-
 	let type, bytesPerElement;
-
 	function setIndex(value) {
 		type = value.type;
 		bytesPerElement = value.bytesPerElement;
 	}
-
 	function render(start, count) {
 		gl.drawElements(mode, count, type, start * bytesPerElement);
 		info.update(count, mode, 1);
 	}
-
 	function renderInstances(start, count, primcount) {
 		if (primcount === 0) return;
 		let extension, methodName;
-
 		if (isWebGL2) {
 			extension = gl;
 			methodName = 'drawElementsInstanced';
 		} else {
 			extension = extensions.get('ANGLE_instanced_arrays');
 			methodName = 'drawElementsInstancedANGLE';
-
 			if (extension === null) {
 				console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
 				return;
 			}
 		}
-
 		extension[methodName](mode, count, type, start * bytesPerElement, primcount);
 		info.update(count, mode, primcount);
-	} //
+	}
 
+	//
 
 	this.setMode = setMode;
 	this.setIndex = setIndex;
@@ -12693,37 +11178,29 @@ function WebGLInfo(gl) {
 		points: 0,
 		lines: 0
 	};
-
 	function update(count, mode, instanceCount) {
 		render.calls++;
-
 		switch (mode) {
 			case gl.TRIANGLES:
 				render.triangles += instanceCount * (count / 3);
 				break;
-
 			case gl.LINES:
 				render.lines += instanceCount * (count / 2);
 				break;
-
 			case gl.LINE_STRIP:
 				render.lines += instanceCount * (count - 1);
 				break;
-
 			case gl.LINE_LOOP:
 				render.lines += instanceCount * count;
 				break;
-
 			case gl.POINTS:
 				render.points += instanceCount * count;
 				break;
-
 			default:
 				console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
 				break;
 		}
 	}
-
 	function reset() {
 		render.frame++;
 		render.calls = 0;
@@ -12731,7 +11208,6 @@ function WebGLInfo(gl) {
 		render.points = 0;
 		render.lines = 0;
 	}
-
 	return {
 		memory: memory,
 		render: render,
@@ -12745,32 +11221,27 @@ function WebGLInfo(gl) {
 function numericalSort(a, b) {
 	return a[0] - b[0];
 }
-
 function absNumericalSort(a, b) {
 	return Math.abs(b[1]) - Math.abs(a[1]);
 }
-
 function WebGLMorphtargets(gl, capabilities, textures) {
 	const influencesList = {};
 	const morphInfluences = new Float32Array(8);
 	const morphTextures = new WeakMap();
 	const morph = new Vector4();
 	const workInfluences = [];
-
 	for (let i = 0; i < 8; i++) {
 		workInfluences[i] = [i, 0];
 	}
-
 	function update(object, geometry, material, program) {
 		const objectInfluences = object.morphTargetInfluences;
-
 		if (capabilities.isWebGL2 === true) {
 			// instead of using attributes, the WebGL 2 code path encodes morph targets
 			// into an array of data textures. Each layer represents a single morph target.
+
 			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
 			const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
 			let entry = morphTextures.get(geometry);
-
 			if (entry === undefined || entry.count !== morphTargetsCount) {
 				if (entry !== undefined) entry.texture.dispose();
 				const hasMorphPosition = geometry.morphAttributes.position !== undefined;
@@ -12785,28 +11256,25 @@ function WebGLMorphtargets(gl, capabilities, textures) {
 				if (hasMorphColors === true) vertexDataCount = 3;
 				let width = geometry.attributes.position.count * vertexDataCount;
 				let height = 1;
-
 				if (width > capabilities.maxTextureSize) {
 					height = Math.ceil(width / capabilities.maxTextureSize);
 					width = capabilities.maxTextureSize;
 				}
-
 				const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
 				const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
 				texture.type = FloatType;
-				texture.needsUpdate = true; // fill buffer
+				texture.needsUpdate = true;
 
-				const vertexDataStride = vertexDataCount * 4;
+				// fill buffer
 
+				const vertexDataStride = vertexDataCount * 4;
 				for (let i = 0; i < morphTargetsCount; i++) {
 					const morphTarget = morphTargets[i];
 					const morphNormal = morphNormals[i];
 					const morphColor = morphColors[i];
 					const offset = width * height * 4 * i;
-
 					for (let j = 0; j < morphTarget.count; j++) {
 						const stride = j * vertexDataStride;
-
 						if (hasMorphPosition === true) {
 							morph.fromBufferAttribute(morphTarget, j);
 							buffer[offset + stride + 0] = morph.x;
@@ -12814,7 +11282,6 @@ function WebGLMorphtargets(gl, capabilities, textures) {
 							buffer[offset + stride + 2] = morph.z;
 							buffer[offset + stride + 3] = 0;
 						}
-
 						if (hasMorphNormals === true) {
 							morph.fromBufferAttribute(morphNormal, j);
 							buffer[offset + stride + 4] = morph.x;
@@ -12822,7 +11289,6 @@ function WebGLMorphtargets(gl, capabilities, textures) {
 							buffer[offset + stride + 6] = morph.z;
 							buffer[offset + stride + 7] = 0;
 						}
-
 						if (hasMorphColors === true) {
 							morph.fromBufferAttribute(morphColor, j);
 							buffer[offset + stride + 8] = morph.x;
@@ -12832,30 +11298,26 @@ function WebGLMorphtargets(gl, capabilities, textures) {
 						}
 					}
 				}
-
 				entry = {
 					count: morphTargetsCount,
 					texture: texture,
 					size: new Vector2(width, height)
 				};
 				morphTextures.set(geometry, entry);
-
 				function disposeTexture() {
 					texture.dispose();
 					morphTextures.delete(geometry);
 					geometry.removeEventListener('dispose', disposeTexture);
 				}
-
 				geometry.addEventListener('dispose', disposeTexture);
-			} //
+			}
 
+			//
 
 			let morphInfluencesSum = 0;
-
 			for (let i = 0; i < objectInfluences.length; i++) {
 				morphInfluencesSum += objectInfluences[i];
 			}
-
 			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
 			program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
 			program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);
@@ -12864,29 +11326,27 @@ function WebGLMorphtargets(gl, capabilities, textures) {
 		} else {
 			// When object doesn't have morph target influences defined, we treat it as a 0-length array
 			// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
+
 			const length = objectInfluences === undefined ? 0 : objectInfluences.length;
 			let influences = influencesList[geometry.id];
-
 			if (influences === undefined || influences.length !== length) {
 				// initialise list
-				influences = [];
 
+				influences = [];
 				for (let i = 0; i < length; i++) {
 					influences[i] = [i, 0];
 				}
-
 				influencesList[geometry.id] = influences;
-			} // Collect influences
+			}
 
+			// Collect influences
 
 			for (let i = 0; i < length; i++) {
 				const influence = influences[i];
 				influence[0] = i;
 				influence[1] = objectInfluences[i];
 			}
-
 			influences.sort(absNumericalSort);
-
 			for (let i = 0; i < 8; i++) {
 				if (i < length && influences[i][1]) {
 					workInfluences[i][0] = influences[i][0];
@@ -12896,50 +11356,42 @@ function WebGLMorphtargets(gl, capabilities, textures) {
 					workInfluences[i][1] = 0;
 				}
 			}
-
 			workInfluences.sort(numericalSort);
 			const morphTargets = geometry.morphAttributes.position;
 			const morphNormals = geometry.morphAttributes.normal;
 			let morphInfluencesSum = 0;
-
 			for (let i = 0; i < 8; i++) {
 				const influence = workInfluences[i];
 				const index = influence[0];
 				const value = influence[1];
-
 				if (index !== Number.MAX_SAFE_INTEGER && value) {
 					if (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {
 						geometry.setAttribute('morphTarget' + i, morphTargets[index]);
 					}
-
 					if (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {
 						geometry.setAttribute('morphNormal' + i, morphNormals[index]);
 					}
-
 					morphInfluences[i] = value;
 					morphInfluencesSum += value;
 				} else {
 					if (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {
 						geometry.deleteAttribute('morphTarget' + i);
 					}
-
 					if (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {
 						geometry.deleteAttribute('morphNormal' + i);
 					}
-
 					morphInfluences[i] = 0;
 				}
-			} // GLSL shader uses formula baseinfluence * base + sum(target * influence)
+			}
+
+			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
 			// This allows us to switch between absolute morphs and relative morphs without changing shader code
 			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
-
-
 			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
 			program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
 			program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
 		}
 	}
-
 	return {
 		update: update
 	};
@@ -12947,43 +11399,37 @@ function WebGLMorphtargets(gl, capabilities, textures) {
 
 function WebGLObjects(gl, geometries, attributes, info) {
 	let updateMap = new WeakMap();
-
 	function update(object) {
 		const frame = info.render.frame;
 		const geometry = object.geometry;
-		const buffergeometry = geometries.get(object, geometry); // Update once per frame
+		const buffergeometry = geometries.get(object, geometry);
+
+		// Update once per frame
 
 		if (updateMap.get(buffergeometry) !== frame) {
 			geometries.update(buffergeometry);
 			updateMap.set(buffergeometry, frame);
 		}
-
 		if (object.isInstancedMesh) {
 			if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {
 				object.addEventListener('dispose', onInstancedMeshDispose);
 			}
-
 			attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
-
 			if (object.instanceColor !== null) {
 				attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
 			}
 		}
-
 		return buffergeometry;
 	}
-
 	function dispose() {
 		updateMap = new WeakMap();
 	}
-
 	function onInstancedMeshDispose(event) {
 		const instancedMesh = event.target;
 		instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);
 		attributes.remove(instancedMesh.instanceMatrix);
 		if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
 	}
-
 	return {
 		update: update,
 		dispose: dispose
@@ -13035,88 +11481,89 @@ function WebGLObjects(gl, geometries, attributes, info) {
 const emptyTexture = /*@__PURE__*/new Texture();
 const emptyArrayTexture = /*@__PURE__*/new DataArrayTexture();
 const empty3dTexture = /*@__PURE__*/new Data3DTexture();
-const emptyCubeTexture = /*@__PURE__*/new CubeTexture(); // --- Utilities ---
+const emptyCubeTexture = /*@__PURE__*/new CubeTexture();
+
+// --- Utilities ---
+
 // Array Caches (provide typed arrays for temporary by size)
 
 const arrayCacheF32 = [];
-const arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms
+const arrayCacheI32 = [];
+
+// Float32Array caches used for uploading Matrix uniforms
 
 const mat4array = new Float32Array(16);
 const mat3array = new Float32Array(9);
-const mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices
+const mat2array = new Float32Array(4);
+
+// Flattening for arrays of vectors and matrices
 
 function flatten(array, nBlocks, blockSize) {
 	const firstElem = array[0];
-	if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )
+	if (firstElem <= 0 || firstElem > 0) return array;
+	// unoptimized: ! isNaN( firstElem )
 	// see http://jacksondunstan.com/articles/983
 
 	const n = nBlocks * blockSize;
 	let r = arrayCacheF32[n];
-
 	if (r === undefined) {
 		r = new Float32Array(n);
 		arrayCacheF32[n] = r;
 	}
-
 	if (nBlocks !== 0) {
 		firstElem.toArray(r, 0);
-
 		for (let i = 1, offset = 0; i !== nBlocks; ++i) {
 			offset += blockSize;
 			array[i].toArray(r, offset);
 		}
 	}
-
 	return r;
 }
-
 function arraysEqual(a, b) {
 	if (a.length !== b.length) return false;
-
 	for (let i = 0, l = a.length; i < l; i++) {
 		if (a[i] !== b[i]) return false;
 	}
-
 	return true;
 }
-
 function copyArray(a, b) {
 	for (let i = 0, l = b.length; i < l; i++) {
 		a[i] = b[i];
 	}
-} // Texture unit allocation
+}
 
+// Texture unit allocation
 
 function allocTexUnits(textures, n) {
 	let r = arrayCacheI32[n];
-
 	if (r === undefined) {
 		r = new Int32Array(n);
 		arrayCacheI32[n] = r;
 	}
-
 	for (let i = 0; i !== n; ++i) {
 		r[i] = textures.allocateTextureUnit();
 	}
-
 	return r;
-} // --- Setters ---
+}
+
+// --- Setters ---
+
 // Note: Defining these methods externally, because they come in a bunch
 // and this way their names minify.
-// Single scalar
 
+// Single scalar
 
 function setValueV1f(gl, v) {
 	const cache = this.cache;
 	if (cache[0] === v) return;
 	gl.uniform1f(this.addr, v);
 	cache[0] = v;
-} // Single float vector (from flat array or THREE.VectorN)
+}
 
+// Single float vector (from flat array or THREE.VectorN)
 
 function setValueV2f(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y) {
 			gl.uniform2f(this.addr, v.x, v.y);
@@ -13129,10 +11576,8 @@ function setValueV2f(gl, v) {
 		copyArray(cache, v);
 	}
 }
-
 function setValueV3f(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
 			gl.uniform3f(this.addr, v.x, v.y, v.z);
@@ -13153,10 +11598,8 @@ function setValueV3f(gl, v) {
 		copyArray(cache, v);
 	}
 }
-
 function setValueV4f(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
 			gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
@@ -13170,13 +11613,13 @@ function setValueV4f(gl, v) {
 		gl.uniform4fv(this.addr, v);
 		copyArray(cache, v);
 	}
-} // Single matrix (from flat array or THREE.MatrixN)
+}
 
+// Single matrix (from flat array or THREE.MatrixN)
 
 function setValueM2(gl, v) {
 	const cache = this.cache;
 	const elements = v.elements;
-
 	if (elements === undefined) {
 		if (arraysEqual(cache, v)) return;
 		gl.uniformMatrix2fv(this.addr, false, v);
@@ -13188,11 +11631,9 @@ function setValueM2(gl, v) {
 		copyArray(cache, elements);
 	}
 }
-
 function setValueM3(gl, v) {
 	const cache = this.cache;
 	const elements = v.elements;
-
 	if (elements === undefined) {
 		if (arraysEqual(cache, v)) return;
 		gl.uniformMatrix3fv(this.addr, false, v);
@@ -13204,11 +11645,9 @@ function setValueM3(gl, v) {
 		copyArray(cache, elements);
 	}
 }
-
 function setValueM4(gl, v) {
 	const cache = this.cache;
 	const elements = v.elements;
-
 	if (elements === undefined) {
 		if (arraysEqual(cache, v)) return;
 		gl.uniformMatrix4fv(this.addr, false, v);
@@ -13219,20 +11658,21 @@ function setValueM4(gl, v) {
 		gl.uniformMatrix4fv(this.addr, false, mat4array);
 		copyArray(cache, elements);
 	}
-} // Single integer / boolean
+}
 
+// Single integer / boolean
 
 function setValueV1i(gl, v) {
 	const cache = this.cache;
 	if (cache[0] === v) return;
 	gl.uniform1i(this.addr, v);
 	cache[0] = v;
-} // Single integer / boolean vector (from flat array or THREE.VectorN)
+}
 
+// Single integer / boolean vector (from flat array or THREE.VectorN)
 
 function setValueV2i(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y) {
 			gl.uniform2i(this.addr, v.x, v.y);
@@ -13245,10 +11685,8 @@ function setValueV2i(gl, v) {
 		copyArray(cache, v);
 	}
 }
-
 function setValueV3i(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
 			gl.uniform3i(this.addr, v.x, v.y, v.z);
@@ -13262,10 +11700,8 @@ function setValueV3i(gl, v) {
 		copyArray(cache, v);
 	}
 }
-
 function setValueV4i(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
 			gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
@@ -13279,20 +11715,21 @@ function setValueV4i(gl, v) {
 		gl.uniform4iv(this.addr, v);
 		copyArray(cache, v);
 	}
-} // Single unsigned integer
+}
 
+// Single unsigned integer
 
 function setValueV1ui(gl, v) {
 	const cache = this.cache;
 	if (cache[0] === v) return;
 	gl.uniform1ui(this.addr, v);
 	cache[0] = v;
-} // Single unsigned integer vector (from flat array or THREE.VectorN)
+}
 
+// Single unsigned integer vector (from flat array or THREE.VectorN)
 
 function setValueV2ui(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y) {
 			gl.uniform2ui(this.addr, v.x, v.y);
@@ -13305,10 +11742,8 @@ function setValueV2ui(gl, v) {
 		copyArray(cache, v);
 	}
 }
-
 function setValueV3ui(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
 			gl.uniform3ui(this.addr, v.x, v.y, v.z);
@@ -13322,10 +11757,8 @@ function setValueV3ui(gl, v) {
 		copyArray(cache, v);
 	}
 }
-
 function setValueV4ui(gl, v) {
 	const cache = this.cache;
-
 	if (v.x !== undefined) {
 		if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
 			gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
@@ -13339,72 +11772,60 @@ function setValueV4ui(gl, v) {
 		gl.uniform4uiv(this.addr, v);
 		copyArray(cache, v);
 	}
-} // Single texture (2D / Cube)
+}
 
+// Single texture (2D / Cube)
 
 function setValueT1(gl, v, textures) {
 	const cache = this.cache;
 	const unit = textures.allocateTextureUnit();
-
 	if (cache[0] !== unit) {
 		gl.uniform1i(this.addr, unit);
 		cache[0] = unit;
 	}
-
 	textures.setTexture2D(v || emptyTexture, unit);
 }
-
 function setValueT3D1(gl, v, textures) {
 	const cache = this.cache;
 	const unit = textures.allocateTextureUnit();
-
 	if (cache[0] !== unit) {
 		gl.uniform1i(this.addr, unit);
 		cache[0] = unit;
 	}
-
 	textures.setTexture3D(v || empty3dTexture, unit);
 }
-
 function setValueT6(gl, v, textures) {
 	const cache = this.cache;
 	const unit = textures.allocateTextureUnit();
-
 	if (cache[0] !== unit) {
 		gl.uniform1i(this.addr, unit);
 		cache[0] = unit;
 	}
-
 	textures.setTextureCube(v || emptyCubeTexture, unit);
 }
-
 function setValueT2DArray1(gl, v, textures) {
 	const cache = this.cache;
 	const unit = textures.allocateTextureUnit();
-
 	if (cache[0] !== unit) {
 		gl.uniform1i(this.addr, unit);
 		cache[0] = unit;
 	}
-
 	textures.setTexture2DArray(v || emptyArrayTexture, unit);
-} // Helper to pick the right setter for the singular case
+}
 
+// Helper to pick the right setter for the singular case
 
 function getSingularSetter(type) {
 	switch (type) {
 		case 0x1406:
 			return setValueV1f;
 		// FLOAT
-
 		case 0x8b50:
 			return setValueV2f;
 		// _VEC2
-
 		case 0x8b51:
 			return setValueV3f;
 		// _VEC3
-
 		case 0x8b52:
 			return setValueV4f;
 		// _VEC4
@@ -13412,11 +11833,9 @@ function getSingularSetter(type) {
 		case 0x8b5a:
 			return setValueM2;
 		// _MAT2
-
 		case 0x8b5b:
 			return setValueM3;
 		// _MAT3
-
 		case 0x8b5c:
 			return setValueM4;
 		// _MAT4
@@ -13425,17 +11844,14 @@ function getSingularSetter(type) {
 		case 0x8b56:
 			return setValueV1i;
 		// INT, BOOL
-
 		case 0x8b53:
 		case 0x8b57:
 			return setValueV2i;
 		// _VEC2
-
 		case 0x8b54:
 		case 0x8b58:
 			return setValueV3i;
 		// _VEC3
-
 		case 0x8b55:
 		case 0x8b59:
 			return setValueV4i;
@@ -13444,210 +11860,179 @@ function getSingularSetter(type) {
 		case 0x1405:
 			return setValueV1ui;
 		// UINT
-
 		case 0x8dc6:
 			return setValueV2ui;
 		// _VEC2
-
 		case 0x8dc7:
 			return setValueV3ui;
 		// _VEC3
-
 		case 0x8dc8:
 			return setValueV4ui;
 		// _VEC4
 
 		case 0x8b5e: // SAMPLER_2D
-
 		case 0x8d66: // SAMPLER_EXTERNAL_OES
-
 		case 0x8dca: // INT_SAMPLER_2D
-
 		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
-
 		case 0x8b62:
 			// SAMPLER_2D_SHADOW
 			return setValueT1;
-
 		case 0x8b5f: // SAMPLER_3D
-
 		case 0x8dcb: // INT_SAMPLER_3D
-
 		case 0x8dd3:
 			// UNSIGNED_INT_SAMPLER_3D
 			return setValueT3D1;
-
 		case 0x8b60: // SAMPLER_CUBE
-
 		case 0x8dcc: // INT_SAMPLER_CUBE
-
 		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
-
 		case 0x8dc5:
 			// SAMPLER_CUBE_SHADOW
 			return setValueT6;
-
 		case 0x8dc1: // SAMPLER_2D_ARRAY
-
 		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
-
 		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
-
 		case 0x8dc4:
 			// SAMPLER_2D_ARRAY_SHADOW
 			return setValueT2DArray1;
 	}
-} // Array of scalars
+}
 
+// Array of scalars
 
 function setValueV1fArray(gl, v) {
 	gl.uniform1fv(this.addr, v);
-} // Array of vectors (from flat array or array of THREE.VectorN)
+}
 
+// Array of vectors (from flat array or array of THREE.VectorN)
 
 function setValueV2fArray(gl, v) {
 	const data = flatten(v, this.size, 2);
 	gl.uniform2fv(this.addr, data);
 }
-
 function setValueV3fArray(gl, v) {
 	const data = flatten(v, this.size, 3);
 	gl.uniform3fv(this.addr, data);
 }
-
 function setValueV4fArray(gl, v) {
 	const data = flatten(v, this.size, 4);
 	gl.uniform4fv(this.addr, data);
-} // Array of matrices (from flat array or array of THREE.MatrixN)
+}
 
+// Array of matrices (from flat array or array of THREE.MatrixN)
 
 function setValueM2Array(gl, v) {
 	const data = flatten(v, this.size, 4);
 	gl.uniformMatrix2fv(this.addr, false, data);
 }
-
 function setValueM3Array(gl, v) {
 	const data = flatten(v, this.size, 9);
 	gl.uniformMatrix3fv(this.addr, false, data);
 }
-
 function setValueM4Array(gl, v) {
 	const data = flatten(v, this.size, 16);
 	gl.uniformMatrix4fv(this.addr, false, data);
-} // Array of integer / boolean
+}
 
+// Array of integer / boolean
 
 function setValueV1iArray(gl, v) {
 	gl.uniform1iv(this.addr, v);
-} // Array of integer / boolean vectors (from flat array)
+}
 
+// Array of integer / boolean vectors (from flat array)
 
 function setValueV2iArray(gl, v) {
 	gl.uniform2iv(this.addr, v);
 }
-
 function setValueV3iArray(gl, v) {
 	gl.uniform3iv(this.addr, v);
 }
-
 function setValueV4iArray(gl, v) {
 	gl.uniform4iv(this.addr, v);
-} // Array of unsigned integer
+}
 
+// Array of unsigned integer
 
 function setValueV1uiArray(gl, v) {
 	gl.uniform1uiv(this.addr, v);
-} // Array of unsigned integer vectors (from flat array)
+}
 
+// Array of unsigned integer vectors (from flat array)
 
 function setValueV2uiArray(gl, v) {
 	gl.uniform2uiv(this.addr, v);
 }
-
 function setValueV3uiArray(gl, v) {
 	gl.uniform3uiv(this.addr, v);
 }
-
 function setValueV4uiArray(gl, v) {
 	gl.uniform4uiv(this.addr, v);
-} // Array of textures (2D / 3D / Cube / 2DArray)
+}
 
+// Array of textures (2D / 3D / Cube / 2DArray)
 
 function setValueT1Array(gl, v, textures) {
 	const cache = this.cache;
 	const n = v.length;
 	const units = allocTexUnits(textures, n);
-
 	if (!arraysEqual(cache, units)) {
 		gl.uniform1iv(this.addr, units);
 		copyArray(cache, units);
 	}
-
 	for (let i = 0; i !== n; ++i) {
 		textures.setTexture2D(v[i] || emptyTexture, units[i]);
 	}
 }
-
 function setValueT3DArray(gl, v, textures) {
 	const cache = this.cache;
 	const n = v.length;
 	const units = allocTexUnits(textures, n);
-
 	if (!arraysEqual(cache, units)) {
 		gl.uniform1iv(this.addr, units);
 		copyArray(cache, units);
 	}
-
 	for (let i = 0; i !== n; ++i) {
 		textures.setTexture3D(v[i] || empty3dTexture, units[i]);
 	}
 }
-
 function setValueT6Array(gl, v, textures) {
 	const cache = this.cache;
 	const n = v.length;
 	const units = allocTexUnits(textures, n);
-
 	if (!arraysEqual(cache, units)) {
 		gl.uniform1iv(this.addr, units);
 		copyArray(cache, units);
 	}
-
 	for (let i = 0; i !== n; ++i) {
 		textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
 	}
 }
-
 function setValueT2DArrayArray(gl, v, textures) {
 	const cache = this.cache;
 	const n = v.length;
 	const units = allocTexUnits(textures, n);
-
 	if (!arraysEqual(cache, units)) {
 		gl.uniform1iv(this.addr, units);
 		copyArray(cache, units);
 	}
-
 	for (let i = 0; i !== n; ++i) {
 		textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
 	}
-} // Helper to pick the right setter for a pure (bottom-level) array
+}
 
+// Helper to pick the right setter for a pure (bottom-level) array
 
 function getPureArraySetter(type) {
 	switch (type) {
 		case 0x1406:
 			return setValueV1fArray;
 		// FLOAT
-
 		case 0x8b50:
 			return setValueV2fArray;
 		// _VEC2
-
 		case 0x8b51:
 			return setValueV3fArray;
 		// _VEC3
-
 		case 0x8b52:
 			return setValueV4fArray;
 		// _VEC4
@@ -13655,11 +12040,9 @@ function getPureArraySetter(type) {
 		case 0x8b5a:
 			return setValueM2Array;
 		// _MAT2
-
 		case 0x8b5b:
 			return setValueM3Array;
 		// _MAT3
-
 		case 0x8b5c:
 			return setValueM4Array;
 		// _MAT4
@@ -13668,17 +12051,14 @@ function getPureArraySetter(type) {
 		case 0x8b56:
 			return setValueV1iArray;
 		// INT, BOOL
-
 		case 0x8b53:
 		case 0x8b57:
 			return setValueV2iArray;
 		// _VEC2
-
 		case 0x8b54:
 		case 0x8b58:
 			return setValueV3iArray;
 		// _VEC3
-
 		case 0x8b55:
 		case 0x8b59:
 			return setValueV4iArray;
@@ -13687,70 +12067,54 @@ function getPureArraySetter(type) {
 		case 0x1405:
 			return setValueV1uiArray;
 		// UINT
-
 		case 0x8dc6:
 			return setValueV2uiArray;
 		// _VEC2
-
 		case 0x8dc7:
 			return setValueV3uiArray;
 		// _VEC3
-
 		case 0x8dc8:
 			return setValueV4uiArray;
 		// _VEC4
 
 		case 0x8b5e: // SAMPLER_2D
-
 		case 0x8d66: // SAMPLER_EXTERNAL_OES
-
 		case 0x8dca: // INT_SAMPLER_2D
-
 		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
-
 		case 0x8b62:
 			// SAMPLER_2D_SHADOW
 			return setValueT1Array;
-
 		case 0x8b5f: // SAMPLER_3D
-
 		case 0x8dcb: // INT_SAMPLER_3D
-
 		case 0x8dd3:
 			// UNSIGNED_INT_SAMPLER_3D
 			return setValueT3DArray;
-
 		case 0x8b60: // SAMPLER_CUBE
-
 		case 0x8dcc: // INT_SAMPLER_CUBE
-
 		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
-
 		case 0x8dc5:
 			// SAMPLER_CUBE_SHADOW
 			return setValueT6Array;
-
 		case 0x8dc1: // SAMPLER_2D_ARRAY
-
 		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
-
 		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
-
 		case 0x8dc4:
 			// SAMPLER_2D_ARRAY_SHADOW
 			return setValueT2DArrayArray;
 	}
-} // --- Uniform Classes ---
+}
 
+// --- Uniform Classes ---
 
 class SingleUniform {
 	constructor(id, activeInfo, addr) {
 		this.id = id;
 		this.addr = addr;
 		this.cache = [];
-		this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
-	}
+		this.setValue = getSingularSetter(activeInfo.type);
 
+		// this.path = activeInfo.name; // DEBUG
+	}
 }
 
 class PureArrayUniform {
@@ -13759,9 +12123,10 @@ class PureArrayUniform {
 		this.addr = addr;
 		this.cache = [];
 		this.size = activeInfo.size;
-		this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
-	}
+		this.setValue = getPureArraySetter(activeInfo.type);
 
+		// this.path = activeInfo.name; // DEBUG
+	}
 }
 
 class StructuredUniform {
@@ -13770,21 +12135,22 @@ class StructuredUniform {
 		this.seq = [];
 		this.map = {};
 	}
-
 	setValue(gl, value, textures) {
 		const seq = this.seq;
-
 		for (let i = 0, n = seq.length; i !== n; ++i) {
 			const u = seq[i];
 			u.setValue(gl, value[u.id], textures);
 		}
 	}
+}
+
+// --- Top-level ---
 
-} // --- Top-level ---
 // Parser - builds up the property tree from the path strings
 
+const RePathPart = /(\w+)(\])?(\[|\.)?/g;
 
-const RePathPart = /(\w+)(\])?(\[|\.)?/g; // extracts
+// extracts
 // 	- the identifier (member name or array index)
 //	- followed by an optional right bracket (found when array index)
 //	- followed by an optional left bracket or dot (type of subscript)
@@ -13797,87 +12163,78 @@ function addUniform(container, uniformObject) {
 	container.seq.push(uniformObject);
 	container.map[uniformObject.id] = uniformObject;
 }
-
 function parseUniform(activeInfo, addr, container) {
 	const path = activeInfo.name,
-				pathLength = path.length; // reset RegExp object, because of the early exit of a previous run
+		pathLength = path.length;
 
+	// reset RegExp object, because of the early exit of a previous run
 	RePathPart.lastIndex = 0;
-
 	while (true) {
 		const match = RePathPart.exec(path),
-					matchEnd = RePathPart.lastIndex;
+			matchEnd = RePathPart.lastIndex;
 		let id = match[1];
 		const idIsIndex = match[2] === ']',
-					subscript = match[3];
+			subscript = match[3];
 		if (idIsIndex) id = id | 0; // convert to integer
 
 		if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {
 			// bare name or "pure" bottom-level array "[0]" suffix
+
 			addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
 			break;
 		} else {
 			// step into inner node / create it in case it doesn't exist
+
 			const map = container.map;
 			let next = map[id];
-
 			if (next === undefined) {
 				next = new StructuredUniform(id);
 				addUniform(container, next);
 			}
-
 			container = next;
 		}
 	}
-} // Root Container
+}
 
+// Root Container
 
 class WebGLUniforms {
 	constructor(gl, program) {
 		this.seq = [];
 		this.map = {};
 		const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
-
 		for (let i = 0; i < n; ++i) {
 			const info = gl.getActiveUniform(program, i),
-						addr = gl.getUniformLocation(program, info.name);
+				addr = gl.getUniformLocation(program, info.name);
 			parseUniform(info, addr, this);
 		}
 	}
-
 	setValue(gl, name, value, textures) {
 		const u = this.map[name];
 		if (u !== undefined) u.setValue(gl, value, textures);
 	}
-
 	setOptional(gl, object, name) {
 		const v = object[name];
 		if (v !== undefined) this.setValue(gl, name, v);
 	}
-
 	static upload(gl, seq, values, textures) {
 		for (let i = 0, n = seq.length; i !== n; ++i) {
 			const u = seq[i],
-						v = values[u.id];
-
+				v = values[u.id];
 			if (v.needsUpdate !== false) {
 				// note: always updating when .needsUpdate is undefined
 				u.setValue(gl, v.value, textures);
 			}
 		}
 	}
-
 	static seqWithValue(seq, values) {
 		const r = [];
-
 		for (let i = 0, n = seq.length; i !== n; ++i) {
 			const u = seq[i];
 			if (u.id in values) r.push(u);
 		}
-
 		return r;
 	}
-
 }
 
 function WebGLShader(gl, type, string) {
@@ -13888,116 +12245,96 @@ function WebGLShader(gl, type, string) {
 }
 
 let programIdCount = 0;
-
 function handleSource(string, errorLine) {
 	const lines = string.split('\n');
 	const lines2 = [];
 	const from = Math.max(errorLine - 6, 0);
 	const to = Math.min(errorLine + 6, lines.length);
-
 	for (let i = from; i < to; i++) {
 		const line = i + 1;
 		lines2.push(`${line === errorLine ? '>' : ' '} ${line}: ${lines[i]}`);
 	}
-
 	return lines2.join('\n');
 }
-
 function getEncodingComponents(encoding) {
 	switch (encoding) {
 		case LinearEncoding:
 			return ['Linear', '( value )'];
-
 		case sRGBEncoding:
 			return ['sRGB', '( value )'];
-
 		default:
 			console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);
 			return ['Linear', '( value )'];
 	}
 }
-
 function getShaderErrors(gl, shader, type) {
 	const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
 	const errors = gl.getShaderInfoLog(shader).trim();
 	if (status && errors === '') return '';
 	const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
-
 	if (errorMatches) {
 		// --enable-privileged-webgl-extension
 		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
+
 		const errorLine = parseInt(errorMatches[1]);
 		return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource(gl.getShaderSource(shader), errorLine);
 	} else {
 		return errors;
 	}
 }
-
 function getTexelEncodingFunction(functionName, encoding) {
 	const components = getEncodingComponents(encoding);
 	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';
 }
-
 function getToneMappingFunction(functionName, toneMapping) {
 	let toneMappingName;
-
 	switch (toneMapping) {
 		case LinearToneMapping:
 			toneMappingName = 'Linear';
 			break;
-
 		case ReinhardToneMapping:
 			toneMappingName = 'Reinhard';
 			break;
-
 		case CineonToneMapping:
 			toneMappingName = 'OptimizedCineon';
 			break;
-
 		case ACESFilmicToneMapping:
 			toneMappingName = 'ACESFilmic';
 			break;
-
 		case CustomToneMapping:
 			toneMappingName = 'Custom';
 			break;
-
 		default:
 			console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);
 			toneMappingName = 'Linear';
 	}
-
 	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
 }
-
 function generateExtensions(parameters) {
 	const chunks = [parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];
 	return chunks.filter(filterEmptyLine).join('\n');
 }
-
 function generateDefines(defines) {
 	const chunks = [];
-
 	for (const name in defines) {
 		const value = defines[name];
 		if (value === false) continue;
 		chunks.push('#define ' + name + ' ' + value);
 	}
-
 	return chunks.join('\n');
 }
-
 function fetchAttributeLocations(gl, program) {
 	const attributes = {};
 	const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
-
 	for (let i = 0; i < n; i++) {
 		const info = gl.getActiveAttrib(program, i);
 		const name = info.name;
 		let locationSize = 1;
 		if (info.type === gl.FLOAT_MAT2) locationSize = 2;
 		if (info.type === gl.FLOAT_MAT3) locationSize = 3;
-		if (info.type === gl.FLOAT_MAT4) locationSize = 4; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
+		if (info.type === gl.FLOAT_MAT4) locationSize = 4;
+
+		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
 
 		attributes[name] = {
 			type: info.type,
@@ -14005,61 +12342,51 @@ function fetchAttributeLocations(gl, program) {
 			locationSize: locationSize
 		};
 	}
-
 	return attributes;
 }
-
 function filterEmptyLine(string) {
 	return string !== '';
 }
-
 function replaceLightNums(string, parameters) {
 	const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
 	return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
 }
-
 function replaceClippingPlaneNums(string, parameters) {
 	return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
-} // Resolve Includes
+}
 
+// Resolve Includes
 
 const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
-
 function resolveIncludes(string) {
 	return string.replace(includePattern, includeReplacer);
 }
-
 function includeReplacer(match, include) {
 	const string = ShaderChunk[include];
-
 	if (string === undefined) {
 		throw new Error('Can not resolve #include <' + include + '>');
 	}
-
 	return resolveIncludes(string);
-} // Unroll Loops
+}
 
+// Unroll Loops
 
 const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
-
 function unrollLoops(string) {
 	return string.replace(unrollLoopPattern, loopReplacer);
 }
-
 function loopReplacer(match, start, end, snippet) {
 	let string = '';
-
 	for (let i = parseInt(start); i < parseInt(end); i++) {
 		string += snippet.replace(/\[\s*i\s*\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);
 	}
-
 	return string;
-} //
+}
 
+//
 
 function generatePrecision(parameters) {
 	let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';
-
 	if (parameters.precision === 'highp') {
 		precisionstring += '\n#define HIGH_PRECISION';
 	} else if (parameters.precision === 'mediump') {
@@ -14067,13 +12394,10 @@ function generatePrecision(parameters) {
 	} else if (parameters.precision === 'lowp') {
 		precisionstring += '\n#define LOW_PRECISION';
 	}
-
 	return precisionstring;
 }
-
 function generateShadowMapTypeDefine(parameters) {
 	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
-
 	if (parameters.shadowMapType === PCFShadowMap) {
 		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
 	} else if (parameters.shadowMapType === PCFSoftShadowMap) {
@@ -14081,32 +12405,25 @@ function generateShadowMapTypeDefine(parameters) {
 	} else if (parameters.shadowMapType === VSMShadowMap) {
 		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
 	}
-
 	return shadowMapTypeDefine;
 }
-
 function generateEnvMapTypeDefine(parameters) {
 	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
-
 	if (parameters.envMap) {
 		switch (parameters.envMapMode) {
 			case CubeReflectionMapping:
 			case CubeRefractionMapping:
 				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
 				break;
-
 			case CubeUVReflectionMapping:
 				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
 				break;
 		}
 	}
-
 	return envMapTypeDefine;
 }
-
 function generateEnvMapModeDefine(parameters) {
 	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
-
 	if (parameters.envMap) {
 		switch (parameters.envMapMode) {
 			case CubeRefractionMapping:
@@ -14114,32 +12431,25 @@ function generateEnvMapModeDefine(parameters) {
 				break;
 		}
 	}
-
 	return envMapModeDefine;
 }
-
 function generateEnvMapBlendingDefine(parameters) {
 	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';
-
 	if (parameters.envMap) {
 		switch (parameters.combine) {
 			case MultiplyOperation:
 				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
 				break;
-
 			case MixOperation:
 				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
 				break;
-
 			case AddOperation:
 				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
 				break;
 		}
 	}
-
 	return envMapBlendingDefine;
 }
-
 function generateCubeUVSize(parameters) {
 	const imageHeight = parameters.envMapCubeUVHeight;
 	if (imageHeight === null) return null;
@@ -14152,10 +12462,10 @@ function generateCubeUVSize(parameters) {
 		maxMip
 	};
 }
-
 function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
 	// TODO Send this event to Three.js DevTools
 	// console.log( 'WebGLProgram', cacheKey );
+
 	const gl = renderer.getContext();
 	const defines = parameters.defines;
 	let vertexShader = parameters.vertexShader;
@@ -14170,26 +12480,23 @@ function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
 	const program = gl.createProgram();
 	let prefixVertex, prefixFragment;
 	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';
-
 	if (parameters.isRawShaderMaterial) {
 		prefixVertex = [customDefines].filter(filterEmptyLine).join('\n');
-
 		if (prefixVertex.length > 0) {
 			prefixVertex += '\n';
 		}
-
 		prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\n');
-
 		if (prefixFragment.length > 0) {
 			prefixFragment += '\n';
 		}
 	} else {
 		prefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '', parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.morphColors && parameters.isWebGL2 ? '#define USE_MORPHCOLORS' : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '	attribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '	attribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '	attribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '	attribute vec4 color;', '#elif defined( USE_COLOR )', '	attribute vec3 color;', '#endif', '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )', '	attribute vec3 morphTarget0;', '	attribute vec3 morphTarget1;', '	attribute vec3 morphTarget2;', '	attribute vec3 morphTarget3;', '	#ifdef USE_MORPHNORMALS', '		attribute vec3 morphNormal0;', '		attribute vec3 morphNormal1;', '		attribute vec3 morphNormal2;', '		attribute vec3 morphNormal3;', '	#else', '		attribute vec3 morphTarget4;', '		attribute vec3 morphTarget5;', '		attribute vec3 morphTarget6;', '		attribute vec3 morphTarget7;', '	#endif', '#endif', '#ifdef USE_SKINNING', '	attribute vec4 skinIndex;', '	attribute vec4 skinWeight;', '#endif', '\n'].filter(filterEmptyLine).join('\n');
-		prefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '', envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.iridescence ? '#define USE_IRIDESCENCE' : '', parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '', parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below
-		parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.opaque ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below
+		prefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '', envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.iridescence ? '#define USE_IRIDESCENCE' : '', parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '', parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '',
+		// this code is required here because it is used by the toneMapping() function defined below
+		parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.opaque ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'],
+		// this code is required here because it is used by the various encoding/decoding function defined below
 		getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\n'].filter(filterEmptyLine).join('\n');
 	}
-
 	vertexShader = resolveIncludes(vertexShader);
 	vertexShader = replaceLightNums(vertexShader, parameters);
 	vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
@@ -14198,22 +12505,25 @@ function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
 	fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
 	vertexShader = unrollLoops(vertexShader);
 	fragmentShader = unrollLoops(fragmentShader);
-
 	if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
 		// GLSL 3.0 conversion for built-in materials and ShaderMaterial
+
 		versionString = '#version 300 es\n';
 		prefixVertex = ['precision mediump sampler2DArray;', '#define attribute in', '#define varying out', '#define texture2D texture'].join('\n') + '\n' + prefixVertex;
 		prefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\n') + '\n' + prefixFragment;
 	}
-
 	const vertexGlsl = versionString + prefixVertex + vertexShader;
-	const fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );
+	const fragmentGlsl = versionString + prefixFragment + fragmentShader;
+
+	// console.log( '*VERTEX*', vertexGlsl );
 	// console.log( '*FRAGMENT*', fragmentGlsl );
 
 	const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
 	const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
 	gl.attachShader(program, glVertexShader);
-	gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.
+	gl.attachShader(program, glFragmentShader);
+
+	// Force a particular attribute to index 0.
 
 	if (parameters.index0AttributeName !== undefined) {
 		gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
@@ -14221,16 +12531,15 @@ function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
 		// programs with morphTargets displace position out of attribute 0
 		gl.bindAttribLocation(program, 0, 'position');
 	}
+	gl.linkProgram(program);
 
-	gl.linkProgram(program); // check for link errors
-
+	// check for link errors
 	if (renderer.debug.checkShaderErrors) {
 		const programLog = gl.getProgramInfoLog(program).trim();
 		const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
 		const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
 		let runnable = true;
 		let haveDiagnostics = true;
-
 		if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
 			runnable = false;
 			const vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');
@@ -14241,7 +12550,6 @@ function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
 		} else if (vertexLog === '' || fragmentLog === '') {
 			haveDiagnostics = false;
 		}
-
 		if (haveDiagnostics) {
 			this.diagnostics = {
 				runnable: runnable,
@@ -14256,43 +12564,46 @@ function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
 				}
 			};
 		}
-	} // Clean up
+	}
+
+	// Clean up
+
 	// Crashes in iOS9 and iOS10. #18402
 	// gl.detachShader( program, glVertexShader );
 	// gl.detachShader( program, glFragmentShader );
 
-
 	gl.deleteShader(glVertexShader);
-	gl.deleteShader(glFragmentShader); // set up caching for uniform locations
+	gl.deleteShader(glFragmentShader);
 
-	let cachedUniforms;
+	// set up caching for uniform locations
 
+	let cachedUniforms;
 	this.getUniforms = function () {
 		if (cachedUniforms === undefined) {
 			cachedUniforms = new WebGLUniforms(gl, program);
 		}
-
 		return cachedUniforms;
-	}; // set up caching for attribute locations
+	};
 
+	// set up caching for attribute locations
 
 	let cachedAttributes;
-
 	this.getAttributes = function () {
 		if (cachedAttributes === undefined) {
 			cachedAttributes = fetchAttributeLocations(gl, program);
 		}
-
 		return cachedAttributes;
-	}; // free resource
+	};
 
+	// free resource
 
 	this.destroy = function () {
 		bindingStates.releaseStatesOfProgram(this);
 		gl.deleteProgram(program);
 		this.program = undefined;
-	}; //
+	};
 
+	//
 
 	this.name = parameters.shaderName;
 	this.id = programIdCount++;
@@ -14305,101 +12616,76 @@ function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
 }
 
 let _id = 0;
-
 class WebGLShaderCache {
 	constructor() {
 		this.shaderCache = new Map();
 		this.materialCache = new Map();
 	}
-
 	update(material) {
 		const vertexShader = material.vertexShader;
 		const fragmentShader = material.fragmentShader;
-
 		const vertexShaderStage = this._getShaderStage(vertexShader);
-
 		const fragmentShaderStage = this._getShaderStage(fragmentShader);
-
 		const materialShaders = this._getShaderCacheForMaterial(material);
-
 		if (materialShaders.has(vertexShaderStage) === false) {
 			materialShaders.add(vertexShaderStage);
 			vertexShaderStage.usedTimes++;
 		}
-
 		if (materialShaders.has(fragmentShaderStage) === false) {
 			materialShaders.add(fragmentShaderStage);
 			fragmentShaderStage.usedTimes++;
 		}
-
 		return this;
 	}
-
 	remove(material) {
 		const materialShaders = this.materialCache.get(material);
-
 		for (const shaderStage of materialShaders) {
 			shaderStage.usedTimes--;
 			if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
 		}
-
 		this.materialCache.delete(material);
 		return this;
 	}
-
 	getVertexShaderID(material) {
 		return this._getShaderStage(material.vertexShader).id;
 	}
-
 	getFragmentShaderID(material) {
 		return this._getShaderStage(material.fragmentShader).id;
 	}
-
 	dispose() {
 		this.shaderCache.clear();
 		this.materialCache.clear();
 	}
-
 	_getShaderCacheForMaterial(material) {
 		const cache = this.materialCache;
 		let set = cache.get(material);
-
 		if (set === undefined) {
 			set = new Set();
 			cache.set(material, set);
 		}
-
 		return set;
 	}
-
 	_getShaderStage(code) {
 		const cache = this.shaderCache;
 		let stage = cache.get(code);
-
 		if (stage === undefined) {
 			stage = new WebGLShaderStage(code);
 			cache.set(code, stage);
 		}
-
 		return stage;
 	}
-
 }
-
 class WebGLShaderStage {
 	constructor(code) {
 		this.id = _id++;
 		this.code = code;
 		this.usedTimes = 0;
 	}
-
 }
 
 function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
 	const _programLayers = new Layers();
-
 	const _customShaders = new WebGLShaderCache();
-
 	const programs = [];
 	const isWebGL2 = capabilities.isWebGL2;
 	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
@@ -14422,35 +12708,37 @@ function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities,
 		ShadowMaterial: 'shadow',
 		SpriteMaterial: 'sprite'
 	};
-
 	function getParameters(material, lights, shadows, scene, object) {
 		const fog = scene.fog;
 		const geometry = object.geometry;
 		const environment = material.isMeshStandardMaterial ? scene.environment : null;
 		const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
 		const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
-		const shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene
+		const shaderID = shaderIDs[material.type];
+
+		// heuristics to create shader parameters according to lights in the scene
 		// (not to blow over maxLights budget)
 
 		if (material.precision !== null) {
 			precision = capabilities.getMaxPrecision(material.precision);
-
 			if (precision !== material.precision) {
 				console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');
 			}
-		} //
+		}
 
+		//
 
 		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
 		const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
 		let morphTextureStride = 0;
 		if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;
 		if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;
-		if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3; //
+		if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3;
+
+		//
 
 		let vertexShader, fragmentShader;
 		let customVertexShaderID, customFragmentShaderID;
-
 		if (shaderID) {
 			const shader = ShaderLib[shaderID];
 			vertexShader = shader.vertexShader;
@@ -14458,13 +12746,10 @@ function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities,
 		} else {
 			vertexShader = material.vertexShader;
 			fragmentShader = material.fragmentShader;
-
 			_customShaders.update(material);
-
 			customVertexShaderID = _customShaders.getVertexShaderID(material);
 			customFragmentShaderID = _customShaders.getFragmentShaderID(material);
 		}
-
 		const currentRenderTarget = renderer.getRenderTarget();
 		const useAlphaTest = material.alphaTest > 0;
 		const useClearcoat = material.clearcoat > 0;
@@ -14573,34 +12858,28 @@ function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities,
 		};
 		return parameters;
 	}
-
 	function getProgramCacheKey(parameters) {
 		const array = [];
-
 		if (parameters.shaderID) {
 			array.push(parameters.shaderID);
 		} else {
 			array.push(parameters.customVertexShaderID);
 			array.push(parameters.customFragmentShaderID);
 		}
-
 		if (parameters.defines !== undefined) {
 			for (const name in parameters.defines) {
 				array.push(name);
 				array.push(parameters.defines[name]);
 			}
 		}
-
 		if (parameters.isRawShaderMaterial === false) {
 			getProgramCacheKeyParameters(array, parameters);
 			getProgramCacheKeyBooleans(array, parameters);
 			array.push(renderer.outputEncoding);
 		}
-
 		array.push(parameters.customProgramCacheKey);
 		return array.join();
 	}
-
 	function getProgramCacheKeyParameters(array, parameters) {
 		array.push(parameters.precision);
 		array.push(parameters.outputEncoding);
@@ -14628,10 +12907,8 @@ function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities,
 		array.push(parameters.numClipIntersection);
 		array.push(parameters.depthPacking);
 	}
-
 	function getProgramCacheKeyBooleans(array, parameters) {
 		_programLayers.disableAll();
-
 		if (parameters.isWebGL2) _programLayers.enable(0);
 		if (parameters.supportsVertexTextures) _programLayers.enable(1);
 		if (parameters.instancing) _programLayers.enable(2);
@@ -14666,9 +12943,7 @@ function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities,
 		if (parameters.vertexTangents) _programLayers.enable(31);
 		if (parameters.uvsVertexOnly) _programLayers.enable(32);
 		array.push(_programLayers.mask);
-
 		_programLayers.disableAll();
-
 		if (parameters.fog) _programLayers.enable(0);
 		if (parameters.useFog) _programLayers.enable(1);
 		if (parameters.flatShading) _programLayers.enable(2);
@@ -14696,61 +12971,52 @@ function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities,
 		if (parameters.opaque) _programLayers.enable(24);
 		array.push(_programLayers.mask);
 	}
-
 	function getUniforms(material) {
 		const shaderID = shaderIDs[material.type];
 		let uniforms;
-
 		if (shaderID) {
 			const shader = ShaderLib[shaderID];
 			uniforms = UniformsUtils.clone(shader.uniforms);
 		} else {
 			uniforms = material.uniforms;
 		}
-
 		return uniforms;
 	}
-
 	function acquireProgram(parameters, cacheKey) {
-		let program; // Check if code has been already compiled
+		let program;
 
+		// Check if code has been already compiled
 		for (let p = 0, pl = programs.length; p < pl; p++) {
 			const preexistingProgram = programs[p];
-
 			if (preexistingProgram.cacheKey === cacheKey) {
 				program = preexistingProgram;
 				++program.usedTimes;
 				break;
 			}
 		}
-
 		if (program === undefined) {
 			program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
 			programs.push(program);
 		}
-
 		return program;
 	}
-
 	function releaseProgram(program) {
 		if (--program.usedTimes === 0) {
 			// Remove from unordered set
 			const i = programs.indexOf(program);
 			programs[i] = programs[programs.length - 1];
-			programs.pop(); // Free WebGL resources
+			programs.pop();
 
+			// Free WebGL resources
 			program.destroy();
 		}
 	}
-
 	function releaseShaderCache(material) {
 		_customShaders.remove(material);
 	}
-
 	function dispose() {
 		_customShaders.dispose();
 	}
-
 	return {
 		getParameters: getParameters,
 		getProgramCacheKey: getProgramCacheKey,
@@ -14766,30 +13032,23 @@ function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities,
 
 function WebGLProperties() {
 	let properties = new WeakMap();
-
 	function get(object) {
 		let map = properties.get(object);
-
 		if (map === undefined) {
 			map = {};
 			properties.set(object, map);
 		}
-
 		return map;
 	}
-
 	function remove(object) {
 		properties.delete(object);
 	}
-
 	function update(object, key, value) {
 		properties.get(object)[key] = value;
 	}
-
 	function dispose() {
 		properties = new WeakMap();
 	}
-
 	return {
 		get: get,
 		remove: remove,
@@ -14811,7 +13070,6 @@ function painterSortStable(a, b) {
 		return a.id - b.id;
 	}
 }
-
 function reversePainterSortStable(a, b) {
 	if (a.groupOrder !== b.groupOrder) {
 		return a.groupOrder - b.groupOrder;
@@ -14823,24 +13081,20 @@ function reversePainterSortStable(a, b) {
 		return a.id - b.id;
 	}
 }
-
 function WebGLRenderList() {
 	const renderItems = [];
 	let renderItemsIndex = 0;
 	const opaque = [];
 	const transmissive = [];
 	const transparent = [];
-
 	function init() {
 		renderItemsIndex = 0;
 		opaque.length = 0;
 		transmissive.length = 0;
 		transparent.length = 0;
 	}
-
 	function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
 		let renderItem = renderItems[renderItemsIndex];
-
 		if (renderItem === undefined) {
 			renderItem = {
 				id: object.id,
@@ -14863,14 +13117,11 @@ function WebGLRenderList() {
 			renderItem.z = z;
 			renderItem.group = group;
 		}
-
 		renderItemsIndex++;
 		return renderItem;
 	}
-
 	function push(object, geometry, material, groupOrder, z, group) {
 		const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
-
 		if (material.transmission > 0.0) {
 			transmissive.push(renderItem);
 		} else if (material.transparent === true) {
@@ -14879,10 +13130,8 @@ function WebGLRenderList() {
 			opaque.push(renderItem);
 		}
 	}
-
 	function unshift(object, geometry, material, groupOrder, z, group) {
 		const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
-
 		if (material.transmission > 0.0) {
 			transmissive.unshift(renderItem);
 		} else if (material.transparent === true) {
@@ -14891,15 +13140,14 @@ function WebGLRenderList() {
 			opaque.unshift(renderItem);
 		}
 	}
-
 	function sort(customOpaqueSort, customTransparentSort) {
 		if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
 		if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
 		if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
 	}
-
 	function finish() {
 		// Clear references from inactive renderItems in the list
+
 		for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
 			const renderItem = renderItems[i];
 			if (renderItem.id === null) break;
@@ -14910,7 +13158,6 @@ function WebGLRenderList() {
 			renderItem.group = null;
 		}
 	}
-
 	return {
 		opaque: opaque,
 		transmissive: transmissive,
@@ -14922,14 +13169,11 @@ function WebGLRenderList() {
 		sort: sort
 	};
 }
-
 function WebGLRenderLists() {
 	let lists = new WeakMap();
-
 	function get(scene, renderCallDepth) {
 		const listArray = lists.get(scene);
 		let list;
-
 		if (listArray === undefined) {
 			list = new WebGLRenderList();
 			lists.set(scene, [list]);
@@ -14941,14 +13185,11 @@ function WebGLRenderLists() {
 				list = listArray[renderCallDepth];
 			}
 		}
-
 		return list;
 	}
-
 	function dispose() {
 		lists = new WeakMap();
 	}
-
 	return {
 		get: get,
 		dispose: dispose
@@ -14962,9 +13203,7 @@ function UniformsCache() {
 			if (lights[light.id] !== undefined) {
 				return lights[light.id];
 			}
-
 			let uniforms;
-
 			switch (light.type) {
 				case 'DirectionalLight':
 					uniforms = {
@@ -14972,7 +13211,6 @@ function UniformsCache() {
 						color: new Color()
 					};
 					break;
-
 				case 'SpotLight':
 					uniforms = {
 						position: new Vector3(),
@@ -14984,7 +13222,6 @@ function UniformsCache() {
 						decay: 0
 					};
 					break;
-
 				case 'PointLight':
 					uniforms = {
 						position: new Vector3(),
@@ -14993,7 +13230,6 @@ function UniformsCache() {
 						decay: 0
 					};
 					break;
-
 				case 'HemisphereLight':
 					uniforms = {
 						direction: new Vector3(),
@@ -15001,7 +13237,6 @@ function UniformsCache() {
 						groundColor: new Color()
 					};
 					break;
-
 				case 'RectAreaLight':
 					uniforms = {
 						color: new Color(),
@@ -15011,13 +13246,11 @@ function UniformsCache() {
 					};
 					break;
 			}
-
 			lights[light.id] = uniforms;
 			return uniforms;
 		}
 	};
 }
-
 function ShadowUniformsCache() {
 	const lights = {};
 	return {
@@ -15025,9 +13258,7 @@ function ShadowUniformsCache() {
 			if (lights[light.id] !== undefined) {
 				return lights[light.id];
 			}
-
 			let uniforms;
-
 			switch (light.type) {
 				case 'DirectionalLight':
 					uniforms = {
@@ -15037,7 +13268,6 @@ function ShadowUniformsCache() {
 						shadowMapSize: new Vector2()
 					};
 					break;
-
 				case 'SpotLight':
 					uniforms = {
 						shadowBias: 0,
@@ -15046,7 +13276,6 @@ function ShadowUniformsCache() {
 						shadowMapSize: new Vector2()
 					};
 					break;
-
 				case 'PointLight':
 					uniforms = {
 						shadowBias: 0,
@@ -15057,6 +13286,7 @@ function ShadowUniformsCache() {
 						shadowCameraFar: 1000
 					};
 					break;
+
 				// TODO (abelnation): set RectAreaLight shadow uniforms
 			}
 
@@ -15065,13 +13295,10 @@ function ShadowUniformsCache() {
 		}
 	};
 }
-
 let nextVersion = 0;
-
 function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
 	return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
 }
-
 function WebGLLights(extensions, capabilities) {
 	const cache = new UniformsCache();
 	const shadowCache = ShadowUniformsCache();
@@ -15109,20 +13336,15 @@ function WebGLLights(extensions, capabilities) {
 		hemi: [],
 		numSpotLightShadowsWithMaps: 0
 	};
-
 	for (let i = 0; i < 9; i++) state.probe.push(new Vector3());
-
 	const vector3 = new Vector3();
 	const matrix4 = new Matrix4();
 	const matrix42 = new Matrix4();
-
 	function setup(lights, physicallyCorrectLights) {
 		let r = 0,
-				g = 0,
-				b = 0;
-
+			g = 0,
+			b = 0;
 		for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);
-
 		let directionalLength = 0;
 		let pointLength = 0;
 		let spotLength = 0;
@@ -15132,19 +13354,19 @@ function WebGLLights(extensions, capabilities) {
 		let numPointShadows = 0;
 		let numSpotShadows = 0;
 		let numSpotMaps = 0;
-		let numSpotShadowsWithMaps = 0; // ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
+		let numSpotShadowsWithMaps = 0;
 
-		lights.sort(shadowCastingAndTexturingLightsFirst); // artist-friendly light intensity scaling factor
+		// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
+		lights.sort(shadowCastingAndTexturingLightsFirst);
 
+		// artist-friendly light intensity scaling factor
 		const scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;
-
 		for (let i = 0, l = lights.length; i < l; i++) {
 			const light = lights[i];
 			const color = light.color;
 			const intensity = light.intensity;
 			const distance = light.distance;
 			const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
-
 			if (light.isAmbientLight) {
 				r += color.r * intensity * scaleFactor;
 				g += color.g * intensity * scaleFactor;
@@ -15156,7 +13378,6 @@ function WebGLLights(extensions, capabilities) {
 			} else if (light.isDirectionalLight) {
 				const uniforms = cache.get(light);
 				uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
-
 				if (light.castShadow) {
 					const shadow = light.shadow;
 					const shadowUniforms = shadowCache.get(light);
@@ -15169,7 +13390,6 @@ function WebGLLights(extensions, capabilities) {
 					state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
 					numDirectionalShadows++;
 				}
-
 				state.directional[directionalLength] = uniforms;
 				directionalLength++;
 			} else if (light.isSpotLight) {
@@ -15182,18 +13402,16 @@ function WebGLLights(extensions, capabilities) {
 				uniforms.decay = light.decay;
 				state.spot[spotLength] = uniforms;
 				const shadow = light.shadow;
-
 				if (light.map) {
 					state.spotLightMap[numSpotMaps] = light.map;
-					numSpotMaps++; // make sure the lightMatrix is up to date
-					// TODO : do it if required only
+					numSpotMaps++;
 
+					// make sure the lightMatrix is up to date
+					// TODO : do it if required only
 					shadow.updateMatrices(light);
 					if (light.castShadow) numSpotShadowsWithMaps++;
 				}
-
 				state.spotLightMatrix[spotLength] = shadow.matrix;
-
 				if (light.castShadow) {
 					const shadowUniforms = shadowCache.get(light);
 					shadowUniforms.shadowBias = shadow.bias;
@@ -15204,7 +13422,6 @@ function WebGLLights(extensions, capabilities) {
 					state.spotShadowMap[spotLength] = shadowMap;
 					numSpotShadows++;
 				}
-
 				spotLength++;
 			} else if (light.isRectAreaLight) {
 				const uniforms = cache.get(light);
@@ -15218,7 +13435,6 @@ function WebGLLights(extensions, capabilities) {
 				uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
 				uniforms.distance = light.distance;
 				uniforms.decay = light.decay;
-
 				if (light.castShadow) {
 					const shadow = light.shadow;
 					const shadowUniforms = shadowCache.get(light);
@@ -15233,7 +13449,6 @@ function WebGLLights(extensions, capabilities) {
 					state.pointShadowMatrix[pointLength] = light.shadow.matrix;
 					numPointShadows++;
 				}
-
 				state.point[pointLength] = uniforms;
 				pointLength++;
 			} else if (light.isHemisphereLight) {
@@ -15244,14 +13459,15 @@ function WebGLLights(extensions, capabilities) {
 				hemiLength++;
 			}
 		}
-
 		if (rectAreaLength > 0) {
 			if (capabilities.isWebGL2) {
 				// WebGL 2
+
 				state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
 				state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
 			} else {
 				// WebGL 1
+
 				if (extensions.has('OES_texture_float_linear') === true) {
 					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
 					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
@@ -15263,12 +13479,10 @@ function WebGLLights(extensions, capabilities) {
 				}
 			}
 		}
-
 		state.ambient[0] = r;
 		state.ambient[1] = g;
 		state.ambient[2] = b;
 		const hash = state.hash;
-
 		if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps) {
 			state.directional.length = directionalLength;
 			state.spot.length = spotLength;
@@ -15298,7 +13512,6 @@ function WebGLLights(extensions, capabilities) {
 			state.version = nextVersion++;
 		}
 	}
-
 	function setupView(lights, camera) {
 		let directionalLength = 0;
 		let pointLength = 0;
@@ -15306,10 +13519,8 @@ function WebGLLights(extensions, capabilities) {
 		let rectAreaLength = 0;
 		let hemiLength = 0;
 		const viewMatrix = camera.matrixWorldInverse;
-
 		for (let i = 0, l = lights.length; i < l; i++) {
 			const light = lights[i];
-
 			if (light.isDirectionalLight) {
 				const uniforms = state.directional[directionalLength];
 				uniforms.direction.setFromMatrixPosition(light.matrixWorld);
@@ -15329,8 +13540,9 @@ function WebGLLights(extensions, capabilities) {
 			} else if (light.isRectAreaLight) {
 				const uniforms = state.rectArea[rectAreaLength];
 				uniforms.position.setFromMatrixPosition(light.matrixWorld);
-				uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors
+				uniforms.position.applyMatrix4(viewMatrix);
 
+				// extract local rotation of light to derive width/height half vectors
 				matrix42.identity();
 				matrix4.copy(light.matrixWorld);
 				matrix4.premultiply(viewMatrix);
@@ -15353,7 +13565,6 @@ function WebGLLights(extensions, capabilities) {
 			}
 		}
 	}
-
 	return {
 		setup: setup,
 		setupView: setupView,
@@ -15365,28 +13576,22 @@ function WebGLRenderState(extensions, capabilities) {
 	const lights = new WebGLLights(extensions, capabilities);
 	const lightsArray = [];
 	const shadowsArray = [];
-
 	function init() {
 		lightsArray.length = 0;
 		shadowsArray.length = 0;
 	}
-
 	function pushLight(light) {
 		lightsArray.push(light);
 	}
-
 	function pushShadow(shadowLight) {
 		shadowsArray.push(shadowLight);
 	}
-
 	function setupLights(physicallyCorrectLights) {
 		lights.setup(lightsArray, physicallyCorrectLights);
 	}
-
 	function setupLightsView(camera) {
 		lights.setupView(lightsArray, camera);
 	}
-
 	const state = {
 		lightsArray: lightsArray,
 		shadowsArray: shadowsArray,
@@ -15401,14 +13606,11 @@ function WebGLRenderState(extensions, capabilities) {
 		pushShadow: pushShadow
 	};
 }
-
 function WebGLRenderStates(extensions, capabilities) {
 	let renderStates = new WeakMap();
-
 	function get(scene, renderCallDepth = 0) {
 		const renderStateArray = renderStates.get(scene);
 		let renderState;
-
 		if (renderStateArray === undefined) {
 			renderState = new WebGLRenderState(extensions, capabilities);
 			renderStates.set(scene, [renderState]);
@@ -15420,14 +13622,11 @@ function WebGLRenderStates(extensions, capabilities) {
 				renderState = renderStateArray[renderCallDepth];
 			}
 		}
-
 		return renderState;
 	}
-
 	function dispose() {
 		renderStates = new WeakMap();
 	}
-
 	return {
 		get: get,
 		dispose: dispose
@@ -15449,7 +13648,6 @@ class MeshDepthMaterial extends Material {
 		this.wireframeLinewidth = 1;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.depthPacking = source.depthPacking;
@@ -15462,7 +13660,6 @@ class MeshDepthMaterial extends Material {
 		this.wireframeLinewidth = source.wireframeLinewidth;
 		return this;
 	}
-
 }
 
 class MeshDistanceMaterial extends Material {
@@ -15480,7 +13677,6 @@ class MeshDistanceMaterial extends Material {
 		this.displacementBias = 0;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.referencePosition.copy(source.referencePosition);
@@ -15493,7 +13689,6 @@ class MeshDistanceMaterial extends Material {
 		this.displacementBias = source.displacementBias;
 		return this;
 	}
-
 }
 
 const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
@@ -15501,17 +13696,15 @@ const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nunif
 
 function WebGLShadowMap(_renderer, _objects, _capabilities) {
 	let _frustum = new Frustum();
-
 	const _shadowMapSize = new Vector2(),
-				_viewportSize = new Vector2(),
-				_viewport = new Vector4(),
-				_depthMaterial = new MeshDepthMaterial({
-		depthPacking: RGBADepthPacking
-	}),
-				_distanceMaterial = new MeshDistanceMaterial(),
-				_materialCache = {},
-				_maxTextureSize = _capabilities.maxTextureSize;
-
+		_viewportSize = new Vector2(),
+		_viewport = new Vector4(),
+		_depthMaterial = new MeshDepthMaterial({
+			depthPacking: RGBADepthPacking
+		}),
+		_distanceMaterial = new MeshDistanceMaterial(),
+		_materialCache = {},
+		_maxTextureSize = _capabilities.maxTextureSize;
 	const shadowSide = {
 		0: BackSide,
 		1: FrontSide,
@@ -15545,62 +13738,47 @@ function WebGLShadowMap(_renderer, _objects, _capabilities) {
 	this.autoUpdate = true;
 	this.needsUpdate = false;
 	this.type = PCFShadowMap;
-
 	this.render = function (lights, scene, camera) {
 		if (scope.enabled === false) return;
 		if (scope.autoUpdate === false && scope.needsUpdate === false) return;
 		if (lights.length === 0) return;
-
 		const currentRenderTarget = _renderer.getRenderTarget();
-
 		const activeCubeFace = _renderer.getActiveCubeFace();
-
 		const activeMipmapLevel = _renderer.getActiveMipmapLevel();
+		const _state = _renderer.state;
 
-		const _state = _renderer.state; // Set GL state for depth map.
-
+		// Set GL state for depth map.
 		_state.setBlending(NoBlending);
-
 		_state.buffers.color.setClear(1, 1, 1, 1);
-
 		_state.buffers.depth.setTest(true);
+		_state.setScissorTest(false);
 
-		_state.setScissorTest(false); // render depth map
-
+		// render depth map
 
 		for (let i = 0, il = lights.length; i < il; i++) {
 			const light = lights[i];
 			const shadow = light.shadow;
-
 			if (shadow === undefined) {
 				console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
 				continue;
 			}
-
 			if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
-
 			_shadowMapSize.copy(shadow.mapSize);
-
 			const shadowFrameExtents = shadow.getFrameExtents();
-
 			_shadowMapSize.multiply(shadowFrameExtents);
-
 			_viewportSize.copy(shadow.mapSize);
-
 			if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
 				if (_shadowMapSize.x > _maxTextureSize) {
 					_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
 					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
 					shadow.mapSize.x = _viewportSize.x;
 				}
-
 				if (_shadowMapSize.y > _maxTextureSize) {
 					_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
 					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
 					shadow.mapSize.y = _viewportSize.y;
 				}
 			}
-
 			if (shadow.map === null) {
 				const pars = this.type !== VSMShadowMap ? {
 					minFilter: NearestFilter,
@@ -15610,116 +13788,91 @@ function WebGLShadowMap(_renderer, _objects, _capabilities) {
 				shadow.map.texture.name = light.name + '.shadowMap';
 				shadow.camera.updateProjectionMatrix();
 			}
-
 			_renderer.setRenderTarget(shadow.map);
-
 			_renderer.clear();
-
 			const viewportCount = shadow.getViewportCount();
-
 			for (let vp = 0; vp < viewportCount; vp++) {
 				const viewport = shadow.getViewport(vp);
-
 				_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
-
 				_state.viewport(_viewport);
-
 				shadow.updateMatrices(light, vp);
 				_frustum = shadow.getFrustum();
 				renderObject(scene, camera, shadow.camera, light, this.type);
-			} // do blur pass for VSM
+			}
 
+			// do blur pass for VSM
 
 			if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
 				VSMPass(shadow, camera);
 			}
-
 			shadow.needsUpdate = false;
 		}
-
 		scope.needsUpdate = false;
-
 		_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
 	};
-
 	function VSMPass(shadow, camera) {
 		const geometry = _objects.update(fullScreenMesh);
-
 		if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
 			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
 			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
 			shadowMaterialVertical.needsUpdate = true;
 			shadowMaterialHorizontal.needsUpdate = true;
 		}
-
 		if (shadow.mapPass === null) {
 			shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
-		} // vertical pass
+		}
 
+		// vertical pass
 
 		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
 		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
 		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
-
 		_renderer.setRenderTarget(shadow.mapPass);
-
 		_renderer.clear();
+		_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
 
-		_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass
-
+		// horizontal pass
 
 		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
 		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
 		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
-
 		_renderer.setRenderTarget(shadow.map);
-
 		_renderer.clear();
-
 		_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
 	}
-
 	function getDepthMaterial(object, material, light, shadowCameraNear, shadowCameraFar, type) {
 		let result = null;
 		const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
-
 		if (customMaterial !== undefined) {
 			result = customMaterial;
 		} else {
 			result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
 		}
-
 		if (_renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
 			// in this case we need a unique material instance reflecting the
 			// appropriate state
+
 			const keyA = result.uuid,
-						keyB = material.uuid;
+				keyB = material.uuid;
 			let materialsForVariant = _materialCache[keyA];
-
 			if (materialsForVariant === undefined) {
 				materialsForVariant = {};
 				_materialCache[keyA] = materialsForVariant;
 			}
-
 			let cachedMaterial = materialsForVariant[keyB];
-
 			if (cachedMaterial === undefined) {
 				cachedMaterial = result.clone();
 				materialsForVariant[keyB] = cachedMaterial;
 			}
-
 			result = cachedMaterial;
 		}
-
 		result.visible = material.visible;
 		result.wireframe = material.wireframe;
-
 		if (type === VSMShadowMap) {
 			result.side = material.shadowSide !== null ? material.shadowSide : material.side;
 		} else {
 			result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
 		}
-
 		result.alphaMap = material.alphaMap;
 		result.alphaTest = material.alphaTest;
 		result.map = material.map;
@@ -15731,51 +13884,38 @@ function WebGLShadowMap(_renderer, _objects, _capabilities) {
 		result.displacementBias = material.displacementBias;
 		result.wireframeLinewidth = material.wireframeLinewidth;
 		result.linewidth = material.linewidth;
-
 		if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
 			result.referencePosition.setFromMatrixPosition(light.matrixWorld);
 			result.nearDistance = shadowCameraNear;
 			result.farDistance = shadowCameraFar;
 		}
-
 		return result;
 	}
-
 	function renderObject(object, camera, shadowCamera, light, type) {
 		if (object.visible === false) return;
 		const visible = object.layers.test(camera.layers);
-
 		if (visible && (object.isMesh || object.isLine || object.isPoints)) {
 			if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
 				object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
-
 				const geometry = _objects.update(object);
-
 				const material = object.material;
-
 				if (Array.isArray(material)) {
 					const groups = geometry.groups;
-
 					for (let k = 0, kl = groups.length; k < kl; k++) {
 						const group = groups[k];
 						const groupMaterial = material[group.materialIndex];
-
 						if (groupMaterial && groupMaterial.visible) {
 							const depthMaterial = getDepthMaterial(object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
-
 							_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
 						}
 					}
 				} else if (material.visible) {
 					const depthMaterial = getDepthMaterial(object, material, light, shadowCamera.near, shadowCamera.far, type);
-
 					_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
 				}
 			}
 		}
-
 		const children = object.children;
-
 		for (let i = 0, l = children.length; i < l; i++) {
 			renderObject(children[i], camera, shadowCamera, light, type);
 		}
@@ -15784,7 +13924,6 @@ function WebGLShadowMap(_renderer, _objects, _capabilities) {
 
 function WebGLState(gl, extensions, capabilities) {
 	const isWebGL2 = capabilities.isWebGL2;
-
 	function ColorBuffer() {
 		let locked = false;
 		const color = new Vector4();
@@ -15806,9 +13945,7 @@ function WebGLState(gl, extensions, capabilities) {
 					g *= a;
 					b *= a;
 				}
-
 				color.set(r, g, b, a);
-
 				if (currentColorClear.equals(color) === false) {
 					gl.clearColor(r, g, b, a);
 					currentColorClear.copy(color);
@@ -15847,39 +13984,30 @@ function WebGLState(gl, extensions, capabilities) {
 						case NeverDepth:
 							gl.depthFunc(gl.NEVER);
 							break;
-
 						case AlwaysDepth:
 							gl.depthFunc(gl.ALWAYS);
 							break;
-
 						case LessDepth:
 							gl.depthFunc(gl.LESS);
 							break;
-
 						case LessEqualDepth:
 							gl.depthFunc(gl.LEQUAL);
 							break;
-
 						case EqualDepth:
 							gl.depthFunc(gl.EQUAL);
 							break;
-
 						case GreaterEqualDepth:
 							gl.depthFunc(gl.GEQUAL);
 							break;
-
 						case GreaterDepth:
 							gl.depthFunc(gl.GREATER);
 							break;
-
 						case NotEqualDepth:
 							gl.depthFunc(gl.NOTEQUAL);
 							break;
-
 						default:
 							gl.depthFunc(gl.LEQUAL);
 					}
-
 					currentDepthFunc = depthFunc;
 				}
 			},
@@ -15900,7 +14028,6 @@ function WebGLState(gl, extensions, capabilities) {
 			}
 		};
 	}
-
 	function StencilBuffer() {
 		let locked = false;
 		let currentStencilMask = null;
@@ -15964,8 +14091,9 @@ function WebGLState(gl, extensions, capabilities) {
 				currentStencilClear = null;
 			}
 		};
-	} //
+	}
 
+	//
 
 	const colorBuffer = new ColorBuffer();
 	const depthBuffer = new DepthBuffer();
@@ -15995,7 +14123,6 @@ function WebGLState(gl, extensions, capabilities) {
 	let lineWidthAvailable = false;
 	let version = 0;
 	const glVersion = gl.getParameter(gl.VERSION);
-
 	if (glVersion.indexOf('WebGL') !== -1) {
 		version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
 		lineWidthAvailable = version >= 1.0;
@@ -16003,32 +14130,28 @@ function WebGLState(gl, extensions, capabilities) {
 		version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
 		lineWidthAvailable = version >= 2.0;
 	}
-
 	let currentTextureSlot = null;
 	let currentBoundTextures = {};
 	const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
 	const viewportParam = gl.getParameter(gl.VIEWPORT);
 	const currentScissor = new Vector4().fromArray(scissorParam);
 	const currentViewport = new Vector4().fromArray(viewportParam);
-
 	function createTexture(type, target, count) {
 		const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
-
 		const texture = gl.createTexture();
 		gl.bindTexture(type, texture);
 		gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
 		gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
-
 		for (let i = 0; i < count; i++) {
 			gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
 		}
-
 		return texture;
 	}
-
 	const emptyTextures = {};
 	emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
-	emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init
+	emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
+
+	// init
 
 	colorBuffer.setClear(0, 0, 0, 1);
 	depthBuffer.setClear(1);
@@ -16038,7 +14161,9 @@ function WebGLState(gl, extensions, capabilities) {
 	setFlipSided(false);
 	setCullFace(CullFaceBack);
 	enable(gl.CULL_FACE);
-	setBlending(NoBlending); //
+	setBlending(NoBlending);
+
+	//
 
 	function enable(id) {
 		if (enabledCapabilities[id] !== true) {
@@ -16046,56 +14171,45 @@ function WebGLState(gl, extensions, capabilities) {
 			enabledCapabilities[id] = true;
 		}
 	}
-
 	function disable(id) {
 		if (enabledCapabilities[id] !== false) {
 			gl.disable(id);
 			enabledCapabilities[id] = false;
 		}
 	}
-
 	function bindFramebuffer(target, framebuffer) {
 		if (currentBoundFramebuffers[target] !== framebuffer) {
 			gl.bindFramebuffer(target, framebuffer);
 			currentBoundFramebuffers[target] = framebuffer;
-
 			if (isWebGL2) {
 				// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER
+
 				if (target === gl.DRAW_FRAMEBUFFER) {
 					currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
 				}
-
 				if (target === gl.FRAMEBUFFER) {
 					currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
 				}
 			}
-
 			return true;
 		}
-
 		return false;
 	}
-
 	function drawBuffers(renderTarget, framebuffer) {
 		let drawBuffers = defaultDrawbuffers;
 		let needsUpdate = false;
-
 		if (renderTarget) {
 			drawBuffers = currentDrawbuffers.get(framebuffer);
-
 			if (drawBuffers === undefined) {
 				drawBuffers = [];
 				currentDrawbuffers.set(framebuffer, drawBuffers);
 			}
-
 			if (renderTarget.isWebGLMultipleRenderTargets) {
 				const textures = renderTarget.texture;
-
 				if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
 					for (let i = 0, il = textures.length; i < il; i++) {
 						drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;
 					}
-
 					drawBuffers.length = textures.length;
 					needsUpdate = true;
 				}
@@ -16111,7 +14225,6 @@ function WebGLState(gl, extensions, capabilities) {
 				needsUpdate = true;
 			}
 		}
-
 		if (needsUpdate) {
 			if (capabilities.isWebGL2) {
 				gl.drawBuffers(drawBuffers);
@@ -16120,35 +14233,29 @@ function WebGLState(gl, extensions, capabilities) {
 			}
 		}
 	}
-
 	function useProgram(program) {
 		if (currentProgram !== program) {
 			gl.useProgram(program);
 			currentProgram = program;
 			return true;
 		}
-
 		return false;
 	}
-
 	const equationToGL = {
 		[AddEquation]: gl.FUNC_ADD,
 		[SubtractEquation]: gl.FUNC_SUBTRACT,
 		[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
 	};
-
 	if (isWebGL2) {
 		equationToGL[MinEquation] = gl.MIN;
 		equationToGL[MaxEquation] = gl.MAX;
 	} else {
 		const extension = extensions.get('EXT_blend_minmax');
-
 		if (extension !== null) {
 			equationToGL[MinEquation] = extension.MIN_EXT;
 			equationToGL[MaxEquation] = extension.MAX_EXT;
 		}
 	}
-
 	const factorToGL = {
 		[ZeroFactor]: gl.ZERO,
 		[OneFactor]: gl.ONE,
@@ -16162,22 +14269,18 @@ function WebGLState(gl, extensions, capabilities) {
 		[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
 		[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
 	};
-
 	function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
 		if (blending === NoBlending) {
 			if (currentBlendingEnabled === true) {
 				disable(gl.BLEND);
 				currentBlendingEnabled = false;
 			}
-
 			return;
 		}
-
 		if (currentBlendingEnabled === false) {
 			enable(gl.BLEND);
 			currentBlendingEnabled = true;
 		}
-
 		if (blending !== CustomBlending) {
 			if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
 				if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
@@ -16185,25 +14288,20 @@ function WebGLState(gl, extensions, capabilities) {
 					currentBlendEquation = AddEquation;
 					currentBlendEquationAlpha = AddEquation;
 				}
-
 				if (premultipliedAlpha) {
 					switch (blending) {
 						case NormalBlending:
 							gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
 							break;
-
 						case AdditiveBlending:
 							gl.blendFunc(gl.ONE, gl.ONE);
 							break;
-
 						case SubtractiveBlending:
 							gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
 							break;
-
 						case MultiplyBlending:
 							gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
 							break;
-
 						default:
 							console.error('THREE.WebGLState: Invalid blending: ', blending);
 							break;
@@ -16213,25 +14311,20 @@ function WebGLState(gl, extensions, capabilities) {
 						case NormalBlending:
 							gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
 							break;
-
 						case AdditiveBlending:
 							gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
 							break;
-
 						case SubtractiveBlending:
 							gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
 							break;
-
 						case MultiplyBlending:
 							gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
 							break;
-
 						default:
 							console.error('THREE.WebGLState: Invalid blending: ', blending);
 							break;
 					}
 				}
-
 				currentBlendSrc = null;
 				currentBlendDst = null;
 				currentBlendSrcAlpha = null;
@@ -16239,21 +14332,19 @@ function WebGLState(gl, extensions, capabilities) {
 				currentBlending = blending;
 				currentPremultipledAlpha = premultipliedAlpha;
 			}
-
 			return;
-		} // custom blending
+		}
 
+		// custom blending
 
 		blendEquationAlpha = blendEquationAlpha || blendEquation;
 		blendSrcAlpha = blendSrcAlpha || blendSrc;
 		blendDstAlpha = blendDstAlpha || blendDst;
-
 		if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
 			gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
 			currentBlendEquation = blendEquation;
 			currentBlendEquationAlpha = blendEquationAlpha;
 		}
-
 		if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
 			gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
 			currentBlendSrc = blendSrc;
@@ -16261,11 +14352,9 @@ function WebGLState(gl, extensions, capabilities) {
 			currentBlendSrcAlpha = blendSrcAlpha;
 			currentBlendDstAlpha = blendDstAlpha;
 		}
-
 		currentBlending = blending;
 		currentPremultipledAlpha = false;
 	}
-
 	function setMaterial(material, frontFaceCW) {
 		material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
 		let flipSided = material.side === BackSide;
@@ -16278,17 +14367,16 @@ function WebGLState(gl, extensions, capabilities) {
 		colorBuffer.setMask(material.colorWrite);
 		const stencilWrite = material.stencilWrite;
 		stencilBuffer.setTest(stencilWrite);
-
 		if (stencilWrite) {
 			stencilBuffer.setMask(material.stencilWriteMask);
 			stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
 			stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
 		}
-
 		setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
 		material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
-	} //
+	}
 
+	//
 
 	function setFlipSided(flipSided) {
 		if (currentFlipSided !== flipSided) {
@@ -16297,15 +14385,12 @@ function WebGLState(gl, extensions, capabilities) {
 			} else {
 				gl.frontFace(gl.CCW);
 			}
-
 			currentFlipSided = flipSided;
 		}
 	}
-
 	function setCullFace(cullFace) {
 		if (cullFace !== CullFaceNone) {
 			enable(gl.CULL_FACE);
-
 			if (cullFace !== currentCullFace) {
 				if (cullFace === CullFaceBack) {
 					gl.cullFace(gl.BACK);
@@ -16318,21 +14403,17 @@ function WebGLState(gl, extensions, capabilities) {
 		} else {
 			disable(gl.CULL_FACE);
 		}
-
 		currentCullFace = cullFace;
 	}
-
 	function setLineWidth(width) {
 		if (width !== currentLineWidth) {
 			if (lineWidthAvailable) gl.lineWidth(width);
 			currentLineWidth = width;
 		}
 	}
-
 	function setPolygonOffset(polygonOffset, factor, units) {
 		if (polygonOffset) {
 			enable(gl.POLYGON_OFFSET_FILL);
-
 			if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
 				gl.polygonOffset(factor, units);
 				currentPolygonOffsetFactor = factor;
@@ -16342,25 +14423,23 @@ function WebGLState(gl, extensions, capabilities) {
 			disable(gl.POLYGON_OFFSET_FILL);
 		}
 	}
-
 	function setScissorTest(scissorTest) {
 		if (scissorTest) {
 			enable(gl.SCISSOR_TEST);
 		} else {
 			disable(gl.SCISSOR_TEST);
 		}
-	} // texture
+	}
 
+	// texture
 
 	function activeTexture(webglSlot) {
 		if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;
-
 		if (currentTextureSlot !== webglSlot) {
 			gl.activeTexture(webglSlot);
 			currentTextureSlot = webglSlot;
 		}
 	}
-
 	function bindTexture(webglType, webglTexture, webglSlot) {
 		if (webglSlot === undefined) {
 			if (currentTextureSlot === null) {
@@ -16369,9 +14448,7 @@ function WebGLState(gl, extensions, capabilities) {
 				webglSlot = currentTextureSlot;
 			}
 		}
-
 		let boundTexture = currentBoundTextures[webglSlot];
-
 		if (boundTexture === undefined) {
 			boundTexture = {
 				type: undefined,
@@ -16379,29 +14456,24 @@ function WebGLState(gl, extensions, capabilities) {
 			};
 			currentBoundTextures[webglSlot] = boundTexture;
 		}
-
 		if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
 			if (currentTextureSlot !== webglSlot) {
 				gl.activeTexture(webglSlot);
 				currentTextureSlot = webglSlot;
 			}
-
 			gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
 			boundTexture.type = webglType;
 			boundTexture.texture = webglTexture;
 		}
 	}
-
 	function unbindTexture() {
 		const boundTexture = currentBoundTextures[currentTextureSlot];
-
 		if (boundTexture !== undefined && boundTexture.type !== undefined) {
 			gl.bindTexture(boundTexture.type, null);
 			boundTexture.type = undefined;
 			boundTexture.texture = undefined;
 		}
 	}
-
 	function compressedTexImage2D() {
 		try {
 			gl.compressedTexImage2D.apply(gl, arguments);
@@ -16409,7 +14481,6 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function compressedTexImage3D() {
 		try {
 			gl.compressedTexImage3D.apply(gl, arguments);
@@ -16417,7 +14488,6 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function texSubImage2D() {
 		try {
 			gl.texSubImage2D.apply(gl, arguments);
@@ -16425,7 +14495,6 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function texSubImage3D() {
 		try {
 			gl.texSubImage3D.apply(gl, arguments);
@@ -16433,7 +14502,6 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function compressedTexSubImage2D() {
 		try {
 			gl.compressedTexSubImage2D.apply(gl, arguments);
@@ -16441,7 +14509,6 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function compressedTexSubImage3D() {
 		try {
 			gl.compressedTexSubImage3D.apply(gl, arguments);
@@ -16449,7 +14516,6 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function texStorage2D() {
 		try {
 			gl.texStorage2D.apply(gl, arguments);
@@ -16457,7 +14523,6 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function texStorage3D() {
 		try {
 			gl.texStorage3D.apply(gl, arguments);
@@ -16465,7 +14530,6 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function texImage2D() {
 		try {
 			gl.texImage2D.apply(gl, arguments);
@@ -16473,15 +14537,15 @@ function WebGLState(gl, extensions, capabilities) {
 			console.error('THREE.WebGLState:', error);
 		}
 	}
-
 	function texImage3D() {
 		try {
 			gl.texImage3D.apply(gl, arguments);
 		} catch (error) {
 			console.error('THREE.WebGLState:', error);
 		}
-	} //
+	}
 
+	//
 
 	function scissor(scissor) {
 		if (currentScissor.equals(scissor) === false) {
@@ -16489,44 +14553,40 @@ function WebGLState(gl, extensions, capabilities) {
 			currentScissor.copy(scissor);
 		}
 	}
-
 	function viewport(viewport) {
 		if (currentViewport.equals(viewport) === false) {
 			gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
 			currentViewport.copy(viewport);
 		}
 	}
-
 	function updateUBOMapping(uniformsGroup, program) {
 		let mapping = uboProgamMap.get(program);
-
 		if (mapping === undefined) {
 			mapping = new WeakMap();
 			uboProgamMap.set(program, mapping);
 		}
-
 		let blockIndex = mapping.get(uniformsGroup);
-
 		if (blockIndex === undefined) {
 			blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
 			mapping.set(uniformsGroup, blockIndex);
 		}
 	}
-
 	function uniformBlockBinding(uniformsGroup, program) {
 		const mapping = uboProgamMap.get(program);
 		const blockIndex = mapping.get(uniformsGroup);
-
 		if (uboBindings.get(uniformsGroup) !== blockIndex) {
 			// bind shader specific block index to global block point
+
 			gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
 			uboBindings.set(uniformsGroup, blockIndex);
 		}
-	} //
+	}
 
+	//
 
 	function reset() {
 		// reset state
+
 		gl.disable(gl.BLEND);
 		gl.disable(gl.CULL_FACE);
 		gl.disable(gl.DEPTH_TEST);
@@ -16551,16 +14611,16 @@ function WebGLState(gl, extensions, capabilities) {
 		gl.polygonOffset(0, 0);
 		gl.activeTexture(gl.TEXTURE0);
 		gl.bindFramebuffer(gl.FRAMEBUFFER, null);
-
 		if (isWebGL2 === true) {
 			gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
 			gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
 		}
-
 		gl.useProgram(null);
 		gl.lineWidth(1);
 		gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
-		gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals
+		gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
+
+		// reset internals
 
 		enabledCapabilities = {};
 		currentTextureSlot = null;
@@ -16589,7 +14649,6 @@ function WebGLState(gl, extensions, capabilities) {
 		depthBuffer.reset();
 		stencilBuffer.reset();
 	}
-
 	return {
 		buffers: {
 			color: colorBuffer,
@@ -16637,46 +14696,51 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 	const maxSamples = capabilities.maxSamples;
 	const multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;
 	const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test(navigator.userAgent);
-
 	const _videoTextures = new WeakMap();
-
 	let _canvas;
-
 	const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source
+
 	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
 	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
 	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
 
-
 	let useOffscreenCanvas = false;
-
 	try {
-		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' // eslint-disable-next-line compat/compat
+		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
+		// eslint-disable-next-line compat/compat
 		&& new OffscreenCanvas(1, 1).getContext('2d') !== null;
-	} catch (err) {// Ignore any errors
-	}
+	} catch (err) {
 
+		// Ignore any errors
+	}
 	function createCanvas(width, height) {
 		// Use OffscreenCanvas when available. Specially needed in web workers
-		return useOffscreenCanvas ? // eslint-disable-next-line compat/compat
+
+		return useOffscreenCanvas ?
+		// eslint-disable-next-line compat/compat
 		new OffscreenCanvas(width, height) : createElementNS('canvas');
 	}
-
 	function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
-		let scale = 1; // handle case if texture exceeds max size
+		let scale = 1;
+
+		// handle case if texture exceeds max size
 
 		if (image.width > maxSize || image.height > maxSize) {
 			scale = maxSize / Math.max(image.width, image.height);
-		} // only perform resize if necessary
+		}
 
+		// only perform resize if necessary
 
 		if (scale < 1 || needsPowerOfTwo === true) {
 			// only perform resize for certain image types
+
 			if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
 				const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
 				const width = floor(scale * image.width);
 				const height = floor(scale * image.height);
-				if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas
+				if (_canvas === undefined) _canvas = createCanvas(width, height);
+
+				// cube textures can't reuse the same canvas
 
 				const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
 				canvas.width = width;
@@ -16689,53 +14753,41 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				if ('data' in image) {
 					console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
 				}
-
 				return image;
 			}
 		}
-
 		return image;
 	}
-
 	function isPowerOfTwo$1(image) {
 		return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
 	}
-
 	function textureNeedsPowerOfTwo(texture) {
 		if (isWebGL2) return false;
 		return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
 	}
-
 	function textureNeedsGenerateMipmaps(texture, supportsMips) {
 		return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
 	}
-
 	function generateMipmap(target) {
 		_gl.generateMipmap(target);
 	}
-
 	function getInternalFormat(internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false) {
 		if (isWebGL2 === false) return glFormat;
-
 		if (internalFormatName !== null) {
 			if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
 			console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');
 		}
-
 		let internalFormat = glFormat;
-
 		if (glFormat === _gl.RED) {
 			if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
 			if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
 			if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
 		}
-
 		if (glFormat === _gl.RG) {
 			if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
 			if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
 			if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
 		}
-
 		if (glFormat === _gl.RGBA) {
 			if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
 			if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
@@ -16743,165 +14795,143 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 			if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
 			if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
 		}
-
 		if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
 			extensions.get('EXT_color_buffer_float');
 		}
-
 		return internalFormat;
 	}
-
 	function getMipLevels(texture, image, supportsMips) {
 		if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
 			return Math.log2(Math.max(image.width, image.height)) + 1;
 		} else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {
 			// user-defined mipmaps
+
 			return texture.mipmaps.length;
 		} else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
 			return image.mipmaps.length;
 		} else {
 			// texture without mipmaps (only base level)
+
 			return 1;
 		}
-	} // Fallback filters for non-power-of-2 textures
+	}
 
+	// Fallback filters for non-power-of-2 textures
 
 	function filterFallback(f) {
 		if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
 			return _gl.NEAREST;
 		}
-
 		return _gl.LINEAR;
-	} //
+	}
 
+	//
 
 	function onTextureDispose(event) {
 		const texture = event.target;
 		texture.removeEventListener('dispose', onTextureDispose);
 		deallocateTexture(texture);
-
 		if (texture.isVideoTexture) {
 			_videoTextures.delete(texture);
 		}
 	}
-
 	function onRenderTargetDispose(event) {
 		const renderTarget = event.target;
 		renderTarget.removeEventListener('dispose', onRenderTargetDispose);
 		deallocateRenderTarget(renderTarget);
-	} //
+	}
 
+	//
 
 	function deallocateTexture(texture) {
 		const textureProperties = properties.get(texture);
-		if (textureProperties.__webglInit === undefined) return; // check if it's necessary to remove the WebGLTexture object
+		if (textureProperties.__webglInit === undefined) return;
 
-		const source = texture.source;
+		// check if it's necessary to remove the WebGLTexture object
 
+		const source = texture.source;
 		const webglTextures = _sources.get(source);
-
 		if (webglTextures) {
 			const webglTexture = webglTextures[textureProperties.__cacheKey];
-			webglTexture.usedTimes--; // the WebGLTexture object is not used anymore, remove it
+			webglTexture.usedTimes--;
+
+			// the WebGLTexture object is not used anymore, remove it
 
 			if (webglTexture.usedTimes === 0) {
 				deleteTexture(texture);
-			} // remove the weak map entry if no WebGLTexture uses the source anymore
+			}
 
+			// remove the weak map entry if no WebGLTexture uses the source anymore
 
 			if (Object.keys(webglTextures).length === 0) {
 				_sources.delete(source);
 			}
 		}
-
 		properties.remove(texture);
 	}
-
 	function deleteTexture(texture) {
 		const textureProperties = properties.get(texture);
-
 		_gl.deleteTexture(textureProperties.__webglTexture);
-
 		const source = texture.source;
-
 		const webglTextures = _sources.get(source);
-
 		delete webglTextures[textureProperties.__cacheKey];
 		info.memory.textures--;
 	}
-
 	function deallocateRenderTarget(renderTarget) {
 		const texture = renderTarget.texture;
 		const renderTargetProperties = properties.get(renderTarget);
 		const textureProperties = properties.get(texture);
-
 		if (textureProperties.__webglTexture !== undefined) {
 			_gl.deleteTexture(textureProperties.__webglTexture);
-
 			info.memory.textures--;
 		}
-
 		if (renderTarget.depthTexture) {
 			renderTarget.depthTexture.dispose();
 		}
-
 		if (renderTarget.isWebGLCubeRenderTarget) {
 			for (let i = 0; i < 6; i++) {
 				_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
-
 				if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
 			}
 		} else {
 			_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
-
 			if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
 			if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
-
 			if (renderTargetProperties.__webglColorRenderbuffer) {
 				for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {
 					if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
 				}
 			}
-
 			if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
 		}
-
 		if (renderTarget.isWebGLMultipleRenderTargets) {
 			for (let i = 0, il = texture.length; i < il; i++) {
 				const attachmentProperties = properties.get(texture[i]);
-
 				if (attachmentProperties.__webglTexture) {
 					_gl.deleteTexture(attachmentProperties.__webglTexture);
-
 					info.memory.textures--;
 				}
-
 				properties.remove(texture[i]);
 			}
 		}
-
 		properties.remove(texture);
 		properties.remove(renderTarget);
-	} //
+	}
 
+	//
 
 	let textureUnits = 0;
-
 	function resetTextureUnits() {
 		textureUnits = 0;
 	}
-
 	function allocateTextureUnit() {
 		const textureUnit = textureUnits;
-
 		if (textureUnit >= maxTextures) {
 			console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);
 		}
-
 		textureUnits += 1;
 		return textureUnit;
 	}
-
 	function getTextureCacheKey(texture) {
 		const array = [];
 		array.push(texture.wrapS);
@@ -16919,16 +14949,15 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 		array.push(texture.unpackAlignment);
 		array.push(texture.encoding);
 		return array.join();
-	} //
+	}
 
+	//
 
 	function setTexture2D(texture, slot) {
 		const textureProperties = properties.get(texture);
 		if (texture.isVideoTexture) updateVideoTexture(texture);
-
 		if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
 			const image = texture.image;
-
 			if (image === null) {
 				console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');
 			} else if (image.complete === false) {
@@ -16938,43 +14967,32 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				return;
 			}
 		}
-
 		state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 	}
-
 	function setTexture2DArray(texture, slot) {
 		const textureProperties = properties.get(texture);
-
 		if (texture.version > 0 && textureProperties.__version !== texture.version) {
 			uploadTexture(textureProperties, texture, slot);
 			return;
 		}
-
 		state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 	}
-
 	function setTexture3D(texture, slot) {
 		const textureProperties = properties.get(texture);
-
 		if (texture.version > 0 && textureProperties.__version !== texture.version) {
 			uploadTexture(textureProperties, texture, slot);
 			return;
 		}
-
 		state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 	}
-
 	function setTextureCube(texture, slot) {
 		const textureProperties = properties.get(texture);
-
 		if (texture.version > 0 && textureProperties.__version !== texture.version) {
 			uploadCubeTexture(textureProperties, texture, slot);
 			return;
 		}
-
 		state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 	}
-
 	const wrappingToGL = {
 		[RepeatWrapping]: _gl.REPEAT,
 		[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
@@ -16988,113 +15006,97 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 		[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
 		[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
 	};
-
 	function setTextureParameters(textureType, texture, supportsMips) {
 		if (supportsMips) {
 			_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
-
 			_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
-
 			if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
 				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
 			}
-
 			_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
-
 			_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
 		} else {
 			_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
-
 			_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
-
 			if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
 				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
 			}
-
 			if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
 				console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');
 			}
-
 			_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
-
 			_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));
-
 			if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
 				console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');
 			}
 		}
-
 		if (extensions.has('EXT_texture_filter_anisotropic') === true) {
 			const extension = extensions.get('EXT_texture_filter_anisotropic');
 			if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2
-
 			if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only
 
 			if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
 				_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
-
 				properties.get(texture).__currentAnisotropy = texture.anisotropy;
 			}
 		}
 	}
-
 	function initTexture(textureProperties, texture) {
 		let forceUpload = false;
-
 		if (textureProperties.__webglInit === undefined) {
 			textureProperties.__webglInit = true;
 			texture.addEventListener('dispose', onTextureDispose);
-		} // create Source <-> WebGLTextures mapping if necessary
+		}
 
+		// create Source <-> WebGLTextures mapping if necessary
 
 		const source = texture.source;
-
 		let webglTextures = _sources.get(source);
-
 		if (webglTextures === undefined) {
 			webglTextures = {};
-
 			_sources.set(source, webglTextures);
-		} // check if there is already a WebGLTexture object for the given texture parameters
+		}
 
+		// check if there is already a WebGLTexture object for the given texture parameters
 
 		const textureCacheKey = getTextureCacheKey(texture);
-
 		if (textureCacheKey !== textureProperties.__cacheKey) {
 			// if not, create a new instance of WebGLTexture
+
 			if (webglTextures[textureCacheKey] === undefined) {
 				// create new entry
+
 				webglTextures[textureCacheKey] = {
 					texture: _gl.createTexture(),
 					usedTimes: 0
 				};
-				info.memory.textures++; // when a new instance of WebGLTexture was created, a texture upload is required
+				info.memory.textures++;
+
+				// when a new instance of WebGLTexture was created, a texture upload is required
 				// even if the image contents are identical
 
 				forceUpload = true;
 			}
+			webglTextures[textureCacheKey].usedTimes++;
 
-			webglTextures[textureCacheKey].usedTimes++; // every time the texture cache key changes, it's necessary to check if an instance of
+			// every time the texture cache key changes, it's necessary to check if an instance of
 			// WebGLTexture can be deleted in order to avoid a memory leak.
 
 			const webglTexture = webglTextures[textureProperties.__cacheKey];
-
 			if (webglTexture !== undefined) {
 				webglTextures[textureProperties.__cacheKey].usedTimes--;
-
 				if (webglTexture.usedTimes === 0) {
 					deleteTexture(texture);
 				}
-			} // store references to cache key and WebGLTexture object
+			}
 
+			// store references to cache key and WebGLTexture object
 
 			textureProperties.__cacheKey = textureCacheKey;
 			textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
 		}
-
 		return forceUpload;
 	}
-
 	function uploadTexture(textureProperties, texture, slot) {
 		let textureType = _gl.TEXTURE_2D;
 		if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
@@ -17103,36 +15105,29 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 		const source = texture.source;
 		state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 		const sourceProperties = properties.get(source);
-
 		if (source.version !== sourceProperties.__version || forceUpload === true) {
 			state.activeTexture(_gl.TEXTURE0 + slot);
-
 			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
-
 			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
-
 			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
-
 			_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
-
 			const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
 			let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
 			image = verifyColorSpace(texture, image);
 			const supportsMips = isPowerOfTwo$1(image) || isWebGL2,
-						glFormat = utils.convert(texture.format, texture.encoding);
+				glFormat = utils.convert(texture.format, texture.encoding);
 			let glType = utils.convert(texture.type),
-					glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);
+				glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);
 			setTextureParameters(textureType, texture, supportsMips);
 			let mipmap;
 			const mipmaps = texture.mipmaps;
 			const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
 			const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;
 			const levels = getMipLevels(texture, image, supportsMips);
-
 			if (texture.isDepthTexture) {
 				// populate depth texture with dummy data
-				glInternalFormat = _gl.DEPTH_COMPONENT;
 
+				glInternalFormat = _gl.DEPTH_COMPONENT;
 				if (isWebGL2) {
 					if (texture.type === FloatType) {
 						glInternalFormat = _gl.DEPTH_COMPONENT32F;
@@ -17147,8 +15142,9 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 					if (texture.type === FloatType) {
 						console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');
 					}
-				} // validation checks for WebGL 1
+				}
 
+				// validation checks for WebGL 1
 
 				if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
 					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
@@ -17160,21 +15156,22 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 						glType = utils.convert(texture.type);
 					}
 				}
-
 				if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
 					// Depth stencil textures need the DEPTH_STENCIL internal format
 					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
-					glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
+					glInternalFormat = _gl.DEPTH_STENCIL;
+
+					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
 					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
 					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
-
 					if (texture.type !== UnsignedInt248Type) {
 						console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');
 						texture.type = UnsignedInt248Type;
 						glType = utils.convert(texture.type);
 					}
-				} //
+				}
 
+				//
 
 				if (allocateMemory) {
 					if (useTexStorage) {
@@ -17187,28 +15184,25 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				// use manually created mipmaps if available
 				// if there are no manual mipmaps
 				// set 0 level mipmap and then use GL to generate other mipmap levels
+
 				if (mipmaps.length > 0 && supportsMips) {
 					if (useTexStorage && allocateMemory) {
 						state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
 					}
-
 					for (let i = 0, il = mipmaps.length; i < il; i++) {
 						mipmap = mipmaps[i];
-
 						if (useTexStorage) {
 							state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
 						} else {
 							state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
 						}
 					}
-
 					texture.generateMipmaps = false;
 				} else {
 					if (useTexStorage) {
 						if (allocateMemory) {
 							state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
 						}
-
 						state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
 					} else {
 						state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
@@ -17219,10 +15213,8 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 					if (useTexStorage && allocateMemory) {
 						state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
 					}
-
 					for (let i = 0, il = mipmaps.length; i < il; i++) {
 						mipmap = mipmaps[i];
-
 						if (texture.format !== RGBAFormat) {
 							if (glFormat !== null) {
 								if (useTexStorage) {
@@ -17245,10 +15237,8 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 					if (useTexStorage && allocateMemory) {
 						state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
 					}
-
 					for (let i = 0, il = mipmaps.length; i < il; i++) {
 						mipmap = mipmaps[i];
-
 						if (texture.format !== RGBAFormat) {
 							if (glFormat !== null) {
 								if (useTexStorage) {
@@ -17273,7 +15263,6 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 					if (allocateMemory) {
 						state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
 					}
-
 					state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
 				} else {
 					state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
@@ -17283,7 +15272,6 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 					if (allocateMemory) {
 						state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
 					}
-
 					state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
 				} else {
 					state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
@@ -17294,8 +15282,7 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 						state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
 					} else {
 						let width = image.width,
-								height = image.height;
-
+							height = image.height;
 						for (let i = 0; i < levels; i++) {
 							state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
 							width >>= 1;
@@ -17305,103 +15292,84 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				}
 			} else {
 				// regular Texture (image, video, canvas)
+
 				// use manually created mipmaps if available
 				// if there are no manual mipmaps
 				// set 0 level mipmap and then use GL to generate other mipmap levels
+
 				if (mipmaps.length > 0 && supportsMips) {
 					if (useTexStorage && allocateMemory) {
 						state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
 					}
-
 					for (let i = 0, il = mipmaps.length; i < il; i++) {
 						mipmap = mipmaps[i];
-
 						if (useTexStorage) {
 							state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
 						} else {
 							state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
 						}
 					}
-
 					texture.generateMipmaps = false;
 				} else {
 					if (useTexStorage) {
 						if (allocateMemory) {
 							state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
 						}
-
 						state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
 					} else {
 						state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
 					}
 				}
 			}
-
 			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 				generateMipmap(textureType);
 			}
-
 			sourceProperties.__version = source.version;
 			if (texture.onUpdate) texture.onUpdate(texture);
 		}
-
 		textureProperties.__version = texture.version;
 	}
-
 	function uploadCubeTexture(textureProperties, texture, slot) {
 		if (texture.image.length !== 6) return;
 		const forceUpload = initTexture(textureProperties, texture);
 		const source = texture.source;
 		state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 		const sourceProperties = properties.get(source);
-
 		if (source.version !== sourceProperties.__version || forceUpload === true) {
 			state.activeTexture(_gl.TEXTURE0 + slot);
-
 			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
-
 			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
-
 			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
-
 			_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
-
 			const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
 			const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
 			const cubeImage = [];
-
 			for (let i = 0; i < 6; i++) {
 				if (!isCompressed && !isDataTexture) {
 					cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
 				} else {
 					cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
 				}
-
 				cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
 			}
-
 			const image = cubeImage[0],
-						supportsMips = isPowerOfTwo$1(image) || isWebGL2,
-						glFormat = utils.convert(texture.format, texture.encoding),
-						glType = utils.convert(texture.type),
-						glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
+				supportsMips = isPowerOfTwo$1(image) || isWebGL2,
+				glFormat = utils.convert(texture.format, texture.encoding),
+				glType = utils.convert(texture.type),
+				glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
 			const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
 			const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;
 			let levels = getMipLevels(texture, image, supportsMips);
 			setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
 			let mipmaps;
-
 			if (isCompressed) {
 				if (useTexStorage && allocateMemory) {
 					state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
 				}
-
 				for (let i = 0; i < 6; i++) {
 					mipmaps = cubeImage[i].mipmaps;
-
 					for (let j = 0; j < mipmaps.length; j++) {
 						const mipmap = mipmaps[j];
-
 						if (texture.format !== RGBAFormat) {
 							if (glFormat !== null) {
 								if (useTexStorage) {
@@ -17423,15 +15391,14 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				}
 			} else {
 				mipmaps = texture.mipmaps;
-
 				if (useTexStorage && allocateMemory) {
 					// TODO: Uniformly handle mipmap definitions
 					// Normal textures and compressed cube textures define base level + mips with their mipmap array
 					// Uncompressed cube textures use their mipmap array only for mips (no base level)
+
 					if (mipmaps.length > 0) levels++;
 					state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
 				}
-
 				for (let i = 0; i < 6; i++) {
 					if (isDataTexture) {
 						if (useTexStorage) {
@@ -17439,11 +15406,9 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 						} else {
 							state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
 						}
-
 						for (let j = 0; j < mipmaps.length; j++) {
 							const mipmap = mipmaps[j];
 							const mipmapImage = mipmap.image[i].image;
-
 							if (useTexStorage) {
 								state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
 							} else {
@@ -17456,10 +15421,8 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 						} else {
 							state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
 						}
-
 						for (let j = 0; j < mipmaps.length; j++) {
 							const mipmap = mipmaps[j];
-
 							if (useTexStorage) {
 								state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
 							} else {
@@ -17469,27 +15432,24 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 					}
 				}
 			}
-
 			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 				// We assume images for cube map have the same size.
 				generateMipmap(_gl.TEXTURE_CUBE_MAP);
 			}
-
 			sourceProperties.__version = source.version;
 			if (texture.onUpdate) texture.onUpdate(texture);
 		}
-
 		textureProperties.__version = texture.version;
-	} // Render targets
-	// Setup storage for target texture and bind it to correct framebuffer
+	}
 
+	// Render targets
 
+	// Setup storage for target texture and bind it to correct framebuffer
 	function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
 		const glFormat = utils.convert(texture.format, texture.encoding);
 		const glType = utils.convert(texture.type);
 		const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
 		const renderTargetProperties = properties.get(renderTarget);
-
 		if (!renderTargetProperties.__hasExternalTextures) {
 			if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
 				state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
@@ -17497,29 +15457,24 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
 			}
 		}
-
 		state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
-
 		if (useMultisampledRTT(renderTarget)) {
 			multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
 		} else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
 			// see #24753
+
 			_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
 		}
-
 		state.bindFramebuffer(_gl.FRAMEBUFFER, null);
-	} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
-
+	}
 
+	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
 	function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
 		_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
-
 		if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
 			let glInternalFormat = _gl.DEPTH_COMPONENT16;
-
 			if (isMultisample || useMultisampledRTT(renderTarget)) {
 				const depthTexture = renderTarget.depthTexture;
-
 				if (depthTexture && depthTexture.isDepthTexture) {
 					if (depthTexture.type === FloatType) {
 						glInternalFormat = _gl.DEPTH_COMPONENT32F;
@@ -17527,9 +15482,7 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 						glInternalFormat = _gl.DEPTH_COMPONENT24;
 					}
 				}
-
 				const samples = getRenderTargetSamples(renderTarget);
-
 				if (useMultisampledRTT(renderTarget)) {
 					multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
 				} else {
@@ -17538,11 +15491,9 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 			} else {
 				_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
 			}
-
 			_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
 		} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
 			const samples = getRenderTargetSamples(renderTarget);
-
 			if (isMultisample && useMultisampledRTT(renderTarget) === false) {
 				_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
 			} else if (useMultisampledRTT(renderTarget)) {
@@ -17550,18 +15501,15 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 			} else {
 				_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
 			}
-
 			_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
 		} else {
 			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
-
 			for (let i = 0; i < textures.length; i++) {
 				const texture = textures[i];
 				const glFormat = utils.convert(texture.format, texture.encoding);
 				const glType = utils.convert(texture.type);
 				const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
 				const samples = getRenderTargetSamples(renderTarget);
-
 				if (isMultisample && useMultisampledRTT(renderTarget) === false) {
 					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
 				} else if (useMultisampledRTT(renderTarget)) {
@@ -17571,33 +15519,27 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				}
 			}
 		}
-
 		_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
-	} // Setup resources for a Depth Texture for a FBO (needs an extension)
-
+	}
 
+	// Setup resources for a Depth Texture for a FBO (needs an extension)
 	function setupDepthTexture(framebuffer, renderTarget) {
 		const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
 		if (isCube) throw new Error('Depth Texture with cube render targets is not supported');
 		state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
-
 		if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
 			throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
-		} // upload an empty depth texture with framebuffer size
-
+		}
 
+		// upload an empty depth texture with framebuffer size
 		if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
 			renderTarget.depthTexture.image.width = renderTarget.width;
 			renderTarget.depthTexture.image.height = renderTarget.height;
 			renderTarget.depthTexture.needsUpdate = true;
 		}
-
 		setTexture2D(renderTarget.depthTexture, 0);
-
 		const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
-
 		const samples = getRenderTargetSamples(renderTarget);
-
 		if (renderTarget.depthTexture.format === DepthFormat) {
 			if (useMultisampledRTT(renderTarget)) {
 				multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
@@ -17613,20 +15555,18 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 		} else {
 			throw new Error('Unknown depthTexture format');
 		}
-	} // Setup GL resources for a non-texture depth buffer
-
+	}
 
+	// Setup GL resources for a non-texture depth buffer
 	function setupDepthRenderbuffer(renderTarget) {
 		const renderTargetProperties = properties.get(renderTarget);
 		const isCube = renderTarget.isWebGLCubeRenderTarget === true;
-
 		if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
 			if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');
 			setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
 		} else {
 			if (isCube) {
 				renderTargetProperties.__webglDepthbuffer = [];
-
 				for (let i = 0; i < 6; i++) {
 					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
 					renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
@@ -17638,59 +15578,51 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
 			}
 		}
-
 		state.bindFramebuffer(_gl.FRAMEBUFFER, null);
-	} // rebind framebuffer with external textures
-
+	}
 
+	// rebind framebuffer with external textures
 	function rebindTextures(renderTarget, colorTexture, depthTexture) {
 		const renderTargetProperties = properties.get(renderTarget);
-
 		if (colorTexture !== undefined) {
 			setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);
 		}
-
 		if (depthTexture !== undefined) {
 			setupDepthRenderbuffer(renderTarget);
 		}
-	} // Set up GL resources for the render target
-
+	}
 
+	// Set up GL resources for the render target
 	function setupRenderTarget(renderTarget) {
 		const texture = renderTarget.texture;
 		const renderTargetProperties = properties.get(renderTarget);
 		const textureProperties = properties.get(texture);
 		renderTarget.addEventListener('dispose', onRenderTargetDispose);
-
 		if (renderTarget.isWebGLMultipleRenderTargets !== true) {
 			if (textureProperties.__webglTexture === undefined) {
 				textureProperties.__webglTexture = _gl.createTexture();
 			}
-
 			textureProperties.__version = texture.version;
 			info.memory.textures++;
 		}
-
 		const isCube = renderTarget.isWebGLCubeRenderTarget === true;
 		const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
-		const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Setup framebuffer
+		const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
+
+		// Setup framebuffer
 
 		if (isCube) {
 			renderTargetProperties.__webglFramebuffer = [];
-
 			for (let i = 0; i < 6; i++) {
 				renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
 			}
 		} else {
 			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
-
 			if (isMultipleRenderTargets) {
 				if (capabilities.drawBuffers) {
 					const textures = renderTarget.texture;
-
 					for (let i = 0, il = textures.length; i < il; i++) {
 						const attachmentProperties = properties.get(textures[i]);
-
 						if (attachmentProperties.__webglTexture === undefined) {
 							attachmentProperties.__webglTexture = _gl.createTexture();
 							info.memory.textures++;
@@ -17700,73 +15632,58 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 					console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');
 				}
 			}
-
 			if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
 				const textures = isMultipleRenderTargets ? texture : [texture];
 				renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
 				renderTargetProperties.__webglColorRenderbuffer = [];
 				state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
-
 				for (let i = 0; i < textures.length; i++) {
 					const texture = textures[i];
 					renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
-
 					_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
-
 					const glFormat = utils.convert(texture.format, texture.encoding);
 					const glType = utils.convert(texture.type);
 					const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true);
 					const samples = getRenderTargetSamples(renderTarget);
-
 					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
-
 					_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
 				}
-
 				_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
-
 				if (renderTarget.depthBuffer) {
 					renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
 					setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
 				}
-
 				state.bindFramebuffer(_gl.FRAMEBUFFER, null);
 			}
-		} // Setup color buffer
+		}
 
+		// Setup color buffer
 
 		if (isCube) {
 			state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
 			setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
-
 			for (let i = 0; i < 6; i++) {
 				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
 			}
-
 			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 				generateMipmap(_gl.TEXTURE_CUBE_MAP);
 			}
-
 			state.unbindTexture();
 		} else if (isMultipleRenderTargets) {
 			const textures = renderTarget.texture;
-
 			for (let i = 0, il = textures.length; i < il; i++) {
 				const attachment = textures[i];
 				const attachmentProperties = properties.get(attachment);
 				state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
 				setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);
 				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);
-
 				if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {
 					generateMipmap(_gl.TEXTURE_2D);
 				}
 			}
-
 			state.unbindTexture();
 		} else {
 			let glTextureType = _gl.TEXTURE_2D;
-
 			if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
 				if (isWebGL2) {
 					glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
@@ -17774,43 +15691,35 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 					console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');
 				}
 			}
-
 			state.bindTexture(glTextureType, textureProperties.__webglTexture);
 			setTextureParameters(glTextureType, texture, supportsMips);
 			setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);
-
 			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 				generateMipmap(glTextureType);
 			}
-
 			state.unbindTexture();
-		} // Setup depth and stencil buffers
+		}
 
+		// Setup depth and stencil buffers
 
 		if (renderTarget.depthBuffer) {
 			setupDepthRenderbuffer(renderTarget);
 		}
 	}
-
 	function updateRenderTargetMipmap(renderTarget) {
 		const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
 		const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
-
 		for (let i = 0, il = textures.length; i < il; i++) {
 			const texture = textures[i];
-
 			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 				const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
-
 				const webglTexture = properties.get(texture).__webglTexture;
-
 				state.bindTexture(target, webglTexture);
 				generateMipmap(target);
 				state.unbindTexture();
 			}
 		}
 	}
-
 	function updateMultisampleRenderTarget(renderTarget) {
 		if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
 			const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [renderTarget.texture];
@@ -17820,122 +15729,105 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 			const invalidationArray = [];
 			const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
 			const renderTargetProperties = properties.get(renderTarget);
-			const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true; // If MRT we need to remove FBO attachments
+			const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
 
+			// If MRT we need to remove FBO attachments
 			if (isMultipleRenderTargets) {
 				for (let i = 0; i < textures.length; i++) {
 					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
-
 					_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
-
 					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
-
 					_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
 				}
 			}
-
 			state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
 			state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
-
 			for (let i = 0; i < textures.length; i++) {
 				invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);
-
 				if (renderTarget.depthBuffer) {
 					invalidationArray.push(depthStyle);
 				}
-
 				const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;
-
 				if (ignoreDepthValues === false) {
 					if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
 					if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
 				}
-
 				if (isMultipleRenderTargets) {
 					_gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
 				}
-
 				if (ignoreDepthValues === true) {
 					_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);
-
 					_gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
 				}
-
 				if (isMultipleRenderTargets) {
 					const webglTexture = properties.get(textures[i]).__webglTexture;
-
 					_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
 				}
-
 				_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
-
 				if (supportsInvalidateFramebuffer) {
 					_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);
 				}
 			}
-
 			state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
-			state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null); // If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
+			state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
 
+			// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
 			if (isMultipleRenderTargets) {
 				for (let i = 0; i < textures.length; i++) {
 					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
-
 					_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
-
 					const webglTexture = properties.get(textures[i]).__webglTexture;
-
 					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
-
 					_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
 				}
 			}
-
 			state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
 		}
 	}
-
 	function getRenderTargetSamples(renderTarget) {
 		return Math.min(maxSamples, renderTarget.samples);
 	}
-
 	function useMultisampledRTT(renderTarget) {
 		const renderTargetProperties = properties.get(renderTarget);
 		return isWebGL2 && renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;
 	}
-
 	function updateVideoTexture(texture) {
-		const frame = info.render.frame; // Check the last frame we updated the VideoTexture
+		const frame = info.render.frame;
+
+		// Check the last frame we updated the VideoTexture
 
 		if (_videoTextures.get(texture) !== frame) {
 			_videoTextures.set(texture, frame);
-
 			texture.update();
 		}
 	}
-
 	function verifyColorSpace(texture, image) {
 		const encoding = texture.encoding;
 		const format = texture.format;
 		const type = texture.type;
 		if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat) return image;
-
 		if (encoding !== LinearEncoding) {
 			// sRGB
+
 			if (encoding === sRGBEncoding) {
 				if (isWebGL2 === false) {
 					// in WebGL 1, try to use EXT_sRGB extension and unsized formats
+
 					if (extensions.has('EXT_sRGB') === true && format === RGBAFormat) {
-						texture.format = _SRGBAFormat; // it's not possible to generate mips in WebGL 1 with this extension
+						texture.format = _SRGBAFormat;
+
+						// it's not possible to generate mips in WebGL 1 with this extension
 
 						texture.minFilter = LinearFilter;
 						texture.generateMipmaps = false;
 					} else {
 						// slow fallback (CPU decode)
+
 						image = ImageUtils.sRGBToLinear(image);
 					}
 				} else {
 					// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
+
 					if (format !== RGBAFormat || type !== UnsignedByteType) {
 						console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');
 					}
@@ -17944,10 +15836,10 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 				console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);
 			}
 		}
-
 		return image;
-	} //
+	}
 
+	//
 
 	this.allocateTextureUnit = allocateTextureUnit;
 	this.resetTextureUnits = resetTextureUnits;
@@ -17966,7 +15858,6 @@ function WebGLTextures(_gl, extensions, state, properties, capabilities, utils,
 
 function WebGLUtils(gl, extensions, capabilities) {
 	const isWebGL2 = capabilities.isWebGL2;
-
 	function convert(p, encoding = null) {
 		let extension;
 		if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;
@@ -17978,52 +15869,53 @@ function WebGLUtils(gl, extensions, capabilities) {
 		if (p === IntType) return gl.INT;
 		if (p === UnsignedIntType) return gl.UNSIGNED_INT;
 		if (p === FloatType) return gl.FLOAT;
-
 		if (p === HalfFloatType) {
 			if (isWebGL2) return gl.HALF_FLOAT;
 			extension = extensions.get('OES_texture_half_float');
-
 			if (extension !== null) {
 				return extension.HALF_FLOAT_OES;
 			} else {
 				return null;
 			}
 		}
-
 		if (p === AlphaFormat) return gl.ALPHA;
 		if (p === RGBAFormat) return gl.RGBA;
 		if (p === LuminanceFormat) return gl.LUMINANCE;
 		if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;
 		if (p === DepthFormat) return gl.DEPTH_COMPONENT;
-		if (p === DepthStencilFormat) return gl.DEPTH_STENCIL; // @deprecated since r137
+		if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;
+
+		// @deprecated since r137
 
 		if (p === RGBFormat) {
 			console.warn('THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228');
 			return gl.RGBA;
-		} // WebGL 1 sRGB fallback
+		}
 
+		// WebGL 1 sRGB fallback
 
 		if (p === _SRGBAFormat) {
 			extension = extensions.get('EXT_sRGB');
-
 			if (extension !== null) {
 				return extension.SRGB_ALPHA_EXT;
 			} else {
 				return null;
 			}
-		} // WebGL2 formats.
+		}
 
+		// WebGL2 formats.
 
 		if (p === RedFormat) return gl.RED;
 		if (p === RedIntegerFormat) return gl.RED_INTEGER;
 		if (p === RGFormat) return gl.RG;
 		if (p === RGIntegerFormat) return gl.RG_INTEGER;
-		if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER; // S3TC
+		if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;
+
+		// S3TC
 
 		if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
 			if (encoding === sRGBEncoding) {
 				extension = extensions.get('WEBGL_compressed_texture_s3tc_srgb');
-
 				if (extension !== null) {
 					if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
 					if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
@@ -18034,7 +15926,6 @@ function WebGLUtils(gl, extensions, capabilities) {
 				}
 			} else {
 				extension = extensions.get('WEBGL_compressed_texture_s3tc');
-
 				if (extension !== null) {
 					if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
 					if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
@@ -18044,12 +15935,12 @@ function WebGLUtils(gl, extensions, capabilities) {
 					return null;
 				}
 			}
-		} // PVRTC
+		}
 
+		// PVRTC
 
 		if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
 			extension = extensions.get('WEBGL_compressed_texture_pvrtc');
-
 			if (extension !== null) {
 				if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
 				if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
@@ -18058,35 +15949,35 @@ function WebGLUtils(gl, extensions, capabilities) {
 			} else {
 				return null;
 			}
-		} // ETC1
+		}
 
+		// ETC1
 
 		if (p === RGB_ETC1_Format) {
 			extension = extensions.get('WEBGL_compressed_texture_etc1');
-
 			if (extension !== null) {
 				return extension.COMPRESSED_RGB_ETC1_WEBGL;
 			} else {
 				return null;
 			}
-		} // ETC2
+		}
 
+		// ETC2
 
 		if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
 			extension = extensions.get('WEBGL_compressed_texture_etc');
-
 			if (extension !== null) {
 				if (p === RGB_ETC2_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
 				if (p === RGBA_ETC2_EAC_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
 			} else {
 				return null;
 			}
-		} // ASTC
+		}
 
+		// ASTC
 
 		if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
 			extension = extensions.get('WEBGL_compressed_texture_astc');
-
 			if (extension !== null) {
 				if (p === RGBA_ASTC_4x4_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
 				if (p === RGBA_ASTC_5x4_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
@@ -18105,35 +15996,35 @@ function WebGLUtils(gl, extensions, capabilities) {
 			} else {
 				return null;
 			}
-		} // BPTC
+		}
 
+		// BPTC
 
 		if (p === RGBA_BPTC_Format) {
 			extension = extensions.get('EXT_texture_compression_bptc');
-
 			if (extension !== null) {
 				if (p === RGBA_BPTC_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
 			} else {
 				return null;
 			}
-		} //
+		}
 
+		//
 
 		if (p === UnsignedInt248Type) {
 			if (isWebGL2) return gl.UNSIGNED_INT_24_8;
 			extension = extensions.get('WEBGL_depth_texture');
-
 			if (extension !== null) {
 				return extension.UNSIGNED_INT_24_8_WEBGL;
 			} else {
 				return null;
 			}
-		} // if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)
+		}
 
+		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)
 
 		return gl[p] !== undefined ? gl[p] : null;
 	}
-
 	return {
 		convert: convert
 	};
@@ -18145,7 +16036,6 @@ class Group extends Object3D {
 		this.isGroup = true;
 		this.type = 'Group';
 	}
-
 }
 
 class ArrayCamera extends PerspectiveCamera {
@@ -18154,7 +16044,6 @@ class ArrayCamera extends PerspectiveCamera {
 		this.isArrayCamera = true;
 		this.cameras = array;
 	}
-
 }
 
 /**
@@ -18163,22 +16052,23 @@ class ArrayCamera extends PerspectiveCamera {
  */
 var cameraLPos = new Vector3();
 var cameraRPos = new Vector3();
+
 /**
  * Assumes 2 cameras that are parallel and share an X-axis, and that
  * the cameras' projection and world matrices have already been set.
  * And that near and far planes are identical for both cameras.
  * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
  */
-
 function setProjectionFromUnion(camera, cameraL, cameraR) {
 	cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
 	cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
 	var ipd = cameraLPos.distanceTo(cameraRPos);
 	var projL = cameraL.projectionMatrix.elements;
-	var projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and
+	var projR = cameraR.projectionMatrix.elements;
+
+	// VR systems will have identical far and near planes, and
 	// most likely identical top and bottom frustum extents.
 	// Use the left camera for these values.
-
 	var near = projL[14] / (projL[10] - 1);
 	var far = projL[14] / (projL[10] + 1);
 	var topFov = (projL[9] + 1) / projL[5];
@@ -18186,20 +16076,23 @@ function setProjectionFromUnion(camera, cameraL, cameraR) {
 	var leftFov = (projL[8] - 1) / projL[0];
 	var rightFov = (projR[8] + 1) / projR[0];
 	var left = near * leftFov;
-	var right = near * rightFov; // Calculate the new camera's position offset from the
-	// left camera. xOffset should be roughly half `ipd`.
+	var right = near * rightFov;
 
+	// Calculate the new camera's position offset from the
+	// left camera. xOffset should be roughly half `ipd`.
 	var zOffset = ipd / (-leftFov + rightFov);
-	var xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?
+	var xOffset = zOffset * -leftFov;
 
+	// TODO: Better way to apply this offset?
 	cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
 	camera.translateX(xOffset);
 	camera.translateZ(zOffset);
 	camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
-	camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale
+	camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
+
+	// Find the union of the frustum values of the cameras and scale
 	// the values so that the near plane's position does not change in world space,
 	// although must now be relative to the new union camera.
-
 	var near2 = near + zOffset;
 	var far2 = far + zOffset;
 	var left2 = left - xOffset;
@@ -18212,7 +16105,6 @@ function setProjectionFromUnion(camera, cameraL, cameraR) {
 /**
  * @author mrdoob / http://mrdoob.com/
  */
-
 function WebVRManager(renderer) {
 	var renderWidth, renderHeight;
 	var scope = this;
@@ -18224,12 +16116,10 @@ function WebVRManager(renderer) {
 	var standingMatrixInverse = new Matrix4();
 	var framebufferScaleFactor = 1.0;
 	var referenceSpaceType = 'local-floor';
-
 	if (typeof window !== 'undefined' && 'VRFrameData' in window) {
 		frameData = new window.VRFrameData();
 		window.addEventListener('vrdisplaypresentchange', onVRDisplayPresentChange, false);
 	}
-
 	var matrixWorldInverse = new Matrix4();
 	var tempQuaternion = new Quaternion();
 	var tempPosition = new Vector3();
@@ -18243,11 +16133,9 @@ function WebVRManager(renderer) {
 	cameraVR.layers.enable(1);
 	cameraVR.layers.enable(2);
 	var currentSize = new Vector2(),
-			currentPixelRatio;
-
+		currentPixelRatio;
 	function onVRDisplayPresentChange() {
 		var isPresenting = scope.isPresenting = device !== null && device.isPresenting === true;
-
 		if (isPresenting) {
 			var eyeParameters = device.getEyeParameters('left');
 			renderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;
@@ -18265,24 +16153,21 @@ function WebVRManager(renderer) {
 			if (scope.enabled) {
 				renderer.setDrawingBufferSize(currentSize.width, currentSize.height, currentPixelRatio);
 			}
-
 			animation.stop();
 			scope.dispatchEvent({
 				type: 'sessionend'
 			});
 		}
-	} //
+	}
 
+	//
 
 	var triggers = [];
 	var grips = [];
-
 	function findGamepad(id) {
 		var gamepads = navigator.getGamepads && navigator.getGamepads();
-
 		for (var i = 0, l = gamepads.length; i < l; i++) {
 			var gamepad = gamepads[i];
-
 			if (gamepad && (gamepad.id === 'Daydream Controller' || gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' || gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith('Oculus Touch') || gamepad.id.startsWith('HTC Vive Focus') || gamepad.id.startsWith('Spatial Controller'))) {
 				var hand = gamepad.hand;
 				if (id === 0 && (hand === '' || hand === 'right')) return gamepad;
@@ -18290,14 +16175,14 @@ function WebVRManager(renderer) {
 			}
 		}
 	}
-
 	function updateControllers() {
 		for (var i = 0; i < controllers.length; i++) {
 			var controller = controllers[i];
 			var gamepad = findGamepad(i);
-
 			if (gamepad !== undefined && gamepad.pose !== undefined) {
-				if (gamepad.pose === null) return; // Pose
+				if (gamepad.pose === null) return;
+
+				// Pose
 
 				var pose = gamepad.pose;
 				if (pose.hasPosition === false) controller.position.set(0.2, -0.6, -0.05);
@@ -18307,14 +16192,14 @@ function WebVRManager(renderer) {
 				controller.matrix.premultiply(standingMatrix);
 				controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
 				controller.matrixWorldNeedsUpdate = true;
-				controller.visible = true; // Trigger
+				controller.visible = true;
+
+				// Trigger
 
 				var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;
 				if (triggers[i] === undefined) triggers[i] = false;
-
 				if (triggers[i] !== gamepad.buttons[buttonId].pressed) {
 					triggers[i] = gamepad.buttons[buttonId].pressed;
-
 					if (triggers[i] === true) {
 						controller.dispatchEvent({
 							type: 'selectstart'
@@ -18327,16 +16212,16 @@ function WebVRManager(renderer) {
 							type: 'select'
 						});
 					}
-				} // Grip
-
+				}
 
+				// Grip
 				buttonId = 2;
-				if (grips[i] === undefined) grips[i] = false; // Skip if the grip button doesn't exist on this controller
+				if (grips[i] === undefined) grips[i] = false;
 
+				// Skip if the grip button doesn't exist on this controller
 				if (gamepad.buttons[buttonId] !== undefined) {
 					if (grips[i] !== gamepad.buttons[buttonId].pressed) {
 						grips[i] = gamepad.buttons[buttonId].pressed;
-
 						if (grips[i] === true) {
 							controller.dispatchEvent({
 								type: 'squeezestart'
@@ -18356,181 +16241,169 @@ function WebVRManager(renderer) {
 			}
 		}
 	}
-
 	function updateViewportFromBounds(viewport, bounds) {
 		if (bounds !== null && bounds.length === 4) {
 			viewport.set(bounds[0] * renderWidth, bounds[1] * renderHeight, bounds[2] * renderWidth, bounds[3] * renderHeight);
 		}
-	} //
+	}
 
+	//
 
 	this.enabled = false;
-
 	this.getController = function (id) {
 		var controller = controllers[id];
-
 		if (controller === undefined) {
 			controller = new Group();
 			controller.matrixAutoUpdate = false;
 			controller.visible = false;
 			controllers[id] = controller;
 		}
-
 		return controller;
 	};
-
 	this.getDevice = function () {
 		return device;
 	};
-
 	this.setDevice = function (value) {
 		if (value !== undefined) device = value;
 		animation.setContext(value);
 	};
-
 	this.setFramebufferScaleFactor = function (value) {
 		framebufferScaleFactor = value;
 	};
-
 	this.setReferenceSpaceType = function (value) {
 		referenceSpaceType = value;
 	};
-
 	this.setPoseTarget = function (object) {
 		if (object !== undefined) poseTarget = object;
-	}; //
+	};
 
+	//
 
 	this.cameraAutoUpdate = true;
-
 	this.updateCamera = function (camera) {
 		var userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;
 		device.depthNear = camera.near;
 		device.depthFar = camera.far;
-		device.getFrameData(frameData); //
+		device.getFrameData(frameData);
+
+		//
 
 		if (referenceSpaceType === 'local-floor') {
 			var stageParameters = device.stageParameters;
-
 			if (stageParameters) {
 				standingMatrix.fromArray(stageParameters.sittingToStandingTransform);
 			} else {
 				standingMatrix.makeTranslation(0, userHeight, 0);
 			}
 		}
-
 		var pose = frameData.pose;
-		var poseObject = poseTarget !== null ? poseTarget : camera; // We want to manipulate poseObject by its position and quaternion components since users may rely on them.
+		var poseObject = poseTarget !== null ? poseTarget : camera;
 
+		// We want to manipulate poseObject by its position and quaternion components since users may rely on them.
 		poseObject.matrix.copy(standingMatrix);
 		poseObject.matrix.decompose(poseObject.position, poseObject.quaternion, poseObject.scale);
-
 		if (pose.orientation !== null) {
 			tempQuaternion.fromArray(pose.orientation);
 			poseObject.quaternion.multiply(tempQuaternion);
 		}
-
 		if (pose.position !== null) {
 			tempQuaternion.setFromRotationMatrix(standingMatrix);
 			tempPosition.fromArray(pose.position);
 			tempPosition.applyQuaternion(tempQuaternion);
 			poseObject.position.add(tempPosition);
 		}
-
 		poseObject.updateMatrixWorld();
 		var children = poseObject.children;
-
 		for (var i = 0, l = children.length; i < l; i++) {
 			children[i].updateMatrixWorld(true);
-		} //
+		}
 
+		//
 
 		cameraL.near = camera.near;
 		cameraR.near = camera.near;
 		cameraL.far = camera.far;
 		cameraR.far = camera.far;
 		cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix);
-		cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix); // TODO (mrdoob) Double check this code
+		cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix);
 
-		standingMatrixInverse.copy(standingMatrix).invert();
+		// TODO (mrdoob) Double check this code
 
+		standingMatrixInverse.copy(standingMatrix).invert();
 		if (referenceSpaceType === 'local-floor') {
 			cameraL.matrixWorldInverse.multiply(standingMatrixInverse);
 			cameraR.matrixWorldInverse.multiply(standingMatrixInverse);
 		}
-
 		var parent = poseObject.parent;
-
 		if (parent !== null) {
 			matrixWorldInverse.copy(parent.matrixWorld).invert();
 			cameraL.matrixWorldInverse.multiply(matrixWorldInverse);
 			cameraR.matrixWorldInverse.multiply(matrixWorldInverse);
-		} // envMap and Mirror needs camera.matrixWorld
+		}
 
+		// envMap and Mirror needs camera.matrixWorld
 
 		cameraL.matrixWorld.copy(cameraL.matrixWorldInverse).invert();
 		cameraR.matrixWorld.copy(cameraR.matrixWorldInverse).invert();
 		cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix);
 		cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix);
-		setProjectionFromUnion(cameraVR, cameraL, cameraR); //
+		setProjectionFromUnion(cameraVR, cameraL, cameraR);
 
-		var layers = device.getLayers();
+		//
 
+		var layers = device.getLayers();
 		if (layers.length) {
 			var layer = layers[0];
 			updateViewportFromBounds(cameraL.viewport, layer.leftBounds);
 			updateViewportFromBounds(cameraR.viewport, layer.rightBounds);
 		}
-
 		updateControllers();
 		return cameraVR;
 	};
-
 	this.getCamera = function () {
 		return cameraVR;
-	}; // Dummy getFoveation/setFoveation to have the same API as WebXR
+	};
 
+	// Dummy getFoveation/setFoveation to have the same API as WebXR
 
 	this.getFoveation = function () {
 		return 1;
 	};
-
 	this.setFoveation = function (foveation) {
 		if (foveation !== 1) {
 			console.warn('THREE.WebVRManager: setFoveation() not used in WebVR.');
 		}
-	}; //
+	};
 
+	//
 
 	this.getStandingMatrix = function () {
 		return standingMatrix;
 	};
+	this.isPresenting = false;
 
-	this.isPresenting = false; // Animation Loop
+	// Animation Loop
 
 	var animation = new WebGLAnimation();
-
 	this.setAnimationLoop = function (callback) {
 		animation.setAnimationLoop(callback);
 		if (this.isPresenting) animation.start();
 	};
-
 	this.submitFrame = function () {
 		if (this.isPresenting) device.submitFrame();
 	};
-
 	this.dispose = function () {
 		if (typeof window !== 'undefined') {
 			window.removeEventListener('vrdisplaypresentchange', onVRDisplayPresentChange);
 		}
-	}; // DEPRECATED
+	};
 
+	// DEPRECATED
 
 	this.setFrameOfReferenceType = function () {
 		console.warn('THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.');
 	};
 }
-
 Object.assign(WebVRManager.prototype, {
 	addEventListener: EventDispatcher.prototype.addEventListener,
 	hasEventListener: EventDispatcher.prototype.hasEventListener,
@@ -18541,14 +16414,12 @@ Object.assign(WebVRManager.prototype, {
 const _moveEvent = {
 	type: 'move'
 };
-
 class WebXRController {
 	constructor() {
 		this._targetRay = null;
 		this._grip = null;
 		this._hand = null;
 	}
-
 	getHandSpace() {
 		if (this._hand === null) {
 			this._hand = new Group();
@@ -18559,10 +16430,8 @@ class WebXRController {
 				pinching: false
 			};
 		}
-
 		return this._hand;
 	}
-
 	getTargetRaySpace() {
 		if (this._targetRay === null) {
 			this._targetRay = new Group();
@@ -18573,10 +16442,8 @@ class WebXRController {
 			this._targetRay.hasAngularVelocity = false;
 			this._targetRay.angularVelocity = new Vector3();
 		}
-
 		return this._targetRay;
 	}
-
 	getGripSpace() {
 		if (this._grip === null) {
 			this._grip = new Group();
@@ -18587,30 +16454,23 @@ class WebXRController {
 			this._grip.hasAngularVelocity = false;
 			this._grip.angularVelocity = new Vector3();
 		}
-
 		return this._grip;
 	}
-
 	dispatchEvent(event) {
 		if (this._targetRay !== null) {
 			this._targetRay.dispatchEvent(event);
 		}
-
 		if (this._grip !== null) {
 			this._grip.dispatchEvent(event);
 		}
-
 		if (this._hand !== null) {
 			this._hand.dispatchEvent(event);
 		}
-
 		return this;
 	}
-
 	connect(inputSource) {
 		if (inputSource && inputSource.hand) {
 			const hand = this._hand;
-
 			if (hand) {
 				for (const inputjoint of inputSource.hand.values()) {
 					// Initialize hand with joints when connected
@@ -18618,35 +16478,28 @@ class WebXRController {
 				}
 			}
 		}
-
 		this.dispatchEvent({
 			type: 'connected',
 			data: inputSource
 		});
 		return this;
 	}
-
 	disconnect(inputSource) {
 		this.dispatchEvent({
 			type: 'disconnected',
 			data: inputSource
 		});
-
 		if (this._targetRay !== null) {
 			this._targetRay.visible = false;
 		}
-
 		if (this._grip !== null) {
 			this._grip.visible = false;
 		}
-
 		if (this._hand !== null) {
 			this._hand.visible = false;
 		}
-
 		return this;
 	}
-
 	update(inputSource, frame, referenceSpace) {
 		let inputPose = null;
 		let gripPose = null;
@@ -18654,34 +16507,31 @@ class WebXRController {
 		const targetRay = this._targetRay;
 		const grip = this._grip;
 		const hand = this._hand;
-
 		if (inputSource && frame.session.visibilityState !== 'visible-blurred') {
 			if (hand && inputSource.hand) {
 				handPose = true;
-
 				for (const inputjoint of inputSource.hand.values()) {
 					// Update the joints groups with the XRJoint poses
-					const jointPose = frame.getJointPose(inputjoint, referenceSpace); // The transform of this joint will be updated with the joint pose on each frame
+					const jointPose = frame.getJointPose(inputjoint, referenceSpace);
 
+					// The transform of this joint will be updated with the joint pose on each frame
 					const joint = this._getHandJoint(hand, inputjoint);
-
 					if (jointPose !== null) {
 						joint.matrix.fromArray(jointPose.transform.matrix);
 						joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
 						joint.jointRadius = jointPose.radius;
 					}
-
 					joint.visible = jointPose !== null;
-				} // Custom events
-				// Check pinchz
+				}
 
+				// Custom events
 
+				// Check pinchz
 				const indexTip = hand.joints['index-finger-tip'];
 				const thumbTip = hand.joints['thumb-tip'];
 				const distance = indexTip.position.distanceTo(thumbTip.position);
 				const distanceToPinch = 0.02;
 				const threshold = 0.005;
-
 				if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
 					hand.inputState.pinching = false;
 					this.dispatchEvent({
@@ -18700,18 +16550,15 @@ class WebXRController {
 			} else {
 				if (grip !== null && inputSource.gripSpace) {
 					gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
-
 					if (gripPose !== null) {
 						grip.matrix.fromArray(gripPose.transform.matrix);
 						grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
-
 						if (gripPose.linearVelocity) {
 							grip.hasLinearVelocity = true;
 							grip.linearVelocity.copy(gripPose.linearVelocity);
 						} else {
 							grip.hasLinearVelocity = false;
 						}
-
 						if (gripPose.angularVelocity) {
 							grip.hasAngularVelocity = true;
 							grip.angularVelocity.copy(gripPose.angularVelocity);
@@ -18721,52 +16568,45 @@ class WebXRController {
 					}
 				}
 			}
-
 			if (targetRay !== null) {
-				inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace); // Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
+				inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
 
+				// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
 				if (inputPose === null && gripPose !== null) {
 					inputPose = gripPose;
 				}
-
 				if (inputPose !== null) {
 					targetRay.matrix.fromArray(inputPose.transform.matrix);
 					targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
-
 					if (inputPose.linearVelocity) {
 						targetRay.hasLinearVelocity = true;
 						targetRay.linearVelocity.copy(inputPose.linearVelocity);
 					} else {
 						targetRay.hasLinearVelocity = false;
 					}
-
 					if (inputPose.angularVelocity) {
 						targetRay.hasAngularVelocity = true;
 						targetRay.angularVelocity.copy(inputPose.angularVelocity);
 					} else {
 						targetRay.hasAngularVelocity = false;
 					}
-
 					this.dispatchEvent(_moveEvent);
 				}
 			}
 		}
-
 		if (targetRay !== null) {
 			targetRay.visible = inputPose !== null;
 		}
-
 		if (grip !== null) {
 			grip.visible = gripPose !== null;
 		}
-
 		if (hand !== null) {
 			hand.visible = handPose !== null;
 		}
-
 		return this;
-	} // private method
+	}
 
+	// private method
 
 	_getHandJoint(hand, inputjoint) {
 		if (hand.joints[inputjoint.jointName] === undefined) {
@@ -18776,20 +16616,16 @@ class WebXRController {
 			hand.joints[inputjoint.jointName] = joint;
 			hand.add(joint);
 		}
-
 		return hand.joints[inputjoint.jointName];
 	}
-
 }
 
 class DepthTexture extends Texture {
 	constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
 		format = format !== undefined ? format : DepthFormat;
-
 		if (format !== DepthFormat && format !== DepthStencilFormat) {
 			throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
 		}
-
 		if (type === undefined && format === DepthFormat) type = UnsignedIntType;
 		if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;
 		super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
@@ -18803,7 +16639,6 @@ class DepthTexture extends Texture {
 		this.flipY = false;
 		this.generateMipmaps = false;
 	}
-
 }
 
 class WebXRManager extends EventDispatcher {
@@ -18828,7 +16663,9 @@ class WebXRManager extends EventDispatcher {
 		const controllers = [];
 		const controllerInputSources = [];
 		const planes = new Set();
-		const planesLastChangedTimes = new Map(); //
+		const planesLastChangedTimes = new Map();
+
+		//
 
 		const cameraL = new PerspectiveCamera();
 		cameraL.layers.enable(1);
@@ -18841,60 +16678,49 @@ class WebXRManager extends EventDispatcher {
 		cameraVR.layers.enable(1);
 		cameraVR.layers.enable(2);
 		let _currentDepthNear = null;
-		let _currentDepthFar = null; //
+		let _currentDepthFar = null;
 
+		//
 		this.cameraAutoUpdate = true;
 		this.layersEnabled = false;
 		this.enabled = false;
 		this.isPresenting = false;
-
 		this.getCameraPose = function () {
 			return pose;
 		};
-
 		this.getController = function (index) {
 			let controller = controllers[index];
-
 			if (controller === undefined) {
 				controller = new WebXRController();
 				controllers[index] = controller;
 			}
-
 			return controller.getTargetRaySpace();
 		};
-
 		this.getControllerGrip = function (index) {
 			let controller = controllers[index];
-
 			if (controller === undefined) {
 				controller = new WebXRController();
 				controllers[index] = controller;
 			}
-
 			return controller.getGripSpace();
 		};
-
 		this.getHand = function (index) {
 			let controller = controllers[index];
-
 			if (controller === undefined) {
 				controller = new WebXRController();
 				controllers[index] = controller;
 			}
-
 			return controller.getHandSpace();
-		}; //
+		};
 
+		//
 
 		function onSessionEvent(event) {
 			const controllerIndex = controllerInputSources.indexOf(event.inputSource);
-
 			if (controllerIndex === -1) {
 				return;
 			}
-
 			const controller = controllers[controllerIndex];
-
 			if (controller !== undefined) {
 				controller.dispatchEvent({
 					type: event.type,
@@ -18902,7 +16728,6 @@ class WebXRManager extends EventDispatcher {
 				});
 			}
 		}
-
 		function onSessionEnd() {
 			session.removeEventListener('select', onSessionEvent);
 			session.removeEventListener('selectstart', onSessionEvent);
@@ -18912,23 +16737,25 @@ class WebXRManager extends EventDispatcher {
 			session.removeEventListener('squeezeend', onSessionEvent);
 			session.removeEventListener('end', onSessionEnd);
 			session.removeEventListener('inputsourceschange', onInputSourcesChange);
-
 			for (let i = 0; i < controllers.length; i++) {
 				const inputSource = controllerInputSources[i];
 				if (inputSource === null) continue;
 				controllerInputSources[i] = null;
 				controllers[i].disconnect(inputSource);
 			}
-
 			_currentDepthNear = null;
-			_currentDepthFar = null; // restore framebuffer/rendering state
+			_currentDepthFar = null;
+
+			// restore framebuffer/rendering state
 
 			renderer.setRenderTarget(initialRenderTarget);
 			glBaseLayer = null;
 			glProjLayer = null;
 			glBinding = null;
 			session = null;
-			newRenderTarget = null; //
+			newRenderTarget = null;
+
+			//
 
 			animation.stop();
 			scope.isPresenting = false;
@@ -18936,50 +16763,38 @@ class WebXRManager extends EventDispatcher {
 				type: 'sessionend'
 			});
 		}
-
 		this.setFramebufferScaleFactor = function (value) {
 			framebufferScaleFactor = value;
-
 			if (scope.isPresenting === true) {
 				console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
 			}
 		};
-
 		this.setReferenceSpaceType = function (value) {
 			referenceSpaceType = value;
-
 			if (scope.isPresenting === true) {
 				console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
 			}
 		};
-
 		this.getReferenceSpace = function () {
 			return customReferenceSpace || referenceSpace;
 		};
-
 		this.setReferenceSpace = function (space) {
 			customReferenceSpace = space;
 		};
-
 		this.getBaseLayer = function () {
 			return glProjLayer !== null ? glProjLayer : glBaseLayer;
 		};
-
 		this.getBinding = function () {
 			return glBinding;
 		};
-
 		this.getFrame = function () {
 			return xrFrame;
 		};
-
 		this.getSession = function () {
 			return session;
 		};
-
 		this.setSession = async function (value) {
 			session = value;
-
 			if (session !== null) {
 				initialRenderTarget = renderer.getRenderTarget();
 				session.addEventListener('select', onSessionEvent);
@@ -18990,11 +16805,9 @@ class WebXRManager extends EventDispatcher {
 				session.addEventListener('squeezeend', onSessionEvent);
 				session.addEventListener('end', onSessionEnd);
 				session.addEventListener('inputsourceschange', onInputSourcesChange);
-
 				if (attributes.xrCompatible !== true) {
 					await gl.makeXRCompatible();
 				}
-
 				if (session.renderState.layers === undefined || renderer.capabilities.isWebGL2 === false) {
 					const layerInit = {
 						antialias: session.renderState.layers === undefined ? attributes.antialias : true,
@@ -19017,13 +16830,11 @@ class WebXRManager extends EventDispatcher {
 					let depthFormat = null;
 					let depthType = null;
 					let glDepthFormat = null;
-
 					if (attributes.depth) {
 						glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
 						depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
 						depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
 					}
-
 					const projectionlayerInit = {
 						colorFormat: gl.RGBA8,
 						depthFormat: glDepthFormat,
@@ -19045,10 +16856,9 @@ class WebXRManager extends EventDispatcher {
 					const renderTargetProperties = renderer.properties.get(newRenderTarget);
 					renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
 				}
-
 				newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
-				// Set foveation to maximum.
 
+				// Set foveation to maximum.
 				this.setFoveation(1.0);
 				customReferenceSpace = null;
 				referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
@@ -19060,26 +16870,20 @@ class WebXRManager extends EventDispatcher {
 				});
 			}
 		};
-
 		this.addLayer = function (layer) {
 			if (!window.XRWebGLBinding || !this.layersEnabled || !session) {
 				return;
 			}
-
 			layers.push(layer);
 			this.updateLayers();
 		};
-
 		this.removeLayer = function (layer) {
 			layers.splice(layers.indexOf(layer), 1);
-
 			if (!window.XRWebGLBinding || !this.layersEnabled || !session) {
 				return;
 			}
-
 			this.updateLayers();
 		};
-
 		this.updateLayers = function () {
 			var layersCopy = layers.map(function (x) {
 				return x;
@@ -19089,26 +16893,26 @@ class WebXRManager extends EventDispatcher {
 				layers: layersCopy
 			});
 		};
-
 		function onInputSourcesChange(event) {
 			// Notify disconnected
+
 			for (let i = 0; i < event.removed.length; i++) {
 				const inputSource = event.removed[i];
 				const index = controllerInputSources.indexOf(inputSource);
-
 				if (index >= 0) {
 					controllerInputSources[index] = null;
 					controllers[index].disconnect(inputSource);
 				}
-			} // Notify connected
+			}
 
+			// Notify connected
 
 			for (let i = 0; i < event.added.length; i++) {
 				const inputSource = event.added[i];
 				let controllerIndex = controllerInputSources.indexOf(inputSource);
-
 				if (controllerIndex === -1) {
 					// Assign input source a controller that currently has no input source
+
 					for (let i = 0; i < controllers.length; i++) {
 						if (i >= controllerInputSources.length) {
 							controllerInputSources.push(inputSource);
@@ -19119,39 +16923,40 @@ class WebXRManager extends EventDispatcher {
 							controllerIndex = i;
 							break;
 						}
-					} // If all controllers do currently receive input we ignore new ones
+					}
 
+					// If all controllers do currently receive input we ignore new ones
 
 					if (controllerIndex === -1) break;
 				}
-
 				const controller = controllers[controllerIndex];
-
 				if (controller) {
 					controller.connect(inputSource);
 				}
 			}
-		} //
+		}
 
+		//
 
 		const cameraLPos = new Vector3();
 		const cameraRPos = new Vector3();
+
 		/**
 		 * Assumes 2 cameras that are parallel and share an X-axis, and that
 		 * the cameras' projection and world matrices have already been set.
 		 * And that near and far planes are identical for both cameras.
 		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
 		 */
-
 		function setProjectionFromUnion(camera, cameraL, cameraR) {
 			cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
 			cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
 			const ipd = cameraLPos.distanceTo(cameraRPos);
 			const projL = cameraL.projectionMatrix.elements;
-			const projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and
+			const projR = cameraR.projectionMatrix.elements;
+
+			// VR systems will have identical far and near planes, and
 			// most likely identical top and bottom frustum extents.
 			// Use the left camera for these values.
-
 			const near = projL[14] / (projL[10] - 1);
 			const far = projL[14] / (projL[10] + 1);
 			const topFov = (projL[9] + 1) / projL[5];
@@ -19159,20 +16964,23 @@ class WebXRManager extends EventDispatcher {
 			const leftFov = (projL[8] - 1) / projL[0];
 			const rightFov = (projR[8] + 1) / projR[0];
 			const left = near * leftFov;
-			const right = near * rightFov; // Calculate the new camera's position offset from the
-			// left camera. xOffset should be roughly half `ipd`.
+			const right = near * rightFov;
 
+			// Calculate the new camera's position offset from the
+			// left camera. xOffset should be roughly half `ipd`.
 			const zOffset = ipd / (-leftFov + rightFov);
-			const xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?
+			const xOffset = zOffset * -leftFov;
 
+			// TODO: Better way to apply this offset?
 			cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
 			camera.translateX(xOffset);
 			camera.translateZ(zOffset);
 			camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
-			camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale
+			camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
+
+			// Find the union of the frustum values of the cameras and scale
 			// the values so that the near plane's position does not change in world space,
 			// although must now be relative to the new union camera.
-
 			const near2 = near + zOffset;
 			const far2 = far + zOffset;
 			const left2 = left - xOffset;
@@ -19181,28 +16989,24 @@ class WebXRManager extends EventDispatcher {
 			const bottom2 = bottomFov * far / far2 * near2;
 			camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
 		}
-
 		function updateCamera(camera, parent) {
 			if (parent === null) {
 				camera.matrixWorld.copy(camera.matrix);
 			} else {
 				camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
 			}
-
 			camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
 		}
-
 		this.setPoseTarget = function (object) {
 			if (object !== undefined) poseTarget = object;
 		};
-
 		this.updateCamera = function (camera) {
 			if (session === null) return;
 			cameraVR.near = cameraR.near = cameraL.near = camera.near;
 			cameraVR.far = cameraR.far = cameraL.far = camera.far;
-
 			if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
 				// Note that the new renderState won't apply until the next frame. See #18320
+
 				session.updateRenderState({
 					depthNear: cameraVR.near,
 					depthFar: cameraVR.far
@@ -19210,158 +17014,139 @@ class WebXRManager extends EventDispatcher {
 				_currentDepthNear = cameraVR.near;
 				_currentDepthFar = cameraVR.far;
 			}
-
 			const cameras = cameraVR.cameras;
 			var object = poseTarget || camera;
 			const parent = object.parent;
 			updateCamera(cameraVR, parent);
-
 			for (let i = 0; i < cameras.length; i++) {
 				updateCamera(cameras[i], parent);
 			}
+			cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale);
 
-			cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale); // update user camera and its children
-
+			// update user camera and its children
 			object.matrixWorld.copy(cameraVR.matrixWorld);
 			object.matrix.copy(cameraVR.matrix);
 			object.matrix.decompose(object.position, object.quaternion, object.scale);
 			const children = object.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				children[i].updateMatrixWorld(true);
-			} // update projection matrix for proper view frustum culling
+			}
 
+			// update projection matrix for proper view frustum culling
 
 			if (cameras.length === 2) {
 				setProjectionFromUnion(cameraVR, cameraL, cameraR);
 			} else {
 				// assume single camera setup (AR)
+
 				cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
 			}
 		};
-
 		this.getCamera = function () {
 			return cameraVR;
 		};
-
 		this.getFoveation = function () {
 			if (glProjLayer !== null) {
 				return glProjLayer.fixedFoveation;
 			}
-
 			if (glBaseLayer !== null) {
 				return glBaseLayer.fixedFoveation;
 			}
-
 			return undefined;
 		};
-
 		this.setFoveation = function (foveation) {
 			// 0 = no foveation = full resolution
 			// 1 = maximum foveation = the edges render at lower resolution
+
 			if (glProjLayer !== null) {
 				glProjLayer.fixedFoveation = foveation;
 			}
-
 			if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {
 				glBaseLayer.fixedFoveation = foveation;
 			}
 		};
-
 		this.getPlanes = function () {
 			return planes;
-		}; // Animation Loop
+		};
 
+		// Animation Loop
 
 		let onAnimationFrameCallback = null;
-
 		function onAnimationFrame(time, frame) {
 			pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
 			xrFrame = frame;
-
 			if (pose !== null) {
 				const views = pose.views;
-
 				if (glBaseLayer !== null) {
 					renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
 					renderer.setRenderTarget(newRenderTarget);
 				}
+				let cameraVRNeedsUpdate = false;
 
-				let cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list
+				// check if it's necessary to rebuild cameraVR's camera list
 
 				if (views.length !== cameraVR.cameras.length) {
 					cameraVR.cameras.length = 0;
 					cameraVRNeedsUpdate = true;
 				}
-
 				for (let i = 0; i < views.length; i++) {
 					const view = views[i];
 					let viewport = null;
-
 					if (glBaseLayer !== null) {
 						viewport = glBaseLayer.getViewport(view);
 					} else {
 						const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
-						viewport = glSubImage.viewport; // For side-by-side projection, we only produce a single texture for both eyes.
+						viewport = glSubImage.viewport;
 
+						// For side-by-side projection, we only produce a single texture for both eyes.
 						if (i === 0) {
 							renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);
 							renderer.setRenderTarget(newRenderTarget);
 						}
 					}
-
 					let camera = cameras[i];
-
 					if (camera === undefined) {
 						camera = new PerspectiveCamera();
 						camera.layers.enable(i);
 						camera.viewport = new Vector4();
 						cameras[i] = camera;
 					}
-
 					camera.matrix.fromArray(view.transform.matrix);
 					camera.projectionMatrix.fromArray(view.projectionMatrix);
 					camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
-
 					if (i === 0) {
 						cameraVR.matrix.copy(camera.matrix);
 					}
-
 					if (cameraVRNeedsUpdate === true) {
 						cameraVR.cameras.push(camera);
 					}
 				}
-			} //
+			}
 
+			//
 
 			for (let i = 0; i < controllers.length; i++) {
 				const inputSource = controllerInputSources[i];
 				const controller = controllers[i];
-
 				if (inputSource !== null && controller !== undefined) {
 					controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
 				}
 			}
-
 			if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
-
 			if (frame.detectedPlanes) {
 				scope.dispatchEvent({
 					type: 'planesdetected',
 					data: frame.detectedPlanes
 				});
 				let planesToRemove = null;
-
 				for (const plane of planes) {
 					if (!frame.detectedPlanes.has(plane)) {
 						if (planesToRemove === null) {
 							planesToRemove = [];
 						}
-
 						planesToRemove.push(plane);
 					}
 				}
-
 				if (planesToRemove !== null) {
 					for (const plane of planesToRemove) {
 						planes.delete(plane);
@@ -19372,7 +17157,6 @@ class WebXRManager extends EventDispatcher {
 						});
 					}
 				}
-
 				for (const plane of frame.detectedPlanes) {
 					if (!planes.has(plane)) {
 						planes.add(plane);
@@ -19383,7 +17167,6 @@ class WebXRManager extends EventDispatcher {
 						});
 					} else {
 						const lastKnownTime = planesLastChangedTimes.get(plane);
-
 						if (plane.lastChangedTime > lastKnownTime) {
 							planesLastChangedTimes.set(plane, plane.lastChangedTime);
 							scope.dispatchEvent({
@@ -19394,26 +17177,20 @@ class WebXRManager extends EventDispatcher {
 					}
 				}
 			}
-
 			xrFrame = null;
 		}
-
 		const animation = new WebGLAnimation();
 		animation.setAnimationLoop(onAnimationFrame);
-
 		this.setAnimationLoop = function (callback) {
 			onAnimationFrameCallback = callback;
 		};
-
 		this.dispose = function () {};
 	}
-
 }
 
 function WebGLMaterials(renderer, properties) {
 	function refreshFogUniforms(uniforms, fog) {
 		fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));
-
 		if (fog.isFog) {
 			uniforms.fogNear.value = fog.near;
 			uniforms.fogFar.value = fog.far;
@@ -19421,7 +17198,6 @@ function WebGLMaterials(renderer, properties) {
 			uniforms.fogDensity.value = fog.density;
 		}
 	}
-
 	function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
 		if (material.isMeshBasicMaterial) {
 			refreshUniformsCommon(uniforms, material);
@@ -19436,7 +17212,6 @@ function WebGLMaterials(renderer, properties) {
 		} else if (material.isMeshStandardMaterial) {
 			refreshUniformsCommon(uniforms, material);
 			refreshUniformsStandard(uniforms, material);
-
 			if (material.isMeshPhysicalMaterial) {
 				refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
 			}
@@ -19452,7 +17227,6 @@ function WebGLMaterials(renderer, properties) {
 			refreshUniformsCommon(uniforms, material);
 		} else if (material.isLineBasicMaterial) {
 			refreshUniformsLine(uniforms, material);
-
 			if (material.isLineDashedMaterial) {
 				refreshUniformsDash(uniforms, material);
 			}
@@ -19470,55 +17244,43 @@ function WebGLMaterials(renderer, properties) {
 
 	function refreshUniformsCommon(uniforms, material) {
 		uniforms.opacity.value = material.opacity;
-
 		if (material.color) {
 			uniforms.diffuse.value.copy(material.color);
 		}
-
 		if (material.emissive) {
 			uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
 		}
-
 		if (material.map) {
 			uniforms.map.value = material.map;
 		}
-
 		if (material.alphaMap) {
 			uniforms.alphaMap.value = material.alphaMap;
 		}
-
 		if (material.bumpMap) {
 			uniforms.bumpMap.value = material.bumpMap;
 			uniforms.bumpScale.value = material.bumpScale;
 			if (material.side === BackSide) uniforms.bumpScale.value *= -1;
 		}
-
 		if (material.displacementMap) {
 			uniforms.displacementMap.value = material.displacementMap;
 			uniforms.displacementScale.value = material.displacementScale;
 			uniforms.displacementBias.value = material.displacementBias;
 		}
-
 		if (material.emissiveMap) {
 			uniforms.emissiveMap.value = material.emissiveMap;
 		}
-
 		if (material.normalMap) {
 			uniforms.normalMap.value = material.normalMap;
 			uniforms.normalScale.value.copy(material.normalScale);
 			if (material.side === BackSide) uniforms.normalScale.value.negate();
 		}
-
 		if (material.specularMap) {
 			uniforms.specularMap.value = material.specularMap;
 		}
-
 		if (material.alphaTest > 0) {
 			uniforms.alphaTest.value = material.alphaTest;
 		}
-
 		const envMap = properties.get(material).envMap;
-
 		if (envMap) {
 			uniforms.envMap.value = envMap;
 			uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
@@ -19526,18 +17288,19 @@ function WebGLMaterials(renderer, properties) {
 			uniforms.ior.value = material.ior;
 			uniforms.refractionRatio.value = material.refractionRatio;
 		}
-
 		if (material.lightMap) {
-			uniforms.lightMap.value = material.lightMap; // artist-friendly light intensity scaling factor
+			uniforms.lightMap.value = material.lightMap;
 
+			// artist-friendly light intensity scaling factor
 			const scaleFactor = renderer.physicallyCorrectLights !== true ? Math.PI : 1;
 			uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
 		}
-
 		if (material.aoMap) {
 			uniforms.aoMap.value = material.aoMap;
 			uniforms.aoMapIntensity.value = material.aoMapIntensity;
-		} // uv repeat and offset setting priorities
+		}
+
+		// uv repeat and offset setting priorities
 		// 1. color map
 		// 2. specular map
 		// 3. displacementMap map
@@ -19557,9 +17320,7 @@ function WebGLMaterials(renderer, properties) {
 		// 17. transmission map
 		// 18. thickness map
 
-
 		let uvScaleMap;
-
 		if (material.map) {
 			uvScaleMap = material.map;
 		} else if (material.specularMap) {
@@ -19601,131 +17362,110 @@ function WebGLMaterials(renderer, properties) {
 		} else if (material.sheenRoughnessMap) {
 			uvScaleMap = material.sheenRoughnessMap;
 		}
-
 		if (uvScaleMap !== undefined) {
 			// backwards compatibility
 			if (uvScaleMap.isWebGLRenderTarget) {
 				uvScaleMap = uvScaleMap.texture;
 			}
-
 			if (uvScaleMap.matrixAutoUpdate === true) {
 				uvScaleMap.updateMatrix();
 			}
-
 			uniforms.uvTransform.value.copy(uvScaleMap.matrix);
-		} // uv repeat and offset setting priorities for uv2
+		}
+
+		// uv repeat and offset setting priorities for uv2
 		// 1. ao map
 		// 2. light map
 
-
 		let uv2ScaleMap;
-
 		if (material.aoMap) {
 			uv2ScaleMap = material.aoMap;
 		} else if (material.lightMap) {
 			uv2ScaleMap = material.lightMap;
 		}
-
 		if (uv2ScaleMap !== undefined) {
 			// backwards compatibility
 			if (uv2ScaleMap.isWebGLRenderTarget) {
 				uv2ScaleMap = uv2ScaleMap.texture;
 			}
-
 			if (uv2ScaleMap.matrixAutoUpdate === true) {
 				uv2ScaleMap.updateMatrix();
 			}
-
 			uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
 		}
 	}
-
 	function refreshUniformsLine(uniforms, material) {
 		uniforms.diffuse.value.copy(material.color);
 		uniforms.opacity.value = material.opacity;
 	}
-
 	function refreshUniformsDash(uniforms, material) {
 		uniforms.dashSize.value = material.dashSize;
 		uniforms.totalSize.value = material.dashSize + material.gapSize;
 		uniforms.scale.value = material.scale;
 	}
-
 	function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
 		uniforms.diffuse.value.copy(material.color);
 		uniforms.opacity.value = material.opacity;
 		uniforms.size.value = material.size * pixelRatio;
 		uniforms.scale.value = height * 0.5;
-
 		if (material.map) {
 			uniforms.map.value = material.map;
 		}
-
 		if (material.alphaMap) {
 			uniforms.alphaMap.value = material.alphaMap;
 		}
-
 		if (material.alphaTest > 0) {
 			uniforms.alphaTest.value = material.alphaTest;
-		} // uv repeat and offset setting priorities
+		}
+
+		// uv repeat and offset setting priorities
 		// 1. color map
 		// 2. alpha map
 
-
 		let uvScaleMap;
-
 		if (material.map) {
 			uvScaleMap = material.map;
 		} else if (material.alphaMap) {
 			uvScaleMap = material.alphaMap;
 		}
-
 		if (uvScaleMap !== undefined) {
 			if (uvScaleMap.matrixAutoUpdate === true) {
 				uvScaleMap.updateMatrix();
 			}
-
 			uniforms.uvTransform.value.copy(uvScaleMap.matrix);
 		}
 	}
-
 	function refreshUniformsSprites(uniforms, material) {
 		uniforms.diffuse.value.copy(material.color);
 		uniforms.opacity.value = material.opacity;
 		uniforms.rotation.value = material.rotation;
-
 		if (material.map) {
 			uniforms.map.value = material.map;
 		}
-
 		if (material.alphaMap) {
 			uniforms.alphaMap.value = material.alphaMap;
 		}
-
 		if (material.alphaTest > 0) {
 			uniforms.alphaTest.value = material.alphaTest;
-		} // uv repeat and offset setting priorities
+		}
+
+		// uv repeat and offset setting priorities
 		// 1. color map
 		// 2. alpha map
 
-
 		let uvScaleMap;
-
 		if (material.map) {
 			uvScaleMap = material.map;
 		} else if (material.alphaMap) {
 			uvScaleMap = material.alphaMap;
 		}
-
 		if (uvScaleMap !== undefined) {
 			if (uvScaleMap.matrixAutoUpdate === true) {
 				uvScaleMap.updateMatrix();
 			}
-
 			uniforms.uvTransform.value.copy(uvScaleMap.matrix);
 		}
 	}
-
 	function refreshUniformsPhong(uniforms, material) {
 		uniforms.specular.value.copy(material.specular);
 		uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )
@@ -19736,123 +17476,96 @@ function WebGLMaterials(renderer, properties) {
 			uniforms.gradientMap.value = material.gradientMap;
 		}
 	}
-
 	function refreshUniformsStandard(uniforms, material) {
 		uniforms.roughness.value = material.roughness;
 		uniforms.metalness.value = material.metalness;
-
 		if (material.roughnessMap) {
 			uniforms.roughnessMap.value = material.roughnessMap;
 		}
-
 		if (material.metalnessMap) {
 			uniforms.metalnessMap.value = material.metalnessMap;
 		}
-
 		const envMap = properties.get(material).envMap;
-
 		if (envMap) {
 			//uniforms.envMap.value = material.envMap; // part of uniforms common
 			uniforms.envMapIntensity.value = material.envMapIntensity;
 		}
 	}
-
 	function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
 		uniforms.ior.value = material.ior; // also part of uniforms common
 
 		if (material.sheen > 0) {
 			uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
 			uniforms.sheenRoughness.value = material.sheenRoughness;
-
 			if (material.sheenColorMap) {
 				uniforms.sheenColorMap.value = material.sheenColorMap;
 			}
-
 			if (material.sheenRoughnessMap) {
 				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
 			}
 		}
-
 		if (material.clearcoat > 0) {
 			uniforms.clearcoat.value = material.clearcoat;
 			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
-
 			if (material.clearcoatMap) {
 				uniforms.clearcoatMap.value = material.clearcoatMap;
 			}
-
 			if (material.clearcoatRoughnessMap) {
 				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
 			}
-
 			if (material.clearcoatNormalMap) {
 				uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
 				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
-
 				if (material.side === BackSide) {
 					uniforms.clearcoatNormalScale.value.negate();
 				}
 			}
 		}
-
 		if (material.iridescence > 0) {
 			uniforms.iridescence.value = material.iridescence;
 			uniforms.iridescenceIOR.value = material.iridescenceIOR;
 			uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
 			uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
-
 			if (material.iridescenceMap) {
 				uniforms.iridescenceMap.value = material.iridescenceMap;
 			}
-
 			if (material.iridescenceThicknessMap) {
 				uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
 			}
 		}
-
 		if (material.transmission > 0) {
 			uniforms.transmission.value = material.transmission;
 			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
 			uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
-
 			if (material.transmissionMap) {
 				uniforms.transmissionMap.value = material.transmissionMap;
 			}
-
 			uniforms.thickness.value = material.thickness;
-
 			if (material.thicknessMap) {
 				uniforms.thicknessMap.value = material.thicknessMap;
 			}
-
 			uniforms.attenuationDistance.value = material.attenuationDistance;
 			uniforms.attenuationColor.value.copy(material.attenuationColor);
 		}
-
 		uniforms.specularIntensity.value = material.specularIntensity;
 		uniforms.specularColor.value.copy(material.specularColor);
-
 		if (material.specularIntensityMap) {
 			uniforms.specularIntensityMap.value = material.specularIntensityMap;
 		}
-
 		if (material.specularColorMap) {
 			uniforms.specularColorMap.value = material.specularColorMap;
 		}
 	}
-
 	function refreshUniformsMatcap(uniforms, material) {
 		if (material.matcap) {
 			uniforms.matcap.value = material.matcap;
 		}
 	}
-
 	function refreshUniformsDistance(uniforms, material) {
 		uniforms.referencePosition.value.copy(material.referencePosition);
 		uniforms.nearDistance.value = material.nearDistance;
 		uniforms.farDistance.value = material.farDistance;
 	}
-
 	return {
 		refreshFogUniforms: refreshFogUniforms,
 		refreshMaterialUniforms: refreshMaterialUniforms
@@ -19869,31 +17582,31 @@ function WebGLUniformsGroups(gl, info, capabilities, state) {
 		const webglProgram = program.program;
 		state.uniformBlockBinding(uniformsGroup, webglProgram);
 	}
-
 	function update(uniformsGroup, program) {
 		let buffer = buffers[uniformsGroup.id];
-
 		if (buffer === undefined) {
 			prepareUniformsGroup(uniformsGroup);
 			buffer = createBuffer(uniformsGroup);
 			buffers[uniformsGroup.id] = buffer;
 			uniformsGroup.addEventListener('dispose', onUniformsGroupsDispose);
-		} // ensure to update the binding points/block indices mapping for this program
+		}
 
+		// ensure to update the binding points/block indices mapping for this program
 
 		const webglProgram = program.program;
-		state.updateUBOMapping(uniformsGroup, webglProgram); // update UBO once per frame
+		state.updateUBOMapping(uniformsGroup, webglProgram);
 
-		const frame = info.render.frame;
+		// update UBO once per frame
 
+		const frame = info.render.frame;
 		if (updateList[uniformsGroup.id] !== frame) {
 			updateBufferData(uniformsGroup);
 			updateList[uniformsGroup.id] = frame;
 		}
 	}
-
 	function createBuffer(uniformsGroup) {
 		// the setup of an UBO is independent of a particular shader program but global
+
 		const bindingPointIndex = allocateBindingPointIndex();
 		uniformsGroup.__bindingPointIndex = bindingPointIndex;
 		const buffer = gl.createBuffer();
@@ -19905,7 +17618,6 @@ function WebGLUniformsGroups(gl, info, capabilities, state) {
 		gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
 		return buffer;
 	}
-
 	function allocateBindingPointIndex() {
 		for (let i = 0; i < maxBindingPoints; i++) {
 			if (allocatedBindingPoints.indexOf(i) === -1) {
@@ -19913,30 +17625,29 @@ function WebGLUniformsGroups(gl, info, capabilities, state) {
 				return i;
 			}
 		}
-
 		console.error('THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.');
 		return 0;
 	}
-
 	function updateBufferData(uniformsGroup) {
 		const buffer = buffers[uniformsGroup.id];
 		const uniforms = uniformsGroup.uniforms;
 		const cache = uniformsGroup.__cache;
 		gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
-
 		for (let i = 0, il = uniforms.length; i < il; i++) {
-			const uniform = uniforms[i]; // partly update the buffer if necessary
+			const uniform = uniforms[i];
+
+			// partly update the buffer if necessary
 
 			if (hasUniformChanged(uniform, i, cache) === true) {
 				const value = uniform.value;
 				const offset = uniform.__offset;
-
 				if (typeof value === 'number') {
 					uniform.__data[0] = value;
 					gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
 				} else {
 					if (uniform.value.isMatrix3) {
 						// manually converting 3x3 to 3x4
+
 						uniform.__data[0] = uniform.value.elements[0];
 						uniform.__data[1] = uniform.value.elements[1];
 						uniform.__data[2] = uniform.value.elements[2];
@@ -19952,29 +17663,26 @@ function WebGLUniformsGroups(gl, info, capabilities, state) {
 					} else {
 						value.toArray(uniform.__data);
 					}
-
 					gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
 				}
 			}
 		}
-
 		gl.bindBuffer(gl.UNIFORM_BUFFER, null);
 	}
-
 	function hasUniformChanged(uniform, index, cache) {
 		const value = uniform.value;
-
 		if (cache[index] === undefined) {
 			// cache entry does not exist so far
+
 			if (typeof value === 'number') {
 				cache[index] = value;
 			} else {
 				cache[index] = value.clone();
 			}
-
 			return true;
 		} else {
 			// compare current value with cached entry
+
 			if (typeof value === 'number') {
 				if (cache[index] !== value) {
 					cache[index] = value;
@@ -19982,88 +17690,99 @@ function WebGLUniformsGroups(gl, info, capabilities, state) {
 				}
 			} else {
 				const cachedObject = cache[index];
-
 				if (cachedObject.equals(value) === false) {
 					cachedObject.copy(value);
 					return true;
 				}
 			}
 		}
-
 		return false;
 	}
-
 	function prepareUniformsGroup(uniformsGroup) {
 		// determine total buffer size according to the STD140 layout
 		// Hint: STD140 is the only supported layout in WebGL 2
+
 		const uniforms = uniformsGroup.uniforms;
 		let offset = 0; // global buffer offset in bytes
-
 		const chunkSize = 16; // size of a chunk in bytes
-
 		let chunkOffset = 0; // offset within a single chunk in bytes
 
 		for (let i = 0, l = uniforms.length; i < l; i++) {
 			const uniform = uniforms[i];
-			const info = getUniformSize(uniform); // the following two properties will be used for partial buffer updates
+			const info = getUniformSize(uniform);
+
+			// the following two properties will be used for partial buffer updates
 
 			uniform.__data = new Float32Array(info.storage / Float32Array.BYTES_PER_ELEMENT);
-			uniform.__offset = offset; //
+			uniform.__offset = offset;
+
+			//
 
 			if (i > 0) {
 				chunkOffset = offset % chunkSize;
-				const remainingSizeInChunk = chunkSize - chunkOffset; // check for chunk overflow
+				const remainingSizeInChunk = chunkSize - chunkOffset;
+
+				// check for chunk overflow
 
 				if (chunkOffset !== 0 && remainingSizeInChunk - info.boundary < 0) {
 					// add padding and adjust offset
+
 					offset += chunkSize - chunkOffset;
 					uniform.__offset = offset;
 				}
 			}
-
 			offset += info.storage;
-		} // ensure correct final padding
+		}
 
+		// ensure correct final padding
 
 		chunkOffset = offset % chunkSize;
-		if (chunkOffset > 0) offset += chunkSize - chunkOffset; //
+		if (chunkOffset > 0) offset += chunkSize - chunkOffset;
+
+		//
 
 		uniformsGroup.__size = offset;
 		uniformsGroup.__cache = {};
 		return this;
 	}
-
 	function getUniformSize(uniform) {
 		const value = uniform.value;
 		const info = {
 			boundary: 0,
 			// bytes
 			storage: 0 // bytes
+		};
 
-		}; // determine sizes according to STD140
+		// determine sizes according to STD140
 
 		if (typeof value === 'number') {
 			// float/int
+
 			info.boundary = 4;
 			info.storage = 4;
 		} else if (value.isVector2) {
 			// vec2
+
 			info.boundary = 8;
 			info.storage = 8;
 		} else if (value.isVector3 || value.isColor) {
 			// vec3
+
 			info.boundary = 16;
 			info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes
 		} else if (value.isVector4) {
 			// vec4
+
 			info.boundary = 16;
 			info.storage = 16;
 		} else if (value.isMatrix3) {
 			// mat3 (in STD140 a 3x3 matrix is represented as 3x4)
+
 			info.boundary = 48;
 			info.storage = 48;
 		} else if (value.isMatrix4) {
 			// mat4
+
 			info.boundary = 64;
 			info.storage = 64;
 		} else if (value.isTexture) {
@@ -20071,10 +17790,8 @@ function WebGLUniformsGroups(gl, info, capabilities, state) {
 		} else {
 			console.warn('THREE.WebGLRenderer: Unsupported uniform value type.', value);
 		}
-
 		return info;
 	}
-
 	function onUniformsGroupsDispose(event) {
 		const uniformsGroup = event.target;
 		uniformsGroup.removeEventListener('dispose', onUniformsGroupsDispose);
@@ -20084,17 +17801,14 @@ function WebGLUniformsGroups(gl, info, capabilities, state) {
 		delete buffers[uniformsGroup.id];
 		delete updateList[uniformsGroup.id];
 	}
-
 	function dispose() {
 		for (const id in buffers) {
 			gl.deleteBuffer(buffers[id]);
 		}
-
 		allocatedBindingPoints = [];
 		buffers = {};
 		updateList = {};
 	}
-
 	return {
 		bind: bind,
 		update: update,
@@ -20107,106 +17821,119 @@ function createCanvasElement() {
 	canvas.style.display = 'block';
 	return canvas;
 }
-
 function WebGLRenderer(parameters = {}) {
 	this.isWebGLRenderer = true;
-
 	const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
-				_context = parameters.context !== undefined ? parameters.context : null,
-				_depth = parameters.depth !== undefined ? parameters.depth : true,
-				_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
-				_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
-				_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
-				_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
-				_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
-				_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
-
+		_context = parameters.context !== undefined ? parameters.context : null,
+		_depth = parameters.depth !== undefined ? parameters.depth : true,
+		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
+		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
+		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
+		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
+		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
+		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
 	let _alpha;
-
 	if (_context !== null) {
 		_alpha = _context.getContextAttributes().alpha;
 	} else {
 		_alpha = parameters.alpha !== undefined ? parameters.alpha : false;
 	}
-
 	let currentRenderList = null;
-	let currentRenderState = null; // render() can be called from within a callback triggered by another render.
+	let currentRenderState = null;
+
+	// render() can be called from within a callback triggered by another render.
 	// We track this so that the nested render call gets its list and state isolated from the parent render call.
 
 	const renderListStack = [];
-	const renderStateStack = []; // public properties
+	const renderStateStack = [];
 
-	this.domElement = _canvas; // Debug configuration container
+	// public properties
 
+	this.domElement = _canvas;
+
+	// Debug configuration container
 	this.debug = {
 		/**
 		 * Enables error checking and reporting when shader programs are being compiled
 		 * @type {boolean}
 		 */
 		checkShaderErrors: true
-	}; // clearing
+	};
+
+	// clearing
 
 	this.autoClear = true;
 	this.autoClearColor = true;
 	this.autoClearDepth = true;
-	this.autoClearStencil = true; // scene graph
+	this.autoClearStencil = true;
+
+	// scene graph
 
-	this.sortObjects = true; // user-defined clipping
+	this.sortObjects = true;
+
+	// user-defined clipping
 
 	this.clippingPlanes = [];
-	this.localClippingEnabled = false; // physically based shading
+	this.localClippingEnabled = false;
+
+	// physically based shading
+
+	this.outputEncoding = LinearEncoding;
+
+	// physical lights
 
-	this.outputEncoding = LinearEncoding; // physical lights
+	this.physicallyCorrectLights = false;
 
-	this.physicallyCorrectLights = false; // tone mapping
+	// tone mapping
 
 	this.toneMapping = NoToneMapping;
-	this.toneMappingExposure = 1.0; // internal properties
+	this.toneMappingExposure = 1.0;
+
+	// internal properties
 
 	const _this = this;
+	let _isContextLost = false;
 
-	let _isContextLost = false; // internal state cache
+	// internal state cache
 
 	let _currentActiveCubeFace = 0;
 	let _currentActiveMipmapLevel = 0;
 	let _currentRenderTarget = null;
-
 	let _currentMaterialId = -1;
-
 	let _currentCamera = null;
-
 	const _currentViewport = new Vector4();
-
 	const _currentScissor = new Vector4();
+	let _currentScissorTest = null;
 
-	let _currentScissorTest = null; //
+	//
 
 	let _width = _canvas.width;
 	let _height = _canvas.height;
 	let _pixelRatio = 1;
 	let _opaqueSort = null;
 	let _transparentSort = null;
-
 	const _viewport = new Vector4(0, 0, _width, _height);
-
 	const _scissor = new Vector4(0, 0, _width, _height);
+	let _scissorTest = false;
 
-	let _scissorTest = false; // frustum
+	// frustum
 
-	const _frustum = new Frustum(); // clipping
+	const _frustum = new Frustum();
 
+	// clipping
 
 	let _clippingEnabled = false;
-	let _localClippingEnabled = false; // transmission
+	let _localClippingEnabled = false;
 
-	let _transmissionRenderTarget = null; // camera matrices cache
+	// transmission
 
-	const _projScreenMatrix = new Matrix4();
+	let _transmissionRenderTarget = null;
 
-	const _vector2 = new Vector2();
+	// camera matrices cache
 
+	const _projScreenMatrix = new Matrix4();
+	const _vector2 = new Vector2();
 	const _vector3 = new Vector3();
-
 	const _emptyScene = {
 		background: null,
 		fog: null,
@@ -20214,26 +17941,21 @@ function WebGLRenderer(parameters = {}) {
 		overrideMaterial: null,
 		isScene: true
 	};
-
 	function getTargetPixelRatio() {
 		return _currentRenderTarget === null ? _pixelRatio : 1;
-	} // initialize
+	}
 
+	// initialize
 
 	let _gl = _context;
-
 	function getContext(contextNames, contextAttributes) {
 		for (let i = 0; i < contextNames.length; i++) {
 			const contextName = contextNames[i];
-
 			const context = _canvas.getContext(contextName, contextAttributes);
-
 			if (context !== null) return context;
 		}
-
 		return null;
 	}
-
 	try {
 		const contextAttributes = {
 			alpha: true,
@@ -20244,25 +17966,21 @@ function WebGLRenderer(parameters = {}) {
 			preserveDrawingBuffer: _preserveDrawingBuffer,
 			powerPreference: _powerPreference,
 			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
-		}; // OffscreenCanvas does not have setAttribute, see #22811
+		};
 
-		if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', `three.js r${REVISION}`); // event listeners must be registered before WebGL context is created, see #12753
+		// OffscreenCanvas does not have setAttribute, see #22811
+		if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', `three.js r${REVISION}`);
 
+		// event listeners must be registered before WebGL context is created, see #12753
 		_canvas.addEventListener('webglcontextlost', onContextLost, false);
-
 		_canvas.addEventListener('webglcontextrestored', onContextRestore, false);
-
 		_canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
-
 		if (_gl === null) {
 			const contextNames = ['webgl2', 'webgl', 'experimental-webgl'];
-
 			if (_this.isWebGL1Renderer === true) {
 				contextNames.shift();
 			}
-
 			_gl = getContext(contextNames, contextAttributes);
-
 			if (_gl === null) {
 				if (getContext(contextNames)) {
 					throw new Error('Error creating WebGL context with your selected attributes.');
@@ -20270,8 +17988,9 @@ function WebGLRenderer(parameters = {}) {
 					throw new Error('Error creating WebGL context.');
 				}
 			}
-		} // Some experimental-webgl implementations do not have getShaderPrecisionFormat
+		}
 
+		// Some experimental-webgl implementations do not have getShaderPrecisionFormat
 
 		if (_gl.getShaderPrecisionFormat === undefined) {
 			_gl.getShaderPrecisionFormat = function () {
@@ -20286,13 +18005,11 @@ function WebGLRenderer(parameters = {}) {
 		console.error('THREE.WebGLRenderer: ' + error.message);
 		throw error;
 	}
-
 	let extensions, capabilities, state, info;
 	let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
 	let programCache, materials, renderLists, renderStates, clipping, shadowMap;
 	let background, morphtargets, bufferRenderer, indexedBufferRenderer;
 	let utils, bindingStates, uniformsGroups;
-
 	function initGLContext() {
 		extensions = new WebGLExtensions(_gl);
 		capabilities = new WebGLCapabilities(_gl, extensions, parameters);
@@ -20328,66 +18045,55 @@ function WebGLRenderer(parameters = {}) {
 		_this.state = state;
 		_this.info = info;
 	}
-
 	initGLContext();
 	const xr = typeof navigator !== 'undefined' && 'xr' in navigator ? new WebXRManager(_this, _gl) : new WebVRManager(_this);
-	this.xr = xr; // API
+	this.xr = xr;
+
+	// API
 
 	this.getContext = function () {
 		return _gl;
 	};
-
 	this.getContextAttributes = function () {
 		return _gl.getContextAttributes();
 	};
-
 	this.forceContextLoss = function () {
 		const extension = extensions.get('WEBGL_lose_context');
 		if (extension) extension.loseContext();
 	};
-
 	this.forceContextRestore = function () {
 		const extension = extensions.get('WEBGL_lose_context');
 		if (extension) extension.restoreContext();
 	};
-
 	this.getPixelRatio = function () {
 		return _pixelRatio;
 	};
-
 	this.setPixelRatio = function (value) {
 		if (value === undefined) return;
 		_pixelRatio = value;
 		this.setSize(_width, _height, false);
 	};
-
 	this.getSize = function (target) {
 		return target.set(_width, _height);
 	};
-
 	this.setSize = function (width, height, updateStyle) {
 		if (xr.isPresenting) {
 			console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
 			return;
 		}
-
 		_width = width;
 		_height = height;
 		_canvas.width = Math.floor(width * _pixelRatio);
 		_canvas.height = Math.floor(height * _pixelRatio);
-
 		if (updateStyle !== false) {
 			_canvas.style.width = width + 'px';
 			_canvas.style.height = height + 'px';
 		}
-
 		this.setViewport(0, 0, width, height);
 	};
-
 	this.getDrawingBufferSize = function (target) {
 		return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
 	};
-
 	this.setDrawingBufferSize = function (width, height, pixelRatio) {
 		_width = width;
 		_height = height;
@@ -20396,101 +18102,81 @@ function WebGLRenderer(parameters = {}) {
 		_canvas.height = Math.floor(height * pixelRatio);
 		this.setViewport(0, 0, width, height);
 	};
-
 	this.getCurrentViewport = function (target) {
 		return target.copy(_currentViewport);
 	};
-
 	this.getViewport = function (target) {
 		return target.copy(_viewport);
 	};
-
 	this.setViewport = function (x, y, width, height) {
 		if (x.isVector4) {
 			_viewport.set(x.x, x.y, x.z, x.w);
 		} else {
 			_viewport.set(x, y, width, height);
 		}
-
 		state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
 	};
-
 	this.getScissor = function (target) {
 		return target.copy(_scissor);
 	};
-
 	this.setScissor = function (x, y, width, height) {
 		if (x.isVector4) {
 			_scissor.set(x.x, x.y, x.z, x.w);
 		} else {
 			_scissor.set(x, y, width, height);
 		}
-
 		state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
 	};
-
 	this.getScissorTest = function () {
 		return _scissorTest;
 	};
-
 	this.setScissorTest = function (boolean) {
 		state.setScissorTest(_scissorTest = boolean);
 	};
-
 	this.setOpaqueSort = function (method) {
 		_opaqueSort = method;
 	};
-
 	this.setTransparentSort = function (method) {
 		_transparentSort = method;
-	}; // Clearing
+	};
 
+	// Clearing
 
 	this.getClearColor = function (target) {
 		return target.copy(background.getClearColor());
 	};
-
 	this.setClearColor = function () {
 		background.setClearColor.apply(background, arguments);
 	};
-
 	this.getClearAlpha = function () {
 		return background.getClearAlpha();
 	};
-
 	this.setClearAlpha = function () {
 		background.setClearAlpha.apply(background, arguments);
 	};
-
 	this.clear = function (color = true, depth = true, stencil = true) {
 		let bits = 0;
 		if (color) bits |= _gl.COLOR_BUFFER_BIT;
 		if (depth) bits |= _gl.DEPTH_BUFFER_BIT;
 		if (stencil) bits |= _gl.STENCIL_BUFFER_BIT;
-
 		_gl.clear(bits);
 	};
-
 	this.clearColor = function () {
 		this.clear(true, false, false);
 	};
-
 	this.clearDepth = function () {
 		this.clear(false, true, false);
 	};
-
 	this.clearStencil = function () {
 		this.clear(false, false, true);
-	}; //
+	};
 
+	//
 
 	this.dispose = function () {
 		_canvas.removeEventListener('webglcontextlost', onContextLost, false);
-
 		_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);
-
 		_canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
-
 		renderLists.dispose();
 		renderStates.dispose();
 		properties.dispose();
@@ -20503,25 +18189,21 @@ function WebGLRenderer(parameters = {}) {
 		xr.dispose();
 		xr.removeEventListener('sessionstart', onXRSessionStart);
 		xr.removeEventListener('sessionend', onXRSessionEnd);
-
 		if (_transmissionRenderTarget) {
 			_transmissionRenderTarget.dispose();
-
 			_transmissionRenderTarget = null;
 		}
-
 		animation.stop();
-	}; // Events
+	};
 
+	// Events
 
 	function onContextLost(event) {
 		event.preventDefault();
 		console.log('THREE.WebGLRenderer: Context Lost.');
 		_isContextLost = true;
 	}
-
-	function
-		/* event */
+	function /* event */
 	onContextRestore() {
 		console.log('THREE.WebGLRenderer: Context Restored.');
 		_isContextLost = false;
@@ -20537,64 +18219,61 @@ function WebGLRenderer(parameters = {}) {
 		shadowMap.needsUpdate = shadowMapNeedsUpdate;
 		shadowMap.type = shadowMapType;
 	}
-
 	function onContextCreationError(event) {
 		console.error('THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage);
 	}
-
 	function onMaterialDispose(event) {
 		const material = event.target;
 		material.removeEventListener('dispose', onMaterialDispose);
 		deallocateMaterial(material);
-	} // Buffer deallocation
+	}
 
+	// Buffer deallocation
 
 	function deallocateMaterial(material) {
 		releaseMaterialProgramReferences(material);
 		properties.remove(material);
 	}
-
 	function releaseMaterialProgramReferences(material) {
 		const programs = properties.get(material).programs;
-
 		if (programs !== undefined) {
 			programs.forEach(function (program) {
 				programCache.releaseProgram(program);
 			});
-
 			if (material.isShaderMaterial) {
 				programCache.releaseShaderCache(material);
 			}
 		}
-	} // Buffer rendering
+	}
 
+	// Buffer rendering
 
 	this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {
 		if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
 
 		const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
 		const program = setProgram(camera, scene, geometry, material, object);
-		state.setMaterial(material, frontFaceCW); //
+		state.setMaterial(material, frontFaceCW);
+
+		//
 
 		let index = geometry.index;
 		let rangeFactor = 1;
-
 		if (material.wireframe === true) {
 			index = geometries.getWireframeAttribute(geometry);
 			rangeFactor = 2;
-		} //
+		}
 
+		//
 
 		const drawRange = geometry.drawRange;
 		const position = geometry.attributes.position;
 		let drawStart = drawRange.start * rangeFactor;
 		let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
-
 		if (group !== null) {
 			drawStart = Math.max(drawStart, group.start * rangeFactor);
 			drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
 		}
-
 		if (index !== null) {
 			drawStart = Math.max(drawStart, 0);
 			drawEnd = Math.min(drawEnd, index.count);
@@ -20602,20 +18281,21 @@ function WebGLRenderer(parameters = {}) {
 			drawStart = Math.max(drawStart, 0);
 			drawEnd = Math.min(drawEnd, position.count);
 		}
-
 		const drawCount = drawEnd - drawStart;
-		if (drawCount < 0 || drawCount === Infinity) return; //
+		if (drawCount < 0 || drawCount === Infinity) return;
+
+		//
 
 		bindingStates.setup(object, material, program, geometry, index);
 		let attribute;
 		let renderer = bufferRenderer;
-
 		if (index !== null) {
 			attribute = attributes.get(index);
 			renderer = indexedBufferRenderer;
 			renderer.setIndex(attribute);
-		} //
+		}
 
+		//
 
 		if (object.isMesh) {
 			if (material.wireframe === true) {
@@ -20629,7 +18309,6 @@ function WebGLRenderer(parameters = {}) {
 			if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material
 
 			state.setLineWidth(lineWidth * getTargetPixelRatio());
-
 			if (object.isLineSegments) {
 				renderer.setMode(_gl.LINES);
 			} else if (object.isLineLoop) {
@@ -20642,7 +18321,6 @@ function WebGLRenderer(parameters = {}) {
 		} else if (object.isSprite) {
 			renderer.setMode(_gl.TRIANGLES);
 		}
-
 		if (object.isInstancedMesh) {
 			renderer.renderInstances(drawStart, drawCount, object.count);
 		} else if (geometry.isInstancedBufferGeometry) {
@@ -20652,8 +18330,9 @@ function WebGLRenderer(parameters = {}) {
 		} else {
 			renderer.render(drawStart, drawCount);
 		}
-	}; // Compile
+	};
 
+	// Compile
 
 	this.compile = function (scene, camera) {
 		function prepare(material, scene, object) {
@@ -20669,14 +18348,12 @@ function WebGLRenderer(parameters = {}) {
 				getProgram(material, scene, object);
 			}
 		}
-
 		currentRenderState = renderStates.get(scene);
 		currentRenderState.init();
 		renderStateStack.push(currentRenderState);
 		scene.traverseVisible(function (object) {
 			if (object.isLight && object.layers.test(camera.layers)) {
 				currentRenderState.pushLight(object);
-
 				if (object.castShadow) {
 					currentRenderState.pushShadow(object);
 				}
@@ -20685,7 +18362,6 @@ function WebGLRenderer(parameters = {}) {
 		currentRenderState.setupLights(_this.physicallyCorrectLights);
 		scene.traverse(function (object) {
 			const material = object.material;
-
 			if (material) {
 				if (Array.isArray(material)) {
 					for (let i = 0; i < material.length; i++) {
@@ -20699,63 +18375,59 @@ function WebGLRenderer(parameters = {}) {
 		});
 		renderStateStack.pop();
 		currentRenderState = null;
-	}; // Animation Loop
+	};
 
+	// Animation Loop
 
 	let onAnimationFrameCallback = null;
-
 	function onAnimationFrame(time) {
 		if (onAnimationFrameCallback) onAnimationFrameCallback(time);
 	}
-
 	function onXRSessionStart() {
 		animation.stop();
 	}
-
 	function onXRSessionEnd() {
 		animation.start();
 	}
-
 	const animation = new WebGLAnimation();
 	animation.setAnimationLoop(onAnimationFrame);
 	if (typeof self !== 'undefined') animation.setContext(self);
-
 	this.setAnimationLoop = function (callback) {
 		onAnimationFrameCallback = callback;
 		xr.setAnimationLoop(callback);
 		callback === null ? animation.stop() : animation.start();
 	};
-
 	xr.addEventListener('sessionstart', onXRSessionStart);
-	xr.addEventListener('sessionend', onXRSessionEnd); // Rendering
+	xr.addEventListener('sessionend', onXRSessionEnd);
+
+	// Rendering
 
 	this.render = function (scene, camera) {
 		if (camera !== undefined && camera.isCamera !== true) {
 			console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
 			return;
 		}
+		if (_isContextLost === true) return;
 
-		if (_isContextLost === true) return; // update scene graph
+		// update scene graph
 
-		if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum
+		if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();
 
-		if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
+		// update camera matrices and frustum
 
+		if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
 		if (xr.enabled === true && xr.isPresenting === true) {
 			if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
 			camera = xr.getCamera(); // use XR camera for rendering
-		} //
-
+		}
 
+		//
 		if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
 		currentRenderState = renderStates.get(scene, renderStateStack.length);
 		currentRenderState.init();
 		renderStateStack.push(currentRenderState);
-
 		_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
-
 		_frustum.setFromProjectionMatrix(_projScreenMatrix);
-
 		_localClippingEnabled = this.localClippingEnabled;
 		_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
 		currentRenderList = renderLists.get(scene, renderListStack.length);
@@ -20763,74 +18435,77 @@ function WebGLRenderer(parameters = {}) {
 		renderListStack.push(currentRenderList);
 		projectObject(scene, camera, 0, _this.sortObjects);
 		currentRenderList.finish();
-
 		if (_this.sortObjects === true) {
 			currentRenderList.sort(_opaqueSort, _transparentSort);
-		} //
+		}
 
+		//
 
 		if (_clippingEnabled === true) clipping.beginShadows();
 		const shadowsArray = currentRenderState.state.shadowsArray;
 		shadowMap.render(shadowsArray, scene, camera);
-		if (_clippingEnabled === true) clipping.endShadows(); //
+		if (_clippingEnabled === true) clipping.endShadows();
 
-		if (this.info.autoReset === true) this.info.reset(); //
+		//
 
-		background.render(currentRenderList, scene); // render scene
+		if (this.info.autoReset === true) this.info.reset();
 
-		currentRenderState.setupLights(_this.physicallyCorrectLights);
+		//
 
+		background.render(currentRenderList, scene);
+
+		// render scene
+
+		currentRenderState.setupLights(_this.physicallyCorrectLights);
 		if (camera.isArrayCamera) {
 			const cameras = camera.cameras;
-
 			for (let i = 0, l = cameras.length; i < l; i++) {
 				const camera2 = cameras[i];
 				renderScene(currentRenderList, scene, camera2, camera2.viewport);
 			}
 		} else {
 			renderScene(currentRenderList, scene, camera);
-		} //
+		}
 
+		//
 
 		if (_currentRenderTarget !== null) {
 			// resolve multisample renderbuffers to a single-sample texture if necessary
-			textures.updateMultisampleRenderTarget(_currentRenderTarget); // Generate mipmap if we're using any kind of mipmap filtering
+
+			textures.updateMultisampleRenderTarget(_currentRenderTarget);
+
+			// Generate mipmap if we're using any kind of mipmap filtering
 
 			textures.updateRenderTargetMipmap(_currentRenderTarget);
-		} //
+		}
 
+		//
 
 		if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
-
 		if (xr.enabled && xr.submitFrame) {
 			xr.submitFrame();
-		} // _gl.finish();
-
+		}
+		// _gl.finish();
 
 		bindingStates.resetDefaultState();
 		_currentMaterialId = -1;
 		_currentCamera = null;
 		renderStateStack.pop();
-
 		if (renderStateStack.length > 0) {
 			currentRenderState = renderStateStack[renderStateStack.length - 1];
 		} else {
 			currentRenderState = null;
 		}
-
 		renderListStack.pop();
-
 		if (renderListStack.length > 0) {
 			currentRenderList = renderListStack[renderListStack.length - 1];
 		} else {
 			currentRenderList = null;
 		}
 	};
-
 	function projectObject(object, camera, groupOrder, sortObjects) {
 		if (object.visible === false) return;
 		const visible = object.layers.test(camera.layers);
-
 		if (visible) {
 			if (object.isGroup) {
 				groupOrder = object.renderOrder;
@@ -20838,7 +18513,6 @@ function WebGLRenderer(parameters = {}) {
 				if (object.autoUpdate === true) object.update(camera);
 			} else if (object.isLight) {
 				currentRenderState.pushLight(object);
-
 				if (object.castShadow) {
 					currentRenderState.pushShadow(object);
 				}
@@ -20847,10 +18521,8 @@ function WebGLRenderer(parameters = {}) {
 					if (sortObjects) {
 						_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
 					}
-
 					const geometry = objects.update(object);
 					const material = object.material;
-
 					if (material.visible) {
 						currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
 					}
@@ -20858,27 +18530,23 @@ function WebGLRenderer(parameters = {}) {
 			} else if (object.isMesh || object.isLine || object.isPoints) {
 				if (object.isSkinnedMesh) {
 					// update skeleton only once in a frame
+
 					if (object.skeleton.frame !== info.render.frame) {
 						object.skeleton.update();
 						object.skeleton.frame = info.render.frame;
 					}
 				}
-
 				if (!object.frustumCulled || _frustum.intersectsObject(object)) {
 					if (sortObjects) {
 						_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
 					}
-
 					const geometry = objects.update(object);
 					const material = object.material;
-
 					if (Array.isArray(material)) {
 						const groups = geometry.groups;
-
 						for (let i = 0, l = groups.length; i < l; i++) {
 							const group = groups[i];
 							const groupMaterial = material[group.materialIndex];
-
 							if (groupMaterial && groupMaterial.visible) {
 								currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
 							}
@@ -20889,14 +18557,11 @@ function WebGLRenderer(parameters = {}) {
 				}
 			}
 		}
-
 		const children = object.children;
-
 		for (let i = 0, l = children.length; i < l; i++) {
 			projectObject(children[i], camera, groupOrder, sortObjects);
 		}
 	}
-
 	function renderScene(currentRenderList, scene, camera, viewport) {
 		const opaqueObjects = currentRenderList.opaque;
 		const transmissiveObjects = currentRenderList.transmissive;
@@ -20906,17 +18571,17 @@ function WebGLRenderer(parameters = {}) {
 		if (viewport) state.viewport(_currentViewport.copy(viewport));
 		if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
 		if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
-		if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render
+		if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
+
+		// Ensure depth buffer writing is enabled so it can be cleared on next render
 
 		state.buffers.depth.setTest(true);
 		state.buffers.depth.setMask(true);
 		state.buffers.color.setMask(true);
 		state.setPolygonOffset(false);
 	}
-
 	function renderTransmissionPass(opaqueObjects, scene, camera) {
 		const isWebGL2 = capabilities.isWebGL2;
-
 		if (_transmissionRenderTarget === null) {
 			_transmissionRenderTarget = new WebGLRenderTarget(1, 1, {
 				generateMipmaps: true,
@@ -20925,75 +18590,60 @@ function WebGLRenderer(parameters = {}) {
 				samples: isWebGL2 && _antialias === true ? 4 : 0
 			});
 		}
-
 		_this.getDrawingBufferSize(_vector2);
-
 		if (isWebGL2) {
 			_transmissionRenderTarget.setSize(_vector2.x, _vector2.y);
 		} else {
 			_transmissionRenderTarget.setSize(floorPowerOfTwo(_vector2.x), floorPowerOfTwo(_vector2.y));
-		} //
+		}
 
+		//
 
 		const currentRenderTarget = _this.getRenderTarget();
-
 		_this.setRenderTarget(_transmissionRenderTarget);
+		_this.clear();
 
-		_this.clear(); // Turn off the features which can affect the frag color for opaque objects pass.
+		// Turn off the features which can affect the frag color for opaque objects pass.
 		// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
-
-
 		const currentToneMapping = _this.toneMapping;
 		_this.toneMapping = NoToneMapping;
 		renderObjects(opaqueObjects, scene, camera);
 		_this.toneMapping = currentToneMapping;
 		textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
 		textures.updateRenderTargetMipmap(_transmissionRenderTarget);
-
 		_this.setRenderTarget(currentRenderTarget);
 	}
-
 	function renderObjects(renderList, scene, camera) {
 		const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
-
 		for (let i = 0, l = renderList.length; i < l; i++) {
 			const renderItem = renderList[i];
 			const object = renderItem.object;
 			const geometry = renderItem.geometry;
 			const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
 			const group = renderItem.group;
-
 			if (object.layers.test(camera.layers)) {
 				renderObject(object, scene, camera, geometry, material, group);
 			}
 		}
 	}
-
 	function renderObject(object, scene, camera, geometry, material, group) {
 		object.onBeforeRender(_this, scene, camera, geometry, material, group);
 		object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
 		object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
 		material.onBeforeRender(_this, scene, camera, geometry, object, group);
-
 		if (material.transparent === true && material.side === DoubleSide) {
 			material.side = BackSide;
 			material.needsUpdate = true;
-
 			_this.renderBufferDirect(camera, scene, geometry, material, object, group);
-
 			material.side = FrontSide;
 			material.needsUpdate = true;
-
 			_this.renderBufferDirect(camera, scene, geometry, material, object, group);
-
 			material.side = DoubleSide;
 		} else {
 			_this.renderBufferDirect(camera, scene, geometry, material, object, group);
 		}
-
 		object.onAfterRender(_this, scene, camera, geometry, material, group);
 	}
-
 	function getProgram(material, scene, object) {
 		if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
 
@@ -21003,23 +18653,24 @@ function WebGLRenderer(parameters = {}) {
 		const lightsStateVersion = lights.state.version;
 		const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
 		const programCacheKey = programCache.getProgramCacheKey(parameters);
-		let programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
+		let programs = materialProperties.programs;
+
+		// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
 
 		materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
 		materialProperties.fog = scene.fog;
 		materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
-
 		if (programs === undefined) {
 			// new material
+
 			material.addEventListener('dispose', onMaterialDispose);
 			programs = new Map();
 			materialProperties.programs = programs;
 		}
-
 		let program = programs.get(programCacheKey);
-
 		if (program !== undefined) {
 			// early out if program and light state is identical
+
 			if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
 				updateCommonMaterialProperties(material, parameters);
 				return program;
@@ -21032,20 +18683,19 @@ function WebGLRenderer(parameters = {}) {
 			programs.set(programCacheKey, program);
 			materialProperties.uniforms = parameters.uniforms;
 		}
-
 		const uniforms = materialProperties.uniforms;
-
 		if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
 			uniforms.clippingPlanes = clipping.uniform;
 		}
+		updateCommonMaterialProperties(material, parameters);
 
-		updateCommonMaterialProperties(material, parameters); // store the light setup it was created for
+		// store the light setup it was created for
 
 		materialProperties.needsLights = materialNeedsLights(material);
 		materialProperties.lightsStateVersion = lightsStateVersion;
-
 		if (materialProperties.needsLights) {
 			// wire up the material to this renderer's lighting state
+
 			uniforms.ambientLightColor.value = lights.state.ambient;
 			uniforms.lightProbe.value = lights.state.probe;
 			uniforms.directionalLights.value = lights.state.directional;
@@ -21064,7 +18714,8 @@ function WebGLRenderer(parameters = {}) {
 			uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
 			uniforms.spotLightMap.value = lights.state.spotLightMap;
 			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
-			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms
+			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
+			// TODO (abelnation): add area lights shadow info to uniforms
 		}
 
 		const progUniforms = program.getUniforms();
@@ -21073,7 +18724,6 @@ function WebGLRenderer(parameters = {}) {
 		materialProperties.uniformsList = uniformsList;
 		return program;
 	}
-
 	function updateCommonMaterialProperties(material, parameters) {
 		const materialProperties = properties.get(material);
 		materialProperties.outputEncoding = parameters.outputEncoding;
@@ -21089,7 +18739,6 @@ function WebGLRenderer(parameters = {}) {
 		materialProperties.vertexTangents = parameters.vertexTangents;
 		materialProperties.toneMapping = parameters.toneMapping;
 	}
-
 	function setProgram(camera, scene, geometry, material, object) {
 		if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
 
@@ -21108,20 +18757,20 @@ function WebGLRenderer(parameters = {}) {
 		const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
 		const materialProperties = properties.get(material);
 		const lights = currentRenderState.state.lights;
-
 		if (_clippingEnabled === true) {
 			if (_localClippingEnabled === true || camera !== _currentCamera) {
-				const useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup
+				const useCache = camera === _currentCamera && material.id === _currentMaterialId;
+
+				// we might want to call this function with some ClippingGroup
 				// object instead of the material, once it becomes feasible
 				// (#8465, #8379)
-
 				clipping.setState(material, camera, useCache);
 			}
-		} //
+		}
 
+		//
 
 		let needsProgramChange = false;
-
 		if (material.version === materialProperties.__version) {
 			if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
 				needsProgramChange = true;
@@ -21159,76 +18808,69 @@ function WebGLRenderer(parameters = {}) {
 		} else {
 			needsProgramChange = true;
 			materialProperties.__version = material.version;
-		} //
+		}
 
+		//
 
 		let program = materialProperties.currentProgram;
-
 		if (needsProgramChange === true) {
 			program = getProgram(material, scene, object);
 		}
-
 		let refreshProgram = false;
 		let refreshMaterial = false;
 		let refreshLights = false;
 		const p_uniforms = program.getUniforms(),
-					m_uniforms = materialProperties.uniforms;
-
+			m_uniforms = materialProperties.uniforms;
 		if (state.useProgram(program.program)) {
 			refreshProgram = true;
 			refreshMaterial = true;
 			refreshLights = true;
 		}
-
 		if (material.id !== _currentMaterialId) {
 			_currentMaterialId = material.id;
 			refreshMaterial = true;
 		}
-
 		if (refreshProgram || _currentCamera !== camera) {
 			p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);
-
 			if (capabilities.logarithmicDepthBuffer) {
 				p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
 			}
-
 			if (_currentCamera !== camera) {
-				_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update
+				_currentCamera = camera;
+
+				// lighting uniforms depend on the camera so enforce an update
 				// now, in case this material supports lights - or later, when
 				// the next material that does gets activated:
 
 				refreshMaterial = true; // set to true on material change
-
 				refreshLights = true; // remains set until update done
-			} // load material specific uniforms
-			// (shader material also gets them for the sake of genericity)
+			}
 
+			// load material specific uniforms
+			// (shader material also gets them for the sake of genericity)
 
 			if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
 				const uCamPos = p_uniforms.map.cameraPosition;
-
 				if (uCamPos !== undefined) {
 					uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
 				}
 			}
-
 			if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
 				p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);
 			}
-
 			if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {
 				p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
 			}
-		} // skinning and morph target uniforms must be set even if material didn't change
+		}
+
+		// skinning and morph target uniforms must be set even if material didn't change
 		// auto-setting of texture unit for bone and morph texture must go before other textures
 		// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
 
-
 		if (object.isSkinnedMesh) {
 			p_uniforms.setOptional(_gl, object, 'bindMatrix');
 			p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
 			const skeleton = object.skeleton;
-
 			if (skeleton) {
 				if (capabilities.floatVertexTextures) {
 					if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
@@ -21239,64 +18881,62 @@ function WebGLRenderer(parameters = {}) {
 				}
 			}
 		}
-
 		const morphAttributes = geometry.morphAttributes;
-
 		if (morphAttributes.position !== undefined || morphAttributes.normal !== undefined || morphAttributes.color !== undefined && capabilities.isWebGL2 === true) {
 			morphtargets.update(object, geometry, material, program);
 		}
-
 		if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
 			materialProperties.receiveShadow = object.receiveShadow;
 			p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);
-		} // https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512
+		}
 
+		// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512
 
 		if (material.isMeshGouraudMaterial && material.envMap !== null) {
 			m_uniforms.envMap.value = envMap;
 			m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
 		}
-
 		if (refreshMaterial) {
 			p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);
-
 			if (materialProperties.needsLights) {
 				// the current material requires lighting info
+
 				// note: all lighting uniforms are always set correctly
 				// they simply reference the renderer's state for their
 				// values
 				//
 				// use the current material's .needsUpdate flags to set
 				// the GL state when required
+
 				markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
-			} // refresh uniforms common to several materials
+			}
 
+			// refresh uniforms common to several materials
 
 			if (fog && material.fog === true) {
 				materials.refreshFogUniforms(m_uniforms, fog);
 			}
-
 			materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
 			WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
 		}
-
 		if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
 			WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
 			material.uniformsNeedUpdate = false;
 		}
-
 		if (material.isSpriteMaterial) {
 			p_uniforms.setValue(_gl, 'center', object.center);
-		} // common matrices
+		}
 
+		// common matrices
 
 		p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
 		p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
-		p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld); // UBOs
+		p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);
+
+		// UBOs
 
 		if (material.isShaderMaterial || material.isRawShaderMaterial) {
 			const groups = material.uniformsGroups;
-
 			for (let i = 0, l = groups.length; i < l; i++) {
 				if (capabilities.isWebGL2) {
 					const group = groups[i];
@@ -21307,10 +18947,10 @@ function WebGLRenderer(parameters = {}) {
 				}
 			}
 		}
-
 		return program;
-	} // If uniforms are marked as clean, they don't need to be loaded to the GPU.
+	}
 
+	// If uniforms are marked as clean, they don't need to be loaded to the GPU.
 
 	function markUniformsLightsNeedsUpdate(uniforms, value) {
 		uniforms.ambientLightColor.needsUpdate = value;
@@ -21324,49 +18964,40 @@ function WebGLRenderer(parameters = {}) {
 		uniforms.rectAreaLights.needsUpdate = value;
 		uniforms.hemisphereLights.needsUpdate = value;
 	}
-
 	function materialNeedsLights(material) {
 		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
 	}
-
 	this.setTexture2D = function () {
-		var warned = false; // backwards compatibility: peel texture.texture
+		var warned = false;
 
+		// backwards compatibility: peel texture.texture
 		return function setTexture2D(texture, slot) {
 			if (texture && texture.isWebGLRenderTarget) {
 				if (!warned) {
 					console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.");
 					warned = true;
 				}
-
 				texture = texture.texture;
 			}
-
 			textures.setTexture2D(texture, slot);
 		};
 	}();
-
 	this.getActiveCubeFace = function () {
 		return _currentActiveCubeFace;
 	};
-
 	this.getActiveMipmapLevel = function () {
 		return _currentActiveMipmapLevel;
 	};
-
 	this.getRenderTarget = function () {
 		return _currentRenderTarget;
 	};
-
 	this.setRenderTargetTextures = function (renderTarget, colorTexture, depthTexture) {
 		properties.get(renderTarget.texture).__webglTexture = colorTexture;
 		properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
 		const renderTargetProperties = properties.get(renderTarget);
 		renderTargetProperties.__hasExternalTextures = true;
-
 		if (renderTargetProperties.__hasExternalTextures) {
 			renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;
-
 			if (!renderTargetProperties.__autoAllocateDepthBuffer) {
 				// The multisample_render_to_texture extension doesn't work properly if there
 				// are midframe flushes and an external depth buffer. Disable use of the extension.
@@ -21377,13 +19008,11 @@ function WebGLRenderer(parameters = {}) {
 			}
 		}
 	};
-
 	this.setRenderTargetFramebuffer = function (renderTarget, defaultFramebuffer) {
 		const renderTargetProperties = properties.get(renderTarget);
 		renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
 		renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
 	};
-
 	this.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
 		_currentRenderTarget = renderTarget;
 		_currentActiveCubeFace = activeCubeFace;
@@ -21392,10 +19021,8 @@ function WebGLRenderer(parameters = {}) {
 		let framebuffer = null;
 		let isCube = false;
 		let isRenderTarget3D = false;
-
 		if (renderTarget) {
 			const renderTargetProperties = properties.get(renderTarget);
-
 			if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {
 				// We need to make sure to rebind the framebuffer.
 				state.bindFramebuffer(_gl.FRAMEBUFFER, null);
@@ -21406,15 +19033,11 @@ function WebGLRenderer(parameters = {}) {
 				// Color and depth texture must be rebound in order for the swapchain to update.
 				textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
 			}
-
 			const texture = renderTarget.texture;
-
 			if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
 				isRenderTarget3D = true;
 			}
-
 			const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
-
 			if (renderTarget.isWebGLCubeRenderTarget) {
 				framebuffer = __webglFramebuffer[activeCubeFace];
 				isCube = true;
@@ -21423,41 +19046,29 @@ function WebGLRenderer(parameters = {}) {
 			} else {
 				framebuffer = __webglFramebuffer;
 			}
-
 			_currentViewport.copy(renderTarget.viewport);
-
 			_currentScissor.copy(renderTarget.scissor);
-
 			_currentScissorTest = renderTarget.scissorTest;
 		} else {
 			_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
-
 			_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
-
 			_currentScissorTest = _scissorTest;
 		}
-
 		const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
-
 		if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
 			state.drawBuffers(renderTarget, framebuffer);
 		}
-
 		state.viewport(_currentViewport);
 		state.scissor(_currentScissor);
 		state.setScissorTest(_currentScissorTest);
-
 		if (isCube) {
 			const textureProperties = properties.get(renderTarget.texture);
-
 			_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
 		} else if (isRenderTarget3D) {
 			const textureProperties = properties.get(renderTarget.texture);
 			const layer = activeCubeFace || 0;
-
 			_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
 		}
-
 		_currentMaterialId = -1; // reset current material to ensure correct uniform bindings
 	};
 
@@ -21466,72 +19077,63 @@ function WebGLRenderer(parameters = {}) {
 			console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
 			return;
 		}
-
 		let framebuffer = properties.get(renderTarget).__webglFramebuffer;
-
 		if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {
 			framebuffer = framebuffer[activeCubeFaceIndex];
 		}
-
 		if (framebuffer) {
 			state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
-
 			try {
 				const texture = renderTarget.texture;
 				const textureFormat = texture.format;
 				const textureType = texture.type;
-
 				if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
 					console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
 					return;
 				}
-
 				const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));
-
-				if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
-				!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox
+				if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) &&
+				// Edge and Chrome Mac < 52 (#9513)
+				!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) &&
+				// Chrome Mac >= 52 and Firefox
 				!halfFloatSupportedByExt) {
 					console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
 					return;
-				} // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
+				}
 
+				// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
 
 				if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {
 					_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
 				}
 			} finally {
 				// restore framebuffer of current render target if necessary
+
 				const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
 				state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
 			}
 		}
 	};
-
 	this.copyFramebufferToTexture = function (position, texture, level = 0) {
 		const levelScale = Math.pow(2, -level);
 		const width = Math.floor(texture.image.width * levelScale);
 		const height = Math.floor(texture.image.height * levelScale);
 		textures.setTexture2D(texture, 0);
-
 		_gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height);
-
 		state.unbindTexture();
 	};
-
 	this.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {
 		const width = srcTexture.image.width;
 		const height = srcTexture.image.height;
 		const glFormat = utils.convert(dstTexture.format);
 		const glType = utils.convert(dstTexture.type);
-		textures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei
-		// parameters, make sure they are correct for the dstTexture
+		textures.setTexture2D(dstTexture, 0);
 
+		// As another texture upload may have changed pixelStorei
+		// parameters, make sure they are correct for the dstTexture
 		_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
-
 		_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
-
 		_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
-
 		if (srcTexture.isDataTexture) {
 			_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
 		} else {
@@ -21540,26 +19142,23 @@ function WebGLRenderer(parameters = {}) {
 			} else {
 				_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);
 			}
-		} // Generate mipmaps only when copying level 0
-
+		}
 
+		// Generate mipmaps only when copying level 0
 		if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);
 		state.unbindTexture();
 	};
-
 	this.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {
 		if (_this.isWebGL1Renderer) {
 			console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
 			return;
 		}
-
 		const width = sourceBox.max.x - sourceBox.min.x + 1;
 		const height = sourceBox.max.y - sourceBox.min.y + 1;
 		const depth = sourceBox.max.z - sourceBox.min.z + 1;
 		const glFormat = utils.convert(dstTexture.format);
 		const glType = utils.convert(dstTexture.type);
 		let glTarget;
-
 		if (dstTexture.isData3DTexture) {
 			textures.setTexture3D(dstTexture, 0);
 			glTarget = _gl.TEXTURE_3D;
@@ -21570,62 +19169,40 @@ function WebGLRenderer(parameters = {}) {
 			console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');
 			return;
 		}
-
 		_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
-
 		_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
-
 		_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
-
 		const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
-
 		const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
-
 		const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
-
 		const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
-
 		const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
-
 		const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
-
 		_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
-
 		_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
-
 		_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);
-
 		_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);
-
 		_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);
-
 		if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
 			_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
 		} else {
 			if (srcTexture.isCompressedArrayTexture) {
 				console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');
-
 				_gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
 			} else {
 				_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
 			}
 		}
-
 		_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);
-
 		_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
-
 		_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);
+		_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
+		_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages);
 
-		_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
-
-		_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0
-
-
+		// Generate mipmaps only when copying level 0
 		if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
 		state.unbindTexture();
 	};
-
 	this.initTexture = function (texture) {
 		if (texture.isCubeTexture) {
 			textures.setTextureCube(texture, 0);
@@ -21636,10 +19213,8 @@ function WebGLRenderer(parameters = {}) {
 		} else {
 			textures.setTexture2D(texture, 0);
 		}
-
 		state.unbindTexture();
 	};
-
 	this.resetState = function () {
 		_currentActiveCubeFace = 0;
 		_currentActiveMipmapLevel = 0;
@@ -21647,7 +19222,6 @@ function WebGLRenderer(parameters = {}) {
 		state.reset();
 		bindingStates.reset();
 	};
-
 	if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
 		__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
 			detail: this
@@ -21656,7 +19230,6 @@ function WebGLRenderer(parameters = {}) {
 }
 
 class WebGL1Renderer extends WebGLRenderer {}
-
 WebGL1Renderer.prototype.isWebGL1Renderer = true;
 
 class FogExp2 {
@@ -21666,11 +19239,9 @@ class FogExp2 {
 		this.color = new Color(color);
 		this.density = density;
 	}
-
 	clone() {
 		return new FogExp2(this.color, this.density);
 	}
-
 	toJSON() {
 		return {
 			type: 'FogExp2',
@@ -21678,7 +19249,6 @@ class FogExp2 {
 			density: this.density
 		};
 	}
-
 }
 
 class Fog {
@@ -21689,11 +19259,9 @@ class Fog {
 		this.near = near;
 		this.far = far;
 	}
-
 	clone() {
 		return new Fog(this.color, this.near, this.far);
 	}
-
 	toJSON() {
 		return {
 			type: 'Fog',
@@ -21702,7 +19270,6 @@ class Fog {
 			far: this.far
 		};
 	}
-
 }
 
 class Scene extends Object3D {
@@ -21716,14 +19283,12 @@ class Scene extends Object3D {
 		this.backgroundBlurriness = 0;
 		this.backgroundIntensity = 1;
 		this.overrideMaterial = null;
-
 		if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
 			__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
 				detail: this
 			}));
 		}
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		if (source.background !== null) this.background = source.background.clone();
@@ -21735,26 +19300,24 @@ class Scene extends Object3D {
 		this.matrixAutoUpdate = source.matrixAutoUpdate;
 		return this;
 	}
-
 	toJSON(meta) {
 		const data = super.toJSON(meta);
 		if (this.fog !== null) data.object.fog = this.fog.toJSON();
 		if (this.backgroundBlurriness > 0) data.backgroundBlurriness = this.backgroundBlurriness;
 		if (this.backgroundIntensity !== 1) data.backgroundIntensity = this.backgroundIntensity;
 		return data;
-	} // @deprecated
+	}
 
+	// @deprecated
 
 	get autoUpdate() {
 		console.warn('THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.');
 		return this.matrixWorldAutoUpdate;
 	}
-
 	set autoUpdate(value) {
 		console.warn('THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.');
 		this.matrixWorldAutoUpdate = value;
 	}
-
 }
 
 class InterleavedBuffer {
@@ -21771,18 +19334,14 @@ class InterleavedBuffer {
 		this.version = 0;
 		this.uuid = generateUUID();
 	}
-
 	onUploadCallback() {}
-
 	set needsUpdate(value) {
 		if (value === true) this.version++;
 	}
-
 	setUsage(value) {
 		this.usage = value;
 		return this;
 	}
-
 	copy(source) {
 		this.array = new source.array.constructor(source.array);
 		this.count = source.count;
@@ -21790,61 +19349,52 @@ class InterleavedBuffer {
 		this.usage = source.usage;
 		return this;
 	}
-
 	copyAt(index1, attribute, index2) {
 		index1 *= this.stride;
 		index2 *= attribute.stride;
-
 		for (let i = 0, l = this.stride; i < l; i++) {
 			this.array[index1 + i] = attribute.array[index2 + i];
 		}
-
 		return this;
 	}
-
 	set(value, offset = 0) {
 		this.array.set(value, offset);
 		return this;
 	}
-
 	clone(data) {
 		if (data.arrayBuffers === undefined) {
 			data.arrayBuffers = {};
 		}
-
 		if (this.array.buffer._uuid === undefined) {
 			this.array.buffer._uuid = generateUUID();
 		}
-
 		if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
 			data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
 		}
-
 		const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
 		const ib = new this.constructor(array, this.stride);
 		ib.setUsage(this.usage);
 		return ib;
 	}
-
 	onUpload(callback) {
 		this.onUploadCallback = callback;
 		return this;
 	}
-
 	toJSON(data) {
 		if (data.arrayBuffers === undefined) {
 			data.arrayBuffers = {};
-		} // generate UUID for array buffer if necessary
+		}
 
+		// generate UUID for array buffer if necessary
 
 		if (this.array.buffer._uuid === undefined) {
 			this.array.buffer._uuid = generateUUID();
 		}
-
 		if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
 			data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
-		} //
+		}
 
+		//
 
 		return {
 			uuid: this.uuid,
@@ -21853,11 +19403,9 @@ class InterleavedBuffer {
 			stride: this.stride
 		};
 	}
-
 }
 
 const _vector$6 = /*@__PURE__*/new Vector3();
-
 class InterleavedBufferAttribute {
 	constructor(interleavedBuffer, itemSize, offset, normalized = false) {
 		this.isInterleavedBufferAttribute = true;
@@ -21867,188 +19415,148 @@ class InterleavedBufferAttribute {
 		this.offset = offset;
 		this.normalized = normalized === true;
 	}
-
 	get count() {
 		return this.data.count;
 	}
-
 	get array() {
 		return this.data.array;
 	}
-
 	set needsUpdate(value) {
 		this.data.needsUpdate = value;
 	}
-
 	applyMatrix4(m) {
 		for (let i = 0, l = this.data.count; i < l; i++) {
 			_vector$6.fromBufferAttribute(this, i);
-
 			_vector$6.applyMatrix4(m);
-
 			this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
 		}
-
 		return this;
 	}
-
 	applyNormalMatrix(m) {
 		for (let i = 0, l = this.count; i < l; i++) {
 			_vector$6.fromBufferAttribute(this, i);
-
 			_vector$6.applyNormalMatrix(m);
-
 			this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
 		}
-
 		return this;
 	}
-
 	transformDirection(m) {
 		for (let i = 0, l = this.count; i < l; i++) {
 			_vector$6.fromBufferAttribute(this, i);
-
 			_vector$6.transformDirection(m);
-
 			this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
 		}
-
 		return this;
 	}
-
 	setX(index, x) {
 		if (this.normalized) x = normalize(x, this.array);
 		this.data.array[index * this.data.stride + this.offset] = x;
 		return this;
 	}
-
 	setY(index, y) {
 		if (this.normalized) y = normalize(y, this.array);
 		this.data.array[index * this.data.stride + this.offset + 1] = y;
 		return this;
 	}
-
 	setZ(index, z) {
 		if (this.normalized) z = normalize(z, this.array);
 		this.data.array[index * this.data.stride + this.offset + 2] = z;
 		return this;
 	}
-
 	setW(index, w) {
 		if (this.normalized) w = normalize(w, this.array);
 		this.data.array[index * this.data.stride + this.offset + 3] = w;
 		return this;
 	}
-
 	getX(index) {
 		let x = this.data.array[index * this.data.stride + this.offset];
 		if (this.normalized) x = denormalize(x, this.array);
 		return x;
 	}
-
 	getY(index) {
 		let y = this.data.array[index * this.data.stride + this.offset + 1];
 		if (this.normalized) y = denormalize(y, this.array);
 		return y;
 	}
-
 	getZ(index) {
 		let z = this.data.array[index * this.data.stride + this.offset + 2];
 		if (this.normalized) z = denormalize(z, this.array);
 		return z;
 	}
-
 	getW(index) {
 		let w = this.data.array[index * this.data.stride + this.offset + 3];
 		if (this.normalized) w = denormalize(w, this.array);
 		return w;
 	}
-
 	setXY(index, x, y) {
 		index = index * this.data.stride + this.offset;
-
 		if (this.normalized) {
 			x = normalize(x, this.array);
 			y = normalize(y, this.array);
 		}
-
 		this.data.array[index + 0] = x;
 		this.data.array[index + 1] = y;
 		return this;
 	}
-
 	setXYZ(index, x, y, z) {
 		index = index * this.data.stride + this.offset;
-
 		if (this.normalized) {
 			x = normalize(x, this.array);
 			y = normalize(y, this.array);
 			z = normalize(z, this.array);
 		}
-
 		this.data.array[index + 0] = x;
 		this.data.array[index + 1] = y;
 		this.data.array[index + 2] = z;
 		return this;
 	}
-
 	setXYZW(index, x, y, z, w) {
 		index = index * this.data.stride + this.offset;
-
 		if (this.normalized) {
 			x = normalize(x, this.array);
 			y = normalize(y, this.array);
 			z = normalize(z, this.array);
 			w = normalize(w, this.array);
 		}
-
 		this.data.array[index + 0] = x;
 		this.data.array[index + 1] = y;
 		this.data.array[index + 2] = z;
 		this.data.array[index + 3] = w;
 		return this;
 	}
-
 	clone(data) {
 		if (data === undefined) {
 			console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.');
 			const array = [];
-
 			for (let i = 0; i < this.count; i++) {
 				const index = i * this.data.stride + this.offset;
-
 				for (let j = 0; j < this.itemSize; j++) {
 					array.push(this.data.array[index + j]);
 				}
 			}
-
 			return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
 		} else {
 			if (data.interleavedBuffers === undefined) {
 				data.interleavedBuffers = {};
 			}
-
 			if (data.interleavedBuffers[this.data.uuid] === undefined) {
 				data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
 			}
-
 			return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
 		}
 	}
-
 	toJSON(data) {
 		if (data === undefined) {
 			console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.');
 			const array = [];
-
 			for (let i = 0; i < this.count; i++) {
 				const index = i * this.data.stride + this.offset;
-
 				for (let j = 0; j < this.itemSize; j++) {
 					array.push(this.data.array[index + j]);
 				}
-			} // de-interleave data and save it as an ordinary buffer attribute for now
+			}
 
+			// de-interleave data and save it as an ordinary buffer attribute for now
 
 			return {
 				itemSize: this.itemSize,
@@ -22058,14 +19566,13 @@ class InterleavedBufferAttribute {
 			};
 		} else {
 			// save as true interleaved attribute
+
 			if (data.interleavedBuffers === undefined) {
 				data.interleavedBuffers = {};
 			}
-
 			if (data.interleavedBuffers[this.data.uuid] === undefined) {
 				data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
 			}
-
 			return {
 				isInterleavedBufferAttribute: true,
 				itemSize: this.itemSize,
@@ -22075,7 +19582,6 @@ class InterleavedBufferAttribute {
 			};
 		}
 	}
-
 }
 
 class SpriteMaterial extends Material {
@@ -22092,7 +19598,6 @@ class SpriteMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.color.copy(source.color);
@@ -22103,110 +19608,74 @@ class SpriteMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 let _geometry;
-
 const _intersectPoint = /*@__PURE__*/new Vector3();
-
 const _worldScale = /*@__PURE__*/new Vector3();
-
 const _mvPosition = /*@__PURE__*/new Vector3();
-
 const _alignedPosition = /*@__PURE__*/new Vector2();
-
 const _rotatedPosition = /*@__PURE__*/new Vector2();
-
 const _viewWorldMatrix = /*@__PURE__*/new Matrix4();
-
 const _vA = /*@__PURE__*/new Vector3();
-
 const _vB = /*@__PURE__*/new Vector3();
-
 const _vC = /*@__PURE__*/new Vector3();
-
 const _uvA = /*@__PURE__*/new Vector2();
-
 const _uvB = /*@__PURE__*/new Vector2();
-
 const _uvC = /*@__PURE__*/new Vector2();
-
 class Sprite extends Object3D {
 	constructor(material) {
 		super();
 		this.isSprite = true;
 		this.type = 'Sprite';
-
 		if (_geometry === undefined) {
 			_geometry = new BufferGeometry();
 			const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);
 			const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
-
 			_geometry.setIndex([0, 1, 2, 0, 2, 3]);
-
 			_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
-
 			_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
 		}
-
 		this.geometry = _geometry;
 		this.material = material !== undefined ? material : new SpriteMaterial();
 		this.center = new Vector2(0.5, 0.5);
 	}
-
 	raycast(raycaster, intersects) {
 		if (raycaster.camera === null) {
 			console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
 		}
-
 		_worldScale.setFromMatrixScale(this.matrixWorld);
-
 		_viewWorldMatrix.copy(raycaster.camera.matrixWorld);
-
 		this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
-
 		_mvPosition.setFromMatrixPosition(this.modelViewMatrix);
-
 		if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
 			_worldScale.multiplyScalar(-_mvPosition.z);
 		}
-
 		const rotation = this.material.rotation;
 		let sin, cos;
-
 		if (rotation !== 0) {
 			cos = Math.cos(rotation);
 			sin = Math.sin(rotation);
 		}
-
 		const center = this.center;
 		transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
 		transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
 		transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
-
 		_uvA.set(0, 0);
-
 		_uvB.set(1, 0);
+		_uvC.set(1, 1);
 
-		_uvC.set(1, 1); // check first triangle
-
-
+		// check first triangle
 		let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);
-
 		if (intersect === null) {
 			// check second triangle
 			transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
-
 			_uvB.set(0, 1);
-
 			intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);
-
 			if (intersect === null) {
 				return;
 			}
 		}
-
 		const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
 		if (distance < raycaster.near || distance > raycaster.far) return;
 		intersects.push({
@@ -22217,39 +19686,34 @@ class Sprite extends Object3D {
 			object: this
 		});
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		if (source.center !== undefined) this.center.copy(source.center);
 		this.material = source.material;
 		return this;
 	}
-
 }
-
 function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
 	// compute position in camera space
-	_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero
-
+	_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
 
+	// to check if rotation is not zero
 	if (sin !== undefined) {
 		_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
 		_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
 	} else {
 		_rotatedPosition.copy(_alignedPosition);
 	}
-
 	vertexPosition.copy(mvPosition);
 	vertexPosition.x += _rotatedPosition.x;
-	vertexPosition.y += _rotatedPosition.y; // transform to world space
+	vertexPosition.y += _rotatedPosition.y;
 
+	// transform to world space
 	vertexPosition.applyMatrix4(_viewWorldMatrix);
 }
 
 const _v1$2 = /*@__PURE__*/new Vector3();
-
 const _v2$1 = /*@__PURE__*/new Vector3();
-
 class LOD extends Object3D {
 	constructor() {
 		super();
@@ -22266,31 +19730,25 @@ class LOD extends Object3D {
 		});
 		this.autoUpdate = true;
 	}
-
 	copy(source) {
 		super.copy(source, false);
 		const levels = source.levels;
-
 		for (let i = 0, l = levels.length; i < l; i++) {
 			const level = levels[i];
 			this.addLevel(level.object.clone(), level.distance, level.hysteresis);
 		}
-
 		this.autoUpdate = source.autoUpdate;
 		return this;
 	}
-
 	addLevel(object, distance = 0, hysteresis = 0) {
 		distance = Math.abs(distance);
 		const levels = this.levels;
 		let l;
-
 		for (l = 0; l < levels.length; l++) {
 			if (distance < levels[l].distance) {
 				break;
 			}
 		}
-
 		levels.splice(l, 0, {
 			distance: distance,
 			hysteresis: hysteresis,
@@ -22299,65 +19757,47 @@ class LOD extends Object3D {
 		this.add(object);
 		return this;
 	}
-
 	getCurrentLevel() {
 		return this._currentLevel;
 	}
-
 	getObjectForDistance(distance) {
 		const levels = this.levels;
-
 		if (levels.length > 0) {
 			let i, l;
-
 			for (i = 1, l = levels.length; i < l; i++) {
 				let levelDistance = levels[i].distance;
-
 				if (levels[i].object.visible) {
 					levelDistance -= levelDistance * levels[i].hysteresis;
 				}
-
 				if (distance < levelDistance) {
 					break;
 				}
 			}
-
 			return levels[i - 1].object;
 		}
-
 		return null;
 	}
-
 	raycast(raycaster, intersects) {
 		const levels = this.levels;
-
 		if (levels.length > 0) {
 			_v1$2.setFromMatrixPosition(this.matrixWorld);
-
 			const distance = raycaster.ray.origin.distanceTo(_v1$2);
 			this.getObjectForDistance(distance).raycast(raycaster, intersects);
 		}
 	}
-
 	update(camera) {
 		const levels = this.levels;
-
 		if (levels.length > 1) {
 			_v1$2.setFromMatrixPosition(camera.matrixWorld);
-
 			_v2$1.setFromMatrixPosition(this.matrixWorld);
-
 			const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;
 			levels[0].object.visible = true;
 			let i, l;
-
 			for (i = 1, l = levels.length; i < l; i++) {
 				let levelDistance = levels[i].distance;
-
 				if (levels[i].object.visible) {
 					levelDistance -= levelDistance * levels[i].hysteresis;
 				}
-
 				if (distance >= levelDistance) {
 					levels[i - 1].object.visible = false;
 					levels[i].object.visible = true;
@@ -22365,21 +19805,17 @@ class LOD extends Object3D {
 					break;
 				}
 			}
-
 			this._currentLevel = i - 1;
-
 			for (; i < l; i++) {
 				levels[i].object.visible = false;
 			}
 		}
 	}
-
 	toJSON(meta) {
 		const data = super.toJSON(meta);
 		if (this.autoUpdate === false) data.object.autoUpdate = false;
 		data.object.levels = [];
 		const levels = this.levels;
-
 		for (let i = 0, l = levels.length; i < l; i++) {
 			const level = levels[i];
 			data.object.levels.push({
@@ -22388,22 +19824,15 @@ class LOD extends Object3D {
 				hysteresis: level.hysteresis
 			});
 		}
-
 		return data;
 	}
-
 }
 
 const _basePosition = /*@__PURE__*/new Vector3();
-
 const _skinIndex = /*@__PURE__*/new Vector4();
-
 const _skinWeight = /*@__PURE__*/new Vector4();
-
 const _vector$5 = /*@__PURE__*/new Vector3();
-
 const _matrix = /*@__PURE__*/new Matrix4();
-
 class SkinnedMesh extends Mesh {
 	constructor(geometry, material) {
 		super(geometry, material);
@@ -22413,7 +19842,6 @@ class SkinnedMesh extends Mesh {
 		this.bindMatrix = new Matrix4();
 		this.bindMatrixInverse = new Matrix4();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.bindMode = source.bindMode;
@@ -22422,32 +19850,25 @@ class SkinnedMesh extends Mesh {
 		this.skeleton = source.skeleton;
 		return this;
 	}
-
 	bind(skeleton, bindMatrix) {
 		this.skeleton = skeleton;
-
 		if (bindMatrix === undefined) {
 			this.updateMatrixWorld(true);
 			this.skeleton.calculateInverses();
 			bindMatrix = this.matrixWorld;
 		}
-
 		this.bindMatrix.copy(bindMatrix);
 		this.bindMatrixInverse.copy(bindMatrix).invert();
 	}
-
 	pose() {
 		this.skeleton.pose();
 	}
-
 	normalizeSkinWeights() {
 		const vector = new Vector4();
 		const skinWeight = this.geometry.attributes.skinWeight;
-
 		for (let i = 0, l = skinWeight.count; i < l; i++) {
 			vector.fromBufferAttribute(skinWeight, i);
 			const scale = 1.0 / vector.manhattanLength();
-
 			if (scale !== Infinity) {
 				vector.multiplyScalar(scale);
 			} else {
@@ -22457,10 +19878,8 @@ class SkinnedMesh extends Mesh {
 			skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
 		}
 	}
-
 	updateMatrixWorld(force) {
 		super.updateMatrixWorld(force);
-
 		if (this.bindMode === 'attached') {
 			this.bindMatrixInverse.copy(this.matrixWorld).invert();
 		} else if (this.bindMode === 'detached') {
@@ -22469,34 +19888,23 @@ class SkinnedMesh extends Mesh {
 			console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
 		}
 	}
-
 	boneTransform(index, target) {
 		const skeleton = this.skeleton;
 		const geometry = this.geometry;
-
 		_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
-
 		_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
-
 		_basePosition.copy(target).applyMatrix4(this.bindMatrix);
-
 		target.set(0, 0, 0);
-
 		for (let i = 0; i < 4; i++) {
 			const weight = _skinWeight.getComponent(i);
-
 			if (weight !== 0) {
 				const boneIndex = _skinIndex.getComponent(i);
-
 				_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
-
 				target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);
 			}
 		}
-
 		return target.applyMatrix4(this.bindMatrixInverse);
 	}
-
 }
 
 class Bone extends Object3D {
@@ -22505,7 +19913,6 @@ class Bone extends Object3D {
 		this.isBone = true;
 		this.type = 'Bone';
 	}
-
 }
 
 class DataTexture extends Texture {
@@ -22521,13 +19928,10 @@ class DataTexture extends Texture {
 		this.flipY = false;
 		this.unpackAlignment = 1;
 	}
-
 }
 
 const _offsetMatrix = /*@__PURE__*/new Matrix4();
-
 const _identityMatrix = /*@__PURE__*/new Matrix4();
-
 class Skeleton {
 	constructor(bones = [], boneInverses = []) {
 		this.uuid = generateUUID();
@@ -22539,55 +19943,51 @@ class Skeleton {
 		this.frame = -1;
 		this.init();
 	}
-
 	init() {
 		const bones = this.bones;
 		const boneInverses = this.boneInverses;
-		this.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary
+		this.boneMatrices = new Float32Array(bones.length * 16);
+
+		// calculate inverse bone matrices if necessary
 
 		if (boneInverses.length === 0) {
 			this.calculateInverses();
 		} else {
 			// handle special case
+
 			if (bones.length !== boneInverses.length) {
 				console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');
 				this.boneInverses = [];
-
 				for (let i = 0, il = this.bones.length; i < il; i++) {
 					this.boneInverses.push(new Matrix4());
 				}
 			}
 		}
 	}
-
 	calculateInverses() {
 		this.boneInverses.length = 0;
-
 		for (let i = 0, il = this.bones.length; i < il; i++) {
 			const inverse = new Matrix4();
-
 			if (this.bones[i]) {
 				inverse.copy(this.bones[i].matrixWorld).invert();
 			}
-
 			this.boneInverses.push(inverse);
 		}
 	}
-
 	pose() {
 		// recover the bind-time world matrices
+
 		for (let i = 0, il = this.bones.length; i < il; i++) {
 			const bone = this.bones[i];
-
 			if (bone) {
 				bone.matrixWorld.copy(this.boneInverses[i]).invert();
 			}
-		} // compute the local matrices, positions, rotations and scales
+		}
 
+		// compute the local matrices, positions, rotations and scales
 
 		for (let i = 0, il = this.bones.length; i < il; i++) {
 			const bone = this.bones[i];
-
 			if (bone) {
 				if (bone.parent && bone.parent.isBone) {
 					bone.matrix.copy(bone.parent.matrixWorld).invert();
@@ -22595,36 +19995,32 @@ class Skeleton {
 				} else {
 					bone.matrix.copy(bone.matrixWorld);
 				}
-
 				bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
 			}
 		}
 	}
-
 	update() {
 		const bones = this.bones;
 		const boneInverses = this.boneInverses;
 		const boneMatrices = this.boneMatrices;
-		const boneTexture = this.boneTexture; // flatten bone matrices to array
+		const boneTexture = this.boneTexture;
+
+		// flatten bone matrices to array
 
 		for (let i = 0, il = bones.length; i < il; i++) {
 			// compute the offset between the current and the original transform
-			const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
 
+			const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
 			_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
-
 			_offsetMatrix.toArray(boneMatrices, i * 16);
 		}
-
 		if (boneTexture !== null) {
 			boneTexture.needsUpdate = true;
 		}
 	}
-
 	clone() {
 		return new Skeleton(this.bones, this.boneInverses);
 	}
-
 	computeBoneTexture() {
 		// layout (1 matrix = 4 pixels)
 		//			RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
@@ -22632,12 +20028,11 @@ class Skeleton {
 		//			 16x16 pixel texture max	 64 bones * 4 pixels = (16 * 16)
 		//			 32x32 pixel texture max	256 bones * 4 pixels = (32 * 32)
 		//			 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
-		let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
 
+		let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
 		size = ceilPowerOfTwo(size);
 		size = Math.max(size, 4);
 		const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel
-
 		boneMatrices.set(this.boneMatrices); // copy current values
 
 		const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
@@ -22647,46 +20042,36 @@ class Skeleton {
 		this.boneTextureSize = size;
 		return this;
 	}
-
 	getBoneByName(name) {
 		for (let i = 0, il = this.bones.length; i < il; i++) {
 			const bone = this.bones[i];
-
 			if (bone.name === name) {
 				return bone;
 			}
 		}
-
 		return undefined;
 	}
-
 	dispose() {
 		if (this.boneTexture !== null) {
 			this.boneTexture.dispose();
 			this.boneTexture = null;
 		}
 	}
-
 	fromJSON(json, bones) {
 		this.uuid = json.uuid;
-
 		for (let i = 0, l = json.bones.length; i < l; i++) {
 			const uuid = json.bones[i];
 			let bone = bones[uuid];
-
 			if (bone === undefined) {
 				console.warn('THREE.Skeleton: No bone found with UUID:', uuid);
 				bone = new Bone();
 			}
-
 			this.bones.push(bone);
 			this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
 		}
-
 		this.init();
 		return this;
 	}
-
 	toJSON() {
 		const data = {
 			metadata: {
@@ -22700,17 +20085,14 @@ class Skeleton {
 		data.uuid = this.uuid;
 		const bones = this.bones;
 		const boneInverses = this.boneInverses;
-
 		for (let i = 0, l = bones.length; i < l; i++) {
 			const bone = bones[i];
 			data.bones.push(bone.uuid);
 			const boneInverse = boneInverses[i];
 			data.boneInverses.push(boneInverse.toArray());
 		}
-
 		return data;
 	}
-
 }
 
 class InstancedBufferAttribute extends BufferAttribute {
@@ -22719,32 +20101,24 @@ class InstancedBufferAttribute extends BufferAttribute {
 		this.isInstancedBufferAttribute = true;
 		this.meshPerAttribute = meshPerAttribute;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.meshPerAttribute = source.meshPerAttribute;
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.meshPerAttribute = this.meshPerAttribute;
 		data.isInstancedBufferAttribute = true;
 		return data;
 	}
-
 }
 
 const _instanceLocalMatrix = /*@__PURE__*/new Matrix4();
-
 const _instanceWorldMatrix = /*@__PURE__*/new Matrix4();
-
 const _instanceIntersects = [];
-
 const _identity = /*@__PURE__*/new Matrix4();
-
 const _mesh = /*@__PURE__*/new Mesh();
-
 class InstancedMesh extends Mesh {
 	constructor(geometry, material, count) {
 		super(geometry, material);
@@ -22753,12 +20127,10 @@ class InstancedMesh extends Mesh {
 		this.instanceColor = null;
 		this.count = count;
 		this.frustumCulled = false;
-
 		for (let i = 0; i < count; i++) {
 			this.setMatrixAt(i, _identity);
 		}
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.instanceMatrix.copy(source.instanceMatrix);
@@ -22766,33 +20138,30 @@ class InstancedMesh extends Mesh {
 		this.count = source.count;
 		return this;
 	}
-
 	getColorAt(index, color) {
 		color.fromArray(this.instanceColor.array, index * 3);
 	}
-
 	getMatrixAt(index, matrix) {
 		matrix.fromArray(this.instanceMatrix.array, index * 16);
 	}
-
 	raycast(raycaster, intersects) {
 		const matrixWorld = this.matrixWorld;
 		const raycastTimes = this.count;
 		_mesh.geometry = this.geometry;
 		_mesh.material = this.material;
 		if (_mesh.material === undefined) return;
-
 		for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
 			// calculate the world matrix for each instance
-			this.getMatrixAt(instanceId, _instanceLocalMatrix);
 
-			_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance
+			this.getMatrixAt(instanceId, _instanceLocalMatrix);
+			_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
 
+			// the mesh represents this single instance
 
 			_mesh.matrixWorld = _instanceWorldMatrix;
+			_mesh.raycast(raycaster, _instanceIntersects);
 
-			_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast
-
+			// process the result of raycast
 
 			for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
 				const intersect = _instanceIntersects[i];
@@ -22800,31 +20169,24 @@ class InstancedMesh extends Mesh {
 				intersect.object = this;
 				intersects.push(intersect);
 			}
-
 			_instanceIntersects.length = 0;
 		}
 	}
-
 	setColorAt(index, color) {
 		if (this.instanceColor === null) {
 			this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
 		}
-
 		color.toArray(this.instanceColor.array, index * 3);
 	}
-
 	setMatrixAt(index, matrix) {
 		matrix.toArray(this.instanceMatrix.array, index * 16);
 	}
-
 	updateMorphTargets() {}
-
 	dispose() {
 		this.dispatchEvent({
 			type: 'dispose'
 		});
 	}
-
 }
 
 class LineBasicMaterial extends Material {
@@ -22839,7 +20201,6 @@ class LineBasicMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.color.copy(source.color);
@@ -22849,19 +20210,13 @@ class LineBasicMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 const _start$1 = /*@__PURE__*/new Vector3();
-
 const _end$1 = /*@__PURE__*/new Vector3();
-
 const _inverseMatrix$1 = /*@__PURE__*/new Matrix4();
-
 const _ray$1 = /*@__PURE__*/new Ray();
-
 const _sphere$1 = /*@__PURE__*/new Sphere();
-
 class Line extends Object3D {
 	constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
 		super();
@@ -22871,57 +20226,50 @@ class Line extends Object3D {
 		this.material = material;
 		this.updateMorphTargets();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.material = source.material;
 		this.geometry = source.geometry;
 		return this;
 	}
-
 	computeLineDistances() {
-		const geometry = this.geometry; // we assume non-indexed geometry
+		const geometry = this.geometry;
+
+		// we assume non-indexed geometry
 
 		if (geometry.index === null) {
 			const positionAttribute = geometry.attributes.position;
 			const lineDistances = [0];
-
 			for (let i = 1, l = positionAttribute.count; i < l; i++) {
 				_start$1.fromBufferAttribute(positionAttribute, i - 1);
-
 				_end$1.fromBufferAttribute(positionAttribute, i);
-
 				lineDistances[i] = lineDistances[i - 1];
 				lineDistances[i] += _start$1.distanceTo(_end$1);
 			}
-
 			geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
 		} else {
 			console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
 		}
-
 		return this;
 	}
-
 	raycast(raycaster, intersects) {
 		const geometry = this.geometry;
 		const matrixWorld = this.matrixWorld;
 		const threshold = raycaster.params.Line.threshold;
-		const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray
+		const drawRange = geometry.drawRange;
 
-		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
+		// Checking boundingSphere distance to ray
 
+		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
 		_sphere$1.copy(geometry.boundingSphere);
-
 		_sphere$1.applyMatrix4(matrixWorld);
-
 		_sphere$1.radius += threshold;
-		if (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //
+		if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;
 
-		_inverseMatrix$1.copy(matrixWorld).invert();
+		//
 
+		_inverseMatrix$1.copy(matrixWorld).invert();
 		_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
-
 		const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
 		const localThresholdSq = localThreshold * localThreshold;
 		const vStart = new Vector3();
@@ -22932,19 +20280,15 @@ class Line extends Object3D {
 		const index = geometry.index;
 		const attributes = geometry.attributes;
 		const positionAttribute = attributes.position;
-
 		if (index !== null) {
 			const start = Math.max(0, drawRange.start);
 			const end = Math.min(index.count, drawRange.start + drawRange.count);
-
 			for (let i = start, l = end - 1; i < l; i += step) {
 				const a = index.getX(i);
 				const b = index.getX(i + 1);
 				vStart.fromBufferAttribute(positionAttribute, a);
 				vEnd.fromBufferAttribute(positionAttribute, b);
-
 				const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
-
 				if (distSq > localThresholdSq) continue;
 				interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
 
@@ -22964,13 +20308,10 @@ class Line extends Object3D {
 		} else {
 			const start = Math.max(0, drawRange.start);
 			const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
-
 			for (let i = start, l = end - 1; i < l; i += step) {
 				vStart.fromBufferAttribute(positionAttribute, i);
 				vEnd.fromBufferAttribute(positionAttribute, i + 1);
-
 				const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
-
 				if (distSq > localThresholdSq) continue;
 				interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
 
@@ -22989,19 +20330,15 @@ class Line extends Object3D {
 			}
 		}
 	}
-
 	updateMorphTargets() {
 		const geometry = this.geometry;
 		const morphAttributes = geometry.morphAttributes;
 		const keys = Object.keys(morphAttributes);
-
 		if (keys.length > 0) {
 			const morphAttribute = morphAttributes[keys[0]];
-
 			if (morphAttribute !== undefined) {
 				this.morphTargetInfluences = [];
 				this.morphTargetDictionary = {};
-
 				for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
 					const name = morphAttribute[m].name || String(m);
 					this.morphTargetInfluences.push(0);
@@ -23010,44 +20347,36 @@ class Line extends Object3D {
 			}
 		}
 	}
-
 }
 
 const _start = /*@__PURE__*/new Vector3();
-
 const _end = /*@__PURE__*/new Vector3();
-
 class LineSegments extends Line {
 	constructor(geometry, material) {
 		super(geometry, material);
 		this.isLineSegments = true;
 		this.type = 'LineSegments';
 	}
-
 	computeLineDistances() {
-		const geometry = this.geometry; // we assume non-indexed geometry
+		const geometry = this.geometry;
+
+		// we assume non-indexed geometry
 
 		if (geometry.index === null) {
 			const positionAttribute = geometry.attributes.position;
 			const lineDistances = [];
-
 			for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
 				_start.fromBufferAttribute(positionAttribute, i);
-
 				_end.fromBufferAttribute(positionAttribute, i + 1);
-
 				lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
 				lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);
 			}
-
 			geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
 		} else {
 			console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
 		}
-
 		return this;
 	}
-
 }
 
 class LineLoop extends Line {
@@ -23056,7 +20385,6 @@ class LineLoop extends Line {
 		this.isLineLoop = true;
 		this.type = 'LineLoop';
 	}
-
 }
 
 class PointsMaterial extends Material {
@@ -23072,7 +20400,6 @@ class PointsMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.color.copy(source.color);
@@ -23083,17 +20410,12 @@ class PointsMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 const _inverseMatrix = /*@__PURE__*/new Matrix4();
-
 const _ray = /*@__PURE__*/new Ray();
-
 const _sphere = /*@__PURE__*/new Sphere();
-
 const _position$2 = /*@__PURE__*/new Vector3();
-
 class Points extends Object3D {
 	constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {
 		super();
@@ -23103,74 +20425,61 @@ class Points extends Object3D {
 		this.material = material;
 		this.updateMorphTargets();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.material = source.material;
 		this.geometry = source.geometry;
 		return this;
 	}
-
 	raycast(raycaster, intersects) {
 		const geometry = this.geometry;
 		const matrixWorld = this.matrixWorld;
 		const threshold = raycaster.params.Points.threshold;
-		const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray
+		const drawRange = geometry.drawRange;
 
-		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
+		// Checking boundingSphere distance to ray
 
+		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
 		_sphere.copy(geometry.boundingSphere);
-
 		_sphere.applyMatrix4(matrixWorld);
-
 		_sphere.radius += threshold;
-		if (raycaster.ray.intersectsSphere(_sphere) === false) return; //
+		if (raycaster.ray.intersectsSphere(_sphere) === false) return;
 
-		_inverseMatrix.copy(matrixWorld).invert();
+		//
 
+		_inverseMatrix.copy(matrixWorld).invert();
 		_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
-
 		const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
 		const localThresholdSq = localThreshold * localThreshold;
 		const index = geometry.index;
 		const attributes = geometry.attributes;
 		const positionAttribute = attributes.position;
-
 		if (index !== null) {
 			const start = Math.max(0, drawRange.start);
 			const end = Math.min(index.count, drawRange.start + drawRange.count);
-
 			for (let i = start, il = end; i < il; i++) {
 				const a = index.getX(i);
-
 				_position$2.fromBufferAttribute(positionAttribute, a);
-
 				testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
 			}
 		} else {
 			const start = Math.max(0, drawRange.start);
 			const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
-
 			for (let i = start, l = end; i < l; i++) {
 				_position$2.fromBufferAttribute(positionAttribute, i);
-
 				testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);
 			}
 		}
 	}
-
 	updateMorphTargets() {
 		const geometry = this.geometry;
 		const morphAttributes = geometry.morphAttributes;
 		const keys = Object.keys(morphAttributes);
-
 		if (keys.length > 0) {
 			const morphAttribute = morphAttributes[keys[0]];
-
 			if (morphAttribute !== undefined) {
 				this.morphTargetInfluences = [];
 				this.morphTargetDictionary = {};
-
 				for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
 					const name = morphAttribute[m].name || String(m);
 					this.morphTargetInfluences.push(0);
@@ -23179,17 +20488,12 @@ class Points extends Object3D {
 			}
 		}
 	}
-
 }
-
 function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
 	const rayPointDistanceSq = _ray.distanceSqToPoint(point);
-
 	if (rayPointDistanceSq < localThresholdSq) {
 		const intersectPoint = new Vector3();
-
 		_ray.closestPointToPoint(point, intersectPoint);
-
 		intersectPoint.applyMatrix4(matrixWorld);
 		const distance = raycaster.ray.origin.distanceTo(intersectPoint);
 		if (distance < raycaster.near || distance > raycaster.far) return;
@@ -23212,30 +20516,24 @@ class VideoTexture extends Texture {
 		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
 		this.generateMipmaps = false;
 		const scope = this;
-
 		function updateVideo() {
 			scope.needsUpdate = true;
 			video.requestVideoFrameCallback(updateVideo);
 		}
-
 		if ('requestVideoFrameCallback' in video) {
 			video.requestVideoFrameCallback(updateVideo);
 		}
 	}
-
 	clone() {
 		return new this.constructor(this.image).copy(this);
 	}
-
 	update() {
 		const video = this.image;
 		const hasVideoFrameCallback = ('requestVideoFrameCallback' in video);
-
 		if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
 			this.needsUpdate = true;
 		}
 	}
-
 }
 
 class FramebufferTexture extends Texture {
@@ -23251,7 +20549,6 @@ class FramebufferTexture extends Texture {
 		this.generateMipmaps = false;
 		this.needsUpdate = true;
 	}
-
 }
 
 class CompressedTexture extends Texture {
@@ -23262,15 +20559,18 @@ class CompressedTexture extends Texture {
 			width: width,
 			height: height
 		};
-		this.mipmaps = mipmaps; // no flipping for cube textures
+		this.mipmaps = mipmaps;
+
+		// no flipping for cube textures
 		// (also flipping doesn't work for compressed textures )
 
-		this.flipY = false; // can't generate mipmaps for compressed textures
+		this.flipY = false;
+
+		// can't generate mipmaps for compressed textures
 		// mips must be embedded in DDS files
 
 		this.generateMipmaps = false;
 	}
-
 }
 
 class CompressedArrayTexture extends CompressedTexture {
@@ -23280,7 +20580,6 @@ class CompressedArrayTexture extends CompressedTexture {
 		this.image.depth = depth;
 		this.wrapR = ClampToEdgeWrapping;
 	}
-
 }
 
 class CanvasTexture extends Texture {
@@ -23289,7 +20588,6 @@ class CanvasTexture extends Texture {
 		this.isCanvasTexture = true;
 		this.needsUpdate = true;
 	}
-
 }
 
 /**
@@ -23326,70 +20624,69 @@ class Curve {
 	constructor() {
 		this.type = 'Curve';
 		this.arcLengthDivisions = 200;
-	} // Virtual base class method to overwrite and implement in subclasses
-	//	- t [0 .. 1]
+	}
 
+	// Virtual base class method to overwrite and implement in subclasses
+	//	- t [0 .. 1]
 
 	getPoint() {
 		console.warn('THREE.Curve: .getPoint() not implemented.');
 		return null;
-	} // Get point at relative position in curve according to arc length
-	// - u [0 .. 1]
+	}
 
+	// Get point at relative position in curve according to arc length
+	// - u [0 .. 1]
 
 	getPointAt(u, optionalTarget) {
 		const t = this.getUtoTmapping(u);
 		return this.getPoint(t, optionalTarget);
-	} // Get sequence of points using getPoint( t )
+	}
 
+	// Get sequence of points using getPoint( t )
 
 	getPoints(divisions = 5) {
 		const points = [];
-
 		for (let d = 0; d <= divisions; d++) {
 			points.push(this.getPoint(d / divisions));
 		}
-
 		return points;
-	} // Get sequence of points using getPointAt( u )
+	}
 
+	// Get sequence of points using getPointAt( u )
 
 	getSpacedPoints(divisions = 5) {
 		const points = [];
-
 		for (let d = 0; d <= divisions; d++) {
 			points.push(this.getPointAt(d / divisions));
 		}
-
 		return points;
-	} // Get total curve arc length
+	}
 
+	// Get total curve arc length
 
 	getLength() {
 		const lengths = this.getLengths();
 		return lengths[lengths.length - 1];
-	} // Get list of cumulative segment lengths
+	}
 
+	// Get list of cumulative segment lengths
 
 	getLengths(divisions = this.arcLengthDivisions) {
 		if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
 			return this.cacheArcLengths;
 		}
-
 		this.needsUpdate = false;
 		const cache = [];
 		let current,
-				last = this.getPoint(0);
+			last = this.getPoint(0);
 		let sum = 0;
 		cache.push(0);
-
 		for (let p = 1; p <= divisions; p++) {
 			current = this.getPoint(p / divisions);
 			sum += current.distanceTo(last);
 			cache.push(sum);
 			last = current;
 		}
-
 		this.cacheArcLengths = cache;
 		return cache; // { sums: cache, sum: sum }; Sum is in the last element.
 	}
@@ -23397,8 +20694,9 @@ class Curve {
 	updateArcLengths() {
 		this.needsUpdate = true;
 		this.getLengths();
-	} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
+	}
 
+	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
 
 	getUtoTmapping(u, distance) {
 		const arcLengths = this.getLengths();
@@ -23410,53 +20708,61 @@ class Curve {
 			targetArcLength = distance;
 		} else {
 			targetArcLength = u * arcLengths[il - 1];
-		} // binary search for the index with largest value smaller than target u distance
+		}
 
+		// binary search for the index with largest value smaller than target u distance
 
 		let low = 0,
-				high = il - 1,
-				comparison;
-
+			high = il - 1,
+			comparison;
 		while (low <= high) {
 			i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
 
 			comparison = arcLengths[i] - targetArcLength;
-
 			if (comparison < 0) {
 				low = i + 1;
 			} else if (comparison > 0) {
 				high = i - 1;
 			} else {
 				high = i;
-				break; // DONE
+				break;
+
+				// DONE
 			}
 		}
 
 		i = high;
-
 		if (arcLengths[i] === targetArcLength) {
 			return i / (il - 1);
-		} // we could get finer grain at lengths, or use simple interpolation between two points
+		}
 
+		// we could get finer grain at lengths, or use simple interpolation between two points
 
 		const lengthBefore = arcLengths[i];
 		const lengthAfter = arcLengths[i + 1];
-		const segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points
+		const segmentLength = lengthAfter - lengthBefore;
+
+		// determine where we are between the 'before' and 'after' points
 
-		const segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t
+		const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
+
+		// add that fractional amount to t
 
 		const t = (i + segmentFraction) / (il - 1);
 		return t;
-	} // Returns a unit vector tangent at t
+	}
+
+	// Returns a unit vector tangent at t
 	// In case any sub curve does not implement its tangent derivation,
 	// 2 points a small delta apart will be used to find its gradient
 	// which seems to give a reasonable approximation
 
-
 	getTangent(t, optionalTarget) {
 		const delta = 0.0001;
 		let t1 = t - delta;
-		let t2 = t + delta; // Capping in case of danger
+		let t2 = t + delta;
+
+		// Capping in case of danger
 
 		if (t1 < 0) t1 = 0;
 		if (t2 > 1) t2 = 1;
@@ -23466,27 +20772,29 @@ class Curve {
 		tangent.copy(pt2).sub(pt1).normalize();
 		return tangent;
 	}
-
 	getTangentAt(u, optionalTarget) {
 		const t = this.getUtoTmapping(u);
 		return this.getTangent(t, optionalTarget);
 	}
-
 	computeFrenetFrames(segments, closed) {
 		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
+
 		const normal = new Vector3();
 		const tangents = [];
 		const normals = [];
 		const binormals = [];
 		const vec = new Vector3();
-		const mat = new Matrix4(); // compute the tangent vectors for each segment on the curve
+		const mat = new Matrix4();
+
+		// compute the tangent vectors for each segment on the curve
 
 		for (let i = 0; i <= segments; i++) {
 			const u = i / segments;
 			tangents[i] = this.getTangentAt(u, new Vector3());
-		} // select an initial normal vector perpendicular to the first tangent vector,
-		// and in the direction of the minimum tangent xyz component
+		}
 
+		// select an initial normal vector perpendicular to the first tangent vector,
+		// and in the direction of the minimum tangent xyz component
 
 		normals[0] = new Vector3();
 		binormals[0] = new Vector3();
@@ -23494,72 +20802,63 @@ class Curve {
 		const tx = Math.abs(tangents[0].x);
 		const ty = Math.abs(tangents[0].y);
 		const tz = Math.abs(tangents[0].z);
-
 		if (tx <= min) {
 			min = tx;
 			normal.set(1, 0, 0);
 		}
-
 		if (ty <= min) {
 			min = ty;
 			normal.set(0, 1, 0);
 		}
-
 		if (tz <= min) {
 			normal.set(0, 0, 1);
 		}
-
 		vec.crossVectors(tangents[0], normal).normalize();
 		normals[0].crossVectors(tangents[0], vec);
-		binormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve
+		binormals[0].crossVectors(tangents[0], normals[0]);
+
+		// compute the slowly-varying normal and binormal vectors for each segment on the curve
 
 		for (let i = 1; i <= segments; i++) {
 			normals[i] = normals[i - 1].clone();
 			binormals[i] = binormals[i - 1].clone();
 			vec.crossVectors(tangents[i - 1], tangents[i]);
-
 			if (vec.length() > Number.EPSILON) {
 				vec.normalize();
 				const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors
 
 				normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
 			}
-
 			binormals[i].crossVectors(tangents[i], normals[i]);
-		} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
+		}
 
+		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
 
 		if (closed === true) {
 			let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
 			theta /= segments;
-
 			if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
 				theta = -theta;
 			}
-
 			for (let i = 1; i <= segments; i++) {
 				// twist a little...
 				normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
 				binormals[i].crossVectors(tangents[i], normals[i]);
 			}
 		}
-
 		return {
 			tangents: tangents,
 			normals: normals,
 			binormals: binormals
 		};
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	copy(source) {
 		this.arcLengthDivisions = source.arcLengthDivisions;
 		return this;
 	}
-
 	toJSON() {
 		const data = {
 			metadata: {
@@ -23572,12 +20871,10 @@ class Curve {
 		data.type = this.type;
 		return data;
 	}
-
 	fromJSON(json) {
 		this.arcLengthDivisions = json.arcLengthDivisions;
 		return this;
 	}
-
 }
 
 class EllipseCurve extends Curve {
@@ -23594,17 +20891,15 @@ class EllipseCurve extends Curve {
 		this.aClockwise = aClockwise;
 		this.aRotation = aRotation;
 	}
-
 	getPoint(t, optionalTarget) {
 		const point = optionalTarget || new Vector2();
 		const twoPi = Math.PI * 2;
 		let deltaAngle = this.aEndAngle - this.aStartAngle;
-		const samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI
+		const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
 
+		// ensures that deltaAngle is 0 .. 2 PI
 		while (deltaAngle < 0) deltaAngle += twoPi;
-
 		while (deltaAngle > twoPi) deltaAngle -= twoPi;
-
 		if (deltaAngle < Number.EPSILON) {
 			if (samePoints) {
 				deltaAngle = 0;
@@ -23612,7 +20907,6 @@ class EllipseCurve extends Curve {
 				deltaAngle = twoPi;
 			}
 		}
-
 		if (this.aClockwise === true && !samePoints) {
 			if (deltaAngle === twoPi) {
 				deltaAngle = -twoPi;
@@ -23620,24 +20914,21 @@ class EllipseCurve extends Curve {
 				deltaAngle = deltaAngle - twoPi;
 			}
 		}
-
 		const angle = this.aStartAngle + t * deltaAngle;
 		let x = this.aX + this.xRadius * Math.cos(angle);
 		let y = this.aY + this.yRadius * Math.sin(angle);
-
 		if (this.aRotation !== 0) {
 			const cos = Math.cos(this.aRotation);
 			const sin = Math.sin(this.aRotation);
 			const tx = x - this.aX;
-			const ty = y - this.aY; // Rotate the point about the center of the ellipse.
+			const ty = y - this.aY;
 
+			// Rotate the point about the center of the ellipse.
 			x = tx * cos - ty * sin + this.aX;
 			y = tx * sin + ty * cos + this.aY;
 		}
-
 		return point.set(x, y);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.aX = source.aX;
@@ -23650,7 +20941,6 @@ class EllipseCurve extends Curve {
 		this.aRotation = source.aRotation;
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.aX = this.aX;
@@ -23663,7 +20953,6 @@ class EllipseCurve extends Curve {
 		data.aRotation = this.aRotation;
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.aX = json.aX;
@@ -23676,7 +20965,6 @@ class EllipseCurve extends Curve {
 		this.aRotation = json.aRotation;
 		return this;
 	}
-
 }
 
 class ArcCurve extends EllipseCurve {
@@ -23685,7 +20973,6 @@ class ArcCurve extends EllipseCurve {
 		this.isArcCurve = true;
 		this.type = 'ArcCurve';
 	}
-
 }
 
 /**
@@ -23709,9 +20996,10 @@ which can be placed in CurveUtils.
 
 function CubicPoly() {
 	let c0 = 0,
-			c1 = 0,
-			c2 = 0,
-			c3 = 0;
+		c1 = 0,
+		c2 = 0,
+		c3 = 0;
+
 	/*
 	 * Compute coefficients for a cubic polynomial
 	 *	 p(s) = c0 + c1*s + c2*s^2 + c3*s^3
@@ -23720,14 +21008,12 @@ function CubicPoly() {
 	 *	and
 	 *	 p'(0) = t0, p'(1) = t1.
 	 */
-
 	function init(x0, x1, t0, t1) {
 		c0 = x0;
 		c1 = t0;
 		c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
 		c3 = 2 * x0 - 2 * x1 + t0 + t1;
 	}
-
 	return {
 		initCatmullRom: function (x0, x1, x2, x3, tension) {
 			init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
@@ -23735,8 +21021,9 @@ function CubicPoly() {
 		initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {
 			// compute tangents when parameterized in [t1,t2]
 			let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
-			let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]
+			let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
 
+			// rescale tangents for parametrization in [0,1]
 			t1 *= dt1;
 			t2 *= dt1;
 			init(x1, x2, t1, t2);
@@ -23747,14 +21034,14 @@ function CubicPoly() {
 			return c0 + c1 * t + c2 * t2 + c3 * t3;
 		}
 	};
-} //
+}
 
+//
 
 const tmp = /*@__PURE__*/new Vector3();
 const px = /*@__PURE__*/new CubicPoly();
 const py = /*@__PURE__*/new CubicPoly();
 const pz = /*@__PURE__*/new CubicPoly();
-
 class CatmullRomCurve3 extends Curve {
 	constructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {
 		super();
@@ -23765,7 +21052,6 @@ class CatmullRomCurve3 extends Curve {
 		this.curveType = curveType;
 		this.tension = tension;
 	}
-
 	getPoint(t, optionalTarget = new Vector3()) {
 		const point = optionalTarget;
 		const points = this.points;
@@ -23773,14 +21059,12 @@ class CatmullRomCurve3 extends Curve {
 		const p = (l - (this.closed ? 0 : 1)) * t;
 		let intPoint = Math.floor(p);
 		let weight = p - intPoint;
-
 		if (this.closed) {
 			intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
 		} else if (weight === 0 && intPoint === l - 1) {
 			intPoint = l - 2;
 			weight = 1;
 		}
-
 		let p0, p3; // 4 points (p1 & p2 defined below)
 
 		if (this.closed || intPoint > 0) {
@@ -23790,10 +21074,8 @@ class CatmullRomCurve3 extends Curve {
 			tmp.subVectors(points[0], points[1]).add(points[0]);
 			p0 = tmp;
 		}
-
 		const p1 = points[intPoint % l];
 		const p2 = points[(intPoint + 1) % l];
-
 		if (this.closed || intPoint + 2 < l) {
 			p3 = points[(intPoint + 2) % l];
 		} else {
@@ -23801,14 +21083,14 @@ class CatmullRomCurve3 extends Curve {
 			tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
 			p3 = tmp;
 		}
-
 		if (this.curveType === 'centripetal' || this.curveType === 'chordal') {
 			// init Centripetal / Chordal Catmull-Rom
 			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
 			let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
 			let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
-			let dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points
+			let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
 
+			// safety check for repeated points
 			if (dt1 < 1e-4) dt1 = 1.0;
 			if (dt0 < 1e-4) dt0 = dt1;
 			if (dt2 < 1e-4) dt2 = dt1;
@@ -23820,107 +21102,92 @@ class CatmullRomCurve3 extends Curve {
 			py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
 			pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
 		}
-
 		point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
 		return point;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.points = [];
-
 		for (let i = 0, l = source.points.length; i < l; i++) {
 			const point = source.points[i];
 			this.points.push(point.clone());
 		}
-
 		this.closed = source.closed;
 		this.curveType = source.curveType;
 		this.tension = source.tension;
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.points = [];
-
 		for (let i = 0, l = this.points.length; i < l; i++) {
 			const point = this.points[i];
 			data.points.push(point.toArray());
 		}
-
 		data.closed = this.closed;
 		data.curveType = this.curveType;
 		data.tension = this.tension;
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.points = [];
-
 		for (let i = 0, l = json.points.length; i < l; i++) {
 			const point = json.points[i];
 			this.points.push(new Vector3().fromArray(point));
 		}
-
 		this.closed = json.closed;
 		this.curveType = json.curveType;
 		this.tension = json.tension;
 		return this;
 	}
-
 }
 
 /**
  * Bezier Curves formulas obtained from
  * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
  */
+
 function CatmullRom(t, p0, p1, p2, p3) {
 	const v0 = (p2 - p0) * 0.5;
 	const v1 = (p3 - p1) * 0.5;
 	const t2 = t * t;
 	const t3 = t * t2;
 	return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
-} //
+}
 
+//
 
 function QuadraticBezierP0(t, p) {
 	const k = 1 - t;
 	return k * k * p;
 }
-
 function QuadraticBezierP1(t, p) {
 	return 2 * (1 - t) * t * p;
 }
-
 function QuadraticBezierP2(t, p) {
 	return t * t * p;
 }
-
 function QuadraticBezier(t, p0, p1, p2) {
 	return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
-} //
+}
 
+//
 
 function CubicBezierP0(t, p) {
 	const k = 1 - t;
 	return k * k * k * p;
 }
-
 function CubicBezierP1(t, p) {
 	const k = 1 - t;
 	return 3 * k * k * t * p;
 }
-
 function CubicBezierP2(t, p) {
 	return 3 * (1 - t) * t * t * p;
 }
-
 function CubicBezierP3(t, p) {
 	return t * t * t * p;
 }
-
 function CubicBezier(t, p0, p1, p2, p3) {
 	return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
 }
@@ -23935,17 +21202,15 @@ class CubicBezierCurve extends Curve {
 		this.v2 = v2;
 		this.v3 = v3;
 	}
-
 	getPoint(t, optionalTarget = new Vector2()) {
 		const point = optionalTarget;
 		const v0 = this.v0,
-					v1 = this.v1,
-					v2 = this.v2,
-					v3 = this.v3;
+			v1 = this.v1,
+			v2 = this.v2,
+			v3 = this.v3;
 		point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
 		return point;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.v0.copy(source.v0);
@@ -23954,7 +21219,6 @@ class CubicBezierCurve extends Curve {
 		this.v3.copy(source.v3);
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.v0 = this.v0.toArray();
@@ -23963,7 +21227,6 @@ class CubicBezierCurve extends Curve {
 		data.v3 = this.v3.toArray();
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.v0.fromArray(json.v0);
@@ -23972,7 +21235,6 @@ class CubicBezierCurve extends Curve {
 		this.v3.fromArray(json.v3);
 		return this;
 	}
-
 }
 
 class CubicBezierCurve3 extends Curve {
@@ -23985,17 +21247,15 @@ class CubicBezierCurve3 extends Curve {
 		this.v2 = v2;
 		this.v3 = v3;
 	}
-
 	getPoint(t, optionalTarget = new Vector3()) {
 		const point = optionalTarget;
 		const v0 = this.v0,
-					v1 = this.v1,
-					v2 = this.v2,
-					v3 = this.v3;
+			v1 = this.v1,
+			v2 = this.v2,
+			v3 = this.v3;
 		point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
 		return point;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.v0.copy(source.v0);
@@ -24004,7 +21264,6 @@ class CubicBezierCurve3 extends Curve {
 		this.v3.copy(source.v3);
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.v0 = this.v0.toArray();
@@ -24013,7 +21272,6 @@ class CubicBezierCurve3 extends Curve {
 		data.v3 = this.v3.toArray();
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.v0.fromArray(json.v0);
@@ -24022,7 +21280,6 @@ class CubicBezierCurve3 extends Curve {
 		this.v3.fromArray(json.v3);
 		return this;
 	}
-
 }
 
 class LineCurve extends Curve {
@@ -24033,52 +21290,44 @@ class LineCurve extends Curve {
 		this.v1 = v1;
 		this.v2 = v2;
 	}
-
 	getPoint(t, optionalTarget = new Vector2()) {
 		const point = optionalTarget;
-
 		if (t === 1) {
 			point.copy(this.v2);
 		} else {
 			point.copy(this.v2).sub(this.v1);
 			point.multiplyScalar(t).add(this.v1);
 		}
-
 		return point;
-	} // Line curve is linear, so we can overwrite default getPointAt
-
+	}
 
+	// Line curve is linear, so we can overwrite default getPointAt
 	getPointAt(u, optionalTarget) {
 		return this.getPoint(u, optionalTarget);
 	}
-
 	getTangent(t, optionalTarget) {
 		const tangent = optionalTarget || new Vector2();
 		tangent.copy(this.v2).sub(this.v1).normalize();
 		return tangent;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.v1.copy(source.v1);
 		this.v2.copy(source.v2);
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.v1 = this.v1.toArray();
 		data.v2 = this.v2.toArray();
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.v1.fromArray(json.v1);
 		this.v2.fromArray(json.v2);
 		return this;
 	}
-
 }
 
 class LineCurve3 extends Curve {
@@ -24089,46 +21338,38 @@ class LineCurve3 extends Curve {
 		this.v1 = v1;
 		this.v2 = v2;
 	}
-
 	getPoint(t, optionalTarget = new Vector3()) {
 		const point = optionalTarget;
-
 		if (t === 1) {
 			point.copy(this.v2);
 		} else {
 			point.copy(this.v2).sub(this.v1);
 			point.multiplyScalar(t).add(this.v1);
 		}
-
 		return point;
-	} // Line curve is linear, so we can overwrite default getPointAt
-
-
+	}
+	// Line curve is linear, so we can overwrite default getPointAt
 	getPointAt(u, optionalTarget) {
 		return this.getPoint(u, optionalTarget);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.v1.copy(source.v1);
 		this.v2.copy(source.v2);
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.v1 = this.v1.toArray();
 		data.v2 = this.v2.toArray();
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.v1.fromArray(json.v1);
 		this.v2.fromArray(json.v2);
 		return this;
 	}
-
 }
 
 class QuadraticBezierCurve extends Curve {
@@ -24140,16 +21381,14 @@ class QuadraticBezierCurve extends Curve {
 		this.v1 = v1;
 		this.v2 = v2;
 	}
-
 	getPoint(t, optionalTarget = new Vector2()) {
 		const point = optionalTarget;
 		const v0 = this.v0,
-					v1 = this.v1,
-					v2 = this.v2;
+			v1 = this.v1,
+			v2 = this.v2;
 		point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
 		return point;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.v0.copy(source.v0);
@@ -24157,7 +21396,6 @@ class QuadraticBezierCurve extends Curve {
 		this.v2.copy(source.v2);
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.v0 = this.v0.toArray();
@@ -24165,7 +21403,6 @@ class QuadraticBezierCurve extends Curve {
 		data.v2 = this.v2.toArray();
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.v0.fromArray(json.v0);
@@ -24173,7 +21410,6 @@ class QuadraticBezierCurve extends Curve {
 		this.v2.fromArray(json.v2);
 		return this;
 	}
-
 }
 
 class QuadraticBezierCurve3 extends Curve {
@@ -24185,16 +21421,14 @@ class QuadraticBezierCurve3 extends Curve {
 		this.v1 = v1;
 		this.v2 = v2;
 	}
-
 	getPoint(t, optionalTarget = new Vector3()) {
 		const point = optionalTarget;
 		const v0 = this.v0,
-					v1 = this.v1,
-					v2 = this.v2;
+			v1 = this.v1,
+			v2 = this.v2;
 		point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
 		return point;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.v0.copy(source.v0);
@@ -24202,7 +21436,6 @@ class QuadraticBezierCurve3 extends Curve {
 		this.v2.copy(source.v2);
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.v0 = this.v0.toArray();
@@ -24210,7 +21443,6 @@ class QuadraticBezierCurve3 extends Curve {
 		data.v2 = this.v2.toArray();
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.v0.fromArray(json.v0);
@@ -24218,7 +21450,6 @@ class QuadraticBezierCurve3 extends Curve {
 		this.v2.fromArray(json.v2);
 		return this;
 	}
-
 }
 
 class SplineCurve extends Curve {
@@ -24228,7 +21459,6 @@ class SplineCurve extends Curve {
 		this.type = 'SplineCurve';
 		this.points = points;
 	}
-
 	getPoint(t, optionalTarget = new Vector2()) {
 		const point = optionalTarget;
 		const points = this.points;
@@ -24242,43 +21472,33 @@ class SplineCurve extends Curve {
 		point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
 		return point;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.points = [];
-
 		for (let i = 0, l = source.points.length; i < l; i++) {
 			const point = source.points[i];
 			this.points.push(point.clone());
 		}
-
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.points = [];
-
 		for (let i = 0, l = this.points.length; i < l; i++) {
 			const point = this.points[i];
 			data.points.push(point.toArray());
 		}
-
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.points = [];
-
 		for (let i = 0, l = json.points.length; i < l; i++) {
 			const point = json.points[i];
 			this.points.push(new Vector2().fromArray(point));
 		}
-
 		return this;
 	}
-
 }
 
 var Curves = /*#__PURE__*/Object.freeze({
@@ -24311,28 +21531,30 @@ class CurvePath extends Curve {
 	add(curve) {
 		this.curves.push(curve);
 	}
-
 	closePath() {
 		// Add a line curve if start and end of lines are not connected
 		const startPoint = this.curves[0].getPoint(0);
 		const endPoint = this.curves[this.curves.length - 1].getPoint(1);
-
 		if (!startPoint.equals(endPoint)) {
 			this.curves.push(new LineCurve(endPoint, startPoint));
 		}
-	} // To get accurate point with reference to
+	}
+
+	// To get accurate point with reference to
 	// entire path distance at time t,
 	// following has to be done:
+
 	// 1. Length of each sub path have to be known
 	// 2. Locate and identify type of curve
 	// 3. Get t for the curve
 	// 4. Return curve.getPointAt(t')
 
-
 	getPoint(t, optionalTarget) {
 		const d = t * this.getLength();
 		const curveLengths = this.getCurveLengths();
-		let i = 0; // To think about boundaries points.
+		let i = 0;
+
+		// To think about boundaries points.
 
 		while (i < curveLengths.length) {
 			if (curveLengths[i] >= d) {
@@ -24342,73 +21564,68 @@ class CurvePath extends Curve {
 				const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
 				return curve.getPointAt(u, optionalTarget);
 			}
-
 			i++;
 		}
+		return null;
 
-		return null; // loop where sum != 0, sum > d , sum+1 <d
-	} // We cannot use the default THREE.Curve getPoint() with getLength() because in
+		// loop where sum != 0, sum > d , sum+1 <d
+	}
+
+	// We cannot use the default THREE.Curve getPoint() with getLength() because in
 	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
 	// getPoint() depends on getLength
 
-
 	getLength() {
 		const lens = this.getCurveLengths();
 		return lens[lens.length - 1];
-	} // cacheLengths must be recalculated.
-
+	}
 
+	// cacheLengths must be recalculated.
 	updateArcLengths() {
 		this.needsUpdate = true;
 		this.cacheLengths = null;
 		this.getCurveLengths();
-	} // Compute lengths and cache them
-	// We cannot overwrite getLengths() because UtoT mapping uses it.
+	}
 
+	// Compute lengths and cache them
+	// We cannot overwrite getLengths() because UtoT mapping uses it.
 
 	getCurveLengths() {
 		// We use cache values if curves and cache array are same length
+
 		if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
 			return this.cacheLengths;
-		} // Get length of sub-curve
-		// Push sums into cached array
+		}
 
+		// Get length of sub-curve
+		// Push sums into cached array
 
 		const lengths = [];
 		let sums = 0;
-
 		for (let i = 0, l = this.curves.length; i < l; i++) {
 			sums += this.curves[i].getLength();
 			lengths.push(sums);
 		}
-
 		this.cacheLengths = lengths;
 		return lengths;
 	}
-
 	getSpacedPoints(divisions = 40) {
 		const points = [];
-
 		for (let i = 0; i <= divisions; i++) {
 			points.push(this.getPoint(i / divisions));
 		}
-
 		if (this.autoClose) {
 			points.push(points[0]);
 		}
-
 		return points;
 	}
-
 	getPoints(divisions = 12) {
 		const points = [];
 		let last;
-
 		for (let i = 0, curves = this.curves; i < curves.length; i++) {
 			const curve = curves[i];
 			const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
 			const pts = curve.getPoints(resolution);
-
 			for (let j = 0; j < pts.length; j++) {
 				const point = pts[j];
 				if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates
@@ -24417,53 +21634,41 @@ class CurvePath extends Curve {
 				last = point;
 			}
 		}
-
 		if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
 			points.push(points[0]);
 		}
-
 		return points;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.curves = [];
-
 		for (let i = 0, l = source.curves.length; i < l; i++) {
 			const curve = source.curves[i];
 			this.curves.push(curve.clone());
 		}
-
 		this.autoClose = source.autoClose;
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.autoClose = this.autoClose;
 		data.curves = [];
-
 		for (let i = 0, l = this.curves.length; i < l; i++) {
 			const curve = this.curves[i];
 			data.curves.push(curve.toJSON());
 		}
-
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.autoClose = json.autoClose;
 		this.curves = [];
-
 		for (let i = 0, l = json.curves.length; i < l; i++) {
 			const curve = json.curves[i];
 			this.curves.push(new Curves[curve.type]().fromJSON(curve));
 		}
-
 		return this;
 	}
-
 }
 
 class Path extends CurvePath {
@@ -24471,114 +21676,92 @@ class Path extends CurvePath {
 		super();
 		this.type = 'Path';
 		this.currentPoint = new Vector2();
-
 		if (points) {
 			this.setFromPoints(points);
 		}
 	}
-
 	setFromPoints(points) {
 		this.moveTo(points[0].x, points[0].y);
-
 		for (let i = 1, l = points.length; i < l; i++) {
 			this.lineTo(points[i].x, points[i].y);
 		}
-
 		return this;
 	}
-
 	moveTo(x, y) {
 		this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?
 
 		return this;
 	}
-
 	lineTo(x, y) {
 		const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
 		this.curves.push(curve);
 		this.currentPoint.set(x, y);
 		return this;
 	}
-
 	quadraticCurveTo(aCPx, aCPy, aX, aY) {
 		const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
 		this.curves.push(curve);
 		this.currentPoint.set(aX, aY);
 		return this;
 	}
-
 	bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
 		const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
 		this.curves.push(curve);
 		this.currentPoint.set(aX, aY);
 		return this;
 	}
-
-	splineThru(pts
-	/*Array of Vector*/
-	) {
+	splineThru(pts /*Array of Vector*/) {
 		const npts = [this.currentPoint.clone()].concat(pts);
 		const curve = new SplineCurve(npts);
 		this.curves.push(curve);
 		this.currentPoint.copy(pts[pts.length - 1]);
 		return this;
 	}
-
 	arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
 		const x0 = this.currentPoint.x;
 		const y0 = this.currentPoint.y;
 		this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
 		return this;
 	}
-
 	absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
 		this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
 		return this;
 	}
-
 	ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
 		const x0 = this.currentPoint.x;
 		const y0 = this.currentPoint.y;
 		this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
 		return this;
 	}
-
 	absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
 		const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
-
 		if (this.curves.length > 0) {
 			// if a previous curve is present, attempt to join
 			const firstPoint = curve.getPoint(0);
-
 			if (!firstPoint.equals(this.currentPoint)) {
 				this.lineTo(firstPoint.x, firstPoint.y);
 			}
 		}
-
 		this.curves.push(curve);
 		const lastPoint = curve.getPoint(1);
 		this.currentPoint.copy(lastPoint);
 		return this;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.currentPoint.copy(source.currentPoint);
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.currentPoint = this.currentPoint.toArray();
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.currentPoint.fromArray(json.currentPoint);
 		return this;
 	}
-
 }
 
 class LatheGeometry extends BufferGeometry {
@@ -24591,15 +21774,21 @@ class LatheGeometry extends BufferGeometry {
 			phiStart: phiStart,
 			phiLength: phiLength
 		};
-		segments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]
+		segments = Math.floor(segments);
+
+		// clamp phiLength so it's in range of [ 0, 2PI ]
 
-		phiLength = clamp(phiLength, 0, Math.PI * 2); // buffers
+		phiLength = clamp(phiLength, 0, Math.PI * 2);
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const uvs = [];
 		const initNormals = [];
-		const normals = []; // helper variables
+		const normals = [];
+
+		// helper variables
 
 		const inverseSegments = 1.0 / segments;
 		const vertex = new Vector3();
@@ -24608,12 +21797,15 @@ class LatheGeometry extends BufferGeometry {
 		const curNormal = new Vector3();
 		const prevNormal = new Vector3();
 		let dx = 0;
-		let dy = 0; // pre-compute normals for initial "meridian"
+		let dy = 0;
+
+		// pre-compute normals for initial "meridian"
 
 		for (let j = 0; j <= points.length - 1; j++) {
 			switch (j) {
 				case 0:
 					// special handling for 1st vertex on path
+
 					dx = points[j + 1].x - points[j].x;
 					dy = points[j + 1].y - points[j].y;
 					normal.x = dy * 1.0;
@@ -24623,14 +21815,14 @@ class LatheGeometry extends BufferGeometry {
 					normal.normalize();
 					initNormals.push(normal.x, normal.y, normal.z);
 					break;
-
 				case points.length - 1:
 					// special handling for last Vertex on path
+
 					initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
 					break;
-
 				default:
 					// default handling for all vertices in between
+
 					dx = points[j + 1].x - points[j].x;
 					dy = points[j + 1].y - points[j].y;
 					normal.x = dy * 1.0;
@@ -24644,32 +21836,38 @@ class LatheGeometry extends BufferGeometry {
 					initNormals.push(normal.x, normal.y, normal.z);
 					prevNormal.copy(curNormal);
 			}
-		} // generate vertices, uvs and normals
+		}
 
+		// generate vertices, uvs and normals
 
 		for (let i = 0; i <= segments; i++) {
 			const phi = phiStart + i * inverseSegments * phiLength;
 			const sin = Math.sin(phi);
 			const cos = Math.cos(phi);
-
 			for (let j = 0; j <= points.length - 1; j++) {
 				// vertex
+
 				vertex.x = points[j].x * sin;
 				vertex.y = points[j].y;
 				vertex.z = points[j].x * cos;
-				vertices.push(vertex.x, vertex.y, vertex.z); // uv
+				vertices.push(vertex.x, vertex.y, vertex.z);
+
+				// uv
 
 				uv.x = i / segments;
 				uv.y = j / (points.length - 1);
-				uvs.push(uv.x, uv.y); // normal
+				uvs.push(uv.x, uv.y);
+
+				// normal
 
 				const x = initNormals[3 * j + 0] * sin;
 				const y = initNormals[3 * j + 1];
 				const z = initNormals[3 * j + 0] * cos;
 				normals.push(x, y, z);
 			}
-		} // indices
+		}
 
+		// indices
 
 		for (let i = 0; i < segments; i++) {
 			for (let j = 0; j < points.length - 1; j++) {
@@ -24677,24 +21875,25 @@ class LatheGeometry extends BufferGeometry {
 				const a = base;
 				const b = base + points.length;
 				const c = base + points.length + 1;
-				const d = base + 1; // faces
+				const d = base + 1;
+
+				// faces
 
 				indices.push(a, b, d);
 				indices.push(c, d, b);
 			}
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 	}
-
 	static fromJSON(data) {
 		return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
 	}
-
 }
 
 class CapsuleGeometry extends LatheGeometry {
@@ -24711,11 +21910,9 @@ class CapsuleGeometry extends LatheGeometry {
 			radialSegments: radialSegments
 		};
 	}
-
 	static fromJSON(data) {
 		return new CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
 	}
-
 }
 
 class CircleGeometry extends BufferGeometry {
@@ -24728,50 +21925,61 @@ class CircleGeometry extends BufferGeometry {
 			thetaStart: thetaStart,
 			thetaLength: thetaLength
 		};
-		segments = Math.max(3, segments); // buffers
+		segments = Math.max(3, segments);
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
-		const uvs = []; // helper variables
+		const uvs = [];
+
+		// helper variables
 
 		const vertex = new Vector3();
-		const uv = new Vector2(); // center point
+		const uv = new Vector2();
+
+		// center point
 
 		vertices.push(0, 0, 0);
 		normals.push(0, 0, 1);
 		uvs.push(0.5, 0.5);
-
 		for (let s = 0, i = 3; s <= segments; s++, i += 3) {
-			const segment = thetaStart + s / segments * thetaLength; // vertex
+			const segment = thetaStart + s / segments * thetaLength;
+
+			// vertex
 
 			vertex.x = radius * Math.cos(segment);
 			vertex.y = radius * Math.sin(segment);
-			vertices.push(vertex.x, vertex.y, vertex.z); // normal
+			vertices.push(vertex.x, vertex.y, vertex.z);
+
+			// normal
 
-			normals.push(0, 0, 1); // uvs
+			normals.push(0, 0, 1);
+
+			// uvs
 
 			uv.x = (vertices[i] / radius + 1) / 2;
 			uv.y = (vertices[i + 1] / radius + 1) / 2;
 			uvs.push(uv.x, uv.y);
-		} // indices
+		}
 
+		// indices
 
 		for (let i = 1; i <= segments; i++) {
 			indices.push(i, i + 1, 0);
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 	}
-
 	static fromJSON(data) {
 		return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
 	}
-
 }
 
 class CylinderGeometry extends BufferGeometry {
@@ -24790,89 +21998,115 @@ class CylinderGeometry extends BufferGeometry {
 		};
 		const scope = this;
 		radialSegments = Math.floor(radialSegments);
-		heightSegments = Math.floor(heightSegments); // buffers
+		heightSegments = Math.floor(heightSegments);
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
-		const uvs = []; // helper variables
+		const uvs = [];
+
+		// helper variables
 
 		let index = 0;
 		const indexArray = [];
 		const halfHeight = height / 2;
-		let groupStart = 0; // generate geometry
+		let groupStart = 0;
 
-		generateTorso();
+		// generate geometry
 
+		generateTorso();
 		if (openEnded === false) {
 			if (radiusTop > 0) generateCap(true);
 			if (radiusBottom > 0) generateCap(false);
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
-
 		function generateTorso() {
 			const normal = new Vector3();
 			const vertex = new Vector3();
-			let groupCount = 0; // this will be used to calculate the normal
+			let groupCount = 0;
+
+			// this will be used to calculate the normal
+			const slope = (radiusBottom - radiusTop) / height;
 
-			const slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs
+			// generate vertices, normals and uvs
 
 			for (let y = 0; y <= heightSegments; y++) {
 				const indexRow = [];
-				const v = y / heightSegments; // calculate the radius of the current row
+				const v = y / heightSegments;
 
-				const radius = v * (radiusBottom - radiusTop) + radiusTop;
+				// calculate the radius of the current row
 
+				const radius = v * (radiusBottom - radiusTop) + radiusTop;
 				for (let x = 0; x <= radialSegments; x++) {
 					const u = x / radialSegments;
 					const theta = u * thetaLength + thetaStart;
 					const sinTheta = Math.sin(theta);
-					const cosTheta = Math.cos(theta); // vertex
+					const cosTheta = Math.cos(theta);
+
+					// vertex
 
 					vertex.x = radius * sinTheta;
 					vertex.y = -v * height + halfHeight;
 					vertex.z = radius * cosTheta;
-					vertices.push(vertex.x, vertex.y, vertex.z); // normal
+					vertices.push(vertex.x, vertex.y, vertex.z);
+
+					// normal
 
 					normal.set(sinTheta, slope, cosTheta).normalize();
-					normals.push(normal.x, normal.y, normal.z); // uv
+					normals.push(normal.x, normal.y, normal.z);
 
-					uvs.push(u, 1 - v); // save index of vertex in respective row
+					// uv
+
+					uvs.push(u, 1 - v);
+
+					// save index of vertex in respective row
 
 					indexRow.push(index++);
-				} // now save vertices of the row in our index array
+				}
 
+				// now save vertices of the row in our index array
 
 				indexArray.push(indexRow);
-			} // generate indices
+			}
 
+			// generate indices
 
 			for (let x = 0; x < radialSegments; x++) {
 				for (let y = 0; y < heightSegments; y++) {
 					// we use the index array to access the correct indices
+
 					const a = indexArray[y][x];
 					const b = indexArray[y + 1][x];
 					const c = indexArray[y + 1][x + 1];
-					const d = indexArray[y][x + 1]; // faces
+					const d = indexArray[y][x + 1];
+
+					// faces
 
 					indices.push(a, b, d);
-					indices.push(b, c, d); // update group counter
+					indices.push(b, c, d);
+
+					// update group counter
 
 					groupCount += 6;
 				}
-			} // add a group to the geometry. this will ensure multi material support
+			}
+
+			// add a group to the geometry. this will ensure multi material support
 
+			scope.addGroup(groupStart, groupCount, 0);
 
-			scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups
+			// calculate new start value for groups
 
 			groupStart += groupCount;
 		}
-
 		function generateCap(top) {
 			// save the index of the first center vertex
 			const centerIndexStart = index;
@@ -24880,71 +22114,92 @@ class CylinderGeometry extends BufferGeometry {
 			const vertex = new Vector3();
 			let groupCount = 0;
 			const radius = top === true ? radiusTop : radiusBottom;
-			const sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.
+			const sign = top === true ? 1 : -1;
+
+			// first we generate the center vertex data of the cap.
 			// because the geometry needs one set of uvs per face,
 			// we must generate a center vertex per face/segment
 
 			for (let x = 1; x <= radialSegments; x++) {
 				// vertex
-				vertices.push(0, halfHeight * sign, 0); // normal
 
-				normals.push(0, sign, 0); // uv
+				vertices.push(0, halfHeight * sign, 0);
+
+				// normal
+
+				normals.push(0, sign, 0);
+
+				// uv
+
+				uvs.push(0.5, 0.5);
 
-				uvs.push(0.5, 0.5); // increase index
+				// increase index
 
 				index++;
-			} // save the index of the last center vertex
+			}
 
+			// save the index of the last center vertex
+			const centerIndexEnd = index;
 
-			const centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs
+			// now we generate the surrounding vertices, normals and uvs
 
 			for (let x = 0; x <= radialSegments; x++) {
 				const u = x / radialSegments;
 				const theta = u * thetaLength + thetaStart;
 				const cosTheta = Math.cos(theta);
-				const sinTheta = Math.sin(theta); // vertex
+				const sinTheta = Math.sin(theta);
+
+				// vertex
 
 				vertex.x = radius * sinTheta;
 				vertex.y = halfHeight * sign;
 				vertex.z = radius * cosTheta;
-				vertices.push(vertex.x, vertex.y, vertex.z); // normal
+				vertices.push(vertex.x, vertex.y, vertex.z);
 
-				normals.push(0, sign, 0); // uv
+				// normal
+
+				normals.push(0, sign, 0);
+
+				// uv
 
 				uv.x = cosTheta * 0.5 + 0.5;
 				uv.y = sinTheta * 0.5 * sign + 0.5;
-				uvs.push(uv.x, uv.y); // increase index
+				uvs.push(uv.x, uv.y);
+
+				// increase index
 
 				index++;
-			} // generate indices
+			}
 
+			// generate indices
 
 			for (let x = 0; x < radialSegments; x++) {
 				const c = centerIndexStart + x;
 				const i = centerIndexEnd + x;
-
 				if (top === true) {
 					// face top
+
 					indices.push(i, i + 1, c);
 				} else {
 					// face bottom
+
 					indices.push(i + 1, i, c);
 				}
-
 				groupCount += 3;
-			} // add a group to the geometry. this will ensure multi material support
+			}
 
+			// add a group to the geometry. this will ensure multi material support
 
-			scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups
+			scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
+
+			// calculate new start value for groups
 
 			groupStart += groupCount;
 		}
 	}
-
 	static fromJSON(data) {
 		return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
 	}
-
 }
 
 class ConeGeometry extends CylinderGeometry {
@@ -24961,11 +22216,9 @@ class ConeGeometry extends CylinderGeometry {
 			thetaLength: thetaLength
 		};
 	}
-
 	static fromJSON(data) {
 		return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
 	}
-
 }
 
 class PolyhedronGeometry extends BufferGeometry {
@@ -24977,54 +22230,71 @@ class PolyhedronGeometry extends BufferGeometry {
 			indices: indices,
 			radius: radius,
 			detail: detail
-		}; // default buffer data
+		};
+
+		// default buffer data
 
 		const vertexBuffer = [];
-		const uvBuffer = []; // the subdivision creates the vertex buffer data
+		const uvBuffer = [];
+
+		// the subdivision creates the vertex buffer data
+
+		subdivide(detail);
+
+		// all vertices should lie on a conceptual sphere with a given radius
 
-		subdivide(detail); // all vertices should lie on a conceptual sphere with a given radius
+		applyRadius(radius);
 
-		applyRadius(radius); // finally, create the uv data
+		// finally, create the uv data
 
-		generateUVs(); // build non-indexed geometry
+		generateUVs();
+
+		// build non-indexed geometry
 
 		this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));
-
 		if (detail === 0) {
 			this.computeVertexNormals(); // flat normals
 		} else {
 			this.normalizeNormals(); // smooth normals
-		} // helper functions
+		}
 
+		// helper functions
 
 		function subdivide(detail) {
 			const a = new Vector3();
 			const b = new Vector3();
-			const c = new Vector3(); // iterate over all faces and apply a subdivision with the given detail value
+			const c = new Vector3();
+
+			// iterate over all faces and apply a subdivision with the given detail value
 
 			for (let i = 0; i < indices.length; i += 3) {
 				// get the vertices of the face
+
 				getVertexByIndex(indices[i + 0], a);
 				getVertexByIndex(indices[i + 1], b);
-				getVertexByIndex(indices[i + 2], c); // perform subdivision
+				getVertexByIndex(indices[i + 2], c);
+
+				// perform subdivision
 
 				subdivideFace(a, b, c, detail);
 			}
 		}
-
 		function subdivideFace(a, b, c, detail) {
-			const cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision
+			const cols = detail + 1;
 
-			const v = []; // construct all of the vertices for this subdivision
+			// we use this multidimensional array as a data structure for creating the subdivision
+
+			const v = [];
+
+			// construct all of the vertices for this subdivision
 
 			for (let i = 0; i <= cols; i++) {
 				v[i] = [];
 				const aj = a.clone().lerp(c, i / cols);
 				const bj = b.clone().lerp(c, i / cols);
 				const rows = cols - i;
-
 				for (let j = 0; j <= rows; j++) {
 					if (j === 0 && i === cols) {
 						v[i][j] = aj;
@@ -25032,13 +22302,13 @@ class PolyhedronGeometry extends BufferGeometry {
 						v[i][j] = aj.clone().lerp(bj, j / rows);
 					}
 				}
-			} // construct all of the faces
+			}
 
+			// construct all of the faces
 
 			for (let i = 0; i < cols; i++) {
 				for (let j = 0; j < 2 * (cols - i) - 1; j++) {
 					const k = Math.floor(j / 2);
-
 					if (j % 2 === 0) {
 						pushVertex(v[i][k + 1]);
 						pushVertex(v[i + 1][k]);
@@ -25051,9 +22321,10 @@ class PolyhedronGeometry extends BufferGeometry {
 				}
 			}
 		}
-
 		function applyRadius(radius) {
-			const vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex
+			const vertex = new Vector3();
+
+			// iterate over the entire buffer and apply the radius to each vertex
 
 			for (let i = 0; i < vertexBuffer.length; i += 3) {
 				vertex.x = vertexBuffer[i + 0];
@@ -25065,10 +22336,8 @@ class PolyhedronGeometry extends BufferGeometry {
 				vertexBuffer[i + 2] = vertex.z;
 			}
 		}
-
 		function generateUVs() {
 			const vertex = new Vector3();
-
 			for (let i = 0; i < vertexBuffer.length; i += 3) {
 				vertex.x = vertexBuffer[i + 0];
 				vertex.y = vertexBuffer[i + 1];
@@ -25077,20 +22346,22 @@ class PolyhedronGeometry extends BufferGeometry {
 				const v = inclination(vertex) / Math.PI + 0.5;
 				uvBuffer.push(u, 1 - v);
 			}
-
 			correctUVs();
 			correctSeam();
 		}
-
 		function correctSeam() {
 			// handle case when face straddles the seam, see #3269
+
 			for (let i = 0; i < uvBuffer.length; i += 6) {
 				// uv data of a single face
+
 				const x0 = uvBuffer[i + 0];
 				const x1 = uvBuffer[i + 2];
 				const x2 = uvBuffer[i + 4];
 				const max = Math.max(x0, x1, x2);
-				const min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary
+				const min = Math.min(x0, x1, x2);
+
+				// 0.9 is somewhat arbitrary
 
 				if (max > 0.9 && min < 0.1) {
 					if (x0 < 0.2) uvBuffer[i + 0] += 1;
@@ -25099,18 +22370,15 @@ class PolyhedronGeometry extends BufferGeometry {
 				}
 			}
 		}
-
 		function pushVertex(vertex) {
 			vertexBuffer.push(vertex.x, vertex.y, vertex.z);
 		}
-
 		function getVertexByIndex(index, vertex) {
 			const stride = index * 3;
 			vertex.x = vertices[stride + 0];
 			vertex.y = vertices[stride + 1];
 			vertex.z = vertices[stride + 2];
 		}
-
 		function correctUVs() {
 			const a = new Vector3();
 			const b = new Vector3();
@@ -25119,7 +22387,6 @@ class PolyhedronGeometry extends BufferGeometry {
 			const uvA = new Vector2();
 			const uvB = new Vector2();
 			const uvC = new Vector2();
-
 			for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
 				a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
 				b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
@@ -25134,42 +22401,44 @@ class PolyhedronGeometry extends BufferGeometry {
 				correctUV(uvC, j + 4, c, azi);
 			}
 		}
-
 		function correctUV(uv, stride, vector, azimuth) {
 			if (azimuth < 0 && uv.x === 1) {
 				uvBuffer[stride] = uv.x - 1;
 			}
-
 			if (vector.x === 0 && vector.z === 0) {
 				uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
 			}
-		} // Angle around the Y axis, counter-clockwise when looking from above.
+		}
 
+		// Angle around the Y axis, counter-clockwise when looking from above.
 
 		function azimuth(vector) {
 			return Math.atan2(vector.z, -vector.x);
-		} // Angle above the XZ plane.
+		}
 
+		// Angle above the XZ plane.
 
 		function inclination(vector) {
 			return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
 		}
 	}
-
 	static fromJSON(data) {
 		return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
 	}
-
 }
 
 class DodecahedronGeometry extends PolyhedronGeometry {
 	constructor(radius = 1, detail = 0) {
 		const t = (1 + Math.sqrt(5)) / 2;
 		const r = 1 / t;
-		const vertices = [// (±1, ±1, ±1)
-		-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)
-		0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)
-		-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)
+		const vertices = [
+		// (±1, ±1, ±1)
+		-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1,
+		// (0, ±1/φ, ±φ)
+		0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t,
+		// (±1/φ, ±φ, 0)
+		-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0,
+		// (±φ, 0, ±1/φ)
 		-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];
 		const indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
 		super(vertices, indices, radius, detail);
@@ -25179,21 +22448,15 @@ class DodecahedronGeometry extends PolyhedronGeometry {
 			detail: detail
 		};
 	}
-
 	static fromJSON(data) {
 		return new DodecahedronGeometry(data.radius, data.detail);
 	}
-
 }
 
 const _v0 = /*@__PURE__*/new Vector3();
-
 const _v1$1 = /*@__PURE__*/new Vector3();
-
 const _normal = /*@__PURE__*/new Vector3();
-
 const _triangle = /*@__PURE__*/new Triangle();
-
 class EdgesGeometry extends BufferGeometry {
 	constructor(geometry = null, thresholdAngle = 1) {
 		super();
@@ -25202,7 +22465,6 @@ class EdgesGeometry extends BufferGeometry {
 			geometry: geometry,
 			thresholdAngle: thresholdAngle
 		};
-
 		if (geometry !== null) {
 			const precisionPoints = 4;
 			const precision = Math.pow(10, precisionPoints);
@@ -25215,7 +22477,6 @@ class EdgesGeometry extends BufferGeometry {
 			const hashes = new Array(3);
 			const edgeData = {};
 			const vertices = [];
-
 			for (let i = 0; i < indexCount; i += 3) {
 				if (indexAttr) {
 					indexArr[0] = indexAttr.getX(i);
@@ -25226,7 +22487,6 @@ class EdgesGeometry extends BufferGeometry {
 					indexArr[1] = i + 1;
 					indexArr[2] = i + 2;
 				}
-
 				const {
 					a,
 					b,
@@ -25235,19 +22495,19 @@ class EdgesGeometry extends BufferGeometry {
 				a.fromBufferAttribute(positionAttr, indexArr[0]);
 				b.fromBufferAttribute(positionAttr, indexArr[1]);
 				c.fromBufferAttribute(positionAttr, indexArr[2]);
+				_triangle.getNormal(_normal);
 
-				_triangle.getNormal(_normal); // create hashes for the edge from the vertices
-
-
+				// create hashes for the edge from the vertices
 				hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
 				hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
-				hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles
+				hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
 
+				// skip degenerate triangles
 				if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
 					continue;
-				} // iterate over every edge
-
+				}
 
+				// iterate over every edge
 				for (let j = 0; j < 3; j++) {
 					// get the first and next vertex making up the edge
 					const jNext = (j + 1) % 3;
@@ -25257,7 +22517,6 @@ class EdgesGeometry extends BufferGeometry {
 					const v1 = _triangle[vertKeys[jNext]];
 					const hash = `${vecHash0}_${vecHash1}`;
 					const reverseHash = `${vecHash1}_${vecHash0}`;
-
 					if (reverseHash in edgeData && edgeData[reverseHash]) {
 						// if we found a sibling edge add it into the vertex array if
 						// it meets the angle threshold and delete the edge from the map.
@@ -25265,7 +22524,6 @@ class EdgesGeometry extends BufferGeometry {
 							vertices.push(v0.x, v0.y, v0.z);
 							vertices.push(v1.x, v1.y, v1.z);
 						}
-
 						edgeData[reverseHash] = null;
 					} else if (!(hash in edgeData)) {
 						// if we've already got an edge here then skip adding a new one
@@ -25276,29 +22534,24 @@ class EdgesGeometry extends BufferGeometry {
 						};
 					}
 				}
-			} // iterate over all remaining, unmatched edges and add them to the vertex array
-
+			}
 
+			// iterate over all remaining, unmatched edges and add them to the vertex array
 			for (const key in edgeData) {
 				if (edgeData[key]) {
 					const {
 						index0,
 						index1
 					} = edgeData[key];
-
 					_v0.fromBufferAttribute(positionAttr, index0);
-
 					_v1$1.fromBufferAttribute(positionAttr, index1);
-
 					vertices.push(_v0.x, _v0.y, _v0.z);
 					vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
 				}
 			}
-
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		}
 	}
-
 }
 
 class Shape extends Path {
@@ -25308,17 +22561,15 @@ class Shape extends Path {
 		this.type = 'Shape';
 		this.holes = [];
 	}
-
 	getPointsHoles(divisions) {
 		const holesPts = [];
-
 		for (let i = 0, l = this.holes.length; i < l; i++) {
 			holesPts[i] = this.holes[i].getPoints(divisions);
 		}
-
 		return holesPts;
-	} // get points of shape and holes (keypoints based on segments parameter)
+	}
 
+	// get points of shape and holes (keypoints based on segments parameter)
 
 	extractPoints(divisions) {
 		return {
@@ -25326,50 +22577,41 @@ class Shape extends Path {
 			holes: this.getPointsHoles(divisions)
 		};
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.holes = [];
-
 		for (let i = 0, l = source.holes.length; i < l; i++) {
 			const hole = source.holes[i];
 			this.holes.push(hole.clone());
 		}
-
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.uuid = this.uuid;
 		data.holes = [];
-
 		for (let i = 0, l = this.holes.length; i < l; i++) {
 			const hole = this.holes[i];
 			data.holes.push(hole.toJSON());
 		}
-
 		return data;
 	}
-
 	fromJSON(json) {
 		super.fromJSON(json);
 		this.uuid = json.uuid;
 		this.holes = [];
-
 		for (let i = 0, l = json.holes.length; i < l; i++) {
 			const hole = json.holes[i];
 			this.holes.push(new Path().fromJSON(hole));
 		}
-
 		return this;
 	}
-
 }
 
 /**
  * Port from https://github.com/mapbox/earcut (v2.2.4)
  */
+
 const Earcut = {
 	triangulate: function (data, holeIndices, dim = 2) {
 		const hasHoles = holeIndices && holeIndices.length;
@@ -25378,12 +22620,12 @@ const Earcut = {
 		const triangles = [];
 		if (!outerNode || outerNode.next === outerNode.prev) return triangles;
 		let minX, minY, maxX, maxY, x, y, invSize;
-		if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
+		if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
 
+		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
 		if (data.length > 80 * dim) {
 			minX = maxX = data[0];
 			minY = maxY = data[1];
-
 			for (let i = dim; i < outerLen; i += dim) {
 				x = data[i];
 				y = data[i + 1];
@@ -25391,45 +22633,40 @@ const Earcut = {
 				if (y < minY) minY = y;
 				if (x > maxX) maxX = x;
 				if (y > maxY) maxY = y;
-			} // minX, minY and invSize are later used to transform coords into integers for z-order calculation
-
+			}
 
+			// minX, minY and invSize are later used to transform coords into integers for z-order calculation
 			invSize = Math.max(maxX - minX, maxY - minY);
 			invSize = invSize !== 0 ? 32767 / invSize : 0;
 		}
-
 		earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
 		return triangles;
 	}
-}; // create a circular doubly linked list from polygon points in the specified winding order
+};
 
+// create a circular doubly linked list from polygon points in the specified winding order
 function linkedList(data, start, end, dim, clockwise) {
 	let i, last;
-
 	if (clockwise === signedArea(data, start, end, dim) > 0) {
 		for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
 	} else {
 		for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
 	}
-
 	if (last && equals(last, last.next)) {
 		removeNode(last);
 		last = last.next;
 	}
-
 	return last;
-} // eliminate colinear or duplicate points
-
+}
 
+// eliminate colinear or duplicate points
 function filterPoints(start, end) {
 	if (!start) return start;
 	if (!end) end = start;
 	let p = start,
-			again;
-
+		again;
 	do {
 		again = false;
-
 		if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
 			removeNode(p);
 			p = end = p.prev;
@@ -25439,184 +22676,182 @@ function filterPoints(start, end) {
 			p = p.next;
 		}
 	} while (again || p !== end);
-
 	return end;
-} // main ear slicing loop which triangulates a polygon (given as a linked list)
-
+}
 
+// main ear slicing loop which triangulates a polygon (given as a linked list)
 function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
-	if (!ear) return; // interlink polygon nodes in z-order
+	if (!ear) return;
 
+	// interlink polygon nodes in z-order
 	if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
 	let stop = ear,
-			prev,
-			next; // iterate through ears, slicing them one by one
+		prev,
+		next;
 
+	// iterate through ears, slicing them one by one
 	while (ear.prev !== ear.next) {
 		prev = ear.prev;
 		next = ear.next;
-
 		if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
 			// cut off the triangle
 			triangles.push(prev.i / dim | 0);
 			triangles.push(ear.i / dim | 0);
 			triangles.push(next.i / dim | 0);
-			removeNode(ear); // skipping the next vertex leads to less sliver triangles
+			removeNode(ear);
 
+			// skipping the next vertex leads to less sliver triangles
 			ear = next.next;
 			stop = next.next;
 			continue;
 		}
+		ear = next;
 
-		ear = next; // if we looped through the whole remaining polygon and can't find any more ears
-
+		// if we looped through the whole remaining polygon and can't find any more ears
 		if (ear === stop) {
 			// try filtering points and slicing again
 			if (!pass) {
-				earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
+				earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
+
+				// if this didn't work, try curing all small self-intersections locally
 			} else if (pass === 1) {
 				ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
-				earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
+				earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
+
+				// as a last resort, try splitting the remaining polygon into two
 			} else if (pass === 2) {
 				splitEarcut(ear, triangles, dim, minX, minY, invSize);
 			}
-
 			break;
 		}
 	}
-} // check whether a polygon node forms a valid ear with adjacent nodes
-
+}
 
+// check whether a polygon node forms a valid ear with adjacent nodes
 function isEar(ear) {
 	const a = ear.prev,
-				b = ear,
-				c = ear.next;
+		b = ear,
+		c = ear.next;
 	if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
-	// now make sure we don't have other points inside the potential ear
 
+	// now make sure we don't have other points inside the potential ear
 	const ax = a.x,
-				bx = b.x,
-				cx = c.x,
-				ay = a.y,
-				by = b.y,
-				cy = c.y; // triangle bbox; min & max are calculated like this for speed
+		bx = b.x,
+		cx = c.x,
+		ay = a.y,
+		by = b.y,
+		cy = c.y;
 
+	// triangle bbox; min & max are calculated like this for speed
 	const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx,
-				y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,
-				x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,
-				y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
+		y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,
+		x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,
+		y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
 	let p = c.next;
-
 	while (p !== a) {
 		if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
 		p = p.next;
 	}
-
 	return true;
 }
-
 function isEarHashed(ear, minX, minY, invSize) {
 	const a = ear.prev,
-				b = ear,
-				c = ear.next;
+		b = ear,
+		c = ear.next;
 	if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
 
 	const ax = a.x,
-				bx = b.x,
-				cx = c.x,
-				ay = a.y,
-				by = b.y,
-				cy = c.y; // triangle bbox; min & max are calculated like this for speed
+		bx = b.x,
+		cx = c.x,
+		ay = a.y,
+		by = b.y,
+		cy = c.y;
 
+	// triangle bbox; min & max are calculated like this for speed
 	const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx,
-				y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,
-				x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,
-				y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy; // z-order range for the current triangle bbox;
+		y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,
+		x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,
+		y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
 
+	// z-order range for the current triangle bbox;
 	const minZ = zOrder(x0, y0, minX, minY, invSize),
-				maxZ = zOrder(x1, y1, minX, minY, invSize);
+		maxZ = zOrder(x1, y1, minX, minY, invSize);
 	let p = ear.prevZ,
-			n = ear.nextZ; // look for points inside the triangle in both directions
+		n = ear.nextZ;
 
+	// look for points inside the triangle in both directions
 	while (p && p.z >= minZ && n && n.z <= maxZ) {
 		if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
 		p = p.prevZ;
 		if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
 		n = n.nextZ;
-	} // look for remaining points in decreasing z-order
-
+	}
 
+	// look for remaining points in decreasing z-order
 	while (p && p.z >= minZ) {
 		if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
 		p = p.prevZ;
-	} // look for remaining points in increasing z-order
-
+	}
 
+	// look for remaining points in increasing z-order
 	while (n && n.z <= maxZ) {
 		if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
 		n = n.nextZ;
 	}
-
 	return true;
-} // go through all polygon nodes and cure small local self-intersections
-
+}
 
+// go through all polygon nodes and cure small local self-intersections
 function cureLocalIntersections(start, triangles, dim) {
 	let p = start;
-
 	do {
 		const a = p.prev,
-					b = p.next.next;
-
+			b = p.next.next;
 		if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
 			triangles.push(a.i / dim | 0);
 			triangles.push(p.i / dim | 0);
-			triangles.push(b.i / dim | 0); // remove two nodes involved
+			triangles.push(b.i / dim | 0);
 
+			// remove two nodes involved
 			removeNode(p);
 			removeNode(p.next);
 			p = start = b;
 		}
-
 		p = p.next;
 	} while (p !== start);
-
 	return filterPoints(p);
-} // try splitting polygon into two and triangulate them independently
-
+}
 
+// try splitting polygon into two and triangulate them independently
 function splitEarcut(start, triangles, dim, minX, minY, invSize) {
 	// look for a valid diagonal that divides the polygon into two
 	let a = start;
-
 	do {
 		let b = a.next.next;
-
 		while (b !== a.prev) {
 			if (a.i !== b.i && isValidDiagonal(a, b)) {
 				// split the polygon in two by the diagonal
-				let c = splitPolygon(a, b); // filter colinear points around the cuts
+				let c = splitPolygon(a, b);
 
+				// filter colinear points around the cuts
 				a = filterPoints(a, a.next);
-				c = filterPoints(c, c.next); // run earcut on each half
+				c = filterPoints(c, c.next);
 
+				// run earcut on each half
 				earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
 				earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
 				return;
 			}
-
 			b = b.next;
 		}
-
 		a = a.next;
 	} while (a !== start);
-} // link every hole into the outer loop, producing a single-ring polygon without holes
-
+}
 
+// link every hole into the outer loop, producing a single-ring polygon without holes
 function eliminateHoles(data, holeIndices, outerNode, dim) {
 	const queue = [];
 	let i, len, start, end, list;
-
 	for (i = 0, len = holeIndices.length; i < len; i++) {
 		start = holeIndices[i] * dim;
 		end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
@@ -25624,47 +22859,44 @@ function eliminateHoles(data, holeIndices, outerNode, dim) {
 		if (list === list.next) list.steiner = true;
 		queue.push(getLeftmost(list));
 	}
+	queue.sort(compareX);
 
-	queue.sort(compareX); // process holes from left to right
-
+	// process holes from left to right
 	for (i = 0; i < queue.length; i++) {
 		outerNode = eliminateHole(queue[i], outerNode);
 	}
-
 	return outerNode;
 }
-
 function compareX(a, b) {
 	return a.x - b.x;
-} // find a bridge between vertices that connects hole with an outer ring and link it
-
+}
 
+// find a bridge between vertices that connects hole with an outer ring and link it
 function eliminateHole(hole, outerNode) {
 	const bridge = findHoleBridge(hole, outerNode);
-
 	if (!bridge) {
 		return outerNode;
 	}
+	const bridgeReverse = splitPolygon(bridge, hole);
 
-	const bridgeReverse = splitPolygon(bridge, hole); // filter collinear points around the cuts
-
+	// filter collinear points around the cuts
 	filterPoints(bridgeReverse, bridgeReverse.next);
 	return filterPoints(bridge, bridge.next);
-} // David Eberly's algorithm for finding a bridge between hole and outer polygon
-
+}
 
+// David Eberly's algorithm for finding a bridge between hole and outer polygon
 function findHoleBridge(hole, outerNode) {
 	let p = outerNode,
-			qx = -Infinity,
-			m;
+		qx = -Infinity,
+		m;
 	const hx = hole.x,
-				hy = hole.y; // find a segment intersected by a ray from the hole's leftmost point to the left;
-	// segment's endpoint with lesser x will be potential connection point
+		hy = hole.y;
 
+	// find a segment intersected by a ray from the hole's leftmost point to the left;
+	// segment's endpoint with lesser x will be potential connection point
 	do {
 		if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
 			const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
-
 			if (x <= hx && x > qx) {
 				qx = x;
 				m = p.x < p.next.x ? p : p.next;
@@ -25674,18 +22906,18 @@ function findHoleBridge(hole, outerNode) {
 
 		p = p.next;
 	} while (p !== outerNode);
+	if (!m) return null;
 
-	if (!m) return null; // look for points inside the triangle of hole point, segment intersection and endpoint;
+	// look for points inside the triangle of hole point, segment intersection and endpoint;
 	// if there are no points found, we have a valid connection;
 	// otherwise choose the point of the minimum angle with the ray as connection point
 
 	const stop = m,
-				mx = m.x,
-				my = m.y;
+		mx = m.x,
+		my = m.y;
 	let tanMin = Infinity,
-			tan;
+		tan;
 	p = m;
-
 	do {
 		if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
 			tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
@@ -25695,66 +22927,57 @@ function findHoleBridge(hole, outerNode) {
 				tanMin = tan;
 			}
 		}
-
 		p = p.next;
 	} while (p !== stop);
-
 	return m;
-} // whether sector in vertex m contains sector in vertex p in the same coordinates
-
+}
 
+// whether sector in vertex m contains sector in vertex p in the same coordinates
 function sectorContainsSector(m, p) {
 	return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
-} // interlink polygon nodes in z-order
-
+}
 
+// interlink polygon nodes in z-order
 function indexCurve(start, minX, minY, invSize) {
 	let p = start;
-
 	do {
 		if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
 		p.prevZ = p.prev;
 		p.nextZ = p.next;
 		p = p.next;
 	} while (p !== start);
-
 	p.prevZ.nextZ = null;
 	p.prevZ = null;
 	sortLinked(p);
-} // Simon Tatham's linked list merge sort algorithm
-// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
-
+}
 
+// Simon Tatham's linked list merge sort algorithm
+// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
 function sortLinked(list) {
 	let i,
-			p,
-			q,
-			e,
-			tail,
-			numMerges,
-			pSize,
-			qSize,
-			inSize = 1;
-
+		p,
+		q,
+		e,
+		tail,
+		numMerges,
+		pSize,
+		qSize,
+		inSize = 1;
 	do {
 		p = list;
 		list = null;
 		tail = null;
 		numMerges = 0;
-
 		while (p) {
 			numMerges++;
 			q = p;
 			pSize = 0;
-
 			for (i = 0; i < inSize; i++) {
 				pSize++;
 				q = q.nextZ;
 				if (!q) break;
 			}
-
 			qSize = inSize;
-
 			while (pSize > 0 || qSize > 0 && q) {
 				if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
 					e = p;
@@ -25765,23 +22988,19 @@ function sortLinked(list) {
 					q = q.nextZ;
 					qSize--;
 				}
-
 				if (tail) tail.nextZ = e;else list = e;
 				e.prevZ = tail;
 				tail = e;
 			}
-
 			p = q;
 		}
-
 		tail.nextZ = null;
 		inSize *= 2;
 	} while (numMerges > 1);
-
 	return list;
-} // z-order of a point given coords and inverse of the longer side of data bbox
-
+}
 
+// z-order of a point given coords and inverse of the longer side of data bbox
 function zOrder(x, y, minX, minY, invSize) {
 	// coords are transformed into non-negative 15-bit integer range
 	x = (x - minX) * invSize | 0;
@@ -25795,45 +23014,46 @@ function zOrder(x, y, minX, minY, invSize) {
 	y = (y | y << 2) & 0x33333333;
 	y = (y | y << 1) & 0x55555555;
 	return x | y << 1;
-} // find the leftmost node of a polygon ring
-
+}
 
+// find the leftmost node of a polygon ring
 function getLeftmost(start) {
 	let p = start,
-			leftmost = start;
-
+		leftmost = start;
 	do {
 		if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
 		p = p.next;
 	} while (p !== start);
-
 	return leftmost;
-} // check if a point lies within a convex triangle
-
+}
 
+// check if a point lies within a convex triangle
 function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
 	return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
-} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
-
+}
 
+// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
 function isValidDiagonal(a, b) {
-	return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges
-	locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible
-	area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
+	return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (
+	// dones't intersect other edges
+	locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (
+	// locally visible
+	area(a.prev, a, b.prev) || area(a, b.prev, b)) ||
+	// does not create opposite-facing sectors
 	equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
-} // signed area of a triangle
-
+}
 
+// signed area of a triangle
 function area(p, q, r) {
 	return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
-} // check if two points are equal
-
+}
 
+// check if two points are equal
 function equals(p1, p2) {
 	return p1.x === p2.x && p1.y === p2.y;
-} // check if two segments intersect
-
+}
 
+// check if two segments intersect
 function intersects(p1, q1, p2, q2) {
 	const o1 = sign(area(p1, q1, p2));
 	const o2 = sign(area(p1, q1, q2));
@@ -25842,64 +23062,56 @@ function intersects(p1, q1, p2, q2) {
 	if (o1 !== o2 && o3 !== o4) return true; // general case
 
 	if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
-
 	if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
-
 	if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
-
 	if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
 
 	return false;
-} // for collinear points p, q, r, check if point q lies on segment pr
-
+}
 
+// for collinear points p, q, r, check if point q lies on segment pr
 function onSegment(p, q, r) {
 	return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
 }
-
 function sign(num) {
 	return num > 0 ? 1 : num < 0 ? -1 : 0;
-} // check if a polygon diagonal intersects any polygon segments
-
+}
 
+// check if a polygon diagonal intersects any polygon segments
 function intersectsPolygon(a, b) {
 	let p = a;
-
 	do {
 		if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
 		p = p.next;
 	} while (p !== a);
-
 	return false;
-} // check if a polygon diagonal is locally inside the polygon
-
+}
 
+// check if a polygon diagonal is locally inside the polygon
 function locallyInside(a, b) {
 	return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
-} // check if the middle point of a polygon diagonal is inside the polygon
-
+}
 
+// check if the middle point of a polygon diagonal is inside the polygon
 function middleInside(a, b) {
 	let p = a,
-			inside = false;
+		inside = false;
 	const px = (a.x + b.x) / 2,
-				py = (a.y + b.y) / 2;
-
+		py = (a.y + b.y) / 2;
 	do {
 		if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
 		p = p.next;
 	} while (p !== a);
-
 	return inside;
-} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
-// if one belongs to the outer ring and another to a hole, it merges it into a single ring
-
+}
 
+// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
+// if one belongs to the outer ring and another to a hole, it merges it into a single ring
 function splitPolygon(a, b) {
 	const a2 = new Node(a.i, a.x, a.y),
-				b2 = new Node(b.i, b.x, b.y),
-				an = a.next,
-				bp = b.prev;
+		b2 = new Node(b.i, b.x, b.y),
+		an = a.next,
+		bp = b.prev;
 	a.next = b;
 	b.prev = a;
 	a2.next = an;
@@ -25909,12 +23121,11 @@ function splitPolygon(a, b) {
 	bp.next = b2;
 	b2.prev = bp;
 	return b2;
-} // create a node and optionally link it with previous one (in a circular doubly linked list)
-
+}
 
+// create a node and optionally link it with previous one (in a circular doubly linked list)
 function insertNode(i, x, y, last) {
 	const p = new Node(i, x, y);
-
 	if (!last) {
 		p.prev = p;
 		p.next = p;
@@ -25924,102 +23135,95 @@ function insertNode(i, x, y, last) {
 		last.next.prev = p;
 		last.next = p;
 	}
-
 	return p;
 }
-
 function removeNode(p) {
 	p.next.prev = p.prev;
 	p.prev.next = p.next;
 	if (p.prevZ) p.prevZ.nextZ = p.nextZ;
 	if (p.nextZ) p.nextZ.prevZ = p.prevZ;
 }
-
 function Node(i, x, y) {
 	// vertex index in coordinates array
-	this.i = i; // vertex coordinates
+	this.i = i;
 
+	// vertex coordinates
 	this.x = x;
-	this.y = y; // previous and next vertex nodes in a polygon ring
+	this.y = y;
 
+	// previous and next vertex nodes in a polygon ring
 	this.prev = null;
-	this.next = null; // z-order curve value
+	this.next = null;
 
-	this.z = 0; // previous and next nodes in z-order
+	// z-order curve value
+	this.z = 0;
 
+	// previous and next nodes in z-order
 	this.prevZ = null;
-	this.nextZ = null; // indicates whether this is a steiner point
+	this.nextZ = null;
 
+	// indicates whether this is a steiner point
 	this.steiner = false;
 }
-
 function signedArea(data, start, end, dim) {
 	let sum = 0;
-
 	for (let i = start, j = end - dim; i < end; i += dim) {
 		sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
 		j = i;
 	}
-
 	return sum;
 }
 
 class ShapeUtils {
 	// calculate area of the contour polygon
+
 	static area(contour) {
 		const n = contour.length;
 		let a = 0.0;
-
 		for (let p = n - 1, q = 0; q < n; p = q++) {
 			a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
 		}
-
 		return a * 0.5;
 	}
-
 	static isClockWise(pts) {
 		return ShapeUtils.area(pts) < 0;
 	}
-
 	static triangulateShape(contour, holes) {
 		const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
-
 		const holeIndices = []; // array of hole indices
-
 		const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
 
 		removeDupEndPts(contour);
-		addContour(vertices, contour); //
+		addContour(vertices, contour);
+
+		//
 
 		let holeIndex = contour.length;
 		holes.forEach(removeDupEndPts);
-
 		for (let i = 0; i < holes.length; i++) {
 			holeIndices.push(holeIndex);
 			holeIndex += holes[i].length;
 			addContour(vertices, holes[i]);
-		} //
+		}
+
+		//
 
+		const triangles = Earcut.triangulate(vertices, holeIndices);
 
-		const triangles = Earcut.triangulate(vertices, holeIndices); //
+		//
 
 		for (let i = 0; i < triangles.length; i += 3) {
 			faces.push(triangles.slice(i, i + 3));
 		}
-
 		return faces;
 	}
-
 }
-
 function removeDupEndPts(points) {
 	const l = points.length;
-
 	if (l > 2 && points[l - 1].equals(points[0])) {
 		points.pop();
 	}
 }
-
 function addContour(vertices, contour) {
 	for (let i = 0; i < contour.length; i++) {
 		vertices.push(contour[i].x);
@@ -26048,7 +23252,6 @@ function addContour(vertices, contour) {
  *
  * }
  */
-
 class ExtrudeGeometry extends BufferGeometry {
 	constructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
 		super();
@@ -26061,19 +23264,23 @@ class ExtrudeGeometry extends BufferGeometry {
 		const scope = this;
 		const verticesArray = [];
 		const uvArray = [];
-
 		for (let i = 0, l = shapes.length; i < l; i++) {
 			const shape = shapes[i];
 			addShape(shape);
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));
-		this.computeVertexNormals(); // functions
+		this.computeVertexNormals();
+
+		// functions
 
 		function addShape(shape) {
-			const placeholder = []; // options
+			const placeholder = [];
+
+			// options
 
 			const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
 			const steps = options.steps !== undefined ? options.steps : 1;
@@ -26084,53 +23291,60 @@ class ExtrudeGeometry extends BufferGeometry {
 			let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
 			let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
 			const extrudePath = options.extrudePath;
-			const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; //
+			const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
+
+			//
 
 			let extrudePts,
-					extrudeByPath = false;
+				extrudeByPath = false;
 			let splineTube, binormal, normal, position2;
-
 			if (extrudePath) {
 				extrudePts = extrudePath.getSpacedPoints(steps);
 				extrudeByPath = true;
 				bevelEnabled = false; // bevels not supported for path extrusion
+
 				// SETUP TNB variables
+
 				// TODO1 - have a .isClosed in spline?
 
-				splineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
+				splineTube = extrudePath.computeFrenetFrames(steps, false);
+
+				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
 
 				binormal = new Vector3();
 				normal = new Vector3();
 				position2 = new Vector3();
-			} // Safeguards if bevels are not enabled
+			}
 
+			// Safeguards if bevels are not enabled
 
 			if (!bevelEnabled) {
 				bevelSegments = 0;
 				bevelThickness = 0;
 				bevelSize = 0;
 				bevelOffset = 0;
-			} // Variables initialization
+			}
 
+			// Variables initialization
 
 			const shapePoints = shape.extractPoints(curveSegments);
 			let vertices = shapePoints.shape;
 			const holes = shapePoints.holes;
 			const reverse = !ShapeUtils.isClockWise(vertices);
-
 			if (reverse) {
-				vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...
+				vertices = vertices.reverse();
+
+				// Maybe we should also check if holes are in the opposite direction, just to be safe ...
 
 				for (let h = 0, hl = holes.length; h < hl; h++) {
 					const ahole = holes[h];
-
 					if (ShapeUtils.isClockWise(ahole)) {
 						holes[h] = ahole.reverse();
 					}
 				}
 			}
-
 			const faces = ShapeUtils.triangulateShape(vertices, holes);
+
 			/* Vertices */
 
 			const contour = vertices; // vertices has all points but contour has only points of circumference
@@ -26139,14 +23353,14 @@ class ExtrudeGeometry extends BufferGeometry {
 				const ahole = holes[h];
 				vertices = vertices.concat(ahole);
 			}
-
 			function scalePt2(pt, vec, size) {
 				if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');
 				return vec.clone().multiplyScalar(size).add(pt);
 			}
-
 			const vlen = vertices.length,
-						flen = faces.length; // Find directions for point movement
+				flen = faces.length;
+
+			// Find directions for point movement
 
 			function getBevelVec(inPt, inPrev, inNext) {
 				// computes for inPt the corresponding point inPt' on a new contour
@@ -26155,37 +23369,47 @@ class ExtrudeGeometry extends BufferGeometry {
 				//
 				// inPt' is the intersection of the two lines parallel to the two
 				//	adjacent edges of inPt at a distance of 1 unit on the left side.
+
 				let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
+
 				// good reading for geometry algorithms (here: line-line intersection)
 				// http://geomalgorithms.com/a05-_intersect-1.html
 
 				const v_prev_x = inPt.x - inPrev.x,
-							v_prev_y = inPt.y - inPrev.y;
+					v_prev_y = inPt.y - inPrev.y;
 				const v_next_x = inNext.x - inPt.x,
-							v_next_y = inNext.y - inPt.y;
-				const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges
+					v_next_y = inNext.y - inPt.y;
+				const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
 
+				// check for collinear edges
 				const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
-
 				if (Math.abs(collinear0) > Number.EPSILON) {
 					// not collinear
+
 					// length of vectors for normalizing
+
 					const v_prev_len = Math.sqrt(v_prev_lensq);
-					const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left
+					const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
+
+					// shift adjacent points by unit vectors to the left
 
 					const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
 					const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
 					const ptNextShift_x = inNext.x - v_next_y / v_next_len;
-					const ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point
+					const ptNextShift_y = inNext.y + v_next_x / v_next_len;
+
+					// scaling factor for v_prev to intersection point
 
-					const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point
+					const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
+
+					// vector from inPt to intersection point
 
 					v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
-					v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly
-					//	but prevent crazy spikes
+					v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
 
+					// Don't normalize!, otherwise sharp corners become ugly
+					//	but prevent crazy spikes
 					const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
-
 					if (v_trans_lensq <= 2) {
 						return new Vector2(v_trans_x, v_trans_y);
 					} else {
@@ -26193,6 +23417,7 @@ class ExtrudeGeometry extends BufferGeometry {
 					}
 				} else {
 					// handle special case of collinear edges
+
 					let direction_eq = false; // assumes: opposite
 
 					if (v_prev_x > Number.EPSILON) {
@@ -26210,7 +23435,6 @@ class ExtrudeGeometry extends BufferGeometry {
 							}
 						}
 					}
-
 					if (direction_eq) {
 						// console.log("Warning: lines are a straight sequence");
 						v_trans_x = -v_prev_y;
@@ -26223,117 +23447,121 @@ class ExtrudeGeometry extends BufferGeometry {
 						shrink_by = Math.sqrt(v_prev_lensq / 2);
 					}
 				}
-
 				return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
 			}
-
 			const contourMovements = [];
-
 			for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
 				if (j === il) j = 0;
-				if (k === il) k = 0; //	(j)---(i)---(k)
+				if (k === il) k = 0;
+
+				//	(j)---(i)---(k)
 				// console.log('i,j,k', i, j , k)
 
 				contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
 			}
-
 			const holesMovements = [];
 			let oneHoleMovements,
-					verticesMovements = contourMovements.concat();
-
+				verticesMovements = contourMovements.concat();
 			for (let h = 0, hl = holes.length; h < hl; h++) {
 				const ahole = holes[h];
 				oneHoleMovements = [];
-
 				for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
 					if (j === il) j = 0;
-					if (k === il) k = 0; //	(j)---(i)---(k)
+					if (k === il) k = 0;
 
+					//	(j)---(i)---(k)
 					oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
 				}
-
 				holesMovements.push(oneHoleMovements);
 				verticesMovements = verticesMovements.concat(oneHoleMovements);
-			} // Loop bevelSegments, 1 for the front, 1 for the back
+			}
 
+			// Loop bevelSegments, 1 for the front, 1 for the back
 
 			for (let b = 0; b < bevelSegments; b++) {
 				//for ( b = bevelSegments; b > 0; b -- ) {
+
 				const t = b / bevelSegments;
 				const z = bevelThickness * Math.cos(t * Math.PI / 2);
-				const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape
+				const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
+
+				// contract shape
 
 				for (let i = 0, il = contour.length; i < il; i++) {
 					const vert = scalePt2(contour[i], contourMovements[i], bs);
 					v(vert.x, vert.y, -z);
-				} // expand holes
+				}
 
+				// expand holes
 
 				for (let h = 0, hl = holes.length; h < hl; h++) {
 					const ahole = holes[h];
 					oneHoleMovements = holesMovements[h];
-
 					for (let i = 0, il = ahole.length; i < il; i++) {
 						const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
 						v(vert.x, vert.y, -z);
 					}
 				}
 			}
+			const bs = bevelSize + bevelOffset;
 
-			const bs = bevelSize + bevelOffset; // Back facing vertices
+			// Back facing vertices
 
 			for (let i = 0; i < vlen; i++) {
 				const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
-
 				if (!extrudeByPath) {
 					v(vert.x, vert.y, 0);
 				} else {
 					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
+
 					normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
 					binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
 					position2.copy(extrudePts[0]).add(normal).add(binormal);
 					v(position2.x, position2.y, position2.z);
 				}
-			} // Add stepped vertices...
-			// Including front facing vertices
+			}
 
+			// Add stepped vertices...
+			// Including front facing vertices
 
 			for (let s = 1; s <= steps; s++) {
 				for (let i = 0; i < vlen; i++) {
 					const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
-
 					if (!extrudeByPath) {
 						v(vert.x, vert.y, depth / steps * s);
 					} else {
 						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
+
 						normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
 						binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
 						position2.copy(extrudePts[s]).add(normal).add(binormal);
 						v(position2.x, position2.y, position2.z);
 					}
 				}
-			} // Add bevel segments planes
-			//for ( b = 1; b <= bevelSegments; b ++ ) {
+			}
 
+			// Add bevel segments planes
 
+			//for ( b = 1; b <= bevelSegments; b ++ ) {
 			for (let b = bevelSegments - 1; b >= 0; b--) {
 				const t = b / bevelSegments;
 				const z = bevelThickness * Math.cos(t * Math.PI / 2);
-				const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape
+				const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
+
+				// contract shape
 
 				for (let i = 0, il = contour.length; i < il; i++) {
 					const vert = scalePt2(contour[i], contourMovements[i], bs);
 					v(vert.x, vert.y, depth + z);
-				} // expand holes
+				}
 
+				// expand holes
 
 				for (let h = 0, hl = holes.length; h < hl; h++) {
 					const ahole = holes[h];
 					oneHoleMovements = holesMovements[h];
-
 					for (let i = 0, il = ahole.length; i < il; i++) {
 						const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
-
 						if (!extrudeByPath) {
 							v(vert.x, vert.y, depth + z);
 						} else {
@@ -26342,29 +23570,35 @@ class ExtrudeGeometry extends BufferGeometry {
 					}
 				}
 			}
+
 			/* Faces */
+
 			// Top and bottom faces
 
+			buildLidFaces();
+
+			// Sides faces
 
-			buildLidFaces(); // Sides faces
+			buildSideFaces();
 
-			buildSideFaces(); /////	Internal functions
+			/////	Internal functions
 
 			function buildLidFaces() {
 				const start = verticesArray.length / 3;
-
 				if (bevelEnabled) {
 					let layer = 0; // steps + 1
+					let offset = vlen * layer;
 
-					let offset = vlen * layer; // Bottom faces
+					// Bottom faces
 
 					for (let i = 0; i < flen; i++) {
 						const face = faces[i];
 						f3(face[2] + offset, face[1] + offset, face[0] + offset);
 					}
-
 					layer = steps + bevelSegments * 2;
-					offset = vlen * layer; // Top faces
+					offset = vlen * layer;
+
+					// Top faces
 
 					for (let i = 0; i < flen; i++) {
 						const face = faces[i];
@@ -26372,64 +23606,63 @@ class ExtrudeGeometry extends BufferGeometry {
 					}
 				} else {
 					// Bottom faces
+
 					for (let i = 0; i < flen; i++) {
 						const face = faces[i];
 						f3(face[2], face[1], face[0]);
-					} // Top faces
+					}
 
+					// Top faces
 
 					for (let i = 0; i < flen; i++) {
 						const face = faces[i];
 						f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
 					}
 				}
-
 				scope.addGroup(start, verticesArray.length / 3 - start, 0);
-			} // Create faces for the z-sides of the shape
+			}
 
+			// Create faces for the z-sides of the shape
 
 			function buildSideFaces() {
 				const start = verticesArray.length / 3;
 				let layeroffset = 0;
 				sidewalls(contour, layeroffset);
 				layeroffset += contour.length;
-
 				for (let h = 0, hl = holes.length; h < hl; h++) {
 					const ahole = holes[h];
-					sidewalls(ahole, layeroffset); //, true
+					sidewalls(ahole, layeroffset);
 
+					//, true
 					layeroffset += ahole.length;
 				}
-
 				scope.addGroup(start, verticesArray.length / 3 - start, 1);
 			}
-
 			function sidewalls(contour, layeroffset) {
 				let i = contour.length;
-
 				while (--i >= 0) {
 					const j = i;
 					let k = i - 1;
-					if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);
+					if (k < 0) k = contour.length - 1;
+
+					//console.log('b', i,j, i-1, k,vertices.length);
 
 					for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
 						const slen1 = vlen * s;
 						const slen2 = vlen * (s + 1);
 						const a = layeroffset + j + slen1,
-									b = layeroffset + k + slen1,
-									c = layeroffset + k + slen2,
-									d = layeroffset + j + slen2;
+							b = layeroffset + k + slen1,
+							c = layeroffset + k + slen2,
+							d = layeroffset + j + slen2;
 						f4(a, b, c, d);
 					}
 				}
 			}
-
 			function v(x, y, z) {
 				placeholder.push(x);
 				placeholder.push(y);
 				placeholder.push(z);
 			}
-
 			function f3(a, b, c) {
 				addVertex(a);
 				addVertex(b);
@@ -26440,7 +23673,6 @@ class ExtrudeGeometry extends BufferGeometry {
 				addUV(uvs[1]);
 				addUV(uvs[2]);
 			}
-
 			function f4(a, b, c, d) {
 				addVertex(a);
 				addVertex(b);
@@ -26457,46 +23689,36 @@ class ExtrudeGeometry extends BufferGeometry {
 				addUV(uvs[2]);
 				addUV(uvs[3]);
 			}
-
 			function addVertex(index) {
 				verticesArray.push(placeholder[index * 3 + 0]);
 				verticesArray.push(placeholder[index * 3 + 1]);
 				verticesArray.push(placeholder[index * 3 + 2]);
 			}
-
 			function addUV(vector2) {
 				uvArray.push(vector2.x);
 				uvArray.push(vector2.y);
 			}
 		}
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		const shapes = this.parameters.shapes;
 		const options = this.parameters.options;
 		return toJSON$1(shapes, options, data);
 	}
-
 	static fromJSON(data, shapes) {
 		const geometryShapes = [];
-
 		for (let j = 0, jl = data.shapes.length; j < jl; j++) {
 			const shape = shapes[data.shapes[j]];
 			geometryShapes.push(shape);
 		}
-
 		const extrudePath = data.options.extrudePath;
-
 		if (extrudePath !== undefined) {
 			data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
 		}
-
 		return new ExtrudeGeometry(geometryShapes, data.options);
 	}
-
 }
-
 const WorldUVGenerator = {
 	generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {
 		const a_x = vertices[indexA * 3];
@@ -26520,7 +23742,6 @@ const WorldUVGenerator = {
 		const d_x = vertices[indexD * 3];
 		const d_y = vertices[indexD * 3 + 1];
 		const d_z = vertices[indexD * 3 + 2];
-
 		if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
 			return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];
 		} else {
@@ -26528,10 +23749,8 @@ const WorldUVGenerator = {
 		}
 	}
 };
-
 function toJSON$1(shapes, options, data) {
 	data.shapes = [];
-
 	if (Array.isArray(shapes)) {
 		for (let i = 0, l = shapes.length; i < l; i++) {
 			const shape = shapes[i];
@@ -26540,7 +23759,6 @@ function toJSON$1(shapes, options, data) {
 	} else {
 		data.shapes.push(shapes.uuid);
 	}
-
 	data.options = Object.assign({}, options);
 	if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
 	return data;
@@ -26558,11 +23776,9 @@ class IcosahedronGeometry extends PolyhedronGeometry {
 			detail: detail
 		};
 	}
-
 	static fromJSON(data) {
 		return new IcosahedronGeometry(data.radius, data.detail);
 	}
-
 }
 
 class OctahedronGeometry extends PolyhedronGeometry {
@@ -26576,11 +23792,9 @@ class OctahedronGeometry extends PolyhedronGeometry {
 			detail: detail
 		};
 	}
-
 	static fromJSON(data) {
 		return new OctahedronGeometry(data.radius, data.detail);
 	}
-
 }
 
 class RingGeometry extends BufferGeometry {
@@ -26596,65 +23810,80 @@ class RingGeometry extends BufferGeometry {
 			thetaLength: thetaLength
 		};
 		thetaSegments = Math.max(3, thetaSegments);
-		phiSegments = Math.max(1, phiSegments); // buffers
+		phiSegments = Math.max(1, phiSegments);
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
-		const uvs = []; // some helper variables
+		const uvs = [];
+
+		// some helper variables
 
 		let radius = innerRadius;
 		const radiusStep = (outerRadius - innerRadius) / phiSegments;
 		const vertex = new Vector3();
-		const uv = new Vector2(); // generate vertices, normals and uvs
+		const uv = new Vector2();
+
+		// generate vertices, normals and uvs
 
 		for (let j = 0; j <= phiSegments; j++) {
 			for (let i = 0; i <= thetaSegments; i++) {
 				// values are generate from the inside of the ring to the outside
-				const segment = thetaStart + i / thetaSegments * thetaLength; // vertex
+
+				const segment = thetaStart + i / thetaSegments * thetaLength;
+
+				// vertex
 
 				vertex.x = radius * Math.cos(segment);
 				vertex.y = radius * Math.sin(segment);
-				vertices.push(vertex.x, vertex.y, vertex.z); // normal
+				vertices.push(vertex.x, vertex.y, vertex.z);
+
+				// normal
 
-				normals.push(0, 0, 1); // uv
+				normals.push(0, 0, 1);
+
+				// uv
 
 				uv.x = (vertex.x / outerRadius + 1) / 2;
 				uv.y = (vertex.y / outerRadius + 1) / 2;
 				uvs.push(uv.x, uv.y);
-			} // increase the radius for next row of vertices
+			}
 
+			// increase the radius for next row of vertices
 
 			radius += radiusStep;
-		} // indices
+		}
 
+		// indices
 
 		for (let j = 0; j < phiSegments; j++) {
 			const thetaSegmentLevel = j * (thetaSegments + 1);
-
 			for (let i = 0; i < thetaSegments; i++) {
 				const segment = i + thetaSegmentLevel;
 				const a = segment;
 				const b = segment + thetaSegments + 1;
 				const c = segment + thetaSegments + 2;
-				const d = segment + 1; // faces
+				const d = segment + 1;
+
+				// faces
 
 				indices.push(a, b, d);
 				indices.push(b, c, d);
 			}
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 	}
-
 	static fromJSON(data) {
 		return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
 	}
-
 }
 
 class ShapeGeometry extends BufferGeometry {
@@ -26664,15 +23893,21 @@ class ShapeGeometry extends BufferGeometry {
 		this.parameters = {
 			shapes: shapes,
 			curveSegments: curveSegments
-		}; // buffers
+		};
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
-		const uvs = []; // helper variables
+		const uvs = [];
+
+		// helper variables
 
 		let groupStart = 0;
-		let groupCount = 0; // allow single and array values for "shapes" parameter
+		let groupCount = 0;
+
+		// allow single and array values for "shapes" parameter
 
 		if (Array.isArray(shapes) === false) {
 			addShape(shapes);
@@ -26684,47 +23919,53 @@ class ShapeGeometry extends BufferGeometry {
 				groupStart += groupCount;
 				groupCount = 0;
 			}
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
-		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions
+		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
+
+		// helper functions
 
 		function addShape(shape) {
 			const indexOffset = vertices.length / 3;
 			const points = shape.extractPoints(curveSegments);
 			let shapeVertices = points.shape;
-			const shapeHoles = points.holes; // check direction of vertices
+			const shapeHoles = points.holes;
+
+			// check direction of vertices
 
 			if (ShapeUtils.isClockWise(shapeVertices) === false) {
 				shapeVertices = shapeVertices.reverse();
 			}
-
 			for (let i = 0, l = shapeHoles.length; i < l; i++) {
 				const shapeHole = shapeHoles[i];
-
 				if (ShapeUtils.isClockWise(shapeHole) === true) {
 					shapeHoles[i] = shapeHole.reverse();
 				}
 			}
+			const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
 
-			const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array
+			// join vertices of inner and outer paths to a single array
 
 			for (let i = 0, l = shapeHoles.length; i < l; i++) {
 				const shapeHole = shapeHoles[i];
 				shapeVertices = shapeVertices.concat(shapeHole);
-			} // vertices, normals, uvs
+			}
 
+			// vertices, normals, uvs
 
 			for (let i = 0, l = shapeVertices.length; i < l; i++) {
 				const vertex = shapeVertices[i];
 				vertices.push(vertex.x, vertex.y, 0);
 				normals.push(0, 0, 1);
 				uvs.push(vertex.x, vertex.y); // world uvs
-			} // indices
+			}
 
+			// indices
 
 			for (let i = 0, l = faces.length; i < l; i++) {
 				const face = faces[i];
@@ -26736,29 +23977,22 @@ class ShapeGeometry extends BufferGeometry {
 			}
 		}
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		const shapes = this.parameters.shapes;
 		return toJSON(shapes, data);
 	}
-
 	static fromJSON(data, shapes) {
 		const geometryShapes = [];
-
 		for (let j = 0, jl = data.shapes.length; j < jl; j++) {
 			const shape = shapes[data.shapes[j]];
 			geometryShapes.push(shape);
 		}
-
 		return new ShapeGeometry(geometryShapes, data.curveSegments);
 	}
-
 }
-
 function toJSON(shapes, data) {
 	data.shapes = [];
-
 	if (Array.isArray(shapes)) {
 		for (let i = 0, l = shapes.length; i < l; i++) {
 			const shape = shapes[i];
@@ -26767,7 +24001,6 @@ function toJSON(shapes, data) {
 	} else {
 		data.shapes.push(shapes.uuid);
 	}
-
 	return data;
 }
 
@@ -26790,43 +24023,53 @@ class SphereGeometry extends BufferGeometry {
 		let index = 0;
 		const grid = [];
 		const vertex = new Vector3();
-		const normal = new Vector3(); // buffers
+		const normal = new Vector3();
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
-		const uvs = []; // generate vertices, normals and uvs
+		const uvs = [];
+
+		// generate vertices, normals and uvs
 
 		for (let iy = 0; iy <= heightSegments; iy++) {
 			const verticesRow = [];
-			const v = iy / heightSegments; // special case for the poles
+			const v = iy / heightSegments;
 
-			let uOffset = 0;
+			// special case for the poles
 
+			let uOffset = 0;
 			if (iy == 0 && thetaStart == 0) {
 				uOffset = 0.5 / widthSegments;
 			} else if (iy == heightSegments && thetaEnd == Math.PI) {
 				uOffset = -0.5 / widthSegments;
 			}
-
 			for (let ix = 0; ix <= widthSegments; ix++) {
-				const u = ix / widthSegments; // vertex
+				const u = ix / widthSegments;
+
+				// vertex
 
 				vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
 				vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
 				vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
-				vertices.push(vertex.x, vertex.y, vertex.z); // normal
+				vertices.push(vertex.x, vertex.y, vertex.z);
+
+				// normal
 
 				normal.copy(vertex).normalize();
-				normals.push(normal.x, normal.y, normal.z); // uv
+				normals.push(normal.x, normal.y, normal.z);
+
+				// uv
 
 				uvs.push(u + uOffset, 1 - v);
 				verticesRow.push(index++);
 			}
-
 			grid.push(verticesRow);
-		} // indices
+		}
 
+		// indices
 
 		for (let iy = 0; iy < heightSegments; iy++) {
 			for (let ix = 0; ix < widthSegments; ix++) {
@@ -26837,19 +24080,18 @@ class SphereGeometry extends BufferGeometry {
 				if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
 				if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
 			}
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 	}
-
 	static fromJSON(data) {
 		return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
 	}
-
 }
 
 class TetrahedronGeometry extends PolyhedronGeometry {
@@ -26863,11 +24105,9 @@ class TetrahedronGeometry extends PolyhedronGeometry {
 			detail: detail
 		};
 	}
-
 	static fromJSON(data) {
 		return new TetrahedronGeometry(data.radius, data.detail);
 	}
-
 }
 
 class TorusGeometry extends BufferGeometry {
@@ -26882,62 +24122,77 @@ class TorusGeometry extends BufferGeometry {
 			arc: arc
 		};
 		radialSegments = Math.floor(radialSegments);
-		tubularSegments = Math.floor(tubularSegments); // buffers
+		tubularSegments = Math.floor(tubularSegments);
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
-		const uvs = []; // helper variables
+		const uvs = [];
+
+		// helper variables
 
 		const center = new Vector3();
 		const vertex = new Vector3();
-		const normal = new Vector3(); // generate vertices, normals and uvs
+		const normal = new Vector3();
+
+		// generate vertices, normals and uvs
 
 		for (let j = 0; j <= radialSegments; j++) {
 			for (let i = 0; i <= tubularSegments; i++) {
 				const u = i / tubularSegments * arc;
-				const v = j / radialSegments * Math.PI * 2; // vertex
+				const v = j / radialSegments * Math.PI * 2;
+
+				// vertex
 
 				vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
 				vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
 				vertex.z = tube * Math.sin(v);
-				vertices.push(vertex.x, vertex.y, vertex.z); // normal
+				vertices.push(vertex.x, vertex.y, vertex.z);
+
+				// normal
 
 				center.x = radius * Math.cos(u);
 				center.y = radius * Math.sin(u);
 				normal.subVectors(vertex, center).normalize();
-				normals.push(normal.x, normal.y, normal.z); // uv
+				normals.push(normal.x, normal.y, normal.z);
+
+				// uv
 
 				uvs.push(i / tubularSegments);
 				uvs.push(j / radialSegments);
 			}
-		} // generate indices
+		}
 
+		// generate indices
 
 		for (let j = 1; j <= radialSegments; j++) {
 			for (let i = 1; i <= tubularSegments; i++) {
 				// indices
+
 				const a = (tubularSegments + 1) * j + i - 1;
 				const b = (tubularSegments + 1) * (j - 1) + i - 1;
 				const c = (tubularSegments + 1) * (j - 1) + i;
-				const d = (tubularSegments + 1) * j + i; // faces
+				const d = (tubularSegments + 1) * j + i;
+
+				// faces
 
 				indices.push(a, b, d);
 				indices.push(b, c, d);
 			}
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 	}
-
 	static fromJSON(data) {
 		return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
 	}
-
 }
 
 class TorusKnotGeometry extends BufferGeometry {
@@ -26953,12 +24208,16 @@ class TorusKnotGeometry extends BufferGeometry {
 			q: q
 		};
 		tubularSegments = Math.floor(tubularSegments);
-		radialSegments = Math.floor(radialSegments); // buffers
+		radialSegments = Math.floor(radialSegments);
+
+		// buffers
 
 		const indices = [];
 		const vertices = [];
 		const normals = [];
-		const uvs = []; // helper variables
+		const uvs = [];
+
+		// helper variables
 
 		const vertex = new Vector3();
 		const normal = new Vector3();
@@ -26966,64 +24225,86 @@ class TorusKnotGeometry extends BufferGeometry {
 		const P2 = new Vector3();
 		const B = new Vector3();
 		const T = new Vector3();
-		const N = new Vector3(); // generate vertices, normals and uvs
+		const N = new Vector3();
+
+		// generate vertices, normals and uvs
 
 		for (let i = 0; i <= tubularSegments; ++i) {
 			// the radian "u" is used to calculate the position on the torus curve of the current tubular segment
-			const u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
+
+			const u = i / tubularSegments * p * Math.PI * 2;
+
+			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
 			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
 
 			calculatePositionOnCurve(u, p, q, radius, P1);
-			calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis
+			calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
+
+			// calculate orthonormal basis
 
 			T.subVectors(P2, P1);
 			N.addVectors(P2, P1);
 			B.crossVectors(T, N);
-			N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it
+			N.crossVectors(B, T);
+
+			// normalize B, N. T can be ignored, we don't use it
 
 			B.normalize();
 			N.normalize();
-
 			for (let j = 0; j <= radialSegments; ++j) {
 				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
 				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
+
 				const v = j / radialSegments * Math.PI * 2;
 				const cx = -tube * Math.cos(v);
-				const cy = tube * Math.sin(v); // now calculate the final vertex position.
+				const cy = tube * Math.sin(v);
+
+				// now calculate the final vertex position.
 				// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
 
 				vertex.x = P1.x + (cx * N.x + cy * B.x);
 				vertex.y = P1.y + (cx * N.y + cy * B.y);
 				vertex.z = P1.z + (cx * N.z + cy * B.z);
-				vertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
+				vertices.push(vertex.x, vertex.y, vertex.z);
+
+				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
 
 				normal.subVectors(vertex, P1).normalize();
-				normals.push(normal.x, normal.y, normal.z); // uv
+				normals.push(normal.x, normal.y, normal.z);
+
+				// uv
 
 				uvs.push(i / tubularSegments);
 				uvs.push(j / radialSegments);
 			}
-		} // generate indices
+		}
 
+		// generate indices
 
 		for (let j = 1; j <= tubularSegments; j++) {
 			for (let i = 1; i <= radialSegments; i++) {
 				// indices
+
 				const a = (radialSegments + 1) * (j - 1) + (i - 1);
 				const b = (radialSegments + 1) * j + (i - 1);
 				const c = (radialSegments + 1) * j + i;
-				const d = (radialSegments + 1) * (j - 1) + i; // faces
+				const d = (radialSegments + 1) * (j - 1) + i;
+
+				// faces
 
 				indices.push(a, b, d);
 				indices.push(b, c, d);
 			}
-		} // build geometry
+		}
 
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
-		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve
+		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
+
+		// this function calculates the current position on the torus curve
 
 		function calculatePositionOnCurve(u, p, q, radius, position) {
 			const cu = Math.cos(u);
@@ -27035,11 +24316,9 @@ class TorusKnotGeometry extends BufferGeometry {
 			position.z = radius * Math.sin(quOverP) * 0.5;
 		}
 	}
-
 	static fromJSON(data) {
 		return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
 	}
-
 }
 
 class TubeGeometry extends BufferGeometry {
@@ -27053,63 +24332,88 @@ class TubeGeometry extends BufferGeometry {
 			radialSegments: radialSegments,
 			closed: closed
 		};
-		const frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals
+		const frames = path.computeFrenetFrames(tubularSegments, closed);
+
+		// expose internals
 
 		this.tangents = frames.tangents;
 		this.normals = frames.normals;
-		this.binormals = frames.binormals; // helper variables
+		this.binormals = frames.binormals;
+
+		// helper variables
 
 		const vertex = new Vector3();
 		const normal = new Vector3();
 		const uv = new Vector2();
-		let P = new Vector3(); // buffer
+		let P = new Vector3();
+
+		// buffer
 
 		const vertices = [];
 		const normals = [];
 		const uvs = [];
-		const indices = []; // create buffer data
+		const indices = [];
+
+		// create buffer data
 
-		generateBufferData(); // build geometry
+		generateBufferData();
+
+		// build geometry
 
 		this.setIndex(indices);
 		this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
-		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions
+		this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
+
+		// functions
 
 		function generateBufferData() {
 			for (let i = 0; i < tubularSegments; i++) {
 				generateSegment(i);
-			} // if the geometry is not closed, generate the last row of vertices and normals
+			}
+
+			// if the geometry is not closed, generate the last row of vertices and normals
 			// at the regular position on the given path
 			//
 			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
 
+			generateSegment(closed === false ? tubularSegments : 0);
 
-			generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.
+			// uvs are generated in a separate function.
 			// this makes it easy compute correct values for closed geometries
 
-			generateUVs(); // finally create faces
+			generateUVs();
+
+			// finally create faces
 
 			generateIndices();
 		}
-
 		function generateSegment(i) {
 			// we use getPointAt to sample evenly distributed points from the given path
-			P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal
+
+			P = path.getPointAt(i / tubularSegments, P);
+
+			// retrieve corresponding normal and binormal
 
 			const N = frames.normals[i];
-			const B = frames.binormals[i]; // generate normals and vertices for the current segment
+			const B = frames.binormals[i];
+
+			// generate normals and vertices for the current segment
 
 			for (let j = 0; j <= radialSegments; j++) {
 				const v = j / radialSegments * Math.PI * 2;
 				const sin = Math.sin(v);
-				const cos = -Math.cos(v); // normal
+				const cos = -Math.cos(v);
+
+				// normal
 
 				normal.x = cos * N.x + sin * B.x;
 				normal.y = cos * N.y + sin * B.y;
 				normal.z = cos * N.z + sin * B.z;
 				normal.normalize();
-				normals.push(normal.x, normal.y, normal.z); // vertex
+				normals.push(normal.x, normal.y, normal.z);
+
+				// vertex
 
 				vertex.x = P.x + radius * normal.x;
 				vertex.y = P.y + radius * normal.y;
@@ -27117,21 +24421,21 @@ class TubeGeometry extends BufferGeometry {
 				vertices.push(vertex.x, vertex.y, vertex.z);
 			}
 		}
-
 		function generateIndices() {
 			for (let j = 1; j <= tubularSegments; j++) {
 				for (let i = 1; i <= radialSegments; i++) {
 					const a = (radialSegments + 1) * (j - 1) + (i - 1);
 					const b = (radialSegments + 1) * j + (i - 1);
 					const c = (radialSegments + 1) * j + i;
-					const d = (radialSegments + 1) * (j - 1) + i; // faces
+					const d = (radialSegments + 1) * (j - 1) + i;
+
+					// faces
 
 					indices.push(a, b, d);
 					indices.push(b, c, d);
 				}
 			}
 		}
-
 		function generateUVs() {
 			for (let i = 0; i <= tubularSegments; i++) {
 				for (let j = 0; j <= radialSegments; j++) {
@@ -27142,19 +24446,16 @@ class TubeGeometry extends BufferGeometry {
 			}
 		}
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.path = this.parameters.path.toJSON();
 		return data;
 	}
-
 	static fromJSON(data) {
 		// This only works for built-in curves (e.g. CatmullRomCurve3).
 		// User defined curves or instances of CurvePath will not be deserialized.
 		return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
 	}
-
 }
 
 class WireframeGeometry extends BufferGeometry {
@@ -27164,42 +24465,42 @@ class WireframeGeometry extends BufferGeometry {
 		this.parameters = {
 			geometry: geometry
 		};
-
 		if (geometry !== null) {
 			// buffer
+
 			const vertices = [];
-			const edges = new Set(); // helper variables
+			const edges = new Set();
+
+			// helper variables
 
 			const start = new Vector3();
 			const end = new Vector3();
-
 			if (geometry.index !== null) {
 				// indexed BufferGeometry
+
 				const position = geometry.attributes.position;
 				const indices = geometry.index;
 				let groups = geometry.groups;
-
 				if (groups.length === 0) {
 					groups = [{
 						start: 0,
 						count: indices.count,
 						materialIndex: 0
 					}];
-				} // create a data structure that contains all edges without duplicates
+				}
 
+				// create a data structure that contains all edges without duplicates
 
 				for (let o = 0, ol = groups.length; o < ol; ++o) {
 					const group = groups[o];
 					const groupStart = group.start;
 					const groupCount = group.count;
-
 					for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {
 						for (let j = 0; j < 3; j++) {
 							const index1 = indices.getX(i + j);
 							const index2 = indices.getX(i + (j + 1) % 3);
 							start.fromBufferAttribute(position, index1);
 							end.fromBufferAttribute(position, index2);
-
 							if (isUniqueEdge(start, end, edges) === true) {
 								vertices.push(start.x, start.y, start.z);
 								vertices.push(end.x, end.y, end.z);
@@ -27209,32 +24510,31 @@ class WireframeGeometry extends BufferGeometry {
 				}
 			} else {
 				// non-indexed BufferGeometry
-				const position = geometry.attributes.position;
 
+				const position = geometry.attributes.position;
 				for (let i = 0, l = position.count / 3; i < l; i++) {
 					for (let j = 0; j < 3; j++) {
 						// three edges per triangle, an edge is represented as (index1, index2)
 						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
+
 						const index1 = 3 * i + j;
 						const index2 = 3 * i + (j + 1) % 3;
 						start.fromBufferAttribute(position, index1);
 						end.fromBufferAttribute(position, index2);
-
 						if (isUniqueEdge(start, end, edges) === true) {
 							vertices.push(start.x, start.y, start.z);
 							vertices.push(end.x, end.y, end.z);
 						}
 					}
 				}
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		}
 	}
-
 }
-
 function isUniqueEdge(start, end, edges) {
 	const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
 	const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge
@@ -27283,14 +24583,12 @@ class ShadowMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.color.copy(source.color);
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 class RawShaderMaterial extends ShaderMaterial {
@@ -27299,7 +24597,6 @@ class RawShaderMaterial extends ShaderMaterial {
 		this.isRawShaderMaterial = true;
 		this.type = 'RawShaderMaterial';
 	}
-
 }
 
 class MeshStandardMaterial extends Material {
@@ -27311,7 +24608,6 @@ class MeshStandardMaterial extends Material {
 		};
 		this.type = 'MeshStandardMaterial';
 		this.color = new Color(0xffffff); // diffuse
-
 		this.roughness = 1.0;
 		this.metalness = 0.0;
 		this.map = null;
@@ -27343,7 +24639,6 @@ class MeshStandardMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.defines = {
@@ -27381,7 +24676,6 @@ class MeshStandardMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 class MeshPhysicalMaterial extends MeshStandardMaterial {
@@ -27430,55 +24724,42 @@ class MeshPhysicalMaterial extends MeshStandardMaterial {
 		this._transmission = 0;
 		this.setValues(parameters);
 	}
-
 	get sheen() {
 		return this._sheen;
 	}
-
 	set sheen(value) {
 		if (this._sheen > 0 !== value > 0) {
 			this.version++;
 		}
-
 		this._sheen = value;
 	}
-
 	get clearcoat() {
 		return this._clearcoat;
 	}
-
 	set clearcoat(value) {
 		if (this._clearcoat > 0 !== value > 0) {
 			this.version++;
 		}
-
 		this._clearcoat = value;
 	}
-
 	get iridescence() {
 		return this._iridescence;
 	}
-
 	set iridescence(value) {
 		if (this._iridescence > 0 !== value > 0) {
 			this.version++;
 		}
-
 		this._iridescence = value;
 	}
-
 	get transmission() {
 		return this._transmission;
 	}
-
 	set transmission(value) {
 		if (this._transmission > 0 !== value > 0) {
 			this.version++;
 		}
-
 		this._transmission = value;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.defines = {
@@ -27514,7 +24795,6 @@ class MeshPhysicalMaterial extends MeshStandardMaterial {
 		this.specularColorMap = source.specularColorMap;
 		return this;
 	}
-
 }
 
 class MeshPhongMaterial extends Material {
@@ -27523,7 +24803,6 @@ class MeshPhongMaterial extends Material {
 		this.isMeshPhongMaterial = true;
 		this.type = 'MeshPhongMaterial';
 		this.color = new Color(0xffffff); // diffuse
-
 		this.specular = new Color(0x111111);
 		this.shininess = 30;
 		this.map = null;
@@ -27556,7 +24835,6 @@ class MeshPhongMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.color.copy(source.color);
@@ -27592,7 +24870,6 @@ class MeshPhongMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 class MeshToonMaterial extends Material {
@@ -27629,7 +24906,6 @@ class MeshToonMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.color.copy(source.color);
@@ -27658,7 +24934,6 @@ class MeshToonMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 class MeshNormalMaterial extends Material {
@@ -27679,7 +24954,6 @@ class MeshNormalMaterial extends Material {
 		this.flatShading = false;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.bumpMap = source.bumpMap;
@@ -27695,7 +24969,6 @@ class MeshNormalMaterial extends Material {
 		this.flatShading = source.flatShading;
 		return this;
 	}
-
 }
 
 class MeshLambertMaterial extends Material {
@@ -27735,7 +25008,6 @@ class MeshLambertMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.color.copy(source.color);
@@ -27769,7 +25041,6 @@ class MeshLambertMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 class MeshMatcapMaterial extends Material {
@@ -27797,7 +25068,6 @@ class MeshMatcapMaterial extends Material {
 		this.fog = true;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.defines = {
@@ -27819,7 +25089,6 @@ class MeshMatcapMaterial extends Material {
 		this.fog = source.fog;
 		return this;
 	}
-
 }
 
 class LineDashedMaterial extends LineBasicMaterial {
@@ -27832,7 +25101,6 @@ class LineDashedMaterial extends LineBasicMaterial {
 		this.gapSize = 1;
 		this.setValues(parameters);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.scale = source.scale;
@@ -27840,24 +25108,23 @@ class LineDashedMaterial extends LineBasicMaterial {
 		this.gapSize = source.gapSize;
 		return this;
 	}
-
 }
 
+// same as Array.prototype.slice, but also works on typed arrays
 function arraySlice(array, from, to) {
 	if (isTypedArray(array)) {
 		// in ios9 array.subarray(from, undefined) will return empty array
 		// but array.subarray(from) or array.subarray(from, len) is correct
 		return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
 	}
-
 	return array.slice(from, to);
-} // converts an array to a specific type
-
+}
 
+// converts an array to a specific type
 function convertArray(array, type, forceClone) {
-	if (!array || // let 'undefined' and 'null' pass
+	if (!array ||
+	// let 'undefined' and 'null' pass
 	!forceClone && array.constructor === type) return array;
-
 	if (typeof type.BYTES_PER_ELEMENT === 'number') {
 		return new type(array); // create typed array
 	}
@@ -27867,48 +25134,40 @@ function convertArray(array, type, forceClone) {
 
 function isTypedArray(object) {
 	return ArrayBuffer.isView(object) && !(object instanceof DataView);
-} // returns an array by which times and values can be sorted
-
+}
 
+// returns an array by which times and values can be sorted
 function getKeyframeOrder(times) {
 	function compareTime(i, j) {
 		return times[i] - times[j];
 	}
-
 	const n = times.length;
 	const result = new Array(n);
-
 	for (let i = 0; i !== n; ++i) result[i] = i;
-
 	result.sort(compareTime);
 	return result;
-} // uses the array previously returned by 'getKeyframeOrder' to sort data
-
+}
 
+// uses the array previously returned by 'getKeyframeOrder' to sort data
 function sortedArray(values, stride, order) {
 	const nValues = values.length;
 	const result = new values.constructor(nValues);
-
 	for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
 		const srcOffset = order[i] * stride;
-
 		for (let j = 0; j !== stride; ++j) {
 			result[dstOffset++] = values[srcOffset + j];
 		}
 	}
-
 	return result;
-} // function for parsing AOS keyframe formats
-
+}
 
+// function for parsing AOS keyframe formats
 function flattenJSON(jsonKeys, times, values, valuePropertyName) {
 	let i = 1,
-			key = jsonKeys[0];
-
+		key = jsonKeys[0];
 	while (key !== undefined && key[valuePropertyName] === undefined) {
 		key = jsonKeys[i++];
 	}
-
 	if (key === undefined) return; // no data
 
 	let value = key[valuePropertyName];
@@ -27917,7 +25176,6 @@ function flattenJSON(jsonKeys, times, values, valuePropertyName) {
 	if (Array.isArray(value)) {
 		do {
 			value = key[valuePropertyName];
-
 			if (value !== undefined) {
 				times.push(key.time);
 				values.push.apply(values, value); // push all elements
@@ -27927,109 +25185,101 @@ function flattenJSON(jsonKeys, times, values, valuePropertyName) {
 		} while (key !== undefined);
 	} else if (value.toArray !== undefined) {
 		// ...assume THREE.Math-ish
+
 		do {
 			value = key[valuePropertyName];
-
 			if (value !== undefined) {
 				times.push(key.time);
 				value.toArray(values, values.length);
 			}
-
 			key = jsonKeys[i++];
 		} while (key !== undefined);
 	} else {
 		// otherwise push as-is
+
 		do {
 			value = key[valuePropertyName];
-
 			if (value !== undefined) {
 				times.push(key.time);
 				values.push(value);
 			}
-
 			key = jsonKeys[i++];
 		} while (key !== undefined);
 	}
 }
-
 function subclip(sourceClip, name, startFrame, endFrame, fps = 30) {
 	const clip = sourceClip.clone();
 	clip.name = name;
 	const tracks = [];
-
 	for (let i = 0; i < clip.tracks.length; ++i) {
 		const track = clip.tracks[i];
 		const valueSize = track.getValueSize();
 		const times = [];
 		const values = [];
-
 		for (let j = 0; j < track.times.length; ++j) {
 			const frame = track.times[j] * fps;
 			if (frame < startFrame || frame >= endFrame) continue;
 			times.push(track.times[j]);
-
 			for (let k = 0; k < valueSize; ++k) {
 				values.push(track.values[j * valueSize + k]);
 			}
 		}
-
 		if (times.length === 0) continue;
 		track.times = convertArray(times, track.times.constructor);
 		track.values = convertArray(values, track.values.constructor);
 		tracks.push(track);
 	}
+	clip.tracks = tracks;
 
-	clip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip
+	// find minimum .times value across all tracks in the trimmed clip
 
 	let minStartTime = Infinity;
-
 	for (let i = 0; i < clip.tracks.length; ++i) {
 		if (minStartTime > clip.tracks[i].times[0]) {
 			minStartTime = clip.tracks[i].times[0];
 		}
-	} // shift all tracks such that clip begins at t=0
+	}
 
+	// shift all tracks such that clip begins at t=0
 
 	for (let i = 0; i < clip.tracks.length; ++i) {
 		clip.tracks[i].shift(-1 * minStartTime);
 	}
-
 	clip.resetDuration();
 	return clip;
 }
-
 function makeClipAdditive(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
 	if (fps <= 0) fps = 30;
 	const numTracks = referenceClip.tracks.length;
-	const referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame
+	const referenceTime = referenceFrame / fps;
 
+	// Make each track's values relative to the values at the reference frame
 	for (let i = 0; i < numTracks; ++i) {
 		const referenceTrack = referenceClip.tracks[i];
-		const referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric
+		const referenceTrackType = referenceTrack.ValueTypeName;
 
-		if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track
+		// Skip this track if it's non-numeric
+		if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue;
 
+		// Find the track in the target clip whose name and type matches the reference track
 		const targetTrack = targetClip.tracks.find(function (track) {
 			return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
 		});
 		if (targetTrack === undefined) continue;
 		let referenceOffset = 0;
 		const referenceValueSize = referenceTrack.getValueSize();
-
 		if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
 			referenceOffset = referenceValueSize / 3;
 		}
-
 		let targetOffset = 0;
 		const targetValueSize = targetTrack.getValueSize();
-
 		if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
 			targetOffset = targetValueSize / 3;
 		}
-
 		const lastIndex = referenceTrack.times.length - 1;
-		let referenceValue; // Find the value to subtract out of the track
+		let referenceValue;
 
+		// Find the value to subtract out of the track
 		if (referenceTime <= referenceTrack.times[0]) {
 			// Reference frame is earlier than the first keyframe, so just use the first keyframe
 			const startIndex = referenceOffset;
@@ -28047,33 +25297,32 @@ function makeClipAdditive(targetClip, referenceFrame = 0, referenceClip = target
 			const endIndex = referenceValueSize - referenceOffset;
 			interpolant.evaluate(referenceTime);
 			referenceValue = arraySlice(interpolant.resultBuffer, startIndex, endIndex);
-		} // Conjugate the quaternion
-
+		}
 
+		// Conjugate the quaternion
 		if (referenceTrackType === 'quaternion') {
 			const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
 			referenceQuat.toArray(referenceValue);
-		} // Subtract the reference value from all of the track values
+		}
 
+		// Subtract the reference value from all of the track values
 
 		const numTimes = targetTrack.times.length;
-
 		for (let j = 0; j < numTimes; ++j) {
 			const valueStart = j * targetValueSize + targetOffset;
-
 			if (referenceTrackType === 'quaternion') {
 				// Multiply the conjugate for quaternion track types
 				Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
 			} else {
-				const valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types
+				const valueEnd = targetValueSize - targetOffset * 2;
 
+				// Subtract each value for all other numeric track types
 				for (let k = 0; k < valueEnd; ++k) {
 					targetTrack.values[valueStart + k] -= referenceValue[k];
 				}
 			}
 		}
 	}
-
 	targetClip.blendMode = AdditiveAnimationBlendMode;
 	return targetClip;
 }
@@ -28110,6 +25359,7 @@ var AnimationUtils = /*#__PURE__*/Object.freeze({
  * 		http://www.oodesign.com/template-method-pattern.html
  *
  */
+
 class Interpolant {
 	constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
 		this.parameterPositions = parameterPositions;
@@ -28120,17 +25370,14 @@ class Interpolant {
 		this.settings = null;
 		this.DefaultSettings_ = {};
 	}
-
 	evaluate(t) {
 		const pp = this.parameterPositions;
 		let i1 = this._cachedIndex,
-				t1 = pp[i1],
-				t0 = pp[i1 - 1];
-
+			t1 = pp[i1],
+			t0 = pp[i1 - 1];
 		validate_interval: {
 			seek: {
 				let right;
-
 				linear_scan: {
 					//- See http://jsperf.com/comparison-to-undefined/3
 					//- slower code:
@@ -28139,90 +25386,89 @@ class Interpolant {
 					forward_scan: if (!(t < t1)) {
 						for (let giveUpAt = i1 + 2;;) {
 							if (t1 === undefined) {
-								if (t < t0) break forward_scan; // after end
+								if (t < t0) break forward_scan;
+
+								// after end
 
 								i1 = pp.length;
 								this._cachedIndex = i1;
 								return this.copySampleValue_(i1 - 1);
 							}
-
 							if (i1 === giveUpAt) break; // this loop
 
 							t0 = t1;
 							t1 = pp[++i1];
-
 							if (t < t1) {
 								// we have arrived at the sought interval
 								break seek;
 							}
-						} // prepare binary search on the right side of the index
-
+						}
 
+						// prepare binary search on the right side of the index
 						right = pp.length;
 						break linear_scan;
-					} //- slower code:
-					//-					if ( t < t0 || t0 === undefined ) {
-
+					}
 
+					//- slower code:
+					//-					if ( t < t0 || t0 === undefined ) {
 					if (!(t >= t0)) {
 						// looping?
-						const t1global = pp[1];
 
+						const t1global = pp[1];
 						if (t < t1global) {
 							i1 = 2; // + 1, using the scan for the details
-
 							t0 = t1global;
-						} // linear reverse scan
+						}
 
+						// linear reverse scan
 
 						for (let giveUpAt = i1 - 2;;) {
 							if (t0 === undefined) {
 								// before start
+
 								this._cachedIndex = 0;
 								return this.copySampleValue_(0);
 							}
-
 							if (i1 === giveUpAt) break; // this loop
 
 							t1 = t0;
 							t0 = pp[--i1 - 1];
-
 							if (t >= t0) {
 								// we have arrived at the sought interval
 								break seek;
 							}
-						} // prepare binary search on the left side of the index
-
+						}
 
+						// prepare binary search on the left side of the index
 						right = i1;
 						i1 = 0;
 						break linear_scan;
-					} // the interval is valid
+					}
 
+					// the interval is valid
 
 					break validate_interval;
 				} // linear scan
-				// binary search
 
+				// binary search
 
 				while (i1 < right) {
 					const mid = i1 + right >>> 1;
-
 					if (t < pp[mid]) {
 						right = mid;
 					} else {
 						i1 = mid + 1;
 					}
 				}
-
 				t1 = pp[i1];
-				t0 = pp[i1 - 1]; // check boundary cases, again
+				t0 = pp[i1 - 1];
+
+				// check boundary cases, again
 
 				if (t0 === undefined) {
 					this._cachedIndex = 0;
 					return this.copySampleValue_(0);
 				}
-
 				if (t1 === undefined) {
 					i1 = pp.length;
 					this._cachedIndex = i1;
@@ -28230,41 +25476,39 @@ class Interpolant {
 				}
 			} // seek
 
-
 			this._cachedIndex = i1;
 			this.intervalChanged_(i1, t0, t1);
 		} // validate_interval
 
-
 		return this.interpolate_(i1, t0, t, t1);
 	}
-
 	getSettings_() {
 		return this.settings || this.DefaultSettings_;
 	}
-
 	copySampleValue_(index) {
 		// copies a sample value to the result buffer
-		const result = this.resultBuffer,
-					values = this.sampleValues,
-					stride = this.valueSize,
-					offset = index * stride;
 
+		const result = this.resultBuffer,
+			values = this.sampleValues,
+			stride = this.valueSize,
+			offset = index * stride;
 		for (let i = 0; i !== stride; ++i) {
 			result[i] = values[offset + i];
 		}
-
 		return result;
-	} // Template methods for derived classes:
+	}
 
+	// Template methods for derived classes:
 
 	interpolate_() {
-		throw new Error('call to abstract method'); // implementations shall return this.resultBuffer
+		throw new Error('call to abstract method');
+		// implementations shall return this.resultBuffer
 	}
 
-	intervalChanged_() {// empty
-	}
+	intervalChanged_() {
 
+		// empty
+	}
 }
 
 /**
@@ -28287,14 +25531,12 @@ class CubicInterpolant extends Interpolant {
 			endingEnd: ZeroCurvatureEnding
 		};
 	}
-
 	intervalChanged_(i1, t0, t1) {
 		const pp = this.parameterPositions;
 		let iPrev = i1 - 2,
-				iNext = i1 + 1,
-				tPrev = pp[iPrev],
-				tNext = pp[iNext];
-
+			iNext = i1 + 1,
+			tPrev = pp[iPrev],
+			tNext = pp[iNext];
 		if (tPrev === undefined) {
 			switch (this.getSettings_().endingStart) {
 				case ZeroSlopeEnding:
@@ -28302,21 +25544,19 @@ class CubicInterpolant extends Interpolant {
 					iPrev = i1;
 					tPrev = 2 * t0 - t1;
 					break;
-
 				case WrapAroundEnding:
 					// use the other end of the curve
 					iPrev = pp.length - 2;
 					tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
 					break;
-
 				default:
 					// ZeroCurvatureEnding
+
 					// f''(t0) = 0 a.k.a. Natural Spline
 					iPrev = i1;
 					tPrev = t1;
 			}
 		}
-
 		if (tNext === undefined) {
 			switch (this.getSettings_().endingEnd) {
 				case ZeroSlopeEnding:
@@ -28324,78 +25564,73 @@ class CubicInterpolant extends Interpolant {
 					iNext = i1;
 					tNext = 2 * t1 - t0;
 					break;
-
 				case WrapAroundEnding:
 					// use the other end of the curve
 					iNext = 1;
 					tNext = t1 + pp[1] - pp[0];
 					break;
-
 				default:
 					// ZeroCurvatureEnding
+
 					// f''(tN) = 0, a.k.a. Natural Spline
 					iNext = i1 - 1;
 					tNext = t0;
 			}
 		}
-
 		const halfDt = (t1 - t0) * 0.5,
-					stride = this.valueSize;
+			stride = this.valueSize;
 		this._weightPrev = halfDt / (t0 - tPrev);
 		this._weightNext = halfDt / (tNext - t1);
 		this._offsetPrev = iPrev * stride;
 		this._offsetNext = iNext * stride;
 	}
-
 	interpolate_(i1, t0, t, t1) {
 		const result = this.resultBuffer,
-					values = this.sampleValues,
-					stride = this.valueSize,
-					o1 = i1 * stride,
-					o0 = o1 - stride,
-					oP = this._offsetPrev,
-					oN = this._offsetNext,
-					wP = this._weightPrev,
-					wN = this._weightNext,
-					p = (t - t0) / (t1 - t0),
-					pp = p * p,
-					ppp = pp * p; // evaluate polynomials
+			values = this.sampleValues,
+			stride = this.valueSize,
+			o1 = i1 * stride,
+			o0 = o1 - stride,
+			oP = this._offsetPrev,
+			oN = this._offsetNext,
+			wP = this._weightPrev,
+			wN = this._weightNext,
+			p = (t - t0) / (t1 - t0),
+			pp = p * p,
+			ppp = pp * p;
+
+		// evaluate polynomials
 
 		const sP = -wP * ppp + 2 * wP * pp - wP * p;
 		const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
 		const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
-		const sN = wN * ppp - wN * pp; // combine data linearly
+		const sN = wN * ppp - wN * pp;
+
+		// combine data linearly
 
 		for (let i = 0; i !== stride; ++i) {
 			result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
 		}
-
 		return result;
 	}
-
 }
 
 class LinearInterpolant extends Interpolant {
 	constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
 		super(parameterPositions, sampleValues, sampleSize, resultBuffer);
 	}
-
 	interpolate_(i1, t0, t, t1) {
 		const result = this.resultBuffer,
-					values = this.sampleValues,
-					stride = this.valueSize,
-					offset1 = i1 * stride,
-					offset0 = offset1 - stride,
-					weight1 = (t - t0) / (t1 - t0),
-					weight0 = 1 - weight1;
-
+			values = this.sampleValues,
+			stride = this.valueSize,
+			offset1 = i1 * stride,
+			offset0 = offset1 - stride,
+			weight1 = (t - t0) / (t1 - t0),
+			weight0 = 1 - weight1;
 		for (let i = 0; i !== stride; ++i) {
 			result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
 		}
-
 		return result;
 	}
-
 }
 
 /**
@@ -28408,13 +25643,9 @@ class DiscreteInterpolant extends Interpolant {
 	constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
 		super(parameterPositions, sampleValues, sampleSize, resultBuffer);
 	}
-
-	interpolate_(i1
-	/*, t0, t, t1 */
-	) {
+	interpolate_(i1 /*, t0, t, t1 */) {
 		return this.copySampleValue_(i1 - 1);
 	}
-
 }
 
 class KeyframeTrack {
@@ -28425,14 +25656,16 @@ class KeyframeTrack {
 		this.times = convertArray(times, this.TimeBufferType);
 		this.values = convertArray(values, this.ValueBufferType);
 		this.setInterpolation(interpolation || this.DefaultInterpolation);
-	} // Serialization (in static context, because of constructor invocation
-	// and automatic invocation of .toJSON):
+	}
 
+	// Serialization (in static context, because of constructor invocation
+	// and automatic invocation of .toJSON):
 
 	static toJSON(track) {
 		const trackType = track.constructor;
-		let json; // derived classes can define a static toJSON method
+		let json;
 
+		// derived classes can define a static toJSON method
 		if (trackType.toJSON !== this.toJSON) {
 			json = trackType.toJSON(track);
 		} else {
@@ -28443,49 +25676,38 @@ class KeyframeTrack {
 				'values': convertArray(track.values, Array)
 			};
 			const interpolation = track.getInterpolation();
-
 			if (interpolation !== track.DefaultInterpolation) {
 				json.interpolation = interpolation;
 			}
 		}
-
 		json.type = track.ValueTypeName; // mandatory
 
 		return json;
 	}
-
 	InterpolantFactoryMethodDiscrete(result) {
 		return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
 	}
-
 	InterpolantFactoryMethodLinear(result) {
 		return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
 	}
-
 	InterpolantFactoryMethodSmooth(result) {
 		return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
 	}
-
 	setInterpolation(interpolation) {
 		let factoryMethod;
-
 		switch (interpolation) {
 			case InterpolateDiscrete:
 				factoryMethod = this.InterpolantFactoryMethodDiscrete;
 				break;
-
 			case InterpolateLinear:
 				factoryMethod = this.InterpolantFactoryMethodLinear;
 				break;
-
 			case InterpolateSmooth:
 				factoryMethod = this.InterpolantFactoryMethodSmooth;
 				break;
 		}
-
 		if (factoryMethod === undefined) {
 			const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;
-
 			if (this.createInterpolant === undefined) {
 				// fall back to default, unless the default itself is messed up
 				if (interpolation !== this.DefaultInterpolation) {
@@ -28498,70 +25720,58 @@ class KeyframeTrack {
 			console.warn('THREE.KeyframeTrack:', message);
 			return this;
 		}
-
 		this.createInterpolant = factoryMethod;
 		return this;
 	}
-
 	getInterpolation() {
 		switch (this.createInterpolant) {
 			case this.InterpolantFactoryMethodDiscrete:
 				return InterpolateDiscrete;
-
 			case this.InterpolantFactoryMethodLinear:
 				return InterpolateLinear;
-
 			case this.InterpolantFactoryMethodSmooth:
 				return InterpolateSmooth;
 		}
 	}
-
 	getValueSize() {
 		return this.values.length / this.times.length;
-	} // move all keyframes either forwards or backwards in time
-
+	}
 
+	// move all keyframes either forwards or backwards in time
 	shift(timeOffset) {
 		if (timeOffset !== 0.0) {
 			const times = this.times;
-
 			for (let i = 0, n = times.length; i !== n; ++i) {
 				times[i] += timeOffset;
 			}
 		}
-
 		return this;
-	} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
-
+	}
 
+	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
 	scale(timeScale) {
 		if (timeScale !== 1.0) {
 			const times = this.times;
-
 			for (let i = 0, n = times.length; i !== n; ++i) {
 				times[i] *= timeScale;
 			}
 		}
-
 		return this;
-	} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
-	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
-
+	}
 
+	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
+	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
 	trim(startTime, endTime) {
 		const times = this.times,
-					nKeys = times.length;
+			nKeys = times.length;
 		let from = 0,
-				to = nKeys - 1;
-
+			to = nKeys - 1;
 		while (from !== nKeys && times[from] < startTime) {
 			++from;
 		}
-
 		while (to !== -1 && times[to] > endTime) {
 			--to;
 		}
-
 		++to; // inclusive -> exclusive bound
 
 		if (from !== 0 || to !== nKeys) {
@@ -28570,59 +25780,47 @@ class KeyframeTrack {
 				to = Math.max(to, 1);
 				from = to - 1;
 			}
-
 			const stride = this.getValueSize();
 			this.times = arraySlice(times, from, to);
 			this.values = arraySlice(this.values, from * stride, to * stride);
 		}
-
 		return this;
-	} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
-
+	}
 
+	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
 	validate() {
 		let valid = true;
 		const valueSize = this.getValueSize();
-
 		if (valueSize - Math.floor(valueSize) !== 0) {
 			console.error('THREE.KeyframeTrack: Invalid value size in track.', this);
 			valid = false;
 		}
-
 		const times = this.times,
-					values = this.values,
-					nKeys = times.length;
-
+			values = this.values,
+			nKeys = times.length;
 		if (nKeys === 0) {
 			console.error('THREE.KeyframeTrack: Track is empty.', this);
 			valid = false;
 		}
-
 		let prevTime = null;
-
 		for (let i = 0; i !== nKeys; i++) {
 			const currTime = times[i];
-
 			if (typeof currTime === 'number' && isNaN(currTime)) {
 				console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);
 				valid = false;
 				break;
 			}
-
 			if (prevTime !== null && prevTime > currTime) {
 				console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);
 				valid = false;
 				break;
 			}
-
 			prevTime = currTime;
 		}
-
 		if (values !== undefined) {
 			if (isTypedArray(values)) {
 				for (let i = 0, n = values.length; i !== n; ++i) {
 					const value = values[i];
-
 					if (isNaN(value)) {
 						console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);
 						valid = false;
@@ -28631,36 +25829,35 @@ class KeyframeTrack {
 				}
 			}
 		}
-
 		return valid;
-	} // removes equivalent sequential keys as common in morph target sequences
-	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
-
+	}
 
+	// removes equivalent sequential keys as common in morph target sequences
+	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
 	optimize() {
 		// times or values may be shared with other tracks, so overwriting is unsafe
 		const times = arraySlice(this.times),
-					values = arraySlice(this.values),
-					stride = this.getValueSize(),
-					smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
-					lastIndex = times.length - 1;
+			values = arraySlice(this.values),
+			stride = this.getValueSize(),
+			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
+			lastIndex = times.length - 1;
 		let writeIndex = 1;
-
 		for (let i = 1; i < lastIndex; ++i) {
 			let keep = false;
 			const time = times[i];
-			const timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time
+			const timeNext = times[i + 1];
+
+			// remove adjacent keyframes scheduled at the same time
 
 			if (time !== timeNext && (i !== 1 || time !== times[0])) {
 				if (!smoothInterpolation) {
 					// remove unnecessary keyframes same as their neighbors
-					const offset = i * stride,
-								offsetP = offset - stride,
-								offsetN = offset + stride;
 
+					const offset = i * stride,
+						offsetP = offset - stride,
+						offsetN = offset + stride;
 					for (let j = 0; j !== stride; ++j) {
 						const value = values[offset + j];
-
 						if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
 							keep = true;
 							break;
@@ -28669,35 +25866,32 @@ class KeyframeTrack {
 				} else {
 					keep = true;
 				}
-			} // in-place compaction
+			}
 
+			// in-place compaction
 
 			if (keep) {
 				if (i !== writeIndex) {
 					times[writeIndex] = times[i];
 					const readOffset = i * stride,
-								writeOffset = writeIndex * stride;
-
+						writeOffset = writeIndex * stride;
 					for (let j = 0; j !== stride; ++j) {
 						values[writeOffset + j] = values[readOffset + j];
 					}
 				}
-
 				++writeIndex;
 			}
-		} // flush last keyframe (compaction looks ahead)
+		}
 
+		// flush last keyframe (compaction looks ahead)
 
 		if (lastIndex > 0) {
 			times[writeIndex] = times[lastIndex];
-
 			for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
 				values[writeOffset + j] = values[readOffset + j];
 			}
-
 			++writeIndex;
 		}
-
 		if (writeIndex !== times.length) {
 			this.times = arraySlice(times, 0, writeIndex);
 			this.values = arraySlice(values, 0, writeIndex * stride);
@@ -28705,22 +25899,19 @@ class KeyframeTrack {
 			this.times = times;
 			this.values = values;
 		}
-
 		return this;
 	}
-
 	clone() {
 		const times = arraySlice(this.times, 0);
 		const values = arraySlice(this.values, 0);
 		const TypedKeyframeTrack = this.constructor;
-		const track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.
+		const track = new TypedKeyframeTrack(this.name, times, values);
 
+		// Interpolant argument to constructor is not saved, so copy the factory method directly.
 		track.createInterpolant = this.createInterpolant;
 		return track;
 	}
-
 }
-
 KeyframeTrack.prototype.TimeBufferType = Float32Array;
 KeyframeTrack.prototype.ValueBufferType = Float32Array;
 KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
@@ -28728,30 +25919,24 @@ KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
 /**
  * A Track of Boolean keyframe values.
  */
-
 class BooleanKeyframeTrack extends KeyframeTrack {}
-
 BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
 BooleanKeyframeTrack.prototype.ValueBufferType = Array;
 BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
 BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
-BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed
+BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
 
 /**
  * A Track of keyframe values that represent color.
  */
-
 class ColorKeyframeTrack extends KeyframeTrack {}
-
-ColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited
+ColorKeyframeTrack.prototype.ValueTypeName = 'color';
 
 /**
  * A Track of numeric keyframe values.
  */
-
 class NumberKeyframeTrack extends KeyframeTrack {}
-
-NumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited
+NumberKeyframeTrack.prototype.ValueTypeName = 'number';
 
 /**
  * Spherical linear unit quaternion interpolant.
@@ -28761,45 +25946,36 @@ class QuaternionLinearInterpolant extends Interpolant {
 	constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
 		super(parameterPositions, sampleValues, sampleSize, resultBuffer);
 	}
-
 	interpolate_(i1, t0, t, t1) {
 		const result = this.resultBuffer,
-					values = this.sampleValues,
-					stride = this.valueSize,
-					alpha = (t - t0) / (t1 - t0);
+			values = this.sampleValues,
+			stride = this.valueSize,
+			alpha = (t - t0) / (t1 - t0);
 		let offset = i1 * stride;
-
 		for (let end = offset + stride; offset !== end; offset += 4) {
 			Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
 		}
-
 		return result;
 	}
-
 }
 
 /**
  * A Track of quaternion keyframe values.
  */
-
 class QuaternionKeyframeTrack extends KeyframeTrack {
 	InterpolantFactoryMethodLinear(result) {
 		return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
 	}
-
 }
-
-QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited
-
+QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';
+// ValueBufferType is inherited
 QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
 QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
 
 /**
  * A Track that interpolates Strings
  */
-
 class StringKeyframeTrack extends KeyframeTrack {}
-
 StringKeyframeTrack.prototype.ValueTypeName = 'string';
 StringKeyframeTrack.prototype.ValueBufferType = Array;
 StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
@@ -28809,10 +25985,8 @@ StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
 /**
  * A Track of vectored keyframe values.
  */
-
 class VectorKeyframeTrack extends KeyframeTrack {}
-
-VectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited
+VectorKeyframeTrack.prototype.ValueTypeName = 'vector';
 
 class AnimationClip {
 	constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {
@@ -28820,30 +25994,27 @@ class AnimationClip {
 		this.tracks = tracks;
 		this.duration = duration;
 		this.blendMode = blendMode;
-		this.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks
+		this.uuid = generateUUID();
 
+		// this means it should figure out its duration by scanning the tracks
 		if (this.duration < 0) {
 			this.resetDuration();
 		}
 	}
-
 	static parse(json) {
 		const tracks = [],
-					jsonTracks = json.tracks,
-					frameTime = 1.0 / (json.fps || 1.0);
-
+			jsonTracks = json.tracks,
+			frameTime = 1.0 / (json.fps || 1.0);
 		for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
 			tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
 		}
-
 		const clip = new this(json.name, json.duration, tracks, json.blendMode);
 		clip.uuid = json.uuid;
 		return clip;
 	}
-
 	static toJSON(clip) {
 		const tracks = [],
-					clipTracks = clip.tracks;
+			clipTracks = clip.tracks;
 		const json = {
 			'name': clip.name,
 			'duration': clip.duration,
@@ -28851,18 +26022,14 @@ class AnimationClip {
 			'uuid': clip.uuid,
 			'blendMode': clip.blendMode
 		};
-
 		for (let i = 0, n = clipTracks.length; i !== n; ++i) {
 			tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
 		}
-
 		return json;
 	}
-
 	static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
 		const numMorphTargets = morphTargetSequence.length;
 		const tracks = [];
-
 		for (let i = 0; i < numMorphTargets; i++) {
 			let times = [];
 			let values = [];
@@ -28870,204 +26037,174 @@ class AnimationClip {
 			values.push(0, 1, 0);
 			const order = getKeyframeOrder(times);
 			times = sortedArray(times, 1, order);
-			values = sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the
-			// last frame as well for perfect loop.
+			values = sortedArray(values, 1, order);
 
+			// if there is a key at the first frame, duplicate it as the
+			// last frame as well for perfect loop.
 			if (!noLoop && times[0] === 0) {
 				times.push(numMorphTargets);
 				values.push(values[0]);
 			}
-
 			tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));
 		}
-
 		return new this(name, -1, tracks);
 	}
-
 	static findByName(objectOrClipArray, name) {
 		let clipArray = objectOrClipArray;
-
 		if (!Array.isArray(objectOrClipArray)) {
 			const o = objectOrClipArray;
 			clipArray = o.geometry && o.geometry.animations || o.animations;
 		}
-
 		for (let i = 0; i < clipArray.length; i++) {
 			if (clipArray[i].name === name) {
 				return clipArray[i];
 			}
 		}
-
 		return null;
 	}
-
 	static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
-		const animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences
+		const animationToMorphTargets = {};
+
+		// tested with https://regex101.com/ on trick sequences
 		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
+		const pattern = /^([\w-]*?)([\d]+)$/;
 
-		const pattern = /^([\w-]*?)([\d]+)$/; // sort morph target names into animation groups based
+		// sort morph target names into animation groups based
 		// patterns like Walk_001, Walk_002, Run_001, Run_002
-
 		for (let i = 0, il = morphTargets.length; i < il; i++) {
 			const morphTarget = morphTargets[i];
 			const parts = morphTarget.name.match(pattern);
-
 			if (parts && parts.length > 1) {
 				const name = parts[1];
 				let animationMorphTargets = animationToMorphTargets[name];
-
 				if (!animationMorphTargets) {
 					animationToMorphTargets[name] = animationMorphTargets = [];
 				}
-
 				animationMorphTargets.push(morphTarget);
 			}
 		}
-
 		const clips = [];
-
 		for (const name in animationToMorphTargets) {
 			clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
 		}
-
 		return clips;
-	} // parse the animation.hierarchy format
-
+	}
 
+	// parse the animation.hierarchy format
 	static parseAnimation(animation, bones) {
 		if (!animation) {
 			console.error('THREE.AnimationClip: No animation in JSONLoader data.');
 			return null;
 		}
-
 		const addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {
 			// only return track if there are actually keys.
 			if (animationKeys.length !== 0) {
 				const times = [];
 				const values = [];
-				flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again
+				flattenJSON(animationKeys, times, values, propertyName);
 
+				// empty keys are filtered out, so check again
 				if (times.length !== 0) {
 					destTracks.push(new trackType(trackName, times, values));
 				}
 			}
 		};
-
 		const tracks = [];
 		const clipName = animation.name || 'default';
 		const fps = animation.fps || 30;
-		const blendMode = animation.blendMode; // automatic length determination in AnimationClip.
+		const blendMode = animation.blendMode;
 
+		// automatic length determination in AnimationClip.
 		let duration = animation.length || -1;
 		const hierarchyTracks = animation.hierarchy || [];
-
 		for (let h = 0; h < hierarchyTracks.length; h++) {
-			const animationKeys = hierarchyTracks[h].keys; // skip empty tracks
+			const animationKeys = hierarchyTracks[h].keys;
 
-			if (!animationKeys || animationKeys.length === 0) continue; // process morph targets
+			// skip empty tracks
+			if (!animationKeys || animationKeys.length === 0) continue;
 
+			// process morph targets
 			if (animationKeys[0].morphTargets) {
 				// figure out all morph targets used in this track
 				const morphTargetNames = {};
 				let k;
-
 				for (k = 0; k < animationKeys.length; k++) {
 					if (animationKeys[k].morphTargets) {
 						for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
 							morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
 						}
 					}
-				} // create a track for each morph target with all zero
+				}
+
+				// create a track for each morph target with all zero
 				// morphTargetInfluences except for the keys in which
 				// the morphTarget is named.
-
-
 				for (const morphTargetName in morphTargetNames) {
 					const times = [];
 					const values = [];
-
 					for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
 						const animationKey = animationKeys[k];
 						times.push(animationKey.time);
 						values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
 					}
-
 					tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));
 				}
-
 				duration = morphTargetNames.length * fps;
 			} else {
 				// ...assume skeletal animation
+
 				const boneName = '.bones[' + bones[h].name + ']';
 				addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);
 				addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);
 				addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);
 			}
 		}
-
 		if (tracks.length === 0) {
 			return null;
 		}
-
 		const clip = new this(clipName, duration, tracks, blendMode);
 		return clip;
 	}
-
 	resetDuration() {
 		const tracks = this.tracks;
 		let duration = 0;
-
 		for (let i = 0, n = tracks.length; i !== n; ++i) {
 			const track = this.tracks[i];
 			duration = Math.max(duration, track.times[track.times.length - 1]);
 		}
-
 		this.duration = duration;
 		return this;
 	}
-
 	trim() {
 		for (let i = 0; i < this.tracks.length; i++) {
 			this.tracks[i].trim(0, this.duration);
 		}
-
 		return this;
 	}
-
 	validate() {
 		let valid = true;
-
 		for (let i = 0; i < this.tracks.length; i++) {
 			valid = valid && this.tracks[i].validate();
 		}
-
 		return valid;
 	}
-
 	optimize() {
 		for (let i = 0; i < this.tracks.length; i++) {
 			this.tracks[i].optimize();
 		}
-
 		return this;
 	}
-
 	clone() {
 		const tracks = [];
-
 		for (let i = 0; i < this.tracks.length; i++) {
 			tracks.push(this.tracks[i].clone());
 		}
-
 		return new this.constructor(this.name, this.duration, tracks, this.blendMode);
 	}
-
 	toJSON() {
 		return this.constructor.toJSON(this);
 	}
-
 }
-
 function getTrackTypeForValueTypeName(typeName) {
 	switch (typeName.toLowerCase()) {
 		case 'scalar':
@@ -29076,46 +26213,37 @@ function getTrackTypeForValueTypeName(typeName) {
 		case 'number':
 		case 'integer':
 			return NumberKeyframeTrack;
-
 		case 'vector':
 		case 'vector2':
 		case 'vector3':
 		case 'vector4':
 			return VectorKeyframeTrack;
-
 		case 'color':
 			return ColorKeyframeTrack;
-
 		case 'quaternion':
 			return QuaternionKeyframeTrack;
-
 		case 'bool':
 		case 'boolean':
 			return BooleanKeyframeTrack;
-
 		case 'string':
 			return StringKeyframeTrack;
 	}
-
 	throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
 }
-
 function parseKeyframeTrack(json) {
 	if (json.type === undefined) {
 		throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');
 	}
-
 	const trackType = getTrackTypeForValueTypeName(json.type);
-
 	if (json.times === undefined) {
 		const times = [],
-					values = [];
+			values = [];
 		flattenJSON(json.keys, times, values, 'value');
 		json.times = times;
 		json.values = values;
-	} // derived classes can define a static parse method
-
+	}
 
+	// derived classes can define a static parse method
 	if (trackType.parse !== undefined) {
 		return trackType.parse(json);
 	} else {
@@ -29128,12 +26256,16 @@ const Cache = {
 	enabled: false,
 	files: {},
 	add: function (key, file) {
-		if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );
+		if (this.enabled === false) return;
+
+		// console.log( 'THREE.Cache', 'Adding key:', key );
 
 		this.files[key] = file;
 	},
 	get: function (key) {
-		if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );
+		if (this.enabled === false) return;
+
+		// console.log( 'THREE.Cache', 'Checking key:', key );
 
 		return this.files[key];
 	},
@@ -29152,76 +26284,62 @@ class LoadingManager {
 		let itemsLoaded = 0;
 		let itemsTotal = 0;
 		let urlModifier = undefined;
-		const handlers = []; // Refer to #5689 for the reason why we don't set .onStart
+		const handlers = [];
+
+		// Refer to #5689 for the reason why we don't set .onStart
 		// in the constructor
 
 		this.onStart = undefined;
 		this.onLoad = onLoad;
 		this.onProgress = onProgress;
 		this.onError = onError;
-
 		this.itemStart = function (url) {
 			itemsTotal++;
-
 			if (isLoading === false) {
 				if (scope.onStart !== undefined) {
 					scope.onStart(url, itemsLoaded, itemsTotal);
 				}
 			}
-
 			isLoading = true;
 		};
-
 		this.itemEnd = function (url) {
 			itemsLoaded++;
-
 			if (scope.onProgress !== undefined) {
 				scope.onProgress(url, itemsLoaded, itemsTotal);
 			}
-
 			if (itemsLoaded === itemsTotal) {
 				isLoading = false;
-
 				if (scope.onLoad !== undefined) {
 					scope.onLoad();
 				}
 			}
 		};
-
 		this.itemError = function (url) {
 			if (scope.onError !== undefined) {
 				scope.onError(url);
 			}
 		};
-
 		this.resolveURL = function (url) {
 			if (urlModifier) {
 				return urlModifier(url);
 			}
-
 			return url;
 		};
-
 		this.setURLModifier = function (transform) {
 			urlModifier = transform;
 			return this;
 		};
-
 		this.addHandler = function (regex, loader) {
 			handlers.push(regex, loader);
 			return this;
 		};
-
 		this.removeHandler = function (regex) {
 			const index = handlers.indexOf(regex);
-
 			if (index !== -1) {
 				handlers.splice(index, 2);
 			}
-
 			return this;
 		};
-
 		this.getHandler = function (file) {
 			for (let i = 0, l = handlers.length; i < l; i += 2) {
 				const regex = handlers[i];
@@ -29232,13 +26350,10 @@ class LoadingManager {
 					return loader;
 				}
 			}
-
 			return null;
 		};
 	}
-
 }
-
 const DefaultLoadingManager = /*@__PURE__*/new LoadingManager();
 
 class Loader {
@@ -29250,66 +26365,52 @@ class Loader {
 		this.resourcePath = '';
 		this.requestHeader = {};
 	}
-
 	load() {}
-
 	loadAsync(url, onProgress) {
 		const scope = this;
 		return new Promise(function (resolve, reject) {
 			scope.load(url, resolve, onProgress, reject);
 		});
 	}
-
 	parse() {}
-
 	setCrossOrigin(crossOrigin) {
 		this.crossOrigin = crossOrigin;
 		return this;
 	}
-
 	setWithCredentials(value) {
 		this.withCredentials = value;
 		return this;
 	}
-
 	setPath(path) {
 		this.path = path;
 		return this;
 	}
-
 	setResourcePath(resourcePath) {
 		this.resourcePath = resourcePath;
 		return this;
 	}
-
 	setRequestHeader(requestHeader) {
 		this.requestHeader = requestHeader;
 		return this;
 	}
-
 }
 
 const loading = {};
-
 class HttpError extends Error {
 	constructor(message, response) {
 		super(message);
 		this.response = response;
 	}
-
 }
-
 class FileLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		if (url === undefined) url = '';
 		if (this.path !== undefined) url = this.path + url;
 		url = this.manager.resolveURL(url);
 		const cached = Cache.get(url);
-
 		if (cached !== undefined) {
 			this.manager.itemStart(url);
 			setTimeout(() => {
@@ -29317,8 +26418,9 @@ class FileLoader extends Loader {
 				this.manager.itemEnd(url);
 			}, 0);
 			return cached;
-		} // Check if request is duplicate
+		}
 
+		// Check if request is duplicate
 
 		if (loading[url] !== undefined) {
 			loading[url].push({
@@ -29327,51 +26429,56 @@ class FileLoader extends Loader {
 				onError: onError
 			});
 			return;
-		} // Initialise array for duplicate requests
-
+		}
 
+		// Initialise array for duplicate requests
 		loading[url] = [];
 		loading[url].push({
 			onLoad: onLoad,
 			onProgress: onProgress,
 			onError: onError
-		}); // create request
+		});
 
+		// create request
 		const req = new Request(url, {
 			headers: new Headers(this.requestHeader),
-			credentials: this.withCredentials ? 'include' : 'same-origin' // An abort controller could be added within a future PR
-
-		}); // record states ( avoid data race )
+			credentials: this.withCredentials ? 'include' : 'same-origin'
+			// An abort controller could be added within a future PR
+		});
 
+		// record states ( avoid data race )
 		const mimeType = this.mimeType;
-		const responseType = this.responseType; // start the fetch
+		const responseType = this.responseType;
 
+		// start the fetch
 		fetch(req).then(response => {
 			if (response.status === 200 || response.status === 0) {
 				// Some browsers return HTTP Status 0 when using non-http protocol
 				// e.g. 'file://' or 'data://'. Handle as success.
+
 				if (response.status === 0) {
 					console.warn('THREE.FileLoader: HTTP Status 0 received.');
-				} // Workaround: Checking if response.body === undefined for Alipay browser #23548
+				}
 
+				// Workaround: Checking if response.body === undefined for Alipay browser #23548
 
 				if (typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined) {
 					return response;
 				}
-
 				const callbacks = loading[url];
-				const reader = response.body.getReader(); // Nginx needs X-File-Size check
-				// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content
+				const reader = response.body.getReader();
 
+				// Nginx needs X-File-Size check
+				// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content
 				const contentLength = response.headers.get('Content-Length') || response.headers.get('X-File-Size');
 				const total = contentLength ? parseInt(contentLength) : 0;
 				const lengthComputable = total !== 0;
-				let loaded = 0; // periodically read data into the new stream tracking while download progress
+				let loaded = 0;
 
+				// periodically read data into the new stream tracking while download progress
 				const stream = new ReadableStream({
 					start(controller) {
 						readData();
-
 						function readData() {
 							reader.read().then(({
 								done,
@@ -29386,19 +26493,16 @@ class FileLoader extends Loader {
 										loaded,
 										total
 									});
-
 									for (let i = 0, il = callbacks.length; i < il; i++) {
 										const callback = callbacks[i];
 										if (callback.onProgress) callback.onProgress(event);
 									}
-
 									controller.enqueue(value);
 									readData();
 								}
 							});
 						}
 					}
-
 				});
 				return new Response(stream);
 			} else {
@@ -29408,19 +26512,15 @@ class FileLoader extends Loader {
 			switch (responseType) {
 				case 'arraybuffer':
 					return response.arrayBuffer();
-
 				case 'blob':
 					return response.blob();
-
 				case 'document':
 					return response.text().then(text => {
 						const parser = new DOMParser();
 						return parser.parseFromString(text, mimeType);
 					});
-
 				case 'json':
 					return response.json();
-
 				default:
 					if (mimeType === undefined) {
 						return response.text();
@@ -29432,7 +26532,6 @@ class FileLoader extends Loader {
 						const decoder = new TextDecoder(label);
 						return response.arrayBuffer().then(ab => decoder.decode(ab));
 					}
-
 			}
 		}).then(data => {
 			// Add to cache only on HTTP success, so that we do not cache
@@ -29440,52 +26539,44 @@ class FileLoader extends Loader {
 			Cache.add(url, data);
 			const callbacks = loading[url];
 			delete loading[url];
-
 			for (let i = 0, il = callbacks.length; i < il; i++) {
 				const callback = callbacks[i];
 				if (callback.onLoad) callback.onLoad(data);
 			}
 		}).catch(err => {
 			// Abort errors and other errors are handled the same
-			const callbacks = loading[url];
 
+			const callbacks = loading[url];
 			if (callbacks === undefined) {
 				// When onLoad was called and url was deleted in `loading`
 				this.manager.itemError(url);
 				throw err;
 			}
-
 			delete loading[url];
-
 			for (let i = 0, il = callbacks.length; i < il; i++) {
 				const callback = callbacks[i];
 				if (callback.onError) callback.onError(err);
 			}
-
 			this.manager.itemError(url);
 		}).finally(() => {
 			this.manager.itemEnd(url);
 		});
 		this.manager.itemStart(url);
 	}
-
 	setResponseType(value) {
 		this.responseType = value;
 		return this;
 	}
-
 	setMimeType(value) {
 		this.mimeType = value;
 		return this;
 	}
-
 }
 
 class AnimationLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		const scope = this;
 		const loader = new FileLoader(this.manager);
@@ -29501,23 +26592,18 @@ class AnimationLoader extends Loader {
 				} else {
 					console.error(e);
 				}
-
 				scope.manager.itemError(url);
 			}
 		}, onProgress, onError);
 	}
-
 	parse(json) {
 		const animations = [];
-
 		for (let i = 0; i < json.length; i++) {
 			const clip = AnimationClip.parse(json[i]);
 			animations.push(clip);
 		}
-
 		return animations;
 	}
-
 }
 
 /**
@@ -29530,7 +26616,6 @@ class CompressedTextureLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		const scope = this;
 		const images = [];
@@ -29541,7 +26626,6 @@ class CompressedTextureLoader extends Loader {
 		loader.setRequestHeader(this.requestHeader);
 		loader.setWithCredentials(scope.withCredentials);
 		let loaded = 0;
-
 		function loadTexture(i) {
 			loader.load(url[i], function (buffer) {
 				const texDatas = scope.parse(buffer, true);
@@ -29552,7 +26636,6 @@ class CompressedTextureLoader extends Loader {
 					mipmaps: texDatas.mipmaps
 				};
 				loaded += 1;
-
 				if (loaded === 6) {
 					if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
 					texture.image = images;
@@ -29562,24 +26645,21 @@ class CompressedTextureLoader extends Loader {
 				}
 			}, onProgress, onError);
 		}
-
 		if (Array.isArray(url)) {
 			for (let i = 0, il = url.length; i < il; ++i) {
 				loadTexture(i);
 			}
 		} else {
 			// compressed cubemap texture stored in a single DDS file
+
 			loader.load(url, function (buffer) {
 				const texDatas = scope.parse(buffer, true);
-
 				if (texDatas.isCubemap) {
 					const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
-
 					for (let f = 0; f < faces; f++) {
 						images[f] = {
 							mipmaps: []
 						};
-
 						for (let i = 0; i < texDatas.mipmapCount; i++) {
 							images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
 							images[f].format = texDatas.format;
@@ -29587,40 +26667,33 @@ class CompressedTextureLoader extends Loader {
 							images[f].height = texDatas.height;
 						}
 					}
-
 					texture.image = images;
 				} else {
 					texture.image.width = texDatas.width;
 					texture.image.height = texDatas.height;
 					texture.mipmaps = texDatas.mipmaps;
 				}
-
 				if (texDatas.mipmapCount === 1) {
 					texture.minFilter = LinearFilter;
 				}
-
 				texture.format = texDatas.format;
 				texture.needsUpdate = true;
 				if (onLoad) onLoad(texture);
 			}, onProgress, onError);
 		}
-
 		return texture;
 	}
-
 }
 
 class ImageLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		if (this.path !== undefined) url = this.path + url;
 		url = this.manager.resolveURL(url);
 		const scope = this;
 		const cached = Cache.get(url);
-
 		if (cached !== undefined) {
 			scope.manager.itemStart(url);
 			setTimeout(function () {
@@ -29629,73 +26702,59 @@ class ImageLoader extends Loader {
 			}, 0);
 			return cached;
 		}
-
 		const image = createElementNS('img');
-
 		function onImageLoad() {
 			removeEventListeners();
 			Cache.add(url, this);
 			if (onLoad) onLoad(this);
 			scope.manager.itemEnd(url);
 		}
-
 		function onImageError(event) {
 			removeEventListeners();
 			if (onError) onError(event);
 			scope.manager.itemError(url);
 			scope.manager.itemEnd(url);
 		}
-
 		function removeEventListeners() {
 			image.removeEventListener('load', onImageLoad, false);
 			image.removeEventListener('error', onImageError, false);
 		}
-
 		image.addEventListener('load', onImageLoad, false);
 		image.addEventListener('error', onImageError, false);
-
 		if (url.slice(0, 5) !== 'data:') {
 			if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
 		}
-
 		scope.manager.itemStart(url);
 		image.src = url;
 		return image;
 	}
-
 }
 
 class CubeTextureLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(urls, onLoad, onProgress, onError) {
 		const texture = new CubeTexture();
 		const loader = new ImageLoader(this.manager);
 		loader.setCrossOrigin(this.crossOrigin);
 		loader.setPath(this.path);
 		let loaded = 0;
-
 		function loadTexture(i) {
 			loader.load(urls[i], function (image) {
 				texture.images[i] = image;
 				loaded++;
-
 				if (loaded === 6) {
 					texture.needsUpdate = true;
 					if (onLoad) onLoad(texture);
 				}
 			}, undefined, onError);
 		}
-
 		for (let i = 0; i < urls.length; ++i) {
 			loadTexture(i);
 		}
-
 		return texture;
 	}
-
 }
 
 /**
@@ -29708,7 +26767,6 @@ class DataTextureLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		const scope = this;
 		const texture = new DataTexture();
@@ -29720,7 +26778,6 @@ class DataTextureLoader extends Loader {
 		loader.load(url, function (buffer) {
 			const texData = scope.parse(buffer);
 			if (!texData) return;
-
 			if (texData.image !== undefined) {
 				texture.image = texData.image;
 			} else if (texData.data !== undefined) {
@@ -29728,29 +26785,23 @@ class DataTextureLoader extends Loader {
 				texture.image.height = texData.height;
 				texture.image.data = texData.data;
 			}
-
 			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
 			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
 			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
 			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
 			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
-
 			if (texData.encoding !== undefined) {
 				texture.encoding = texData.encoding;
 			}
-
 			if (texData.flipY !== undefined) {
 				texture.flipY = texData.flipY;
 			}
-
 			if (texData.format !== undefined) {
 				texture.format = texData.format;
 			}
-
 			if (texData.type !== undefined) {
 				texture.type = texData.type;
 			}
-
 			if (texData.mipmaps !== undefined) {
 				texture.mipmaps = texData.mipmaps;
 				texture.minFilter = LinearMipmapLinearFilter; // presumably...
@@ -29759,24 +26810,20 @@ class DataTextureLoader extends Loader {
 			if (texData.mipmapCount === 1) {
 				texture.minFilter = LinearFilter;
 			}
-
 			if (texData.generateMipmaps !== undefined) {
 				texture.generateMipmaps = texData.generateMipmaps;
 			}
-
 			texture.needsUpdate = true;
 			if (onLoad) onLoad(texture, texData);
 		}, onProgress, onError);
 		return texture;
 	}
-
 }
 
 class TextureLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		const texture = new Texture();
 		const loader = new ImageLoader(this.manager);
@@ -29785,14 +26832,12 @@ class TextureLoader extends Loader {
 		loader.load(url, function (image) {
 			texture.image = image;
 			texture.needsUpdate = true;
-
 			if (onLoad !== undefined) {
 				onLoad(texture);
 			}
 		}, onProgress, onError);
 		return texture;
 	}
-
 }
 
 class Light extends Object3D {
@@ -29803,17 +26848,16 @@ class Light extends Object3D {
 		this.color = new Color(color);
 		this.intensity = intensity;
 	}
+	dispose() {
 
-	dispose() {// Empty here in base class; some subclasses override.
+		// Empty here in base class; some subclasses override.
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.color.copy(source.color);
 		this.intensity = source.intensity;
 		return this;
 	}
-
 	toJSON(meta) {
 		const data = super.toJSON(meta);
 		data.object.color = this.color.getHex();
@@ -29826,7 +26870,6 @@ class Light extends Object3D {
 		if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
 		return data;
 	}
-
 }
 
 class HemisphereLight extends Light {
@@ -29838,21 +26881,16 @@ class HemisphereLight extends Light {
 		this.updateMatrix();
 		this.groundColor = new Color(groundColor);
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.groundColor.copy(source.groundColor);
 		return this;
 	}
-
 }
 
 const _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();
-
 const _lightPositionWorld$1 = /*@__PURE__*/new Vector3();
-
 const _lookTarget$1 = /*@__PURE__*/new Vector3();
-
 class LightShadow {
 	constructor(camera) {
 		this.camera = camera;
@@ -29871,54 +26909,39 @@ class LightShadow {
 		this._viewportCount = 1;
 		this._viewports = [new Vector4(0, 0, 1, 1)];
 	}
-
 	getViewportCount() {
 		return this._viewportCount;
 	}
-
 	getFrustum() {
 		return this._frustum;
 	}
-
 	updateMatrices(light) {
 		const shadowCamera = this.camera;
 		const shadowMatrix = this.matrix;
-
 		_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
-
 		shadowCamera.position.copy(_lightPositionWorld$1);
-
 		_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
-
 		shadowCamera.lookAt(_lookTarget$1);
 		shadowCamera.updateMatrixWorld();
-
 		_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
-
 		this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
-
 		shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
 		shadowMatrix.multiply(_projScreenMatrix$1);
 	}
-
 	getViewport(viewportIndex) {
 		return this._viewports[viewportIndex];
 	}
-
 	getFrameExtents() {
 		return this._frameExtents;
 	}
-
 	dispose() {
 		if (this.map) {
 			this.map.dispose();
 		}
-
 		if (this.mapPass) {
 			this.mapPass.dispose();
 		}
 	}
-
 	copy(source) {
 		this.camera = source.camera.clone();
 		this.bias = source.bias;
@@ -29926,11 +26949,9 @@ class LightShadow {
 		this.mapSize.copy(source.mapSize);
 		return this;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	toJSON() {
 		const object = {};
 		if (this.bias !== 0) object.bias = this.bias;
@@ -29941,7 +26962,6 @@ class LightShadow {
 		delete object.camera.matrix;
 		return object;
 	}
-
 }
 
 class SpotLightShadow extends LightShadow {
@@ -29950,29 +26970,24 @@ class SpotLightShadow extends LightShadow {
 		this.isSpotLightShadow = true;
 		this.focus = 1;
 	}
-
 	updateMatrices(light) {
 		const camera = this.camera;
 		const fov = RAD2DEG * 2 * light.angle * this.focus;
 		const aspect = this.mapSize.width / this.mapSize.height;
 		const far = light.distance || camera.far;
-
 		if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
 			camera.fov = fov;
 			camera.aspect = aspect;
 			camera.far = far;
 			camera.updateProjectionMatrix();
 		}
-
 		super.updateMatrices(light);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.focus = source.focus;
 		return this;
 	}
-
 }
 
 class SpotLight extends Light {
@@ -29990,22 +27005,18 @@ class SpotLight extends Light {
 		this.map = null;
 		this.shadow = new SpotLightShadow();
 	}
-
 	get power() {
 		// compute the light's luminous power (in lumens) from its intensity (in candela)
 		// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
 		return this.intensity * Math.PI;
 	}
-
 	set power(power) {
 		// set the light's intensity (in candela) from the desired luminous power (in lumens)
 		this.intensity = power / Math.PI;
 	}
-
 	dispose() {
 		this.shadow.dispose();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.distance = source.distance;
@@ -30016,22 +27027,19 @@ class SpotLight extends Light {
 		this.shadow = source.shadow.clone();
 		return this;
 	}
-
 }
 
 const _projScreenMatrix = /*@__PURE__*/new Matrix4();
-
 const _lightPositionWorld = /*@__PURE__*/new Vector3();
-
 const _lookTarget = /*@__PURE__*/new Vector3();
-
 class PointLightShadow extends LightShadow {
 	constructor() {
 		super(new PerspectiveCamera(90, 1, 0.5, 500));
 		this.isPointLightShadow = true;
 		this._frameExtents = new Vector2(4, 2);
 		this._viewportCount = 6;
-		this._viewports = [// These viewports map a cube-map onto a 2D texture with the
+		this._viewports = [
+		// These viewports map a cube-map onto a 2D texture with the
 		// following orientation:
 		//
 		//	xzXZ
@@ -30043,45 +27051,41 @@ class PointLightShadow extends LightShadow {
 		// y - Negative y direction
 		// Z - Positive z direction
 		// z - Negative z direction
+
 		// positive X
-		new Vector4(2, 1, 1, 1), // negative X
-		new Vector4(0, 1, 1, 1), // positive Z
-		new Vector4(3, 1, 1, 1), // negative Z
-		new Vector4(1, 1, 1, 1), // positive Y
-		new Vector4(3, 0, 1, 1), // negative Y
+		new Vector4(2, 1, 1, 1),
+		// negative X
+		new Vector4(0, 1, 1, 1),
+		// positive Z
+		new Vector4(3, 1, 1, 1),
+		// negative Z
+		new Vector4(1, 1, 1, 1),
+		// positive Y
+		new Vector4(3, 0, 1, 1),
+		// negative Y
 		new Vector4(1, 0, 1, 1)];
 		this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];
 		this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];
 	}
-
 	updateMatrices(light, viewportIndex = 0) {
 		const camera = this.camera;
 		const shadowMatrix = this.matrix;
 		const far = light.distance || camera.far;
-
 		if (far !== camera.far) {
 			camera.far = far;
 			camera.updateProjectionMatrix();
 		}
-
 		_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
-
 		camera.position.copy(_lightPositionWorld);
-
 		_lookTarget.copy(camera.position);
-
 		_lookTarget.add(this._cubeDirections[viewportIndex]);
-
 		camera.up.copy(this._cubeUps[viewportIndex]);
 		camera.lookAt(_lookTarget);
 		camera.updateMatrixWorld();
 		shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
-
 		_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
-
 		this._frustum.setFromProjectionMatrix(_projScreenMatrix);
 	}
-
 }
 
 class PointLight extends Light {
@@ -30093,22 +27097,18 @@ class PointLight extends Light {
 		this.decay = decay;
 		this.shadow = new PointLightShadow();
 	}
-
 	get power() {
 		// compute the light's luminous power (in lumens) from its intensity (in candela)
 		// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
 		return this.intensity * 4 * Math.PI;
 	}
-
 	set power(power) {
 		// set the light's intensity (in candela) from the desired luminous power (in lumens)
 		this.intensity = power / (4 * Math.PI);
 	}
-
 	dispose() {
 		this.shadow.dispose();
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.distance = source.distance;
@@ -30116,7 +27116,6 @@ class PointLight extends Light {
 		this.shadow = source.shadow.clone();
 		return this;
 	}
-
 }
 
 class DirectionalLightShadow extends LightShadow {
@@ -30124,7 +27123,6 @@ class DirectionalLightShadow extends LightShadow {
 		super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
 		this.isDirectionalLightShadow = true;
 	}
-
 }
 
 class DirectionalLight extends Light {
@@ -30137,18 +27135,15 @@ class DirectionalLight extends Light {
 		this.target = new Object3D();
 		this.shadow = new DirectionalLightShadow();
 	}
-
 	dispose() {
 		this.shadow.dispose();
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.target = source.target.clone();
 		this.shadow = source.shadow.clone();
 		return this;
 	}
-
 }
 
 class AmbientLight extends Light {
@@ -30157,7 +27152,6 @@ class AmbientLight extends Light {
 		this.isAmbientLight = true;
 		this.type = 'AmbientLight';
 	}
-
 }
 
 class RectAreaLight extends Light {
@@ -30168,31 +27162,26 @@ class RectAreaLight extends Light {
 		this.width = width;
 		this.height = height;
 	}
-
 	get power() {
 		// compute the light's luminous power (in lumens) from its intensity (in nits)
 		return this.intensity * this.width * this.height * Math.PI;
 	}
-
 	set power(power) {
 		// set the light's intensity (in nits) from the desired luminous power (in lumens)
 		this.intensity = power / (this.width * this.height * Math.PI);
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.width = source.width;
 		this.height = source.height;
 		return this;
 	}
-
 	toJSON(meta) {
 		const data = super.toJSON(meta);
 		data.object.width = this.width;
 		data.object.height = this.height;
 		return data;
 	}
-
 }
 
 /**
@@ -30202,177 +27191,162 @@ class RectAreaLight extends Light {
  * Secondary reference:
  *	 https://www.ppsloan.org/publications/StupidSH36.pdf
  */
+
 // 3-band SH defined by 9 coefficients
 
 class SphericalHarmonics3 {
 	constructor() {
 		this.isSphericalHarmonics3 = true;
 		this.coefficients = [];
-
 		for (let i = 0; i < 9; i++) {
 			this.coefficients.push(new Vector3());
 		}
 	}
-
 	set(coefficients) {
 		for (let i = 0; i < 9; i++) {
 			this.coefficients[i].copy(coefficients[i]);
 		}
-
 		return this;
 	}
-
 	zero() {
 		for (let i = 0; i < 9; i++) {
 			this.coefficients[i].set(0, 0, 0);
 		}
-
 		return this;
-	} // get the radiance in the direction of the normal
-	// target is a Vector3
-
+	}
 
+	// get the radiance in the direction of the normal
+	// target is a Vector3
 	getAt(normal, target) {
 		// normal is assumed to be unit length
+
 		const x = normal.x,
-					y = normal.y,
-					z = normal.z;
-		const coeff = this.coefficients; // band 0
+			y = normal.y,
+			z = normal.z;
+		const coeff = this.coefficients;
 
-		target.copy(coeff[0]).multiplyScalar(0.282095); // band 1
+		// band 0
+		target.copy(coeff[0]).multiplyScalar(0.282095);
 
+		// band 1
 		target.addScaledVector(coeff[1], 0.488603 * y);
 		target.addScaledVector(coeff[2], 0.488603 * z);
-		target.addScaledVector(coeff[3], 0.488603 * x); // band 2
+		target.addScaledVector(coeff[3], 0.488603 * x);
 
+		// band 2
 		target.addScaledVector(coeff[4], 1.092548 * (x * y));
 		target.addScaledVector(coeff[5], 1.092548 * (y * z));
 		target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));
 		target.addScaledVector(coeff[7], 1.092548 * (x * z));
 		target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
 		return target;
-	} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
+	}
+
+	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
 	// target is a Vector3
 	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
-
-
 	getIrradianceAt(normal, target) {
 		// normal is assumed to be unit length
+
 		const x = normal.x,
-					y = normal.y,
-					z = normal.z;
-		const coeff = this.coefficients; // band 0
+			y = normal.y,
+			z = normal.z;
+		const coeff = this.coefficients;
 
+		// band 0
 		target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
-		// band 1
 
+		// band 1
 		target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603
-
 		target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);
-		target.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2
+		target.addScaledVector(coeff[3], 2.0 * 0.511664 * x);
 
+		// band 2
 		target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548
-
 		target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);
 		target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3
-
 		target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);
 		target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274
 
 		return target;
 	}
-
 	add(sh) {
 		for (let i = 0; i < 9; i++) {
 			this.coefficients[i].add(sh.coefficients[i]);
 		}
-
 		return this;
 	}
-
 	addScaledSH(sh, s) {
 		for (let i = 0; i < 9; i++) {
 			this.coefficients[i].addScaledVector(sh.coefficients[i], s);
 		}
-
 		return this;
 	}
-
 	scale(s) {
 		for (let i = 0; i < 9; i++) {
 			this.coefficients[i].multiplyScalar(s);
 		}
-
 		return this;
 	}
-
 	lerp(sh, alpha) {
 		for (let i = 0; i < 9; i++) {
 			this.coefficients[i].lerp(sh.coefficients[i], alpha);
 		}
-
 		return this;
 	}
-
 	equals(sh) {
 		for (let i = 0; i < 9; i++) {
 			if (!this.coefficients[i].equals(sh.coefficients[i])) {
 				return false;
 			}
 		}
-
 		return true;
 	}
-
 	copy(sh) {
 		return this.set(sh.coefficients);
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	fromArray(array, offset = 0) {
 		const coefficients = this.coefficients;
-
 		for (let i = 0; i < 9; i++) {
 			coefficients[i].fromArray(array, offset + i * 3);
 		}
-
 		return this;
 	}
-
 	toArray(array = [], offset = 0) {
 		const coefficients = this.coefficients;
-
 		for (let i = 0; i < 9; i++) {
 			coefficients[i].toArray(array, offset + i * 3);
 		}
-
 		return array;
-	} // evaluate the basis functions
-	// shBasis is an Array[ 9 ]
-
+	}
 
+	// evaluate the basis functions
+	// shBasis is an Array[ 9 ]
 	static getBasisAt(normal, shBasis) {
 		// normal is assumed to be unit length
+
 		const x = normal.x,
-					y = normal.y,
-					z = normal.z; // band 0
+			y = normal.y,
+			z = normal.z;
 
-		shBasis[0] = 0.282095; // band 1
+		// band 0
+		shBasis[0] = 0.282095;
 
+		// band 1
 		shBasis[1] = 0.488603 * y;
 		shBasis[2] = 0.488603 * z;
-		shBasis[3] = 0.488603 * x; // band 2
+		shBasis[3] = 0.488603 * x;
 
+		// band 2
 		shBasis[4] = 1.092548 * x * y;
 		shBasis[5] = 1.092548 * y * z;
 		shBasis[6] = 0.315392 * (3 * z * z - 1);
 		shBasis[7] = 1.092548 * x * z;
 		shBasis[8] = 0.546274 * (x * x - y * y);
 	}
-
 }
 
 class LightProbe extends Light {
@@ -30381,26 +27355,21 @@ class LightProbe extends Light {
 		this.isLightProbe = true;
 		this.sh = sh;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.sh.copy(source.sh);
 		return this;
 	}
-
 	fromJSON(json) {
 		this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
-
 		this.sh.fromArray(json.sh);
 		return this;
 	}
-
 	toJSON(meta) {
 		const data = super.toJSON(meta);
 		data.object.sh = this.sh.toArray();
 		return data;
 	}
-
 }
 
 class MaterialLoader extends Loader {
@@ -30408,7 +27377,6 @@ class MaterialLoader extends Loader {
 		super(manager);
 		this.textures = {};
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		const scope = this;
 		const loader = new FileLoader(scope.manager);
@@ -30424,23 +27392,18 @@ class MaterialLoader extends Loader {
 				} else {
 					console.error(e);
 				}
-
 				scope.manager.itemError(url);
 			}
 		}, onProgress, onError);
 	}
-
 	parse(json) {
 		const textures = this.textures;
-
 		function getTexture(name) {
 			if (textures[name] === undefined) {
 				console.warn('THREE.MaterialLoader: Undefined texture', name);
 			}
-
 			return textures[name];
 		}
-
 		const material = MaterialLoader.createMaterialFromType(json.type);
 		if (json.uuid !== undefined) material.uuid = json.uuid;
 		if (json.name !== undefined) material.name = json.name;
@@ -30502,70 +27465,63 @@ class MaterialLoader extends Loader {
 		if (json.visible !== undefined) material.visible = json.visible;
 		if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
 		if (json.userData !== undefined) material.userData = json.userData;
-
 		if (json.vertexColors !== undefined) {
 			if (typeof json.vertexColors === 'number') {
 				material.vertexColors = json.vertexColors > 0 ? true : false;
 			} else {
 				material.vertexColors = json.vertexColors;
 			}
-		} // Shader Material
+		}
 
+		// Shader Material
 
 		if (json.uniforms !== undefined) {
 			for (const name in json.uniforms) {
 				const uniform = json.uniforms[name];
 				material.uniforms[name] = {};
-
 				switch (uniform.type) {
 					case 't':
 						material.uniforms[name].value = getTexture(uniform.value);
 						break;
-
 					case 'c':
 						material.uniforms[name].value = new Color().setHex(uniform.value);
 						break;
-
 					case 'v2':
 						material.uniforms[name].value = new Vector2().fromArray(uniform.value);
 						break;
-
 					case 'v3':
 						material.uniforms[name].value = new Vector3().fromArray(uniform.value);
 						break;
-
 					case 'v4':
 						material.uniforms[name].value = new Vector4().fromArray(uniform.value);
 						break;
-
 					case 'm3':
 						material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
 						break;
-
 					case 'm4':
 						material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
 						break;
-
 					default:
 						material.uniforms[name].value = uniform.value;
 				}
 			}
 		}
-
 		if (json.defines !== undefined) material.defines = json.defines;
 		if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
 		if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;
 		if (json.glslVersion !== undefined) material.glslVersion = json.glslVersion;
-
 		if (json.extensions !== undefined) {
 			for (const key in json.extensions) {
 				material.extensions[key] = json.extensions[key];
 			}
-		} // for PointsMaterial
+		}
 
+		// for PointsMaterial
 
 		if (json.size !== undefined) material.size = json.size;
-		if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps
+		if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;
+
+		// maps
 
 		if (json.map !== undefined) material.map = getTexture(json.map);
 		if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
@@ -30574,18 +27530,15 @@ class MaterialLoader extends Loader {
 		if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
 		if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
 		if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;
-
 		if (json.normalScale !== undefined) {
 			let normalScale = json.normalScale;
-
 			if (Array.isArray(normalScale) === false) {
 				// Blender exporter used to export a scalar. See #7459
+
 				normalScale = [normalScale, normalScale];
 			}
-
 			material.normalScale = new Vector2().fromArray(normalScale);
 		}
-
 		if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
 		if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
 		if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
@@ -30617,12 +27570,10 @@ class MaterialLoader extends Loader {
 		if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
 		return material;
 	}
-
 	setTextures(value) {
 		this.textures = value;
 		return this;
 	}
-
 	static createMaterialFromType(type) {
 		const materialLib = {
 			ShadowMaterial,
@@ -30646,57 +27597,58 @@ class MaterialLoader extends Loader {
 		};
 		return new materialLib[type]();
 	}
-
 }
 
 class LoaderUtils {
 	static decodeText(array) {
 		if (typeof TextDecoder !== 'undefined') {
 			return new TextDecoder().decode(array);
-		} // Avoid the String.fromCharCode.apply(null, array) shortcut, which
-		// throws a "maximum call stack size exceeded" error for large arrays.
+		}
 
+		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
+		// throws a "maximum call stack size exceeded" error for large arrays.
 
 		let s = '';
-
 		for (let i = 0, il = array.length; i < il; i++) {
 			// Implicitly assumes little-endian.
 			s += String.fromCharCode(array[i]);
 		}
-
 		try {
 			// merges multi-byte utf-8 characters.
+
 			return decodeURIComponent(escape(s));
 		} catch (e) {
 			// see #16358
+
 			return s;
 		}
 	}
-
 	static extractUrlBase(url) {
 		const index = url.lastIndexOf('/');
 		if (index === -1) return './';
 		return url.slice(0, index + 1);
 	}
-
 	static resolveURL(url, path) {
 		// Invalid URL
-		if (typeof url !== 'string' || url === '') return ''; // Host Relative URL
+		if (typeof url !== 'string' || url === '') return '';
 
+		// Host Relative URL
 		if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
 			path = path.replace(/(^https?:\/\/[^\/]+).*/i, '$1');
-		} // Absolute URL http://,https://,//
-
+		}
 
-		if (/^(https?:)?\/\//i.test(url)) return url; // Data URI
+		// Absolute URL http://,https://,//
+		if (/^(https?:)?\/\//i.test(url)) return url;
 
-		if (/^data:.*,.*$/i.test(url)) return url; // Blob URL
+		// Data URI
+		if (/^data:.*,.*$/i.test(url)) return url;
 
-		if (/^blob:.*$/i.test(url)) return url; // Relative URL
+		// Blob URL
+		if (/^blob:.*$/i.test(url)) return url;
 
+		// Relative URL
 		return path + url;
 	}
-
 }
 
 class InstancedBufferGeometry extends BufferGeometry {
@@ -30706,27 +27658,23 @@ class InstancedBufferGeometry extends BufferGeometry {
 		this.type = 'InstancedBufferGeometry';
 		this.instanceCount = Infinity;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.instanceCount = source.instanceCount;
 		return this;
 	}
-
 	toJSON() {
 		const data = super.toJSON();
 		data.instanceCount = this.instanceCount;
 		data.isInstancedBufferGeometry = true;
 		return data;
 	}
-
 }
 
 class BufferGeometryLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		const scope = this;
 		const loader = new FileLoader(scope.manager);
@@ -30742,16 +27690,13 @@ class BufferGeometryLoader extends Loader {
 				} else {
 					console.error(e);
 				}
-
 				scope.manager.itemError(url);
 			}
 		}, onProgress, onError);
 	}
-
 	parse(json) {
 		const interleavedBufferMap = {};
 		const arrayBufferMap = {};
-
 		function getInterleavedBuffer(json, uuid) {
 			if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
 			const interleavedBuffers = json.interleavedBuffers;
@@ -30763,7 +27708,6 @@ class BufferGeometryLoader extends Loader {
 			interleavedBufferMap[uuid] = ib;
 			return ib;
 		}
-
 		function getArrayBuffer(json, uuid) {
 			if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
 			const arrayBuffers = json.arrayBuffers;
@@ -30772,21 +27716,16 @@ class BufferGeometryLoader extends Loader {
 			arrayBufferMap[uuid] = ab;
 			return ab;
 		}
-
 		const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
 		const index = json.data.index;
-
 		if (index !== undefined) {
 			const typedArray = getTypedArray(index.type, index.array);
 			geometry.setIndex(new BufferAttribute(typedArray, 1));
 		}
-
 		const attributes = json.data.attributes;
-
 		for (const key in attributes) {
 			const attribute = attributes[key];
 			let bufferAttribute;
-
 			if (attribute.isInterleavedBufferAttribute) {
 				const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
 				bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
@@ -30795,29 +27734,22 @@ class BufferGeometryLoader extends Loader {
 				const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
 				bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
 			}
-
 			if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
 			if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);
-
 			if (attribute.updateRange !== undefined) {
 				bufferAttribute.updateRange.offset = attribute.updateRange.offset;
 				bufferAttribute.updateRange.count = attribute.updateRange.count;
 			}
-
 			geometry.setAttribute(key, bufferAttribute);
 		}
-
 		const morphAttributes = json.data.morphAttributes;
-
 		if (morphAttributes) {
 			for (const key in morphAttributes) {
 				const attributeArray = morphAttributes[key];
 				const array = [];
-
 				for (let i = 0, il = attributeArray.length; i < il; i++) {
 					const attribute = attributeArray[i];
 					let bufferAttribute;
-
 					if (attribute.isInterleavedBufferAttribute) {
 						const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
 						bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
@@ -30825,54 +27757,41 @@ class BufferGeometryLoader extends Loader {
 						const typedArray = getTypedArray(attribute.type, attribute.array);
 						bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
 					}
-
 					if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
 					array.push(bufferAttribute);
 				}
-
 				geometry.morphAttributes[key] = array;
 			}
 		}
-
 		const morphTargetsRelative = json.data.morphTargetsRelative;
-
 		if (morphTargetsRelative) {
 			geometry.morphTargetsRelative = true;
 		}
-
 		const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
-
 		if (groups !== undefined) {
 			for (let i = 0, n = groups.length; i !== n; ++i) {
 				const group = groups[i];
 				geometry.addGroup(group.start, group.count, group.materialIndex);
 			}
 		}
-
 		const boundingSphere = json.data.boundingSphere;
-
 		if (boundingSphere !== undefined) {
 			const center = new Vector3();
-
 			if (boundingSphere.center !== undefined) {
 				center.fromArray(boundingSphere.center);
 			}
-
 			geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
 		}
-
 		if (json.name) geometry.name = json.name;
 		if (json.userData) geometry.userData = json.userData;
 		return geometry;
 	}
-
 }
 
 class ObjectLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		const scope = this;
 		const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
@@ -30883,7 +27802,6 @@ class ObjectLoader extends Loader {
 		loader.setWithCredentials(this.withCredentials);
 		loader.load(url, function (text) {
 			let json = null;
-
 			try {
 				json = JSON.parse(text);
 			} catch (error) {
@@ -30891,19 +27809,15 @@ class ObjectLoader extends Loader {
 				console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);
 				return;
 			}
-
 			const metadata = json.metadata;
-
 			if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
 				if (onError !== undefined) onError(new Error('THREE.ObjectLoader: Can\'t load ' + url));
 				console.error('THREE.ObjectLoader: Can\'t load ' + url);
 				return;
 			}
-
 			scope.parse(json, onLoad);
 		}, onProgress, onError);
 	}
-
 	async loadAsync(url, onProgress) {
 		const scope = this;
 		const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
@@ -30915,14 +27829,11 @@ class ObjectLoader extends Loader {
 		const text = await loader.loadAsync(url, onProgress);
 		const json = JSON.parse(text);
 		const metadata = json.metadata;
-
 		if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
 			throw new Error('THREE.ObjectLoader: Can\'t load ' + url);
 		}
-
 		return await scope.parseAsync(json);
 	}
-
 	parse(json, onLoad) {
 		const animations = this.parseAnimations(json.animations);
 		const shapes = this.parseShapes(json.shapes);
@@ -30934,24 +27845,22 @@ class ObjectLoader extends Loader {
 		const materials = this.parseMaterials(json.materials, textures);
 		const object = this.parseObject(json.object, geometries, materials, textures, animations);
 		const skeletons = this.parseSkeletons(json.skeletons, object);
-		this.bindSkeletons(object, skeletons); //
+		this.bindSkeletons(object, skeletons);
+
+		//
 
 		if (onLoad !== undefined) {
 			let hasImages = false;
-
 			for (const uuid in images) {
 				if (images[uuid].data instanceof HTMLImageElement) {
 					hasImages = true;
 					break;
 				}
 			}
-
 			if (hasImages === false) onLoad(object);
 		}
-
 		return object;
 	}
-
 	async parseAsync(json) {
 		const animations = this.parseAnimations(json.animations);
 		const shapes = this.parseShapes(json.shapes);
@@ -30964,27 +27873,27 @@ class ObjectLoader extends Loader {
 		this.bindSkeletons(object, skeletons);
 		return object;
 	}
-
 	parseShapes(json) {
 		const shapes = {};
-
 		if (json !== undefined) {
 			for (let i = 0, l = json.length; i < l; i++) {
 				const shape = new Shape().fromJSON(json[i]);
 				shapes[shape.uuid] = shape;
 			}
 		}
-
 		return shapes;
 	}
-
 	parseSkeletons(json, object) {
 		const skeletons = {};
-		const bones = {}; // generate bone lookup table
+		const bones = {};
+
+		// generate bone lookup table
 
 		object.traverse(function (child) {
 			if (child.isBone) bones[child.uuid] = child;
-		}); // create skeletons
+		});
+
+		// create skeletons
 
 		if (json !== undefined) {
 			for (let i = 0, l = json.length; i < l; i++) {
@@ -30992,26 +27901,20 @@ class ObjectLoader extends Loader {
 				skeletons[skeleton.uuid] = skeleton;
 			}
 		}
-
 		return skeletons;
 	}
-
 	parseGeometries(json, shapes) {
 		const geometries = {};
-
 		if (json !== undefined) {
 			const bufferGeometryLoader = new BufferGeometryLoader();
-
 			for (let i = 0, l = json.length; i < l; i++) {
 				let geometry;
 				const data = json[i];
-
 				switch (data.type) {
 					case 'BufferGeometry':
 					case 'InstancedBufferGeometry':
 						geometry = bufferGeometryLoader.parse(data);
 						break;
-
 					case 'Geometry':
 						if ('THREE' in window && 'LegacyJSONLoader' in THREE) {
 							var geometryLoader = new THREE.LegacyJSONLoader();
@@ -31019,54 +27922,40 @@ class ObjectLoader extends Loader {
 						} else {
 							console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');
 						}
-
 						break;
-
 					default:
 						if (data.type in Geometries) {
 							geometry = Geometries[data.type].fromJSON(data, shapes);
 						} else {
 							console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
 						}
-
 				}
-
 				geometry.uuid = data.uuid;
 				if (data.name !== undefined) geometry.name = data.name;
 				if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
 				geometries[data.uuid] = geometry;
 			}
 		}
-
 		return geometries;
 	}
-
 	parseMaterials(json, textures) {
 		const cache = {}; // MultiMaterial
-
 		const materials = {};
-
 		if (json !== undefined) {
 			const loader = new MaterialLoader();
 			loader.setTextures(textures);
-
 			for (let i = 0, l = json.length; i < l; i++) {
 				const data = json[i];
-
 				if (cache[data.uuid] === undefined) {
 					cache[data.uuid] = loader.parse(data);
 				}
-
 				materials[data.uuid] = cache[data.uuid];
 			}
 		}
-
 		return materials;
 	}
-
 	parseAnimations(json) {
 		const animations = {};
-
 		if (json !== undefined) {
 			for (let i = 0; i < json.length; i++) {
 				const data = json[i];
@@ -31074,15 +27963,12 @@ class ObjectLoader extends Loader {
 				animations[clip.uuid] = clip;
 			}
 		}
-
 		return animations;
 	}
-
 	parseImages(json, onLoad) {
 		const scope = this;
 		const images = {};
 		let loader;
-
 		function loadImage(url) {
 			scope.manager.itemStart(url);
 			return loader.load(url, function () {
@@ -31092,7 +27978,6 @@ class ObjectLoader extends Loader {
 				scope.manager.itemEnd(url);
 			});
 		}
-
 		function deserializeImage(image) {
 			if (typeof image === 'string') {
 				const url = image;
@@ -31110,51 +27995,45 @@ class ObjectLoader extends Loader {
 				}
 			}
 		}
-
 		if (json !== undefined && json.length > 0) {
 			const manager = new LoadingManager(onLoad);
 			loader = new ImageLoader(manager);
 			loader.setCrossOrigin(this.crossOrigin);
-
 			for (let i = 0, il = json.length; i < il; i++) {
 				const image = json[i];
 				const url = image.url;
-
 				if (Array.isArray(url)) {
 					// load array of images e.g CubeTexture
-					const imageArray = [];
 
+					const imageArray = [];
 					for (let j = 0, jl = url.length; j < jl; j++) {
 						const currentUrl = url[j];
 						const deserializedImage = deserializeImage(currentUrl);
-
 						if (deserializedImage !== null) {
 							if (deserializedImage instanceof HTMLImageElement) {
 								imageArray.push(deserializedImage);
 							} else {
 								// special case: handle array of data textures for cube textures
+
 								imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
 							}
 						}
 					}
-
 					images[image.uuid] = new Source(imageArray);
 				} else {
 					// load single image
+
 					const deserializedImage = deserializeImage(image.url);
 					images[image.uuid] = new Source(deserializedImage);
 				}
 			}
 		}
-
 		return images;
 	}
-
 	async parseImagesAsync(json) {
 		const scope = this;
 		const images = {};
 		let loader;
-
 		async function deserializeImage(image) {
 			if (typeof image === 'string') {
 				const url = image;
@@ -31172,70 +28051,59 @@ class ObjectLoader extends Loader {
 				}
 			}
 		}
-
 		if (json !== undefined && json.length > 0) {
 			loader = new ImageLoader(this.manager);
 			loader.setCrossOrigin(this.crossOrigin);
-
 			for (let i = 0, il = json.length; i < il; i++) {
 				const image = json[i];
 				const url = image.url;
-
 				if (Array.isArray(url)) {
 					// load array of images e.g CubeTexture
-					const imageArray = [];
 
+					const imageArray = [];
 					for (let j = 0, jl = url.length; j < jl; j++) {
 						const currentUrl = url[j];
 						const deserializedImage = await deserializeImage(currentUrl);
-
 						if (deserializedImage !== null) {
 							if (deserializedImage instanceof HTMLImageElement) {
 								imageArray.push(deserializedImage);
 							} else {
 								// special case: handle array of data textures for cube textures
+
 								imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
 							}
 						}
 					}
-
 					images[image.uuid] = new Source(imageArray);
 				} else {
 					// load single image
+
 					const deserializedImage = await deserializeImage(image.url);
 					images[image.uuid] = new Source(deserializedImage);
 				}
 			}
 		}
-
 		return images;
 	}
-
 	parseTextures(json, images) {
 		function parseConstant(value, type) {
 			if (typeof value === 'number') return value;
 			console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);
 			return type[value];
 		}
-
 		const textures = {};
-
 		if (json !== undefined) {
 			for (let i = 0, l = json.length; i < l; i++) {
 				const data = json[i];
-
 				if (data.image === undefined) {
 					console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
 				}
-
 				if (images[data.image] === undefined) {
 					console.warn('THREE.ObjectLoader: Undefined image', data.image);
 				}
-
 				const source = images[data.image];
 				const image = source.data;
 				let texture;
-
 				if (Array.isArray(image)) {
 					texture = new CubeTexture();
 					if (image.length === 6) texture.needsUpdate = true;
@@ -31245,7 +28113,6 @@ class ObjectLoader extends Loader {
 					} else {
 						texture = new Texture();
 					}
-
 					if (image) texture.needsUpdate = true; // textures can have undefined image data
 				}
 
@@ -31257,12 +28124,10 @@ class ObjectLoader extends Loader {
 				if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
 				if (data.center !== undefined) texture.center.fromArray(data.center);
 				if (data.rotation !== undefined) texture.rotation = data.rotation;
-
 				if (data.wrap !== undefined) {
 					texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
 					texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
 				}
-
 				if (data.format !== undefined) texture.format = data.format;
 				if (data.type !== undefined) texture.type = data.type;
 				if (data.encoding !== undefined) texture.encoding = data.encoding;
@@ -31276,61 +28141,44 @@ class ObjectLoader extends Loader {
 				textures[data.uuid] = texture;
 			}
 		}
-
 		return textures;
 	}
-
 	parseObject(data, geometries, materials, textures, animations) {
 		let object;
-
 		function getGeometry(name) {
 			if (geometries[name] === undefined) {
 				console.warn('THREE.ObjectLoader: Undefined geometry', name);
 			}
-
 			return geometries[name];
 		}
-
 		function getMaterial(name) {
 			if (name === undefined) return undefined;
-
 			if (Array.isArray(name)) {
 				const array = [];
-
 				for (let i = 0, l = name.length; i < l; i++) {
 					const uuid = name[i];
-
 					if (materials[uuid] === undefined) {
 						console.warn('THREE.ObjectLoader: Undefined material', uuid);
 					}
-
 					array.push(materials[uuid]);
 				}
-
 				return array;
 			}
-
 			if (materials[name] === undefined) {
 				console.warn('THREE.ObjectLoader: Undefined material', name);
 			}
-
 			return materials[name];
 		}
-
 		function getTexture(uuid) {
 			if (textures[uuid] === undefined) {
 				console.warn('THREE.ObjectLoader: Undefined texture', uuid);
 			}
-
 			return textures[uuid];
 		}
-
 		let geometry, material;
-
 		switch (data.type) {
 			case 'Scene':
 				object = new Scene();
-
 				if (data.background !== undefined) {
 					if (Number.isInteger(data.background)) {
 						object.background = new Color(data.background);
@@ -31338,11 +28186,9 @@ class ObjectLoader extends Loader {
 						object.background = getTexture(data.background);
 					}
 				}
-
 				if (data.environment !== undefined) {
 					object.environment = getTexture(data.environment);
 				}
-
 				if (data.fog !== undefined) {
 					if (data.fog.type === 'Fog') {
 						object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
@@ -31350,10 +28196,8 @@ class ObjectLoader extends Loader {
 						object.fog = new FogExp2(data.fog.color, data.fog.density);
 					}
 				}
-
 				if (data.backgroundBlurriness !== undefined) object.backgroundBlurriness = data.backgroundBlurriness;
 				break;
-
 			case 'PerspectiveCamera':
 				object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
 				if (data.focus !== undefined) object.focus = data.focus;
@@ -31362,41 +28206,32 @@ class ObjectLoader extends Loader {
 				if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
 				if (data.view !== undefined) object.view = Object.assign({}, data.view);
 				break;
-
 			case 'OrthographicCamera':
 				object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
 				if (data.zoom !== undefined) object.zoom = data.zoom;
 				if (data.view !== undefined) object.view = Object.assign({}, data.view);
 				break;
-
 			case 'AmbientLight':
 				object = new AmbientLight(data.color, data.intensity);
 				break;
-
 			case 'DirectionalLight':
 				object = new DirectionalLight(data.color, data.intensity);
 				break;
-
 			case 'PointLight':
 				object = new PointLight(data.color, data.intensity, data.distance, data.decay);
 				break;
-
 			case 'RectAreaLight':
 				object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
 				break;
-
 			case 'SpotLight':
 				object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
 				break;
-
 			case 'HemisphereLight':
 				object = new HemisphereLight(data.color, data.groundColor, data.intensity);
 				break;
-
 			case 'LightProbe':
 				object = new LightProbe().fromJSON(data);
 				break;
-
 			case 'SkinnedMesh':
 				geometry = getGeometry(data.geometry);
 				material = getMaterial(data.material);
@@ -31405,13 +28240,11 @@ class ObjectLoader extends Loader {
 				if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
 				if (data.skeleton !== undefined) object.skeleton = data.skeleton;
 				break;
-
 			case 'Mesh':
 				geometry = getGeometry(data.geometry);
 				material = getMaterial(data.material);
 				object = new Mesh(geometry, material);
 				break;
-
 			case 'InstancedMesh':
 				geometry = getGeometry(data.geometry);
 				material = getMaterial(data.material);
@@ -31422,47 +28255,36 @@ class ObjectLoader extends Loader {
 				object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);
 				if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
 				break;
-
 			case 'LOD':
 				object = new LOD();
 				break;
-
 			case 'Line':
 				object = new Line(getGeometry(data.geometry), getMaterial(data.material));
 				break;
-
 			case 'LineLoop':
 				object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
 				break;
-
 			case 'LineSegments':
 				object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
 				break;
-
 			case 'PointCloud':
 			case 'Points':
 				object = new Points(getGeometry(data.geometry), getMaterial(data.material));
 				break;
-
 			case 'Sprite':
 				object = new Sprite(getMaterial(data.material));
 				break;
-
 			case 'Group':
 				object = new Group();
 				break;
-
 			case 'Bone':
 				object = new Bone();
 				break;
-
 			default:
 				object = new Object3D();
 		}
-
 		object.uuid = data.uuid;
 		if (data.name !== undefined) object.name = data.name;
-
 		if (data.matrix !== undefined) {
 			object.matrix.fromArray(data.matrix);
 			if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
@@ -31473,10 +28295,8 @@ class ObjectLoader extends Loader {
 			if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
 			if (data.scale !== undefined) object.scale.fromArray(data.scale);
 		}
-
 		if (data.castShadow !== undefined) object.castShadow = data.castShadow;
 		if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;
-
 		if (data.shadow) {
 			if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
 			if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
@@ -31484,53 +28304,42 @@ class ObjectLoader extends Loader {
 			if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
 			if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
 		}
-
 		if (data.visible !== undefined) object.visible = data.visible;
 		if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
 		if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
 		if (data.userData !== undefined) object.userData = data.userData;
 		if (data.layers !== undefined) object.layers.mask = data.layers;
-
 		if (data.children !== undefined) {
 			const children = data.children;
-
 			for (let i = 0; i < children.length; i++) {
 				object.add(this.parseObject(children[i], geometries, materials, textures, animations));
 			}
 		}
-
 		if (data.animations !== undefined) {
 			const objectAnimations = data.animations;
-
 			for (let i = 0; i < objectAnimations.length; i++) {
 				const uuid = objectAnimations[i];
 				object.animations.push(animations[uuid]);
 			}
 		}
-
 		if (data.type === 'LOD') {
 			if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
 			const levels = data.levels;
-
 			for (let l = 0; l < levels.length; l++) {
 				const level = levels[l];
 				const child = object.getObjectByProperty('uuid', level.object);
-
 				if (child !== undefined) {
 					object.addLevel(child, level.distance, level.hysteresis);
 				}
 			}
 		}
-
 		return object;
 	}
-
 	bindSkeletons(object, skeletons) {
 		if (Object.keys(skeletons).length === 0) return;
 		object.traverse(function (child) {
 			if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
 				const skeleton = skeletons[child.skeleton];
-
 				if (skeleton === undefined) {
 					console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);
 				} else {
@@ -31539,9 +28348,7 @@ class ObjectLoader extends Loader {
 			}
 		});
 	}
-
 }
-
 const TEXTURE_MAPPING = {
 	UVMapping: UVMapping,
 	CubeReflectionMapping: CubeReflectionMapping,
@@ -31568,32 +28375,26 @@ class ImageBitmapLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 		this.isImageBitmapLoader = true;
-
 		if (typeof createImageBitmap === 'undefined') {
 			console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
 		}
-
 		if (typeof fetch === 'undefined') {
 			console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
 		}
-
 		this.options = {
 			premultiplyAlpha: 'none'
 		};
 	}
-
 	setOptions(options) {
 		this.options = options;
 		return this;
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		if (url === undefined) url = '';
 		if (this.path !== undefined) url = this.path + url;
 		url = this.manager.resolveURL(url);
 		const scope = this;
 		const cached = Cache.get(url);
-
 		if (cached !== undefined) {
 			scope.manager.itemStart(url);
 			setTimeout(function () {
@@ -31602,7 +28403,6 @@ class ImageBitmapLoader extends Loader {
 			}, 0);
 			return cached;
 		}
-
 		const fetchOptions = {};
 		fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';
 		fetchOptions.headers = this.requestHeader;
@@ -31623,31 +28423,25 @@ class ImageBitmapLoader extends Loader {
 		});
 		scope.manager.itemStart(url);
 	}
-
 }
 
 let _context;
-
 class AudioContext {
 	static getContext() {
 		if (_context === undefined) {
 			_context = new (window.AudioContext || window.webkitAudioContext)();
 		}
-
 		return _context;
 	}
-
 	static setContext(value) {
 		_context = value;
 	}
-
 }
 
 class AudioLoader extends Loader {
 	constructor(manager) {
 		super(manager);
 	}
-
 	load(url, onLoad, onProgress, onError) {
 		const scope = this;
 		const loader = new FileLoader(this.manager);
@@ -31670,12 +28464,10 @@ class AudioLoader extends Loader {
 				} else {
 					console.error(e);
 				}
-
 				scope.manager.itemError(url);
 			}
 		}, onProgress, onError);
 	}
-
 }
 
 class HemisphereLightProbe extends LightProbe {
@@ -31685,33 +28477,30 @@ class HemisphereLightProbe extends LightProbe {
 		const color1 = new Color().set(skyColor);
 		const color2 = new Color().set(groundColor);
 		const sky = new Vector3(color1.r, color1.g, color1.b);
-		const ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
+		const ground = new Vector3(color2.r, color2.g, color2.b);
 
+		// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
 		const c0 = Math.sqrt(Math.PI);
 		const c1 = c0 * Math.sqrt(0.75);
 		this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
 		this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
 	}
-
 }
 
 class AmbientLightProbe extends LightProbe {
 	constructor(color, intensity = 1) {
 		super(undefined, intensity);
 		this.isAmbientLightProbe = true;
-		const color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
+		const color1 = new Color().set(color);
 
+		// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
 		this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
 	}
-
 }
 
 const _eyeRight = /*@__PURE__*/new Matrix4();
-
 const _eyeLeft = /*@__PURE__*/new Matrix4();
-
 const _projectionMatrix = /*@__PURE__*/new Matrix4();
-
 class StereoCamera {
 	constructor() {
 		this.type = 'StereoCamera';
@@ -31733,11 +28522,9 @@ class StereoCamera {
 			eyeSep: null
 		};
 	}
-
 	update(camera) {
 		const cache = this._cache;
 		const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
-
 		if (needsUpdate) {
 			cache.focus = camera.focus;
 			cache.fov = camera.fov;
@@ -31745,24 +28532,31 @@ class StereoCamera {
 			cache.near = camera.near;
 			cache.far = camera.far;
 			cache.zoom = camera.zoom;
-			cache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on
+			cache.eyeSep = this.eyeSep;
+
+			// Off-axis stereoscopic effect based on
 			// http://paulbourke.net/stereographics/stereorender/
 
 			_projectionMatrix.copy(camera.projectionMatrix);
-
 			const eyeSepHalf = cache.eyeSep / 2;
 			const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
 			const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;
-			let xmin, xmax; // translate xOffset
+			let xmin, xmax;
+
+			// translate xOffset
 
 			_eyeLeft.elements[12] = -eyeSepHalf;
-			_eyeRight.elements[12] = eyeSepHalf; // for left eye
+			_eyeRight.elements[12] = eyeSepHalf;
+
+			// for left eye
 
 			xmin = -ymax * cache.aspect + eyeSepOnProjection;
 			xmax = ymax * cache.aspect + eyeSepOnProjection;
 			_projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
 			_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
-			this.cameraL.projectionMatrix.copy(_projectionMatrix); // for right eye
+			this.cameraL.projectionMatrix.copy(_projectionMatrix);
+
+			// for right eye
 
 			xmin = -ymax * cache.aspect - eyeSepOnProjection;
 			xmax = ymax * cache.aspect - eyeSepOnProjection;
@@ -31770,11 +28564,9 @@ class StereoCamera {
 			_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
 			this.cameraR.projectionMatrix.copy(_projectionMatrix);
 		}
-
 		this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
 		this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
 	}
-
 }
 
 class Clock {
@@ -31785,57 +28577,44 @@ class Clock {
 		this.elapsedTime = 0;
 		this.running = false;
 	}
-
 	start() {
 		this.startTime = now();
 		this.oldTime = this.startTime;
 		this.elapsedTime = 0;
 		this.running = true;
 	}
-
 	stop() {
 		this.getElapsedTime();
 		this.running = false;
 		this.autoStart = false;
 	}
-
 	getElapsedTime() {
 		this.getDelta();
 		return this.elapsedTime;
 	}
-
 	getDelta() {
 		let diff = 0;
-
 		if (this.autoStart && !this.running) {
 			this.start();
 			return 0;
 		}
-
 		if (this.running) {
 			const newTime = now();
 			diff = (newTime - this.oldTime) / 1000;
 			this.oldTime = newTime;
 			this.elapsedTime += diff;
 		}
-
 		return diff;
 	}
-
 }
-
 function now() {
 	return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732
 }
 
 const _position$1 = /*@__PURE__*/new Vector3();
-
 const _quaternion$1 = /*@__PURE__*/new Quaternion();
-
 const _scale$1 = /*@__PURE__*/new Vector3();
-
 const _orientation$1 = /*@__PURE__*/new Vector3();
-
 class AudioListener extends Object3D {
 	constructor() {
 		super();
@@ -31844,15 +28623,15 @@ class AudioListener extends Object3D {
 		this.gain = this.context.createGain();
 		this.gain.connect(this.context.destination);
 		this.filter = null;
-		this.timeDelta = 0; // private
+		this.timeDelta = 0;
+
+		// private
 
 		this._clock = new Clock();
 	}
-
 	getInput() {
 		return this.gain;
 	}
-
 	removeFilter() {
 		if (this.filter !== null) {
 			this.gain.disconnect(this.filter);
@@ -31860,14 +28639,11 @@ class AudioListener extends Object3D {
 			this.gain.connect(this.context.destination);
 			this.filter = null;
 		}
-
 		return this;
 	}
-
 	getFilter() {
 		return this.filter;
 	}
-
 	setFilter(value) {
 		if (this.filter !== null) {
 			this.gain.disconnect(this.filter);
@@ -31875,33 +28651,28 @@ class AudioListener extends Object3D {
 		} else {
 			this.gain.disconnect(this.context.destination);
 		}
-
 		this.filter = value;
 		this.gain.connect(this.filter);
 		this.filter.connect(this.context.destination);
 		return this;
 	}
-
 	getMasterVolume() {
 		return this.gain.gain.value;
 	}
-
 	setMasterVolume(value) {
 		this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
 		return this;
 	}
-
 	updateMatrixWorld(force) {
 		super.updateMatrixWorld(force);
 		const listener = this.context.listener;
 		const up = this.up;
 		this.timeDelta = this._clock.getDelta();
 		this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);
-
 		_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);
-
 		if (listener.positionX) {
 			// code path for Chrome (see #14393)
+
 			const endTime = this.context.currentTime + this.timeDelta;
 			listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
 			listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
@@ -31917,7 +28688,6 @@ class AudioListener extends Object3D {
 			listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
 		}
 	}
-
 }
 
 class Audio extends Object3D {
@@ -31946,11 +28716,9 @@ class Audio extends Object3D {
 		this._connected = false;
 		this.filters = [];
 	}
-
 	getOutput() {
 		return this.gain;
 	}
-
 	setNodeSource(audioNode) {
 		this.hasPlaybackControl = false;
 		this.sourceType = 'audioNode';
@@ -31958,7 +28726,6 @@ class Audio extends Object3D {
 		this.connect();
 		return this;
 	}
-
 	setMediaElementSource(mediaElement) {
 		this.hasPlaybackControl = false;
 		this.sourceType = 'mediaNode';
@@ -31966,7 +28733,6 @@ class Audio extends Object3D {
 		this.connect();
 		return this;
 	}
-
 	setMediaStreamSource(mediaStream) {
 		this.hasPlaybackControl = false;
 		this.sourceType = 'mediaStreamNode';
@@ -31974,25 +28740,21 @@ class Audio extends Object3D {
 		this.connect();
 		return this;
 	}
-
 	setBuffer(audioBuffer) {
 		this.buffer = audioBuffer;
 		this.sourceType = 'buffer';
 		if (this.autoplay) this.play();
 		return this;
 	}
-
 	play(delay = 0) {
 		if (this.isPlaying === true) {
 			console.warn('THREE.Audio: Audio is already playing.');
 			return;
 		}
-
 		if (this.hasPlaybackControl === false) {
 			console.warn('THREE.Audio: this Audio has no playback control.');
 			return;
 		}
-
 		this._startedAt = this.context.currentTime + delay;
 		const source = this.context.createBufferSource();
 		source.buffer = this.buffer;
@@ -32007,84 +28769,68 @@ class Audio extends Object3D {
 		this.setPlaybackRate(this.playbackRate);
 		return this.connect();
 	}
-
 	pause() {
 		if (this.hasPlaybackControl === false) {
 			console.warn('THREE.Audio: this Audio has no playback control.');
 			return;
 		}
-
 		if (this.isPlaying === true) {
 			// update current progress
-			this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
 
+			this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
 			if (this.loop === true) {
 				// ensure _progress does not exceed duration with looped audios
+
 				this._progress = this._progress % (this.duration || this.buffer.duration);
 			}
-
 			this.source.stop();
 			this.source.onended = null;
 			this.isPlaying = false;
 		}
-
 		return this;
 	}
-
 	stop() {
 		if (this.hasPlaybackControl === false) {
 			console.warn('THREE.Audio: this Audio has no playback control.');
 			return;
 		}
-
 		this._progress = 0;
 		this.source.stop();
 		this.source.onended = null;
 		this.isPlaying = false;
 		return this;
 	}
-
 	connect() {
 		if (this.filters.length > 0) {
 			this.source.connect(this.filters[0]);
-
 			for (let i = 1, l = this.filters.length; i < l; i++) {
 				this.filters[i - 1].connect(this.filters[i]);
 			}
-
 			this.filters[this.filters.length - 1].connect(this.getOutput());
 		} else {
 			this.source.connect(this.getOutput());
 		}
-
 		this._connected = true;
 		return this;
 	}
-
 	disconnect() {
 		if (this.filters.length > 0) {
 			this.source.disconnect(this.filters[0]);
-
 			for (let i = 1, l = this.filters.length; i < l; i++) {
 				this.filters[i - 1].disconnect(this.filters[i]);
 			}
-
 			this.filters[this.filters.length - 1].disconnect(this.getOutput());
 		} else {
 			this.source.disconnect(this.getOutput());
 		}
-
 		this._connected = false;
 		return this;
 	}
-
 	getFilters() {
 		return this.filters;
 	}
-
 	setFilters(value) {
 		if (!value) value = [];
-
 		if (this._connected === true) {
 			this.disconnect();
 			this.filters = value.slice();
@@ -32092,10 +28838,8 @@ class Audio extends Object3D {
 		} else {
 			this.filters = value.slice();
 		}
-
 		return this;
 	}
-
 	setDetune(value) {
 		this.detune = value;
 		if (this.source.detune === undefined) return; // only set detune when available
@@ -32103,98 +28847,73 @@ class Audio extends Object3D {
 		if (this.isPlaying === true) {
 			this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
 		}
-
 		return this;
 	}
-
 	getDetune() {
 		return this.detune;
 	}
-
 	getFilter() {
 		return this.getFilters()[0];
 	}
-
 	setFilter(filter) {
 		return this.setFilters(filter ? [filter] : []);
 	}
-
 	setPlaybackRate(value) {
 		if (this.hasPlaybackControl === false) {
 			console.warn('THREE.Audio: this Audio has no playback control.');
 			return;
 		}
-
 		this.playbackRate = value;
-
 		if (this.isPlaying === true) {
 			this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
 		}
-
 		return this;
 	}
-
 	getPlaybackRate() {
 		return this.playbackRate;
 	}
-
 	onEnded() {
 		this.isPlaying = false;
 	}
-
 	getLoop() {
 		if (this.hasPlaybackControl === false) {
 			console.warn('THREE.Audio: this Audio has no playback control.');
 			return false;
 		}
-
 		return this.loop;
 	}
-
 	setLoop(value) {
 		if (this.hasPlaybackControl === false) {
 			console.warn('THREE.Audio: this Audio has no playback control.');
 			return;
 		}
-
 		this.loop = value;
-
 		if (this.isPlaying === true) {
 			this.source.loop = this.loop;
 		}
-
 		return this;
 	}
-
 	setLoopStart(value) {
 		this.loopStart = value;
 		return this;
 	}
-
 	setLoopEnd(value) {
 		this.loopEnd = value;
 		return this;
 	}
-
 	getVolume() {
 		return this.gain.gain.value;
 	}
-
 	setVolume(value) {
 		this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
 		return this;
 	}
-
 }
 
 const _position = /*@__PURE__*/new Vector3();
-
 const _quaternion = /*@__PURE__*/new Quaternion();
-
 const _scale = /*@__PURE__*/new Vector3();
-
 const _orientation = /*@__PURE__*/new Vector3();
-
 class PositionalAudio extends Audio {
 	constructor(listener) {
 		super(listener);
@@ -32202,70 +28921,56 @@ class PositionalAudio extends Audio {
 		this.panner.panningModel = 'HRTF';
 		this.panner.connect(this.gain);
 	}
-
 	disconnect() {
 		super.disconnect();
 		this.panner.disconnect(this.gain);
 	}
-
 	getOutput() {
 		return this.panner;
 	}
-
 	getRefDistance() {
 		return this.panner.refDistance;
 	}
-
 	setRefDistance(value) {
 		this.panner.refDistance = value;
 		return this;
 	}
-
 	getRolloffFactor() {
 		return this.panner.rolloffFactor;
 	}
-
 	setRolloffFactor(value) {
 		this.panner.rolloffFactor = value;
 		return this;
 	}
-
 	getDistanceModel() {
 		return this.panner.distanceModel;
 	}
-
 	setDistanceModel(value) {
 		this.panner.distanceModel = value;
 		return this;
 	}
-
 	getMaxDistance() {
 		return this.panner.maxDistance;
 	}
-
 	setMaxDistance(value) {
 		this.panner.maxDistance = value;
 		return this;
 	}
-
 	setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
 		this.panner.coneInnerAngle = coneInnerAngle;
 		this.panner.coneOuterAngle = coneOuterAngle;
 		this.panner.coneOuterGain = coneOuterGain;
 		return this;
 	}
-
 	updateMatrixWorld(force) {
 		super.updateMatrixWorld(force);
 		if (this.hasPlaybackControl === true && this.isPlaying === false) return;
 		this.matrixWorld.decompose(_position, _quaternion, _scale);
-
 		_orientation.set(0, 0, 1).applyQuaternion(_quaternion);
-
 		const panner = this.panner;
-
 		if (panner.positionX) {
 			// code path for Chrome and Firefox (see #14393)
+
 			const endTime = this.context.currentTime + this.listener.timeDelta;
 			panner.positionX.linearRampToValueAtTime(_position.x, endTime);
 			panner.positionY.linearRampToValueAtTime(_position.y, endTime);
@@ -32278,7 +28983,6 @@ class PositionalAudio extends Audio {
 			panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
 		}
 	}
-
 }
 
 class AudioAnalyser {
@@ -32288,30 +28992,27 @@ class AudioAnalyser {
 		this.data = new Uint8Array(this.analyser.frequencyBinCount);
 		audio.getOutput().connect(this.analyser);
 	}
-
 	getFrequencyData() {
 		this.analyser.getByteFrequencyData(this.data);
 		return this.data;
 	}
-
 	getAverageFrequency() {
 		let value = 0;
 		const data = this.getFrequencyData();
-
 		for (let i = 0; i < data.length; i++) {
 			value += data[i];
 		}
-
 		return value / data.length;
 	}
-
 }
 
 class PropertyMixer {
 	constructor(binding, typeName, valueSize) {
 		this.binding = binding;
 		this.valueSize = valueSize;
-		let mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
+		let mixFunction, mixFunctionAdditive, setIdentity;
+
+		// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
 		//
 		// interpolators can use .buffer as their .result
 		// the data then goes to 'incoming'
@@ -32335,24 +29036,22 @@ class PropertyMixer {
 				this.buffer = new Float64Array(valueSize * 6);
 				this._workIndex = 5;
 				break;
-
 			case 'string':
 			case 'bool':
-				mixFunction = this._select; // Use the regular mix function and for additive on these types,
-				// additive is not relevant for non-numeric types
+				mixFunction = this._select;
 
+				// Use the regular mix function and for additive on these types,
+				// additive is not relevant for non-numeric types
 				mixFunctionAdditive = this._select;
 				setIdentity = this._setAdditiveIdentityOther;
 				this.buffer = new Array(valueSize * 5);
 				break;
-
 			default:
 				mixFunction = this._lerp;
 				mixFunctionAdditive = this._lerpAdditive;
 				setIdentity = this._setAdditiveIdentityNumeric;
 				this.buffer = new Float64Array(valueSize * 5);
 		}
-
 		this._mixBufferRegion = mixFunction;
 		this._mixBufferRegionAdditive = mixFunctionAdditive;
 		this._setIdentity = setIdentity;
@@ -32362,133 +29061,126 @@ class PropertyMixer {
 		this.cumulativeWeightAdditive = 0;
 		this.useCount = 0;
 		this.referenceCount = 0;
-	} // accumulate data in the 'incoming' region into 'accu<i>'
-
+	}
 
+	// accumulate data in the 'incoming' region into 'accu<i>'
 	accumulate(accuIndex, weight) {
 		// note: happily accumulating nothing when weight = 0, the caller knows
 		// the weight and shouldn't have made the call in the first place
+
 		const buffer = this.buffer,
-					stride = this.valueSize,
-					offset = accuIndex * stride + stride;
+			stride = this.valueSize,
+			offset = accuIndex * stride + stride;
 		let currentWeight = this.cumulativeWeight;
-
 		if (currentWeight === 0) {
 			// accuN := incoming * weight
+
 			for (let i = 0; i !== stride; ++i) {
 				buffer[offset + i] = buffer[i];
 			}
-
 			currentWeight = weight;
 		} else {
 			// accuN := accuN + incoming * weight
+
 			currentWeight += weight;
 			const mix = weight / currentWeight;
-
 			this._mixBufferRegion(buffer, offset, 0, mix, stride);
 		}
-
 		this.cumulativeWeight = currentWeight;
-	} // accumulate data in the 'incoming' region into 'add'
-
+	}
 
+	// accumulate data in the 'incoming' region into 'add'
 	accumulateAdditive(weight) {
 		const buffer = this.buffer,
-					stride = this.valueSize,
-					offset = stride * this._addIndex;
-
+			stride = this.valueSize,
+			offset = stride * this._addIndex;
 		if (this.cumulativeWeightAdditive === 0) {
 			// add = identity
+
 			this._setIdentity();
-		} // add := add + incoming * weight
+		}
 
+		// add := add + incoming * weight
 
 		this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
-
 		this.cumulativeWeightAdditive += weight;
-	} // apply the state of 'accu<i>' to the binding when accus differ
-
+	}
 
+	// apply the state of 'accu<i>' to the binding when accus differ
 	apply(accuIndex) {
 		const stride = this.valueSize,
-					buffer = this.buffer,
-					offset = accuIndex * stride + stride,
-					weight = this.cumulativeWeight,
-					weightAdditive = this.cumulativeWeightAdditive,
-					binding = this.binding;
+			buffer = this.buffer,
+			offset = accuIndex * stride + stride,
+			weight = this.cumulativeWeight,
+			weightAdditive = this.cumulativeWeightAdditive,
+			binding = this.binding;
 		this.cumulativeWeight = 0;
 		this.cumulativeWeightAdditive = 0;
-
 		if (weight < 1) {
 			// accuN := accuN + original * ( 1 - cumulativeWeight )
-			const originalValueOffset = stride * this._origIndex;
 
+			const originalValueOffset = stride * this._origIndex;
 			this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
 		}
-
 		if (weightAdditive > 0) {
 			// accuN := accuN + additive accuN
+
 			this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
 		}
-
 		for (let i = stride, e = stride + stride; i !== e; ++i) {
 			if (buffer[i] !== buffer[i + stride]) {
 				// value has changed -> update scene graph
+
 				binding.setValue(buffer, offset);
 				break;
 			}
 		}
-	} // remember the state of the bound property and copy it to both accus
-
+	}
 
+	// remember the state of the bound property and copy it to both accus
 	saveOriginalState() {
 		const binding = this.binding;
 		const buffer = this.buffer,
-					stride = this.valueSize,
-					originalValueOffset = stride * this._origIndex;
-		binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original
+			stride = this.valueSize,
+			originalValueOffset = stride * this._origIndex;
+		binding.getValue(buffer, originalValueOffset);
 
+		// accu[0..1] := orig -- initially detect changes against the original
 		for (let i = stride, e = originalValueOffset; i !== e; ++i) {
 			buffer[i] = buffer[originalValueOffset + i % stride];
-		} // Add to identity for additive
-
+		}
 
+		// Add to identity for additive
 		this._setIdentity();
-
 		this.cumulativeWeight = 0;
 		this.cumulativeWeightAdditive = 0;
-	} // apply the state previously taken via 'saveOriginalState' to the binding
-
+	}
 
+	// apply the state previously taken via 'saveOriginalState' to the binding
 	restoreOriginalState() {
 		const originalValueOffset = this.valueSize * 3;
 		this.binding.setValue(this.buffer, originalValueOffset);
 	}
-
 	_setAdditiveIdentityNumeric() {
 		const startIndex = this._addIndex * this.valueSize;
 		const endIndex = startIndex + this.valueSize;
-
 		for (let i = startIndex; i < endIndex; i++) {
 			this.buffer[i] = 0;
 		}
 	}
-
 	_setAdditiveIdentityQuaternion() {
 		this._setAdditiveIdentityNumeric();
-
 		this.buffer[this._addIndex * this.valueSize + 3] = 1;
 	}
-
 	_setAdditiveIdentityOther() {
 		const startIndex = this._origIndex * this.valueSize;
 		const targetIndex = this._addIndex * this.valueSize;
-
 		for (let i = 0; i < this.valueSize; i++) {
 			this.buffer[targetIndex + i] = this.buffer[startIndex + i];
 		}
-	} // mix functions
+	}
 
+	// mix functions
 
 	_select(buffer, dstOffset, srcOffset, t, stride) {
 		if (t >= 0.5) {
@@ -32497,126 +29189,110 @@ class PropertyMixer {
 			}
 		}
 	}
-
 	_slerp(buffer, dstOffset, srcOffset, t) {
 		Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
 	}
-
 	_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
-		const workOffset = this._workIndex * stride; // Store result in intermediate buffer offset
+		const workOffset = this._workIndex * stride;
 
-		Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result
+		// Store result in intermediate buffer offset
+		Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
 
+		// Slerp to the intermediate result
 		Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
 	}
-
 	_lerp(buffer, dstOffset, srcOffset, t, stride) {
 		const s = 1 - t;
-
 		for (let i = 0; i !== stride; ++i) {
 			const j = dstOffset + i;
 			buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
 		}
 	}
-
 	_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
 		for (let i = 0; i !== stride; ++i) {
 			const j = dstOffset + i;
 			buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
 		}
 	}
-
 }
 
 // Characters [].:/ are reserved for track binding syntax.
 const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
+const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g');
 
-const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\w` regexp matches
+// Attempts to allow node names from any language. ES5's `\w` regexp matches
 // only latin characters, and the unicode \p{L} is not yet supported. So
 // instead, we exclude reserved characters and match everything else.
-
-
 const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
+const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']';
 
-const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must
+// Parent directories, delimited by '/' or ':'. Currently unused, but must
 // be matched to parse the rest of the track name.
+const _directoryRe = /*@__PURE__*/ /((?:WC+[\/:])*)/.source.replace('WC', _wordChar);
 
+// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
+const _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot);
 
-const _directoryRe = /*@__PURE__*/ /((?:WC+[\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
-
-
-const _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved
+// Object on target node, and accessor. May not contain reserved
 // characters. Accessor may contain any character except closing bracket.
+const _objectRe = /*@__PURE__*/ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar);
 
-
-const _objectRe = /*@__PURE__*/ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may
+// Property and accessor. May not contain reserved characters. Accessor may
 // contain any non-bracket characters.
-
-
 const _propertyRe = /*@__PURE__*/ /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', _wordChar);
-
 const _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');
-
 const _supportedObjectNames = ['material', 'materials', 'bones', 'map'];
-
 class Composite {
 	constructor(targetGroup, path, optionalParsedPath) {
 		const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
 		this._targetGroup = targetGroup;
 		this._bindings = targetGroup.subscribe_(path, parsedPath);
 	}
-
 	getValue(array, offset) {
 		this.bind(); // bind all binding
 
 		const firstValidIndex = this._targetGroup.nCachedObjects_,
-					binding = this._bindings[firstValidIndex]; // and only call .getValue on the first
+			binding = this._bindings[firstValidIndex];
 
+		// and only call .getValue on the first
 		if (binding !== undefined) binding.getValue(array, offset);
 	}
-
 	setValue(array, offset) {
 		const bindings = this._bindings;
-
 		for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
 			bindings[i].setValue(array, offset);
 		}
 	}
-
 	bind() {
 		const bindings = this._bindings;
-
 		for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
 			bindings[i].bind();
 		}
 	}
-
 	unbind() {
 		const bindings = this._bindings;
-
 		for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
 			bindings[i].unbind();
 		}
 	}
+}
 
-} // Note: This class uses a State pattern on a per-method basis:
+// Note: This class uses a State pattern on a per-method basis:
 // 'bind' sets 'this.getValue' / 'setValue' and shadows the
 // prototype version of these methods with one that represents
 // the bound state. When the property is not found, the methods
 // become no-ops.
-
-
 class PropertyBinding {
 	constructor(rootNode, path, parsedPath) {
 		this.path = path;
 		this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
 		this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
-		this.rootNode = rootNode; // initial state of these methods that calls 'bind'
+		this.rootNode = rootNode;
 
+		// initial state of these methods that calls 'bind'
 		this.getValue = this._getValue_unbound;
 		this.setValue = this._setValue_unbound;
 	}
-
 	static create(root, path, parsedPath) {
 		if (!(root && root.isAnimationObjectGroup)) {
 			return new PropertyBinding(root, path, parsedPath);
@@ -32624,6 +29300,7 @@ class PropertyBinding {
 			return new PropertyBinding.Composite(root, path, parsedPath);
 		}
 	}
+
 	/**
 	 * Replaces spaces with underscores and removes unsupported characters from
 	 * node names, to ensure compatibility with parseTrackName().
@@ -32631,19 +29308,14 @@ class PropertyBinding {
 	 * @param {string} name Node name to be sanitized.
 	 * @return {string}
 	 */
-
-
 	static sanitizeNodeName(name) {
 		return name.replace(/\s/g, '_').replace(_reservedRe, '');
 	}
-
 	static parseTrackName(trackName) {
 		const matches = _trackRe.exec(trackName);
-
 		if (matches === null) {
 			throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);
 		}
-
 		const results = {
 			// directoryName: matches[ 1 ], // (tschw) currently unused
 			nodeName: matches[2],
@@ -32654,323 +29326,287 @@ class PropertyBinding {
 			propertyIndex: matches[6]
 		};
 		const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');
-
 		if (lastDot !== undefined && lastDot !== -1) {
-			const objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there
+			const objectName = results.nodeName.substring(lastDot + 1);
+
+			// Object names must be checked against an allowlist. Otherwise, there
 			// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
 			// 'bar' could be the objectName, or part of a nodeName (which can
 			// include '.' characters).
-
 			if (_supportedObjectNames.indexOf(objectName) !== -1) {
 				results.nodeName = results.nodeName.substring(0, lastDot);
 				results.objectName = objectName;
 			}
 		}
-
 		if (results.propertyName === null || results.propertyName.length === 0) {
 			throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
 		}
-
 		return results;
 	}
-
 	static findNode(root, nodeName) {
 		if (nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
 			return root;
-		} // search into skeleton bones.
-
+		}
 
+		// search into skeleton bones.
 		if (root.skeleton) {
 			const bone = root.skeleton.getBoneByName(nodeName);
-
 			if (bone !== undefined) {
 				return bone;
 			}
-		} // search into node subtree.
-
+		}
 
+		// search into node subtree.
 		if (root.children) {
 			const searchNodeSubtree = function (children) {
 				for (let i = 0; i < children.length; i++) {
 					const childNode = children[i];
-
 					if (childNode.name === nodeName || childNode.uuid === nodeName) {
 						return childNode;
 					}
-
 					const result = searchNodeSubtree(childNode.children);
 					if (result) return result;
 				}
-
 				return null;
 			};
-
 			const subTreeNode = searchNodeSubtree(root.children);
-
 			if (subTreeNode) {
 				return subTreeNode;
 			}
 		}
-
 		return null;
-	} // these are used to "bind" a nonexistent property
-
+	}
 
+	// these are used to "bind" a nonexistent property
 	_getValue_unavailable() {}
+	_setValue_unavailable() {}
 
-	_setValue_unavailable() {} // Getters
-
+	// Getters
 
 	_getValue_direct(buffer, offset) {
 		buffer[offset] = this.targetObject[this.propertyName];
 	}
-
 	_getValue_array(buffer, offset) {
 		const source = this.resolvedProperty;
-
 		for (let i = 0, n = source.length; i !== n; ++i) {
 			buffer[offset++] = source[i];
 		}
 	}
-
 	_getValue_arrayElement(buffer, offset) {
 		buffer[offset] = this.resolvedProperty[this.propertyIndex];
 	}
-
 	_getValue_toArray(buffer, offset) {
 		this.resolvedProperty.toArray(buffer, offset);
-	} // Direct
+	}
 
+	// Direct
 
 	_setValue_direct(buffer, offset) {
 		this.targetObject[this.propertyName] = buffer[offset];
 	}
-
 	_setValue_direct_setNeedsUpdate(buffer, offset) {
 		this.targetObject[this.propertyName] = buffer[offset];
 		this.targetObject.needsUpdate = true;
 	}
-
 	_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
 		this.targetObject[this.propertyName] = buffer[offset];
 		this.targetObject.matrixWorldNeedsUpdate = true;
-	} // EntireArray
+	}
 
+	// EntireArray
 
 	_setValue_array(buffer, offset) {
 		const dest = this.resolvedProperty;
-
 		for (let i = 0, n = dest.length; i !== n; ++i) {
 			dest[i] = buffer[offset++];
 		}
 	}
-
 	_setValue_array_setNeedsUpdate(buffer, offset) {
 		const dest = this.resolvedProperty;
-
 		for (let i = 0, n = dest.length; i !== n; ++i) {
 			dest[i] = buffer[offset++];
 		}
-
 		this.targetObject.needsUpdate = true;
 	}
-
 	_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
 		const dest = this.resolvedProperty;
-
 		for (let i = 0, n = dest.length; i !== n; ++i) {
 			dest[i] = buffer[offset++];
 		}
-
 		this.targetObject.matrixWorldNeedsUpdate = true;
-	} // ArrayElement
+	}
 
+	// ArrayElement
 
 	_setValue_arrayElement(buffer, offset) {
 		this.resolvedProperty[this.propertyIndex] = buffer[offset];
 	}
-
 	_setValue_arrayElement_setNeedsUpdate(buffer, offset) {
 		this.resolvedProperty[this.propertyIndex] = buffer[offset];
 		this.targetObject.needsUpdate = true;
 	}
-
 	_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
 		this.resolvedProperty[this.propertyIndex] = buffer[offset];
 		this.targetObject.matrixWorldNeedsUpdate = true;
-	} // HasToFromArray
+	}
 
+	// HasToFromArray
 
 	_setValue_fromArray(buffer, offset) {
 		this.resolvedProperty.fromArray(buffer, offset);
 	}
-
 	_setValue_fromArray_setNeedsUpdate(buffer, offset) {
 		this.resolvedProperty.fromArray(buffer, offset);
 		this.targetObject.needsUpdate = true;
 	}
-
 	_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
 		this.resolvedProperty.fromArray(buffer, offset);
 		this.targetObject.matrixWorldNeedsUpdate = true;
 	}
-
 	_getValue_unbound(targetArray, offset) {
 		this.bind();
 		this.getValue(targetArray, offset);
 	}
-
 	_setValue_unbound(sourceArray, offset) {
 		this.bind();
 		this.setValue(sourceArray, offset);
-	} // create getter / setter pair for a property in the scene graph
-
+	}
 
+	// create getter / setter pair for a property in the scene graph
 	bind() {
 		let targetObject = this.node;
 		const parsedPath = this.parsedPath;
 		const objectName = parsedPath.objectName;
 		const propertyName = parsedPath.propertyName;
 		let propertyIndex = parsedPath.propertyIndex;
-
 		if (!targetObject) {
 			targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
 			this.node = targetObject;
-		} // set fail state so we can just 'return' on error
-
+		}
 
+		// set fail state so we can just 'return' on error
 		this.getValue = this._getValue_unavailable;
-		this.setValue = this._setValue_unavailable; // ensure there is a value node
+		this.setValue = this._setValue_unavailable;
 
+		// ensure there is a value node
 		if (!targetObject) {
 			console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
 			return;
 		}
-
 		if (objectName) {
-			let objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....
+			let objectIndex = parsedPath.objectIndex;
 
+			// special cases were we need to reach deeper into the hierarchy to get the face materials....
 			switch (objectName) {
 				case 'materials':
 					if (!targetObject.material) {
 						console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
 						return;
 					}
-
 					if (!targetObject.material.materials) {
 						console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
 						return;
 					}
-
 					targetObject = targetObject.material.materials;
 					break;
-
 				case 'bones':
 					if (!targetObject.skeleton) {
 						console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
 						return;
-					} // potential future optimization: skip this if propertyIndex is already an integer
-					// and convert the integer string to a true integer.
+					}
 
+					// potential future optimization: skip this if propertyIndex is already an integer
+					// and convert the integer string to a true integer.
 
-					targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.
+					targetObject = targetObject.skeleton.bones;
 
+					// support resolving morphTarget names into indices.
 					for (let i = 0; i < targetObject.length; i++) {
 						if (targetObject[i].name === objectIndex) {
 							objectIndex = i;
 							break;
 						}
 					}
-
 					break;
-
 				case 'map':
 					if ('map' in targetObject) {
 						targetObject = targetObject.map;
 						break;
 					}
-
 					if (!targetObject.material) {
 						console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
 						return;
 					}
-
 					if (!targetObject.material.map) {
 						console.error('THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this);
 						return;
 					}
-
 					targetObject = targetObject.material.map;
 					break;
-
 				default:
 					if (targetObject[objectName] === undefined) {
 						console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
 						return;
 					}
-
 					targetObject = targetObject[objectName];
 			}
-
 			if (objectIndex !== undefined) {
 				if (targetObject[objectIndex] === undefined) {
 					console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
 					return;
 				}
-
 				targetObject = targetObject[objectIndex];
 			}
-		} // resolve property
-
+		}
 
+		// resolve property
 		const nodeProperty = targetObject[propertyName];
-
 		if (nodeProperty === undefined) {
 			const nodeName = parsedPath.nodeName;
 			console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
 			return;
-		} // determine versioning scheme
-
+		}
 
+		// determine versioning scheme
 		let versioning = this.Versioning.None;
 		this.targetObject = targetObject;
-
 		if (targetObject.needsUpdate !== undefined) {
 			// material
+
 			versioning = this.Versioning.NeedsUpdate;
 		} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {
 			// node transform
-			versioning = this.Versioning.MatrixWorldNeedsUpdate;
-		} // determine how the property gets bound
 
+			versioning = this.Versioning.MatrixWorldNeedsUpdate;
+		}
 
+		// determine how the property gets bound
 		let bindingType = this.BindingType.Direct;
-
 		if (propertyIndex !== undefined) {
 			// access a sub element of the property array (only primitives are supported right now)
+
 			if (propertyName === 'morphTargetInfluences') {
 				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
+
 				// support resolving morphTarget names into indices.
 				if (!targetObject.geometry) {
 					console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
 					return;
 				}
-
 				if (!targetObject.geometry.morphAttributes) {
 					console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
 					return;
 				}
-
 				if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {
 					propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
 				}
 			}
-
 			bindingType = this.BindingType.ArrayElement;
 			this.resolvedProperty = nodeProperty;
 			this.propertyIndex = propertyIndex;
 		} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
 			// must use copy for Object3D.Euler/Quaternion
+
 			bindingType = this.BindingType.HasFromToArray;
 			this.resolvedProperty = nodeProperty;
 		} else if (Array.isArray(nodeProperty)) {
@@ -32978,23 +29614,21 @@ class PropertyBinding {
 			this.resolvedProperty = nodeProperty;
 		} else {
 			this.propertyName = propertyName;
-		} // select getter / setter
-
+		}
 
+		// select getter / setter
 		this.getValue = this.GetterByBindingType[bindingType];
 		this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
 	}
-
 	unbind() {
-		this.node = null; // back to the prototype version of getValue / setValue
-		// note: avoiding to mutate the shape of 'this' via 'delete'
+		this.node = null;
 
+		// back to the prototype version of getValue / setValue
+		// note: avoiding to mutate the shape of 'this' via 'delete'
 		this.getValue = this._getValue_unbound;
 		this.setValue = this._setValue_unbound;
 	}
-
 }
-
 PropertyBinding.Composite = Composite;
 PropertyBinding.prototype.BindingType = {
 	Direct: 0,
@@ -33008,10 +29642,15 @@ PropertyBinding.prototype.Versioning = {
 	MatrixWorldNeedsUpdate: 2
 };
 PropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];
-PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct
-PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray
-PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement
-PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray
+PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[
+// Direct
+PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [
+// EntireArray
+
+PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [
+// ArrayElement
+PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [
+// HasToFromArray
 PropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];
 
 /**
@@ -33046,8 +29685,9 @@ PropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setVal
 class AnimationObjectGroup {
 	constructor() {
 		this.isAnimationObjectGroup = true;
-		this.uuid = generateUUID(); // cached objects followed by the active ones
+		this.uuid = generateUUID();
 
+		// cached objects followed by the active ones
 		this._objects = Array.prototype.slice.call(arguments);
 		this.nCachedObjects_ = 0; // threshold
 		// note: read by PropertyBinding.Composite
@@ -33058,13 +29698,9 @@ class AnimationObjectGroup {
 		for (let i = 0, n = arguments.length; i !== n; ++i) {
 			indices[arguments[i].uuid] = i;
 		}
-
 		this._paths = []; // inside: string
-
 		this._parsedPaths = []; // inside: { we don't care, here }
-
 		this._bindings = []; // inside: Array< PropertyBinding >
-
 		this._bindingsIndicesByPath = {}; // inside: indices in these arrays
 
 		const scope = this;
@@ -33073,165 +29709,164 @@ class AnimationObjectGroup {
 				get total() {
 					return scope._objects.length;
 				},
-
 				get inUse() {
 					return this.total - scope.nCachedObjects_;
 				}
-
 			},
-
 			get bindingsPerObject() {
 				return scope._bindings.length;
 			}
-
 		};
 	}
-
 	add() {
 		const objects = this._objects,
-					indicesByUUID = this._indicesByUUID,
-					paths = this._paths,
-					parsedPaths = this._parsedPaths,
-					bindings = this._bindings,
-					nBindings = bindings.length;
+			indicesByUUID = this._indicesByUUID,
+			paths = this._paths,
+			parsedPaths = this._parsedPaths,
+			bindings = this._bindings,
+			nBindings = bindings.length;
 		let knownObject = undefined,
-				nObjects = objects.length,
-				nCachedObjects = this.nCachedObjects_;
-
+			nObjects = objects.length,
+			nCachedObjects = this.nCachedObjects_;
 		for (let i = 0, n = arguments.length; i !== n; ++i) {
 			const object = arguments[i],
-						uuid = object.uuid;
+				uuid = object.uuid;
 			let index = indicesByUUID[uuid];
-
 			if (index === undefined) {
 				// unknown object -> add it to the ACTIVE region
+
 				index = nObjects++;
 				indicesByUUID[uuid] = index;
-				objects.push(object); // accounting is done, now do the same for all bindings
+				objects.push(object);
+
+				// accounting is done, now do the same for all bindings
 
 				for (let j = 0, m = nBindings; j !== m; ++j) {
 					bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
 				}
 			} else if (index < nCachedObjects) {
-				knownObject = objects[index]; // move existing object to the ACTIVE region
+				knownObject = objects[index];
+
+				// move existing object to the ACTIVE region
 
 				const firstActiveIndex = --nCachedObjects,
-							lastCachedObject = objects[firstActiveIndex];
+					lastCachedObject = objects[firstActiveIndex];
 				indicesByUUID[lastCachedObject.uuid] = index;
 				objects[index] = lastCachedObject;
 				indicesByUUID[uuid] = firstActiveIndex;
-				objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings
+				objects[firstActiveIndex] = object;
+
+				// accounting is done, now do the same for all bindings
 
 				for (let j = 0, m = nBindings; j !== m; ++j) {
 					const bindingsForPath = bindings[j],
-								lastCached = bindingsForPath[firstActiveIndex];
+						lastCached = bindingsForPath[firstActiveIndex];
 					let binding = bindingsForPath[index];
 					bindingsForPath[index] = lastCached;
-
 					if (binding === undefined) {
 						// since we do not bother to create new bindings
 						// for objects that are cached, the binding may
 						// or may not exist
+
 						binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
 					}
-
 					bindingsForPath[firstActiveIndex] = binding;
 				}
 			} else if (objects[index] !== knownObject) {
 				console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');
 			} // else the object is already where we want it to be
-
 		} // for arguments
 
-
 		this.nCachedObjects_ = nCachedObjects;
 	}
-
 	remove() {
 		const objects = this._objects,
-					indicesByUUID = this._indicesByUUID,
-					bindings = this._bindings,
-					nBindings = bindings.length;
+			indicesByUUID = this._indicesByUUID,
+			bindings = this._bindings,
+			nBindings = bindings.length;
 		let nCachedObjects = this.nCachedObjects_;
-
 		for (let i = 0, n = arguments.length; i !== n; ++i) {
 			const object = arguments[i],
-						uuid = object.uuid,
-						index = indicesByUUID[uuid];
-
+				uuid = object.uuid,
+				index = indicesByUUID[uuid];
 			if (index !== undefined && index >= nCachedObjects) {
 				// move existing object into the CACHED region
+
 				const lastCachedIndex = nCachedObjects++,
-							firstActiveObject = objects[lastCachedIndex];
+					firstActiveObject = objects[lastCachedIndex];
 				indicesByUUID[firstActiveObject.uuid] = index;
 				objects[index] = firstActiveObject;
 				indicesByUUID[uuid] = lastCachedIndex;
-				objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings
+				objects[lastCachedIndex] = object;
+
+				// accounting is done, now do the same for all bindings
 
 				for (let j = 0, m = nBindings; j !== m; ++j) {
 					const bindingsForPath = bindings[j],
-								firstActive = bindingsForPath[lastCachedIndex],
-								binding = bindingsForPath[index];
+						firstActive = bindingsForPath[lastCachedIndex],
+						binding = bindingsForPath[index];
 					bindingsForPath[index] = firstActive;
 					bindingsForPath[lastCachedIndex] = binding;
 				}
 			}
 		} // for arguments
 
-
 		this.nCachedObjects_ = nCachedObjects;
-	} // remove & forget
-
+	}
 
+	// remove & forget
 	uncache() {
 		const objects = this._objects,
-					indicesByUUID = this._indicesByUUID,
-					bindings = this._bindings,
-					nBindings = bindings.length;
+			indicesByUUID = this._indicesByUUID,
+			bindings = this._bindings,
+			nBindings = bindings.length;
 		let nCachedObjects = this.nCachedObjects_,
-				nObjects = objects.length;
-
+			nObjects = objects.length;
 		for (let i = 0, n = arguments.length; i !== n; ++i) {
 			const object = arguments[i],
-						uuid = object.uuid,
-						index = indicesByUUID[uuid];
-
+				uuid = object.uuid,
+				index = indicesByUUID[uuid];
 			if (index !== undefined) {
 				delete indicesByUUID[uuid];
-
 				if (index < nCachedObjects) {
 					// object is cached, shrink the CACHED region
+
 					const firstActiveIndex = --nCachedObjects,
-								lastCachedObject = objects[firstActiveIndex],
-								lastIndex = --nObjects,
-								lastObject = objects[lastIndex]; // last cached object takes this object's place
+						lastCachedObject = objects[firstActiveIndex],
+						lastIndex = --nObjects,
+						lastObject = objects[lastIndex];
 
+					// last cached object takes this object's place
 					indicesByUUID[lastCachedObject.uuid] = index;
-					objects[index] = lastCachedObject; // last object goes to the activated slot and pop
+					objects[index] = lastCachedObject;
 
+					// last object goes to the activated slot and pop
 					indicesByUUID[lastObject.uuid] = firstActiveIndex;
 					objects[firstActiveIndex] = lastObject;
-					objects.pop(); // accounting is done, now do the same for all bindings
+					objects.pop();
+
+					// accounting is done, now do the same for all bindings
 
 					for (let j = 0, m = nBindings; j !== m; ++j) {
 						const bindingsForPath = bindings[j],
-									lastCached = bindingsForPath[firstActiveIndex],
-									last = bindingsForPath[lastIndex];
+							lastCached = bindingsForPath[firstActiveIndex],
+							last = bindingsForPath[lastIndex];
 						bindingsForPath[index] = lastCached;
 						bindingsForPath[firstActiveIndex] = last;
 						bindingsForPath.pop();
 					}
 				} else {
 					// object is active, just swap with the last and pop
-					const lastIndex = --nObjects,
-								lastObject = objects[lastIndex];
 
+					const lastIndex = --nObjects,
+						lastObject = objects[lastIndex];
 					if (lastIndex > 0) {
 						indicesByUUID[lastObject.uuid] = index;
 					}
-
 					objects[index] = lastObject;
-					objects.pop(); // accounting is done, now do the same for all bindings
+					objects.pop();
+
+					// accounting is done, now do the same for all bindings
 
 					for (let j = 0, m = nBindings; j !== m; ++j) {
 						const bindingsForPath = bindings[j];
@@ -33239,56 +29874,52 @@ class AnimationObjectGroup {
 						bindingsForPath.pop();
 					}
 				} // cached or active
-
 			} // if object is known
-
 		} // for arguments
 
-
 		this.nCachedObjects_ = nCachedObjects;
-	} // Internal interface used by befriended PropertyBinding.Composite:
+	}
 
+	// Internal interface used by befriended PropertyBinding.Composite:
 
 	subscribe_(path, parsedPath) {
 		// returns an array of bindings for the given path that is changed
 		// according to the contained objects in the group
+
 		const indicesByPath = this._bindingsIndicesByPath;
 		let index = indicesByPath[path];
 		const bindings = this._bindings;
 		if (index !== undefined) return bindings[index];
 		const paths = this._paths,
-					parsedPaths = this._parsedPaths,
-					objects = this._objects,
-					nObjects = objects.length,
-					nCachedObjects = this.nCachedObjects_,
-					bindingsForPath = new Array(nObjects);
+			parsedPaths = this._parsedPaths,
+			objects = this._objects,
+			nObjects = objects.length,
+			nCachedObjects = this.nCachedObjects_,
+			bindingsForPath = new Array(nObjects);
 		index = bindings.length;
 		indicesByPath[path] = index;
 		paths.push(path);
 		parsedPaths.push(parsedPath);
 		bindings.push(bindingsForPath);
-
 		for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
 			const object = objects[i];
 			bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
 		}
-
 		return bindingsForPath;
 	}
-
 	unsubscribe_(path) {
 		// tells the group to forget about a property path and no longer
 		// update the array previously obtained with 'subscribe_'
-		const indicesByPath = this._bindingsIndicesByPath,
-					index = indicesByPath[path];
 
+		const indicesByPath = this._bindingsIndicesByPath,
+			index = indicesByPath[path];
 		if (index !== undefined) {
 			const paths = this._paths,
-						parsedPaths = this._parsedPaths,
-						bindings = this._bindings,
-						lastBindingsIndex = bindings.length - 1,
-						lastBindings = bindings[lastBindingsIndex],
-						lastBindingsPath = path[lastBindingsIndex];
+				parsedPaths = this._parsedPaths,
+				bindings = this._bindings,
+				lastBindingsIndex = bindings.length - 1,
+				lastBindings = bindings[lastBindingsIndex],
+				lastBindingsPath = path[lastBindingsIndex];
 			indicesByPath[lastBindingsPath] = index;
 			bindings[index] = lastBindings;
 			bindings.pop();
@@ -33298,7 +29929,6 @@ class AnimationObjectGroup {
 			paths.pop();
 		}
 	}
-
 }
 
 class AnimationAction {
@@ -33308,37 +29938,36 @@ class AnimationAction {
 		this._localRoot = localRoot;
 		this.blendMode = blendMode;
 		const tracks = clip.tracks,
-					nTracks = tracks.length,
-					interpolants = new Array(nTracks);
+			nTracks = tracks.length,
+			interpolants = new Array(nTracks);
 		const interpolantSettings = {
 			endingStart: ZeroCurvatureEnding,
 			endingEnd: ZeroCurvatureEnding
 		};
-
 		for (let i = 0; i !== nTracks; ++i) {
 			const interpolant = tracks[i].createInterpolant(null);
 			interpolants[i] = interpolant;
 			interpolant.settings = interpolantSettings;
 		}
-
 		this._interpolantSettings = interpolantSettings;
 		this._interpolants = interpolants; // bound by the mixer
-		// inside: PropertyMixer (managed by the mixer)
 
+		// inside: PropertyMixer (managed by the mixer)
 		this._propertyBindings = new Array(nTracks);
 		this._cacheIndex = null; // for the memory manager
-
 		this._byClipCacheIndex = null; // for the memory manager
 
 		this._timeScaleInterpolant = null;
 		this._weightInterpolant = null;
 		this.loop = LoopRepeat;
-		this._loopCount = -1; // global mixer time when the action is to be started
+		this._loopCount = -1;
+
+		// global mixer time when the action is to be started
 		// it's set back to 'null' upon start of the action
+		this._startTime = null;
 
-		this._startTime = null; // scaled local time of the action
+		// scaled local time of the action
 		// gets clamped or wrapped to 0..clip.duration according to loop
-
 		this.time = 0;
 		this.timeScale = 1;
 		this._effectiveTimeScale = 1;
@@ -33347,264 +29976,226 @@ class AnimationAction {
 		this.repetitions = Infinity; // no. of repetitions when looping
 
 		this.paused = false; // true -> zero effective time scale
-
 		this.enabled = true; // false -> zero effective weight
 
 		this.clampWhenFinished = false; // keep feeding the last frame?
 
 		this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
-
 		this.zeroSlopeAtEnd = true; // clips for start, loop and end
-	} // State & Scheduling
+	}
 
+	// State & Scheduling
 
 	play() {
 		this._mixer._activateAction(this);
-
 		return this;
 	}
-
 	stop() {
 		this._mixer._deactivateAction(this);
-
 		return this.reset();
 	}
-
 	reset() {
 		this.paused = false;
 		this.enabled = true;
 		this.time = 0; // restart clip
-
 		this._loopCount = -1; // forget previous loops
-
 		this._startTime = null; // forget scheduling
 
 		return this.stopFading().stopWarping();
 	}
-
 	isRunning() {
 		return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
-	} // return true when play has been called
-
+	}
 
+	// return true when play has been called
 	isScheduled() {
 		return this._mixer._isActiveAction(this);
 	}
-
 	startAt(time) {
 		this._startTime = time;
 		return this;
 	}
-
 	setLoop(mode, repetitions) {
 		this.loop = mode;
 		this.repetitions = repetitions;
 		return this;
-	} // Weight
+	}
+
+	// Weight
+
 	// set the weight stopping any scheduled fading
 	// although .enabled = false yields an effective weight of zero, this
 	// method does *not* change .enabled, because it would be confusing
-
-
 	setEffectiveWeight(weight) {
-		this.weight = weight; // note: same logic as when updated at runtime
+		this.weight = weight;
 
+		// note: same logic as when updated at runtime
 		this._effectiveWeight = this.enabled ? weight : 0;
 		return this.stopFading();
-	} // return the weight considering fading and .enabled
-
+	}
 
+	// return the weight considering fading and .enabled
 	getEffectiveWeight() {
 		return this._effectiveWeight;
 	}
-
 	fadeIn(duration) {
 		return this._scheduleFading(duration, 0, 1);
 	}
-
 	fadeOut(duration) {
 		return this._scheduleFading(duration, 1, 0);
 	}
-
 	crossFadeFrom(fadeOutAction, duration, warp) {
 		fadeOutAction.fadeOut(duration);
 		this.fadeIn(duration);
-
 		if (warp) {
 			const fadeInDuration = this._clip.duration,
-						fadeOutDuration = fadeOutAction._clip.duration,
-						startEndRatio = fadeOutDuration / fadeInDuration,
-						endStartRatio = fadeInDuration / fadeOutDuration;
+				fadeOutDuration = fadeOutAction._clip.duration,
+				startEndRatio = fadeOutDuration / fadeInDuration,
+				endStartRatio = fadeInDuration / fadeOutDuration;
 			fadeOutAction.warp(1.0, startEndRatio, duration);
 			this.warp(endStartRatio, 1.0, duration);
 		}
-
 		return this;
 	}
-
 	crossFadeTo(fadeInAction, duration, warp) {
 		return fadeInAction.crossFadeFrom(this, duration, warp);
 	}
-
 	stopFading() {
 		const weightInterpolant = this._weightInterpolant;
-
 		if (weightInterpolant !== null) {
 			this._weightInterpolant = null;
-
 			this._mixer._takeBackControlInterpolant(weightInterpolant);
 		}
-
 		return this;
-	} // Time Scale Control
+	}
+
+	// Time Scale Control
+
 	// set the time scale stopping any scheduled warping
 	// although .paused = true yields an effective time scale of zero, this
 	// method does *not* change .paused, because it would be confusing
-
-
 	setEffectiveTimeScale(timeScale) {
 		this.timeScale = timeScale;
 		this._effectiveTimeScale = this.paused ? 0 : timeScale;
 		return this.stopWarping();
-	} // return the time scale considering warping and .paused
-
+	}
 
+	// return the time scale considering warping and .paused
 	getEffectiveTimeScale() {
 		return this._effectiveTimeScale;
 	}
-
 	setDuration(duration) {
 		this.timeScale = this._clip.duration / duration;
 		return this.stopWarping();
 	}
-
 	syncWith(action) {
 		this.time = action.time;
 		this.timeScale = action.timeScale;
 		return this.stopWarping();
 	}
-
 	halt(duration) {
 		return this.warp(this._effectiveTimeScale, 0, duration);
 	}
-
 	warp(startTimeScale, endTimeScale, duration) {
 		const mixer = this._mixer,
-					now = mixer.time,
-					timeScale = this.timeScale;
+			now = mixer.time,
+			timeScale = this.timeScale;
 		let interpolant = this._timeScaleInterpolant;
-
 		if (interpolant === null) {
 			interpolant = mixer._lendControlInterpolant();
 			this._timeScaleInterpolant = interpolant;
 		}
-
 		const times = interpolant.parameterPositions,
-					values = interpolant.sampleValues;
+			values = interpolant.sampleValues;
 		times[0] = now;
 		times[1] = now + duration;
 		values[0] = startTimeScale / timeScale;
 		values[1] = endTimeScale / timeScale;
 		return this;
 	}
-
 	stopWarping() {
 		const timeScaleInterpolant = this._timeScaleInterpolant;
-
 		if (timeScaleInterpolant !== null) {
 			this._timeScaleInterpolant = null;
-
 			this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
 		}
-
 		return this;
-	} // Object Accessors
+	}
 
+	// Object Accessors
 
 	getMixer() {
 		return this._mixer;
 	}
-
 	getClip() {
 		return this._clip;
 	}
-
 	getRoot() {
 		return this._localRoot || this._mixer._root;
-	} // Interna
+	}
 
+	// Interna
 
 	_update(time, deltaTime, timeDirection, accuIndex) {
 		// called by the mixer
+
 		if (!this.enabled) {
 			// call ._updateWeight() to update ._effectiveWeight
-			this._updateWeight(time);
 
+			this._updateWeight(time);
 			return;
 		}
-
 		const startTime = this._startTime;
-
 		if (startTime !== null) {
 			// check for scheduled start of action
-			const timeRunning = (time - startTime) * timeDirection;
 
+			const timeRunning = (time - startTime) * timeDirection;
 			if (timeRunning < 0 || timeDirection === 0) {
 				deltaTime = 0;
 			} else {
 				this._startTime = null; // unschedule
-
 				deltaTime = timeDirection * timeRunning;
 			}
-		} // apply time scale and advance time
+		}
 
+		// apply time scale and advance time
 
 		deltaTime *= this._updateTimeScale(time);
+		const clipTime = this._updateTime(deltaTime);
 
-		const clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in
+		// note: _updateTime may disable the action resulting in
 		// an effective weight of 0
 
-
 		const weight = this._updateWeight(time);
-
 		if (weight > 0) {
 			const interpolants = this._interpolants;
 			const propertyMixers = this._propertyBindings;
-
 			switch (this.blendMode) {
 				case AdditiveAnimationBlendMode:
 					for (let j = 0, m = interpolants.length; j !== m; ++j) {
 						interpolants[j].evaluate(clipTime);
 						propertyMixers[j].accumulateAdditive(weight);
 					}
-
 					break;
-
 				case NormalAnimationBlendMode:
 				default:
 					for (let j = 0, m = interpolants.length; j !== m; ++j) {
 						interpolants[j].evaluate(clipTime);
 						propertyMixers[j].accumulate(accuIndex, weight);
 					}
-
 			}
 		}
 	}
-
 	_updateWeight(time) {
 		let weight = 0;
-
 		if (this.enabled) {
 			weight = this.weight;
 			const interpolant = this._weightInterpolant;
-
 			if (interpolant !== null) {
 				const interpolantValue = interpolant.evaluate(time)[0];
 				weight *= interpolantValue;
-
 				if (time > interpolant.parameterPositions[1]) {
 					this.stopFading();
-
 					if (interpolantValue === 0) {
 						// faded out, disable
 						this.enabled = false;
@@ -33612,25 +30203,19 @@ class AnimationAction {
 				}
 			}
 		}
-
 		this._effectiveWeight = weight;
 		return weight;
 	}
-
 	_updateTimeScale(time) {
 		let timeScale = 0;
-
 		if (!this.paused) {
 			timeScale = this.timeScale;
 			const interpolant = this._timeScaleInterpolant;
-
 			if (interpolant !== null) {
 				const interpolantValue = interpolant.evaluate(time)[0];
 				timeScale *= interpolantValue;
-
 				if (time > interpolant.parameterPositions[1]) {
 					this.stopWarping();
-
 					if (timeScale === 0) {
 						// motion has halted, pause
 						this.paused = true;
@@ -33641,31 +30226,26 @@ class AnimationAction {
 				}
 			}
 		}
-
 		this._effectiveTimeScale = timeScale;
 		return timeScale;
 	}
-
 	_updateTime(deltaTime) {
 		const duration = this._clip.duration;
 		const loop = this.loop;
 		let time = this.time + deltaTime;
 		let loopCount = this._loopCount;
 		const pingPong = loop === LoopPingPong;
-
 		if (deltaTime === 0) {
 			if (loopCount === -1) return time;
 			return pingPong && (loopCount & 1) === 1 ? duration - time : time;
 		}
-
 		if (loop === LoopOnce) {
 			if (loopCount === -1) {
 				// just started
-				this._loopCount = 0;
 
+				this._loopCount = 0;
 				this._setEndings(true, true, false);
 			}
-
 			handle_stop: {
 				if (time >= duration) {
 					time = duration;
@@ -33675,10 +30255,8 @@ class AnimationAction {
 					this.time = time;
 					break handle_stop;
 				}
-
 				if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
 				this.time = time;
-
 				this._mixer.dispatchEvent({
 					type: 'finished',
 					action: this,
@@ -33687,34 +30265,34 @@ class AnimationAction {
 			}
 		} else {
 			// repetitive Repeat or PingPong
+
 			if (loopCount === -1) {
 				// just started
+
 				if (deltaTime >= 0) {
 					loopCount = 0;
-
 					this._setEndings(true, this.repetitions === 0, pingPong);
 				} else {
 					// when looping in reverse direction, the initial
 					// transition through zero counts as a repetition,
 					// so leave loopCount at -1
+
 					this._setEndings(this.repetitions === 0, true, pingPong);
 				}
 			}
-
 			if (time >= duration || time < 0) {
 				// wrap around
-				const loopDelta = Math.floor(time / duration); // signed
 
+				const loopDelta = Math.floor(time / duration); // signed
 				time -= duration * loopDelta;
 				loopCount += Math.abs(loopDelta);
 				const pending = this.repetitions - loopCount;
-
 				if (pending <= 0) {
 					// have to stop (switch state, clamp time, fire event)
+
 					if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
 					time = deltaTime > 0 ? duration : 0;
 					this.time = time;
-
 					this._mixer.dispatchEvent({
 						type: 'finished',
 						action: this,
@@ -33722,18 +30300,17 @@ class AnimationAction {
 					});
 				} else {
 					// keep running
+
 					if (pending === 1) {
 						// entering the last round
-						const atStart = deltaTime < 0;
 
+						const atStart = deltaTime < 0;
 						this._setEndings(atStart, !atStart, pingPong);
 					} else {
 						this._setEndings(false, false, pingPong);
 					}
-
 					this._loopCount = loopCount;
 					this.time = time;
-
 					this._mixer.dispatchEvent({
 						type: 'loop',
 						action: this,
@@ -33743,30 +30320,27 @@ class AnimationAction {
 			} else {
 				this.time = time;
 			}
-
 			if (pingPong && (loopCount & 1) === 1) {
 				// invert time for the "pong round"
+
 				return duration - time;
 			}
 		}
-
 		return time;
 	}
-
 	_setEndings(atStart, atEnd, pingPong) {
 		const settings = this._interpolantSettings;
-
 		if (pingPong) {
 			settings.endingStart = ZeroSlopeEnding;
 			settings.endingEnd = ZeroSlopeEnding;
 		} else {
 			// assuming for LoopOnce atStart == atEnd == true
+
 			if (atStart) {
 				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
 			} else {
 				settings.endingStart = WrapAroundEnding;
 			}
-
 			if (atEnd) {
 				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
 			} else {
@@ -33774,158 +30348,132 @@ class AnimationAction {
 			}
 		}
 	}
-
 	_scheduleFading(duration, weightNow, weightThen) {
 		const mixer = this._mixer,
-					now = mixer.time;
+			now = mixer.time;
 		let interpolant = this._weightInterpolant;
-
 		if (interpolant === null) {
 			interpolant = mixer._lendControlInterpolant();
 			this._weightInterpolant = interpolant;
 		}
-
 		const times = interpolant.parameterPositions,
-					values = interpolant.sampleValues;
+			values = interpolant.sampleValues;
 		times[0] = now;
 		values[0] = weightNow;
 		times[1] = now + duration;
 		values[1] = weightThen;
 		return this;
 	}
-
 }
 
 const _controlInterpolantsResultBuffer = new Float32Array(1);
-
 class AnimationMixer extends EventDispatcher {
 	constructor(root) {
 		super();
 		this._root = root;
-
 		this._initMemoryManager();
-
 		this._accuIndex = 0;
 		this.time = 0;
 		this.timeScale = 1.0;
 	}
-
 	_bindAction(action, prototypeAction) {
 		const root = action._localRoot || this._root,
-					tracks = action._clip.tracks,
-					nTracks = tracks.length,
-					bindings = action._propertyBindings,
-					interpolants = action._interpolants,
-					rootUuid = root.uuid,
-					bindingsByRoot = this._bindingsByRootAndName;
+			tracks = action._clip.tracks,
+			nTracks = tracks.length,
+			bindings = action._propertyBindings,
+			interpolants = action._interpolants,
+			rootUuid = root.uuid,
+			bindingsByRoot = this._bindingsByRootAndName;
 		let bindingsByName = bindingsByRoot[rootUuid];
-
 		if (bindingsByName === undefined) {
 			bindingsByName = {};
 			bindingsByRoot[rootUuid] = bindingsByName;
 		}
-
 		for (let i = 0; i !== nTracks; ++i) {
 			const track = tracks[i],
-						trackName = track.name;
+				trackName = track.name;
 			let binding = bindingsByName[trackName];
-
 			if (binding !== undefined) {
 				++binding.referenceCount;
 				bindings[i] = binding;
 			} else {
 				binding = bindings[i];
-
 				if (binding !== undefined) {
 					// existing binding, make sure the cache knows
+
 					if (binding._cacheIndex === null) {
 						++binding.referenceCount;
-
 						this._addInactiveBinding(binding, rootUuid, trackName);
 					}
-
 					continue;
 				}
-
 				const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
 				binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
 				++binding.referenceCount;
-
 				this._addInactiveBinding(binding, rootUuid, trackName);
-
 				bindings[i] = binding;
 			}
-
 			interpolants[i].resultBuffer = binding.buffer;
 		}
 	}
-
 	_activateAction(action) {
 		if (!this._isActiveAction(action)) {
 			if (action._cacheIndex === null) {
 				// this action has been forgotten by the cache, but the user
 				// appears to be still using it -> rebind
-				const rootUuid = (action._localRoot || this._root).uuid,
-							clipUuid = action._clip.uuid,
-							actionsForClip = this._actionsByClip[clipUuid];
 
+				const rootUuid = (action._localRoot || this._root).uuid,
+					clipUuid = action._clip.uuid,
+					actionsForClip = this._actionsByClip[clipUuid];
 				this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
-
 				this._addInactiveAction(action, clipUuid, rootUuid);
 			}
+			const bindings = action._propertyBindings;
 
-			const bindings = action._propertyBindings; // increment reference counts / sort out state
-
+			// increment reference counts / sort out state
 			for (let i = 0, n = bindings.length; i !== n; ++i) {
 				const binding = bindings[i];
-
 				if (binding.useCount++ === 0) {
 					this._lendBinding(binding);
-
 					binding.saveOriginalState();
 				}
 			}
-
 			this._lendAction(action);
 		}
 	}
-
 	_deactivateAction(action) {
 		if (this._isActiveAction(action)) {
-			const bindings = action._propertyBindings; // decrement reference counts / sort out state
+			const bindings = action._propertyBindings;
 
+			// decrement reference counts / sort out state
 			for (let i = 0, n = bindings.length; i !== n; ++i) {
 				const binding = bindings[i];
-
 				if (--binding.useCount === 0) {
 					binding.restoreOriginalState();
-
 					this._takeBackBinding(binding);
 				}
 			}
-
 			this._takeBackAction(action);
 		}
-	} // Memory manager
+	}
 
+	// Memory manager
 
 	_initMemoryManager() {
 		this._actions = []; // 'nActiveActions' followed by inactive ones
-
 		this._nActiveActions = 0;
-		this._actionsByClip = {}; // inside:
+		this._actionsByClip = {};
+		// inside:
 		// {
 		// 	knownActions: Array< AnimationAction > - used as prototypes
 		// 	actionByRoot: AnimationAction - lookup
 		// }
 
 		this._bindings = []; // 'nActiveBindings' followed by inactive ones
-
 		this._nActiveBindings = 0;
 		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
 
 		this._controlInterpolants = []; // same game as above
-
 		this._nActiveControlInterpolants = 0;
 		const scope = this;
 		this.stats = {
@@ -33933,46 +30481,39 @@ class AnimationMixer extends EventDispatcher {
 				get total() {
 					return scope._actions.length;
 				},
-
 				get inUse() {
 					return scope._nActiveActions;
 				}
-
 			},
 			bindings: {
 				get total() {
 					return scope._bindings.length;
 				},
-
 				get inUse() {
 					return scope._nActiveBindings;
 				}
-
 			},
 			controlInterpolants: {
 				get total() {
 					return scope._controlInterpolants.length;
 				},
-
 				get inUse() {
 					return scope._nActiveControlInterpolants;
 				}
-
 			}
 		};
-	} // Memory management for AnimationAction objects
+	}
 
+	// Memory management for AnimationAction objects
 
 	_isActiveAction(action) {
 		const index = action._cacheIndex;
 		return index !== null && index < this._nActiveActions;
 	}
-
 	_addInactiveAction(action, clipUuid, rootUuid) {
 		const actions = this._actions,
-					actionsByClip = this._actionsByClip;
+			actionsByClip = this._actionsByClip;
 		let actionsForClip = actionsByClip[clipUuid];
-
 		if (actionsForClip === undefined) {
 			actionsForClip = {
 				knownActions: [action],
@@ -33985,179 +30526,164 @@ class AnimationMixer extends EventDispatcher {
 			action._byClipCacheIndex = knownActions.length;
 			knownActions.push(action);
 		}
-
 		action._cacheIndex = actions.length;
 		actions.push(action);
 		actionsForClip.actionByRoot[rootUuid] = action;
 	}
-
 	_removeInactiveAction(action) {
 		const actions = this._actions,
-					lastInactiveAction = actions[actions.length - 1],
-					cacheIndex = action._cacheIndex;
+			lastInactiveAction = actions[actions.length - 1],
+			cacheIndex = action._cacheIndex;
 		lastInactiveAction._cacheIndex = cacheIndex;
 		actions[cacheIndex] = lastInactiveAction;
 		actions.pop();
 		action._cacheIndex = null;
 		const clipUuid = action._clip.uuid,
-					actionsByClip = this._actionsByClip,
-					actionsForClip = actionsByClip[clipUuid],
-					knownActionsForClip = actionsForClip.knownActions,
-					lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
-					byClipCacheIndex = action._byClipCacheIndex;
+			actionsByClip = this._actionsByClip,
+			actionsForClip = actionsByClip[clipUuid],
+			knownActionsForClip = actionsForClip.knownActions,
+			lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
+			byClipCacheIndex = action._byClipCacheIndex;
 		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
 		knownActionsForClip[byClipCacheIndex] = lastKnownAction;
 		knownActionsForClip.pop();
 		action._byClipCacheIndex = null;
 		const actionByRoot = actionsForClip.actionByRoot,
-					rootUuid = (action._localRoot || this._root).uuid;
+			rootUuid = (action._localRoot || this._root).uuid;
 		delete actionByRoot[rootUuid];
-
 		if (knownActionsForClip.length === 0) {
 			delete actionsByClip[clipUuid];
 		}
-
 		this._removeInactiveBindingsForAction(action);
 	}
-
 	_removeInactiveBindingsForAction(action) {
 		const bindings = action._propertyBindings;
-
 		for (let i = 0, n = bindings.length; i !== n; ++i) {
 			const binding = bindings[i];
-
 			if (--binding.referenceCount === 0) {
 				this._removeInactiveBinding(binding);
 			}
 		}
 	}
-
 	_lendAction(action) {
 		// [ active actions |	inactive actions	]
 		// [	active actions >| inactive actions ]
 		//								 s				a
 		//									<-swap->
 		//								 a				s
+
 		const actions = this._actions,
-					prevIndex = action._cacheIndex,
-					lastActiveIndex = this._nActiveActions++,
-					firstInactiveAction = actions[lastActiveIndex];
+			prevIndex = action._cacheIndex,
+			lastActiveIndex = this._nActiveActions++,
+			firstInactiveAction = actions[lastActiveIndex];
 		action._cacheIndex = lastActiveIndex;
 		actions[lastActiveIndex] = action;
 		firstInactiveAction._cacheIndex = prevIndex;
 		actions[prevIndex] = firstInactiveAction;
 	}
-
 	_takeBackAction(action) {
 		// [	active actions	| inactive actions ]
 		// [ active actions |< inactive actions	]
 		//				a				s
 		//				 <-swap->
 		//				s				a
+
 		const actions = this._actions,
-					prevIndex = action._cacheIndex,
-					firstInactiveIndex = --this._nActiveActions,
-					lastActiveAction = actions[firstInactiveIndex];
+			prevIndex = action._cacheIndex,
+			firstInactiveIndex = --this._nActiveActions,
+			lastActiveAction = actions[firstInactiveIndex];
 		action._cacheIndex = firstInactiveIndex;
 		actions[firstInactiveIndex] = action;
 		lastActiveAction._cacheIndex = prevIndex;
 		actions[prevIndex] = lastActiveAction;
-	} // Memory management for PropertyMixer objects
+	}
 
+	// Memory management for PropertyMixer objects
 
 	_addInactiveBinding(binding, rootUuid, trackName) {
 		const bindingsByRoot = this._bindingsByRootAndName,
-					bindings = this._bindings;
+			bindings = this._bindings;
 		let bindingByName = bindingsByRoot[rootUuid];
-
 		if (bindingByName === undefined) {
 			bindingByName = {};
 			bindingsByRoot[rootUuid] = bindingByName;
 		}
-
 		bindingByName[trackName] = binding;
 		binding._cacheIndex = bindings.length;
 		bindings.push(binding);
 	}
-
 	_removeInactiveBinding(binding) {
 		const bindings = this._bindings,
-					propBinding = binding.binding,
-					rootUuid = propBinding.rootNode.uuid,
-					trackName = propBinding.path,
-					bindingsByRoot = this._bindingsByRootAndName,
-					bindingByName = bindingsByRoot[rootUuid],
-					lastInactiveBinding = bindings[bindings.length - 1],
-					cacheIndex = binding._cacheIndex;
+			propBinding = binding.binding,
+			rootUuid = propBinding.rootNode.uuid,
+			trackName = propBinding.path,
+			bindingsByRoot = this._bindingsByRootAndName,
+			bindingByName = bindingsByRoot[rootUuid],
+			lastInactiveBinding = bindings[bindings.length - 1],
+			cacheIndex = binding._cacheIndex;
 		lastInactiveBinding._cacheIndex = cacheIndex;
 		bindings[cacheIndex] = lastInactiveBinding;
 		bindings.pop();
 		delete bindingByName[trackName];
-
 		if (Object.keys(bindingByName).length === 0) {
 			delete bindingsByRoot[rootUuid];
 		}
 	}
-
 	_lendBinding(binding) {
 		const bindings = this._bindings,
-					prevIndex = binding._cacheIndex,
-					lastActiveIndex = this._nActiveBindings++,
-					firstInactiveBinding = bindings[lastActiveIndex];
+			prevIndex = binding._cacheIndex,
+			lastActiveIndex = this._nActiveBindings++,
+			firstInactiveBinding = bindings[lastActiveIndex];
 		binding._cacheIndex = lastActiveIndex;
 		bindings[lastActiveIndex] = binding;
 		firstInactiveBinding._cacheIndex = prevIndex;
 		bindings[prevIndex] = firstInactiveBinding;
 	}
-
 	_takeBackBinding(binding) {
 		const bindings = this._bindings,
-					prevIndex = binding._cacheIndex,
-					firstInactiveIndex = --this._nActiveBindings,
-					lastActiveBinding = bindings[firstInactiveIndex];
+			prevIndex = binding._cacheIndex,
+			firstInactiveIndex = --this._nActiveBindings,
+			lastActiveBinding = bindings[firstInactiveIndex];
 		binding._cacheIndex = firstInactiveIndex;
 		bindings[firstInactiveIndex] = binding;
 		lastActiveBinding._cacheIndex = prevIndex;
 		bindings[prevIndex] = lastActiveBinding;
-	} // Memory management of Interpolants for weight and time scale
+	}
 
+	// Memory management of Interpolants for weight and time scale
 
 	_lendControlInterpolant() {
 		const interpolants = this._controlInterpolants,
-					lastActiveIndex = this._nActiveControlInterpolants++;
+			lastActiveIndex = this._nActiveControlInterpolants++;
 		let interpolant = interpolants[lastActiveIndex];
-
 		if (interpolant === undefined) {
 			interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, _controlInterpolantsResultBuffer);
 			interpolant.__cacheIndex = lastActiveIndex;
 			interpolants[lastActiveIndex] = interpolant;
 		}
-
 		return interpolant;
 	}
-
 	_takeBackControlInterpolant(interpolant) {
 		const interpolants = this._controlInterpolants,
-					prevIndex = interpolant.__cacheIndex,
-					firstInactiveIndex = --this._nActiveControlInterpolants,
-					lastActiveInterpolant = interpolants[firstInactiveIndex];
+			prevIndex = interpolant.__cacheIndex,
+			firstInactiveIndex = --this._nActiveControlInterpolants,
+			lastActiveInterpolant = interpolants[firstInactiveIndex];
 		interpolant.__cacheIndex = firstInactiveIndex;
 		interpolants[firstInactiveIndex] = interpolant;
 		lastActiveInterpolant.__cacheIndex = prevIndex;
 		interpolants[prevIndex] = lastActiveInterpolant;
-	} // return an action for a clip optionally using a custom root target
+	}
+
+	// return an action for a clip optionally using a custom root target
 	// object (this method allocates a lot of dynamic memory in case a
 	// previously unknown clip/root combination is specified)
-
-
 	clipAction(clip, optionalRoot, blendMode) {
 		const root = optionalRoot || this._root,
-					rootUuid = root.uuid;
+			rootUuid = root.uuid;
 		let clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;
 		const clipUuid = clipObject !== null ? clipObject.uuid : clip;
 		const actionsForClip = this._actionsByClip[clipUuid];
 		let prototypeAction = null;
-
 		if (blendMode === undefined) {
 			if (clipObject !== null) {
 				blendMode = clipObject.blendMode;
@@ -34165,191 +30691,167 @@ class AnimationMixer extends EventDispatcher {
 				blendMode = NormalAnimationBlendMode;
 			}
 		}
-
 		if (actionsForClip !== undefined) {
 			const existingAction = actionsForClip.actionByRoot[rootUuid];
-
 			if (existingAction !== undefined && existingAction.blendMode === blendMode) {
 				return existingAction;
-			} // we know the clip, so we don't have to parse all
-			// the bindings again but can just copy
-
+			}
 
-			prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action
+			// we know the clip, so we don't have to parse all
+			// the bindings again but can just copy
+			prototypeAction = actionsForClip.knownActions[0];
 
+			// also, take the clip from the prototype action
 			if (clipObject === null) clipObject = prototypeAction._clip;
-		} // clip must be known when specified via string
-
+		}
 
-		if (clipObject === null) return null; // allocate all resources required to run it
+		// clip must be known when specified via string
+		if (clipObject === null) return null;
 
+		// allocate all resources required to run it
 		const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
+		this._bindAction(newAction, prototypeAction);
 
-		this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager
-
-
+		// and make the action known to the memory manager
 		this._addInactiveAction(newAction, clipUuid, rootUuid);
-
 		return newAction;
-	} // get an existing action
-
+	}
 
+	// get an existing action
 	existingAction(clip, optionalRoot) {
 		const root = optionalRoot || this._root,
-					rootUuid = root.uuid,
-					clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
-					clipUuid = clipObject ? clipObject.uuid : clip,
-					actionsForClip = this._actionsByClip[clipUuid];
-
+			rootUuid = root.uuid,
+			clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
+			clipUuid = clipObject ? clipObject.uuid : clip,
+			actionsForClip = this._actionsByClip[clipUuid];
 		if (actionsForClip !== undefined) {
 			return actionsForClip.actionByRoot[rootUuid] || null;
 		}
-
 		return null;
-	} // deactivates all previously scheduled actions
-
+	}
 
+	// deactivates all previously scheduled actions
 	stopAllAction() {
 		const actions = this._actions,
-					nActions = this._nActiveActions;
-
+			nActions = this._nActiveActions;
 		for (let i = nActions - 1; i >= 0; --i) {
 			actions[i].stop();
 		}
-
 		return this;
-	} // advance the time and update apply the animation
-
+	}
 
+	// advance the time and update apply the animation
 	update(deltaTime) {
 		deltaTime *= this.timeScale;
 		const actions = this._actions,
-					nActions = this._nActiveActions,
-					time = this.time += deltaTime,
-					timeDirection = Math.sign(deltaTime),
-					accuIndex = this._accuIndex ^= 1; // run active actions
+			nActions = this._nActiveActions,
+			time = this.time += deltaTime,
+			timeDirection = Math.sign(deltaTime),
+			accuIndex = this._accuIndex ^= 1;
+
+		// run active actions
 
 		for (let i = 0; i !== nActions; ++i) {
 			const action = actions[i];
-
 			action._update(time, deltaTime, timeDirection, accuIndex);
-		} // update scene graph
+		}
 
+		// update scene graph
 
 		const bindings = this._bindings,
-					nBindings = this._nActiveBindings;
-
+			nBindings = this._nActiveBindings;
 		for (let i = 0; i !== nBindings; ++i) {
 			bindings[i].apply(accuIndex);
 		}
-
 		return this;
-	} // Allows you to seek to a specific time in an animation.
-
+	}
 
+	// Allows you to seek to a specific time in an animation.
 	setTime(timeInSeconds) {
 		this.time = 0; // Zero out time attribute for AnimationMixer object;
-
 		for (let i = 0; i < this._actions.length; i++) {
 			this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.
 		}
 
 		return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
-	} // return this mixer's root target object
-
+	}
 
+	// return this mixer's root target object
 	getRoot() {
 		return this._root;
-	} // free all resources specific to a particular clip
-
+	}
 
+	// free all resources specific to a particular clip
 	uncacheClip(clip) {
 		const actions = this._actions,
-					clipUuid = clip.uuid,
-					actionsByClip = this._actionsByClip,
-					actionsForClip = actionsByClip[clipUuid];
-
+			clipUuid = clip.uuid,
+			actionsByClip = this._actionsByClip,
+			actionsForClip = actionsByClip[clipUuid];
 		if (actionsForClip !== undefined) {
 			// note: just calling _removeInactiveAction would mess up the
 			// iteration state and also require updating the state we can
 			// just throw away
-			const actionsToRemove = actionsForClip.knownActions;
 
+			const actionsToRemove = actionsForClip.knownActions;
 			for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
 				const action = actionsToRemove[i];
-
 				this._deactivateAction(action);
-
 				const cacheIndex = action._cacheIndex,
-							lastInactiveAction = actions[actions.length - 1];
+					lastInactiveAction = actions[actions.length - 1];
 				action._cacheIndex = null;
 				action._byClipCacheIndex = null;
 				lastInactiveAction._cacheIndex = cacheIndex;
 				actions[cacheIndex] = lastInactiveAction;
 				actions.pop();
-
 				this._removeInactiveBindingsForAction(action);
 			}
-
 			delete actionsByClip[clipUuid];
 		}
-	} // free all resources specific to a particular root target object
-
+	}
 
+	// free all resources specific to a particular root target object
 	uncacheRoot(root) {
 		const rootUuid = root.uuid,
-					actionsByClip = this._actionsByClip;
-
+			actionsByClip = this._actionsByClip;
 		for (const clipUuid in actionsByClip) {
 			const actionByRoot = actionsByClip[clipUuid].actionByRoot,
-						action = actionByRoot[rootUuid];
-
+				action = actionByRoot[rootUuid];
 			if (action !== undefined) {
 				this._deactivateAction(action);
-
 				this._removeInactiveAction(action);
 			}
 		}
-
 		const bindingsByRoot = this._bindingsByRootAndName,
-					bindingByName = bindingsByRoot[rootUuid];
-
+			bindingByName = bindingsByRoot[rootUuid];
 		if (bindingByName !== undefined) {
 			for (const trackName in bindingByName) {
 				const binding = bindingByName[trackName];
 				binding.restoreOriginalState();
-
 				this._removeInactiveBinding(binding);
 			}
 		}
-	} // remove a targeted clip from the cache
-
+	}
 
+	// remove a targeted clip from the cache
 	uncacheAction(clip, optionalRoot) {
 		const action = this.existingAction(clip, optionalRoot);
-
 		if (action !== null) {
 			this._deactivateAction(action);
-
 			this._removeInactiveAction(action);
 		}
 	}
-
 }
 
 class Uniform {
 	constructor(value) {
 		this.value = value;
 	}
-
 	clone() {
 		return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
 	}
-
 }
 
 let id = 0;
-
 class UniformsGroup extends EventDispatcher {
 	constructor() {
 		super();
@@ -34361,52 +30863,42 @@ class UniformsGroup extends EventDispatcher {
 		this.usage = StaticDrawUsage;
 		this.uniforms = [];
 	}
-
 	add(uniform) {
 		this.uniforms.push(uniform);
 		return this;
 	}
-
 	remove(uniform) {
 		const index = this.uniforms.indexOf(uniform);
 		if (index !== -1) this.uniforms.splice(index, 1);
 		return this;
 	}
-
 	setName(name) {
 		this.name = name;
 		return this;
 	}
-
 	setUsage(value) {
 		this.usage = value;
 		return this;
 	}
-
 	dispose() {
 		this.dispatchEvent({
 			type: 'dispose'
 		});
 		return this;
 	}
-
 	copy(source) {
 		this.name = source.name;
 		this.usage = source.usage;
 		const uniformsSource = source.uniforms;
 		this.uniforms.length = 0;
-
 		for (let i = 0, l = uniformsSource.length; i < l; i++) {
 			this.uniforms.push(uniformsSource[i].clone());
 		}
-
 		return this;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 class InstancedInterleavedBuffer extends InterleavedBuffer {
@@ -34415,26 +30907,22 @@ class InstancedInterleavedBuffer extends InterleavedBuffer {
 		this.isInstancedInterleavedBuffer = true;
 		this.meshPerAttribute = meshPerAttribute;
 	}
-
 	copy(source) {
 		super.copy(source);
 		this.meshPerAttribute = source.meshPerAttribute;
 		return this;
 	}
-
 	clone(data) {
 		const ib = super.clone(data);
 		ib.meshPerAttribute = this.meshPerAttribute;
 		return ib;
 	}
-
 	toJSON(data) {
 		const json = super.toJSON(data);
 		json.isInstancedInterleavedBuffer = true;
 		json.meshPerAttribute = this.meshPerAttribute;
 		return json;
 	}
-
 }
 
 class GLBufferAttribute {
@@ -34447,37 +30935,32 @@ class GLBufferAttribute {
 		this.count = count;
 		this.version = 0;
 	}
-
 	set needsUpdate(value) {
 		if (value === true) this.version++;
 	}
-
 	setBuffer(buffer) {
 		this.buffer = buffer;
 		return this;
 	}
-
 	setType(type, elementSize) {
 		this.type = type;
 		this.elementSize = elementSize;
 		return this;
 	}
-
 	setItemSize(itemSize) {
 		this.itemSize = itemSize;
 		return this;
 	}
-
 	setCount(count) {
 		this.count = count;
 		return this;
 	}
-
 }
 
 class Raycaster {
 	constructor(origin, direction, near = 0, far = Infinity) {
-		this.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)
+		this.ray = new Ray(origin, direction);
+		// direction is assumed to be normalized (for accurate distance calculations)
 
 		this.near = near;
 		this.far = far;
@@ -34495,12 +30978,11 @@ class Raycaster {
 			Sprite: {}
 		};
 	}
-
 	set(origin, direction) {
 		// direction is assumed to be normalized (for accurate distance calculations)
+
 		this.ray.set(origin, direction);
 	}
-
 	setFromCamera(coords, camera) {
 		if (camera.isPerspectiveCamera) {
 			this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
@@ -34508,43 +30990,34 @@ class Raycaster {
 			this.camera = camera;
 		} else if (camera.isOrthographicCamera) {
 			this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera
-
 			this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
 			this.camera = camera;
 		} else {
 			console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);
 		}
 	}
-
 	intersectObject(object, recursive = true, intersects = []) {
 		intersectObject(object, this, intersects, recursive);
 		intersects.sort(ascSort);
 		return intersects;
 	}
-
 	intersectObjects(objects, recursive = true, intersects = []) {
 		for (let i = 0, l = objects.length; i < l; i++) {
 			intersectObject(objects[i], this, intersects, recursive);
 		}
-
 		intersects.sort(ascSort);
 		return intersects;
 	}
-
 }
-
 function ascSort(a, b) {
 	return a.distance - b.distance;
 }
-
 function intersectObject(object, raycaster, intersects, recursive) {
 	if (object.layers.test(raycaster.layers)) {
 		object.raycast(raycaster, intersects);
 	}
-
 	if (recursive === true) {
 		const children = object.children;
-
 		for (let i = 0, l = children.length; i < l; i++) {
 			intersectObject(children[i], raycaster, intersects, true);
 		}
@@ -34557,45 +31030,38 @@ function intersectObject(object, raycaster, intersects, recursive) {
  * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
  * The azimuthal angle (theta) is measured from the positive z-axis.
  */
-
 class Spherical {
 	constructor(radius = 1, phi = 0, theta = 0) {
 		this.radius = radius;
 		this.phi = phi; // polar angle
-
 		this.theta = theta; // azimuthal angle
 
 		return this;
 	}
-
 	set(radius, phi, theta) {
 		this.radius = radius;
 		this.phi = phi;
 		this.theta = theta;
 		return this;
 	}
-
 	copy(other) {
 		this.radius = other.radius;
 		this.phi = other.phi;
 		this.theta = other.theta;
 		return this;
-	} // restrict phi to be between EPS and PI-EPS
-
+	}
 
+	// restrict phi to be between EPS and PI-EPS
 	makeSafe() {
 		const EPS = 0.000001;
 		this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
 		return this;
 	}
-
 	setFromVector3(v) {
 		return this.setFromCartesianCoords(v.x, v.y, v.z);
 	}
-
 	setFromCartesianCoords(x, y, z) {
 		this.radius = Math.sqrt(x * x + y * y + z * z);
-
 		if (this.radius === 0) {
 			this.theta = 0;
 			this.phi = 0;
@@ -34603,277 +31069,220 @@ class Spherical {
 			this.theta = Math.atan2(x, z);
 			this.phi = Math.acos(clamp(y / this.radius, -1, 1));
 		}
-
 		return this;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 /**
  * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
  */
+
 class Cylindrical {
 	constructor(radius = 1, theta = 0, y = 0) {
 		this.radius = radius; // distance from the origin to a point in the x-z plane
-
 		this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
-
 		this.y = y; // height above the x-z plane
 
 		return this;
 	}
-
 	set(radius, theta, y) {
 		this.radius = radius;
 		this.theta = theta;
 		this.y = y;
 		return this;
 	}
-
 	copy(other) {
 		this.radius = other.radius;
 		this.theta = other.theta;
 		this.y = other.y;
 		return this;
 	}
-
 	setFromVector3(v) {
 		return this.setFromCartesianCoords(v.x, v.y, v.z);
 	}
-
 	setFromCartesianCoords(x, y, z) {
 		this.radius = Math.sqrt(x * x + z * z);
 		this.theta = Math.atan2(x, z);
 		this.y = y;
 		return this;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 const _vector$4 = /*@__PURE__*/new Vector2();
-
 class Box2 {
 	constructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {
 		this.isBox2 = true;
 		this.min = min;
 		this.max = max;
 	}
-
 	set(min, max) {
 		this.min.copy(min);
 		this.max.copy(max);
 		return this;
 	}
-
 	setFromPoints(points) {
 		this.makeEmpty();
-
 		for (let i = 0, il = points.length; i < il; i++) {
 			this.expandByPoint(points[i]);
 		}
-
 		return this;
 	}
-
 	setFromCenterAndSize(center, size) {
 		const halfSize = _vector$4.copy(size).multiplyScalar(0.5);
-
 		this.min.copy(center).sub(halfSize);
 		this.max.copy(center).add(halfSize);
 		return this;
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 	copy(box) {
 		this.min.copy(box.min);
 		this.max.copy(box.max);
 		return this;
 	}
-
 	makeEmpty() {
 		this.min.x = this.min.y = +Infinity;
 		this.max.x = this.max.y = -Infinity;
 		return this;
 	}
-
 	isEmpty() {
 		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
+
 		return this.max.x < this.min.x || this.max.y < this.min.y;
 	}
-
 	getCenter(target) {
 		return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
 	}
-
 	getSize(target) {
 		return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
 	}
-
 	expandByPoint(point) {
 		this.min.min(point);
 		this.max.max(point);
 		return this;
 	}
-
 	expandByVector(vector) {
 		this.min.sub(vector);
 		this.max.add(vector);
 		return this;
 	}
-
 	expandByScalar(scalar) {
 		this.min.addScalar(-scalar);
 		this.max.addScalar(scalar);
 		return this;
 	}
-
 	containsPoint(point) {
 		return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
 	}
-
 	containsBox(box) {
 		return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
 	}
-
 	getParameter(point, target) {
 		// This can potentially have a divide by zero if the box
 		// has a size dimension of 0.
+
 		return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
 	}
-
 	intersectsBox(box) {
 		// using 4 splitting planes to rule out intersections
+
 		return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
 	}
-
 	clampPoint(point, target) {
 		return target.copy(point).clamp(this.min, this.max);
 	}
-
 	distanceToPoint(point) {
 		const clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);
-
 		return clampedPoint.sub(point).length();
 	}
-
 	intersect(box) {
 		this.min.max(box.min);
 		this.max.min(box.max);
 		return this;
 	}
-
 	union(box) {
 		this.min.min(box.min);
 		this.max.max(box.max);
 		return this;
 	}
-
 	translate(offset) {
 		this.min.add(offset);
 		this.max.add(offset);
 		return this;
 	}
-
 	equals(box) {
 		return box.min.equals(this.min) && box.max.equals(this.max);
 	}
-
 }
 
 const _startP = /*@__PURE__*/new Vector3();
-
 const _startEnd = /*@__PURE__*/new Vector3();
-
 class Line3 {
 	constructor(start = new Vector3(), end = new Vector3()) {
 		this.start = start;
 		this.end = end;
 	}
-
 	set(start, end) {
 		this.start.copy(start);
 		this.end.copy(end);
 		return this;
 	}
-
 	copy(line) {
 		this.start.copy(line.start);
 		this.end.copy(line.end);
 		return this;
 	}
-
 	getCenter(target) {
 		return target.addVectors(this.start, this.end).multiplyScalar(0.5);
 	}
-
 	delta(target) {
 		return target.subVectors(this.end, this.start);
 	}
-
 	distanceSq() {
 		return this.start.distanceToSquared(this.end);
 	}
-
 	distance() {
 		return this.start.distanceTo(this.end);
 	}
-
 	at(t, target) {
 		return this.delta(target).multiplyScalar(t).add(this.start);
 	}
-
 	closestPointToPointParameter(point, clampToLine) {
 		_startP.subVectors(point, this.start);
-
 		_startEnd.subVectors(this.end, this.start);
-
 		const startEnd2 = _startEnd.dot(_startEnd);
-
 		const startEnd_startP = _startEnd.dot(_startP);
-
 		let t = startEnd_startP / startEnd2;
-
 		if (clampToLine) {
 			t = clamp(t, 0, 1);
 		}
-
 		return t;
 	}
-
 	closestPointToPoint(point, clampToLine, target) {
 		const t = this.closestPointToPointParameter(point, clampToLine);
 		return this.delta(target).multiplyScalar(t).add(this.start);
 	}
-
 	applyMatrix4(matrix) {
 		this.start.applyMatrix4(matrix);
 		this.end.applyMatrix4(matrix);
 		return this;
 	}
-
 	equals(line) {
 		return line.start.equals(this.start) && line.end.equals(this.end);
 	}
-
 	clone() {
 		return new this.constructor().copy(this);
 	}
-
 }
 
 const _vector$3 = /*@__PURE__*/new Vector3();
-
 class SpotLightHelper extends Object3D {
 	constructor(light, color) {
 		super();
@@ -34884,13 +31293,11 @@ class SpotLightHelper extends Object3D {
 		this.type = 'SpotLightHelper';
 		const geometry = new BufferGeometry();
 		const positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
-
 		for (let i = 0, j = 1, l = 32; i < l; i++, j++) {
 			const p1 = i / l * Math.PI * 2;
 			const p2 = j / l * Math.PI * 2;
 			positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
 		}
-
 		geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
 		const material = new LineBasicMaterial({
 			fog: false,
@@ -34900,38 +31307,29 @@ class SpotLightHelper extends Object3D {
 		this.add(this.cone);
 		this.update();
 	}
-
 	dispose() {
 		this.cone.geometry.dispose();
 		this.cone.material.dispose();
 	}
-
 	update() {
 		this.light.updateWorldMatrix(true, false);
 		this.light.target.updateWorldMatrix(true, false);
 		const coneLength = this.light.distance ? this.light.distance : 1000;
 		const coneWidth = coneLength * Math.tan(this.light.angle);
 		this.cone.scale.set(coneWidth, coneWidth, coneLength);
-
 		_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
-
 		this.cone.lookAt(_vector$3);
-
 		if (this.color !== undefined) {
 			this.cone.material.color.set(this.color);
 		} else {
 			this.cone.material.color.copy(this.light.color);
 		}
 	}
-
 }
 
 const _vector$2 = /*@__PURE__*/new Vector3();
-
 const _boneMatrix = /*@__PURE__*/new Matrix4();
-
 const _matrixWorldInv = /*@__PURE__*/new Matrix4();
-
 class SkeletonHelper extends LineSegments {
 	constructor(object) {
 		const bones = getBoneList(object);
@@ -34940,10 +31338,8 @@ class SkeletonHelper extends LineSegments {
 		const colors = [];
 		const color1 = new Color(0, 0, 1);
 		const color2 = new Color(0, 1, 0);
-
 		for (let i = 0; i < bones.length; i++) {
 			const bone = bones[i];
-
 			if (bone.parent && bone.parent.isBone) {
 				vertices.push(0, 0, 0);
 				vertices.push(0, 0, 0);
@@ -34951,7 +31347,6 @@ class SkeletonHelper extends LineSegments {
 				colors.push(color2.r, color2.g, color2.b);
 			}
 		}
-
 		geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
 		const material = new LineBasicMaterial({
@@ -34969,55 +31364,39 @@ class SkeletonHelper extends LineSegments {
 		this.matrix = object.matrixWorld;
 		this.matrixAutoUpdate = false;
 	}
-
 	updateMatrixWorld(force) {
 		const bones = this.bones;
 		const geometry = this.geometry;
 		const position = geometry.getAttribute('position');
-
 		_matrixWorldInv.copy(this.root.matrixWorld).invert();
-
 		for (let i = 0, j = 0; i < bones.length; i++) {
 			const bone = bones[i];
-
 			if (bone.parent && bone.parent.isBone) {
 				_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
-
 				_vector$2.setFromMatrixPosition(_boneMatrix);
-
 				position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);
-
 				_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
-
 				_vector$2.setFromMatrixPosition(_boneMatrix);
-
 				position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
 				j += 2;
 			}
 		}
-
 		geometry.getAttribute('position').needsUpdate = true;
 		super.updateMatrixWorld(force);
 	}
-
 	dispose() {
 		this.geometry.dispose();
 		this.material.dispose();
 	}
-
 }
-
 function getBoneList(object) {
 	const boneList = [];
-
 	if (object.isBone === true) {
 		boneList.push(object);
 	}
-
 	for (let i = 0; i < object.children.length; i++) {
 		boneList.push.apply(boneList, getBoneList(object.children[i]));
 	}
-
 	return boneList;
 }
 
@@ -35036,6 +31415,7 @@ class PointLightHelper extends Mesh {
 		this.matrix = this.light.matrixWorld;
 		this.matrixAutoUpdate = false;
 		this.update();
+
 		/*
 		// TODO: delete this comment?
 		const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
@@ -35056,15 +31436,14 @@ class PointLightHelper extends Mesh {
 		this.geometry.dispose();
 		this.material.dispose();
 	}
-
 	update() {
 		this.light.updateWorldMatrix(true, false);
-
 		if (this.color !== undefined) {
 			this.material.color.set(this.color);
 		} else {
 			this.material.color.copy(this.light.color);
 		}
+
 		/*
 		const d = this.light.distance;
 			if ( d === 0.0 ) {
@@ -35074,17 +31453,12 @@ class PointLightHelper extends Mesh {
 			this.lightDistance.scale.set( d, d, d );
 			}
 		*/
-
 	}
-
 }
 
 const _vector$1 = /*@__PURE__*/new Vector3();
-
 const _color1 = /*@__PURE__*/new Color();
-
 const _color2 = /*@__PURE__*/new Color();
-
 class HemisphereLightHelper extends Object3D {
 	constructor(light, size, color) {
 		super();
@@ -35107,36 +31481,27 @@ class HemisphereLightHelper extends Object3D {
 		this.add(new Mesh(geometry, this.material));
 		this.update();
 	}
-
 	dispose() {
 		this.children[0].geometry.dispose();
 		this.children[0].material.dispose();
 	}
-
 	update() {
 		const mesh = this.children[0];
-
 		if (this.color !== undefined) {
 			this.material.color.set(this.color);
 		} else {
 			const colors = mesh.geometry.getAttribute('color');
-
 			_color1.copy(this.light.color);
-
 			_color2.copy(this.light.groundColor);
-
 			for (let i = 0, l = colors.count; i < l; i++) {
 				const color = i < l / 2 ? _color1 : _color2;
 				colors.setXYZ(i, color.r, color.g, color.b);
 			}
-
 			colors.needsUpdate = true;
 		}
-
 		this.light.updateWorldMatrix(true, false);
 		mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
 	}
-
 }
 
 class GridHelper extends LineSegments {
@@ -35147,8 +31512,7 @@ class GridHelper extends LineSegments {
 		const step = size / divisions;
 		const halfSize = size / 2;
 		const vertices = [],
-					colors = [];
-
+			colors = [];
 		for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
 			vertices.push(-halfSize, 0, k, halfSize, 0, k);
 			vertices.push(k, 0, -halfSize, k, 0, halfSize);
@@ -35162,7 +31526,6 @@ class GridHelper extends LineSegments {
 			color.toArray(colors, j);
 			j += 3;
 		}
-
 		const geometry = new BufferGeometry();
 		geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
@@ -35173,12 +31536,10 @@ class GridHelper extends LineSegments {
 		super(geometry, material);
 		this.type = 'GridHelper';
 	}
-
 	dispose() {
 		this.geometry.dispose();
 		this.material.dispose();
 	}
-
 }
 
 class PolarGridHelper extends LineSegments {
@@ -35186,7 +31547,9 @@ class PolarGridHelper extends LineSegments {
 		color1 = new Color(color1);
 		color2 = new Color(color2);
 		const vertices = [];
-		const colors = []; // create the sectors
+		const colors = [];
+
+		// create the sectors
 
 		if (sectors > 1) {
 			for (let i = 0; i < sectors; i++) {
@@ -35199,20 +31562,23 @@ class PolarGridHelper extends LineSegments {
 				colors.push(color.r, color.g, color.b);
 				colors.push(color.r, color.g, color.b);
 			}
-		} // create the rings
+		}
 
+		// create the rings
 
 		for (let i = 0; i < rings; i++) {
 			const color = i & 1 ? color1 : color2;
 			const r = radius - radius / rings * i;
-
 			for (let j = 0; j < divisions; j++) {
 				// first vertex
+
 				let v = j / divisions * (Math.PI * 2);
 				let x = Math.sin(v) * r;
 				let z = Math.cos(v) * r;
 				vertices.push(x, 0, z);
-				colors.push(color.r, color.g, color.b); // second vertex
+				colors.push(color.r, color.g, color.b);
+
+				// second vertex
 
 				v = (j + 1) / divisions * (Math.PI * 2);
 				x = Math.sin(v) * r;
@@ -35221,7 +31587,6 @@ class PolarGridHelper extends LineSegments {
 				colors.push(color.r, color.g, color.b);
 			}
 		}
-
 		const geometry = new BufferGeometry();
 		geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
@@ -35232,20 +31597,15 @@ class PolarGridHelper extends LineSegments {
 		super(geometry, material);
 		this.type = 'PolarGridHelper';
 	}
-
 	dispose() {
 		this.geometry.dispose();
 		this.material.dispose();
 	}
-
 }
 
 const _v1 = /*@__PURE__*/new Vector3();
-
 const _v2 = /*@__PURE__*/new Vector3();
-
 const _v3 = /*@__PURE__*/new Vector3();
-
 class DirectionalLightHelper extends Object3D {
 	constructor(light, size, color) {
 		super();
@@ -35269,26 +31629,19 @@ class DirectionalLightHelper extends Object3D {
 		this.add(this.targetLine);
 		this.update();
 	}
-
 	dispose() {
 		this.lightPlane.geometry.dispose();
 		this.lightPlane.material.dispose();
 		this.targetLine.geometry.dispose();
 		this.targetLine.material.dispose();
 	}
-
 	update() {
 		this.light.updateWorldMatrix(true, false);
 		this.light.target.updateWorldMatrix(true, false);
-
 		_v1.setFromMatrixPosition(this.light.matrixWorld);
-
 		_v2.setFromMatrixPosition(this.light.target.matrixWorld);
-
 		_v3.subVectors(_v2, _v1);
-
 		this.lightPlane.lookAt(_v2);
-
 		if (this.color !== undefined) {
 			this.lightPlane.material.color.set(this.color);
 			this.targetLine.material.color.set(this.color);
@@ -35296,16 +31649,14 @@ class DirectionalLightHelper extends Object3D {
 			this.lightPlane.material.color.copy(this.light.color);
 			this.targetLine.material.color.copy(this.light.color);
 		}
-
 		this.targetLine.lookAt(_v2);
 		this.targetLine.scale.z = _v3.length();
 	}
-
 }
 
 const _vector = /*@__PURE__*/new Vector3();
-
 const _camera = /*@__PURE__*/new Camera();
+
 /**
  *	- shows frustum, line of sight and up of the camera
  *	- suitable for fast updates
@@ -35313,7 +31664,6 @@ const _camera = /*@__PURE__*/new Camera();
  *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
  */
 
-
 class CameraHelper extends LineSegments {
 	constructor(camera) {
 		const geometry = new BufferGeometry();
@@ -35324,56 +31674,65 @@ class CameraHelper extends LineSegments {
 		});
 		const vertices = [];
 		const colors = [];
-		const pointMap = {}; // near
+		const pointMap = {};
+
+		// near
 
 		addLine('n1', 'n2');
 		addLine('n2', 'n4');
 		addLine('n4', 'n3');
-		addLine('n3', 'n1'); // far
+		addLine('n3', 'n1');
+
+		// far
 
 		addLine('f1', 'f2');
 		addLine('f2', 'f4');
 		addLine('f4', 'f3');
-		addLine('f3', 'f1'); // sides
+		addLine('f3', 'f1');
+
+		// sides
 
 		addLine('n1', 'f1');
 		addLine('n2', 'f2');
 		addLine('n3', 'f3');
-		addLine('n4', 'f4'); // cone
+		addLine('n4', 'f4');
+
+		// cone
 
 		addLine('p', 'n1');
 		addLine('p', 'n2');
 		addLine('p', 'n3');
-		addLine('p', 'n4'); // up
+		addLine('p', 'n4');
+
+		// up
 
 		addLine('u1', 'u2');
 		addLine('u2', 'u3');
-		addLine('u3', 'u1'); // target
+		addLine('u3', 'u1');
+
+		// target
 
 		addLine('c', 't');
-		addLine('p', 'c'); // cross
+		addLine('p', 'c');
+
+		// cross
 
 		addLine('cn1', 'cn2');
 		addLine('cn3', 'cn4');
 		addLine('cf1', 'cf2');
 		addLine('cf3', 'cf4');
-
 		function addLine(a, b) {
 			addPoint(a);
 			addPoint(b);
 		}
-
 		function addPoint(id) {
 			vertices.push(0, 0, 0);
 			colors.push(0, 0, 0);
-
 			if (pointMap[id] === undefined) {
 				pointMap[id] = [];
 			}
-
 			pointMap[id].push(vertices.length / 3 - 1);
 		}
-
 		geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 		geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
 		super(geometry, material);
@@ -35383,7 +31742,9 @@ class CameraHelper extends LineSegments {
 		this.matrix = camera.matrixWorld;
 		this.matrixAutoUpdate = false;
 		this.pointMap = pointMap;
-		this.update(); // colors
+		this.update();
+
+		// colors
 
 		const colorFrustum = new Color(0xffaa00);
 		const colorCone = new Color(0xff0000);
@@ -35392,121 +31753,121 @@ class CameraHelper extends LineSegments {
 		const colorCross = new Color(0x333333);
 		this.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);
 	}
-
 	setColors(frustum, cone, up, target, cross) {
 		const geometry = this.geometry;
-		const colorAttribute = geometry.getAttribute('color'); // near
+		const colorAttribute = geometry.getAttribute('color');
+
+		// near
 
 		colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b); // n1, n2
-
 		colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b); // n2, n4
-
 		colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b); // n4, n3
-
 		colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b); // n3, n1
+
 		// far
 
 		colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b); // f1, f2
-
 		colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b); // f2, f4
-
 		colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b); // f4, f3
-
 		colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b); // f3, f1
+
 		// sides
 
 		colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b); // n1, f1
-
 		colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b); // n2, f2
-
 		colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b); // n3, f3
-
 		colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);
 		colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b); // n4, f4
+
 		// cone
 
 		colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);
 		colorAttribute.setXYZ(25, cone.r, cone.g, cone.b); // p, n1
-
 		colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);
 		colorAttribute.setXYZ(27, cone.r, cone.g, cone.b); // p, n2
-
 		colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);
 		colorAttribute.setXYZ(29, cone.r, cone.g, cone.b); // p, n3
-
 		colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);
 		colorAttribute.setXYZ(31, cone.r, cone.g, cone.b); // p, n4
+
 		// up
 
 		colorAttribute.setXYZ(32, up.r, up.g, up.b);
 		colorAttribute.setXYZ(33, up.r, up.g, up.b); // u1, u2
-
 		colorAttribute.setXYZ(34, up.r, up.g, up.b);
 		colorAttribute.setXYZ(35, up.r, up.g, up.b); // u2, u3
-
 		colorAttribute.setXYZ(36, up.r, up.g, up.b);
 		colorAttribute.setXYZ(37, up.r, up.g, up.b); // u3, u1
+
 		// target
 
 		colorAttribute.setXYZ(38, target.r, target.g, target.b);
 		colorAttribute.setXYZ(39, target.r, target.g, target.b); // c, t
-
 		colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);
 		colorAttribute.setXYZ(41, cross.r, cross.g, cross.b); // p, c
+
 		// cross
 
 		colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);
 		colorAttribute.setXYZ(43, cross.r, cross.g, cross.b); // cn1, cn2
-
 		colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);
 		colorAttribute.setXYZ(45, cross.r, cross.g, cross.b); // cn3, cn4
 
 		colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);
 		colorAttribute.setXYZ(47, cross.r, cross.g, cross.b); // cf1, cf2
-
 		colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);
 		colorAttribute.setXYZ(49, cross.r, cross.g, cross.b); // cf3, cf4
 
 		colorAttribute.needsUpdate = true;
 	}
-
 	update() {
 		const geometry = this.geometry;
 		const pointMap = this.pointMap;
 		const w = 1,
-					h = 1; // we need just camera projection matrix inverse
+			h = 1;
+
+		// we need just camera projection matrix inverse
 		// world matrix must be identity
 
-		_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target
+		_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
 
+		// center / target
 
 		setPoint('c', pointMap, geometry, _camera, 0, 0, -1);
-		setPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near
+		setPoint('t', pointMap, geometry, _camera, 0, 0, 1);
+
+		// near
 
 		setPoint('n1', pointMap, geometry, _camera, -w, -h, -1);
 		setPoint('n2', pointMap, geometry, _camera, w, -h, -1);
 		setPoint('n3', pointMap, geometry, _camera, -w, h, -1);
-		setPoint('n4', pointMap, geometry, _camera, w, h, -1); // far
+		setPoint('n4', pointMap, geometry, _camera, w, h, -1);
+
+		// far
 
 		setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);
 		setPoint('f2', pointMap, geometry, _camera, w, -h, 1);
 		setPoint('f3', pointMap, geometry, _camera, -w, h, 1);
-		setPoint('f4', pointMap, geometry, _camera, w, h, 1); // up
+		setPoint('f4', pointMap, geometry, _camera, w, h, 1);
+
+		// up
 
 		setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
 		setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
-		setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross
+		setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1);
+
+		// cross
 
 		setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);
 		setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);
@@ -35518,22 +31879,16 @@ class CameraHelper extends LineSegments {
 		setPoint('cn4', pointMap, geometry, _camera, 0, h, -1);
 		geometry.getAttribute('position').needsUpdate = true;
 	}
-
 	dispose() {
 		this.geometry.dispose();
 		this.material.dispose();
 	}
-
 }
-
 function setPoint(point, pointMap, geometry, camera, x, y, z) {
 	_vector.set(x, y, z).unproject(camera);
-
 	const points = pointMap[point];
-
 	if (points !== undefined) {
 		const position = geometry.getAttribute('position');
-
 		for (let i = 0, l = points.length; i < l; i++) {
 			position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);
 		}
@@ -35541,7 +31896,6 @@ function setPoint(point, pointMap, geometry, camera, x, y, z) {
 }
 
 const _box = /*@__PURE__*/new Box3();
-
 class BoxHelper extends LineSegments {
 	constructor(object, color = 0xffff00) {
 		const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
@@ -35558,19 +31912,17 @@ class BoxHelper extends LineSegments {
 		this.matrixAutoUpdate = false;
 		this.update();
 	}
-
 	update(object) {
 		if (object !== undefined) {
 			console.warn('THREE.BoxHelper: .update() has no longer arguments.');
 		}
-
 		if (this.object !== undefined) {
 			_box.setFromObject(this.object);
 		}
-
 		if (_box.isEmpty()) return;
 		const min = _box.min;
 		const max = _box.max;
+
 		/*
 			5____4
 		1/___0/|
@@ -35615,24 +31967,20 @@ class BoxHelper extends LineSegments {
 		position.needsUpdate = true;
 		this.geometry.computeBoundingSphere();
 	}
-
 	setFromObject(object) {
 		this.object = object;
 		this.update();
 		return this;
 	}
-
 	copy(source, recursive) {
 		super.copy(source, recursive);
 		this.object = source.object;
 		return this;
 	}
-
 	dispose() {
 		this.geometry.dispose();
 		this.material.dispose();
 	}
-
 }
 
 class Box3Helper extends LineSegments {
@@ -35650,7 +31998,6 @@ class Box3Helper extends LineSegments {
 		this.type = 'Box3Helper';
 		this.geometry.computeBoundingSphere();
 	}
-
 	updateMatrixWorld(force) {
 		const box = this.box;
 		if (box.isEmpty()) return;
@@ -35659,12 +32006,10 @@ class Box3Helper extends LineSegments {
 		this.scale.multiplyScalar(0.5);
 		super.updateMatrixWorld(force);
 	}
-
 	dispose() {
 		this.geometry.dispose();
 		this.material.dispose();
 	}
-
 }
 
 class PlaneHelper extends Line {
@@ -35693,7 +32038,6 @@ class PlaneHelper extends Line {
 			toneMapped: false
 		})));
 	}
-
 	updateMatrixWorld(force) {
 		this.position.set(0, 0, 0);
 		this.scale.set(0.5 * this.size, 0.5 * this.size, 1);
@@ -35701,36 +32045,28 @@ class PlaneHelper extends Line {
 		this.translateZ(-this.plane.constant);
 		super.updateMatrixWorld(force);
 	}
-
 	dispose() {
 		this.geometry.dispose();
 		this.material.dispose();
 		this.children[0].geometry.dispose();
 		this.children[0].material.dispose();
 	}
-
 }
 
 const _axis = /*@__PURE__*/new Vector3();
-
 let _lineGeometry, _coneGeometry;
-
 class ArrowHelper extends Object3D {
 	// dir is assumed to be normalized
+
 	constructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {
 		super();
 		this.type = 'ArrowHelper';
-
 		if (_lineGeometry === undefined) {
 			_lineGeometry = new BufferGeometry();
-
 			_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));
-
 			_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);
-
 			_coneGeometry.translate(0, -0.5, 0);
 		}
-
 		this.position.copy(origin);
 		this.line = new Line(_lineGeometry, new LineBasicMaterial({
 			color: color,
@@ -35747,49 +32083,42 @@ class ArrowHelper extends Object3D {
 		this.setDirection(dir);
 		this.setLength(length, headLength, headWidth);
 	}
-
 	setDirection(dir) {
 		// dir is assumed to be normalized
+
 		if (dir.y > 0.99999) {
 			this.quaternion.set(0, 0, 0, 1);
 		} else if (dir.y < -0.99999) {
 			this.quaternion.set(1, 0, 0, 0);
 		} else {
 			_axis.set(dir.z, 0, -dir.x).normalize();
-
 			const radians = Math.acos(dir.y);
 			this.quaternion.setFromAxisAngle(_axis, radians);
 		}
 	}
-
 	setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
 		this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458
-
 		this.line.updateMatrix();
 		this.cone.scale.set(headWidth, headLength, headWidth);
 		this.cone.position.y = length;
 		this.cone.updateMatrix();
 	}
-
 	setColor(color) {
 		this.line.material.color.set(color);
 		this.cone.material.color.set(color);
 	}
-
 	copy(source) {
 		super.copy(source, false);
 		this.line.copy(source.line);
 		this.cone.copy(source.cone);
 		return this;
 	}
-
 	dispose() {
 		this.line.geometry.dispose();
 		this.line.material.dispose();
 		this.cone.geometry.dispose();
 		this.cone.material.dispose();
 	}
-
 }
 
 class AxesHelper extends LineSegments {
@@ -35806,7 +32135,6 @@ class AxesHelper extends LineSegments {
 		super(geometry, material);
 		this.type = 'AxesHelper';
 	}
-
 	setColors(xAxisColor, yAxisColor, zAxisColor) {
 		const color = new Color();
 		const array = this.geometry.attributes.color.array;
@@ -35822,12 +32150,10 @@ class AxesHelper extends LineSegments {
 		this.geometry.attributes.color.needsUpdate = true;
 		return this;
 	}
-
 	dispose() {
 		this.geometry.dispose();
 		this.material.dispose();
 	}
-
 }
 
 class ShapePath {
@@ -35837,62 +32163,52 @@ class ShapePath {
 		this.subPaths = [];
 		this.currentPath = null;
 	}
-
 	moveTo(x, y) {
 		this.currentPath = new Path();
 		this.subPaths.push(this.currentPath);
 		this.currentPath.moveTo(x, y);
 		return this;
 	}
-
 	lineTo(x, y) {
 		this.currentPath.lineTo(x, y);
 		return this;
 	}
-
 	quadraticCurveTo(aCPx, aCPy, aX, aY) {
 		this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
 		return this;
 	}
-
 	bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
 		this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
 		return this;
 	}
-
 	splineThru(pts) {
 		this.currentPath.splineThru(pts);
 		return this;
 	}
-
 	toShapes(isCCW) {
 		function toShapesNoHoles(inSubpaths) {
 			const shapes = [];
-
 			for (let i = 0, l = inSubpaths.length; i < l; i++) {
 				const tmpPath = inSubpaths[i];
 				const tmpShape = new Shape();
 				tmpShape.curves = tmpPath.curves;
 				shapes.push(tmpShape);
 			}
-
 			return shapes;
 		}
-
 		function isPointInsidePolygon(inPt, inPolygon) {
-			const polyLen = inPolygon.length; // inPt on polygon contour => immediate success		or
+			const polyLen = inPolygon.length;
+
+			// inPt on polygon contour => immediate success		or
 			// toggling of inside/outside at every single! intersection point of an edge
 			//	with the horizontal line through inPt, left of inPt
 			//	not counting lowerY endpoints of edges and whole edges on that line
-
 			let inside = false;
-
 			for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
 				let edgeLowPt = inPolygon[p];
 				let edgeHighPt = inPolygon[q];
 				let edgeDx = edgeHighPt.x - edgeLowPt.x;
 				let edgeDy = edgeHighPt.y - edgeLowPt.y;
-
 				if (Math.abs(edgeDy) > Number.EPSILON) {
 					// not parallel
 					if (edgeDy < 0) {
@@ -35901,16 +32217,13 @@ class ShapePath {
 						edgeHighPt = inPolygon[p];
 						edgeDy = -edgeDy;
 					}
-
 					if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
-
 					if (inPt.y === edgeLowPt.y) {
 						if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
 						// continue;				// no intersection or edgeLowPt => doesn't count !!!
 					} else {
 						const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
 						if (perpEdge === 0) return true; // inPt is on contour ?
-
 						if (perpEdge < 0) continue;
 						inside = !inside; // true intersection left of inPt
 					}
@@ -35918,7 +32231,6 @@ class ShapePath {
 					// parallel or collinear
 					if (inPt.y !== edgeLowPt.y) continue; // parallel
 					// edge lies on the same horizontal line as inPt
-
 					if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
 					// continue;
 				}
@@ -35926,13 +32238,11 @@ class ShapePath {
 
 			return inside;
 		}
-
 		const isClockWise = ShapeUtils.isClockWise;
 		const subPaths = this.subPaths;
 		if (subPaths.length === 0) return [];
 		let solid, tmpPath, tmpShape;
 		const shapes = [];
-
 		if (subPaths.length === 1) {
 			tmpPath = subPaths[0];
 			tmpShape = new Shape();
@@ -35940,9 +32250,10 @@ class ShapePath {
 			shapes.push(tmpShape);
 			return shapes;
 		}
-
 		let holesFirst = !isClockWise(subPaths[0].getPoints());
-		holesFirst = isCCW ? !holesFirst : holesFirst; // console.log("Holes first", holesFirst);
+		holesFirst = isCCW ? !holesFirst : holesFirst;
+
+		// console.log("Holes first", holesFirst);
 
 		const betterShapeHoles = [];
 		const newShapes = [];
@@ -35951,13 +32262,11 @@ class ShapePath {
 		let tmpPoints;
 		newShapes[mainIdx] = undefined;
 		newShapeHoles[mainIdx] = [];
-
 		for (let i = 0, l = subPaths.length; i < l; i++) {
 			tmpPath = subPaths[i];
 			tmpPoints = tmpPath.getPoints();
 			solid = isClockWise(tmpPoints);
 			solid = isCCW ? !solid : solid;
-
 			if (solid) {
 				if (!holesFirst && newShapes[mainIdx]) mainIdx++;
 				newShapes[mainIdx] = {
@@ -35966,37 +32275,35 @@ class ShapePath {
 				};
 				newShapes[mainIdx].s.curves = tmpPath.curves;
 				if (holesFirst) mainIdx++;
-				newShapeHoles[mainIdx] = []; //console.log('cw', i);
+				newShapeHoles[mainIdx] = [];
+
+				//console.log('cw', i);
 			} else {
 				newShapeHoles[mainIdx].push({
 					h: tmpPath,
 					p: tmpPoints[0]
-				}); //console.log('ccw', i);
-			}
-		} // only Holes? -> probably all Shapes with wrong orientation
+				});
 
+				//console.log('ccw', i);
+			}
+		}
 
+		// only Holes? -> probably all Shapes with wrong orientation
 		if (!newShapes[0]) return toShapesNoHoles(subPaths);
-
 		if (newShapes.length > 1) {
 			let ambiguous = false;
 			let toChange = 0;
-
 			for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
 				betterShapeHoles[sIdx] = [];
 			}
-
 			for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
 				const sho = newShapeHoles[sIdx];
-
 				for (let hIdx = 0; hIdx < sho.length; hIdx++) {
 					const ho = sho[hIdx];
 					let hole_unassigned = true;
-
 					for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
 						if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
 							if (sIdx !== s2Idx) toChange++;
-
 							if (hole_unassigned) {
 								hole_unassigned = false;
 								betterShapeHoles[s2Idx].push(ho);
@@ -36005,123 +32312,120 @@ class ShapePath {
 							}
 						}
 					}
-
 					if (hole_unassigned) {
 						betterShapeHoles[sIdx].push(ho);
 					}
 				}
 			}
-
 			if (toChange > 0 && ambiguous === false) {
 				newShapeHoles = betterShapeHoles;
 			}
 		}
-
 		let tmpHoles;
-
 		for (let i = 0, il = newShapes.length; i < il; i++) {
 			tmpShape = newShapes[i].s;
 			shapes.push(tmpShape);
 			tmpHoles = newShapeHoles[i];
-
 			for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
 				tmpShape.holes.push(tmpHoles[j].h);
 			}
-		} //console.log("shape", shapes);
+		}
 
+		//console.log("shape", shapes);
 
 		return shapes;
 	}
-
 }
 
-const _tables = /*@__PURE__*/_generateTables();
+// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 
+const _tables = /*@__PURE__*/_generateTables();
 function _generateTables() {
 	// float32 to float16 helpers
+
 	const buffer = new ArrayBuffer(4);
 	const floatView = new Float32Array(buffer);
 	const uint32View = new Uint32Array(buffer);
 	const baseTable = new Uint32Array(512);
 	const shiftTable = new Uint32Array(512);
-
 	for (let i = 0; i < 256; ++i) {
-		const e = i - 127; // very small number (0, -0)
+		const e = i - 127;
+
+		// very small number (0, -0)
 
 		if (e < -27) {
 			baseTable[i] = 0x0000;
 			baseTable[i | 0x100] = 0x8000;
 			shiftTable[i] = 24;
-			shiftTable[i | 0x100] = 24; // small number (denorm)
+			shiftTable[i | 0x100] = 24;
+
+			// small number (denorm)
 		} else if (e < -14) {
 			baseTable[i] = 0x0400 >> -e - 14;
 			baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;
 			shiftTable[i] = -e - 1;
-			shiftTable[i | 0x100] = -e - 1; // normal number
+			shiftTable[i | 0x100] = -e - 1;
+
+			// normal number
 		} else if (e <= 15) {
 			baseTable[i] = e + 15 << 10;
 			baseTable[i | 0x100] = e + 15 << 10 | 0x8000;
 			shiftTable[i] = 13;
-			shiftTable[i | 0x100] = 13; // large number (Infinity, -Infinity)
+			shiftTable[i | 0x100] = 13;
+
+			// large number (Infinity, -Infinity)
 		} else if (e < 128) {
 			baseTable[i] = 0x7c00;
 			baseTable[i | 0x100] = 0xfc00;
 			shiftTable[i] = 24;
-			shiftTable[i | 0x100] = 24; // stay (NaN, Infinity, -Infinity)
+			shiftTable[i | 0x100] = 24;
+
+			// stay (NaN, Infinity, -Infinity)
 		} else {
 			baseTable[i] = 0x7c00;
 			baseTable[i | 0x100] = 0xfc00;
 			shiftTable[i] = 13;
 			shiftTable[i | 0x100] = 13;
 		}
-	} // float16 to float32 helpers
+	}
 
+	// float16 to float32 helpers
 
 	const mantissaTable = new Uint32Array(2048);
 	const exponentTable = new Uint32Array(64);
 	const offsetTable = new Uint32Array(64);
-
 	for (let i = 1; i < 1024; ++i) {
 		let m = i << 13; // zero pad mantissa bits
-
 		let e = 0; // zero exponent
-		// normalized
 
+		// normalized
 		while ((m & 0x00800000) === 0) {
 			m <<= 1;
 			e -= 0x00800000; // decrement exponent
 		}
 
 		m &= ~0x00800000; // clear leading 1 bit
-
 		e += 0x38800000; // adjust bias
 
 		mantissaTable[i] = m | e;
 	}
-
 	for (let i = 1024; i < 2048; ++i) {
 		mantissaTable[i] = 0x38000000 + (i - 1024 << 13);
 	}
-
 	for (let i = 1; i < 31; ++i) {
 		exponentTable[i] = i << 23;
 	}
-
 	exponentTable[31] = 0x47800000;
 	exponentTable[32] = 0x80000000;
-
 	for (let i = 33; i < 63; ++i) {
 		exponentTable[i] = 0x80000000 + (i - 32 << 23);
 	}
-
 	exponentTable[63] = 0xc7800000;
-
 	for (let i = 1; i < 64; ++i) {
 		if (i !== 32) {
 			offsetTable[i] = 1024;
 		}
 	}
-
 	return {
 		floatView: floatView,
 		uint32View: uint32View,
@@ -36131,8 +32435,9 @@ function _generateTables() {
 		exponentTable: exponentTable,
 		offsetTable: offsetTable
 	};
-} // float32 to float16
+}
 
+// float32 to float16
 
 function toHalfFloat(val) {
 	if (Math.abs(val) > 65504) console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.');
@@ -36141,8 +32446,9 @@ function toHalfFloat(val) {
 	const f = _tables.uint32View[0];
 	const e = f >> 23 & 0x1ff;
 	return _tables.baseTable[e] + ((f & 0x007fffff) >> _tables.shiftTable[e]);
-} // float16 to float32
+}
 
+// float16 to float32
 
 function fromHalfFloat(val) {
 	const m = val >> 10;
@@ -36156,9 +32462,13 @@ var DataUtils = /*#__PURE__*/Object.freeze({
 	fromHalfFloat: fromHalfFloat
 });
 
+// r134, d65e0af06644fe5a84a6fc0e372f4318f95a04c0
+
 function ImmediateRenderObject() {
 	console.error('THREE.ImmediateRenderObject has been removed.');
-} // r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17
+}
+
+// r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17
 
 class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
 	constructor(width, height, options) {
@@ -36166,175 +32476,195 @@ class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
 		super(width, height, options);
 		this.samples = 4;
 	}
+}
 
-} // r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
+// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
 
 class DataTexture2DArray extends DataArrayTexture {
 	constructor(data, width, height, depth) {
 		console.warn('THREE.DataTexture2DArray has been renamed to DataArrayTexture.');
 		super(data, width, height, depth);
 	}
+}
 
-} // r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
+// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
 
 class DataTexture3D extends Data3DTexture {
 	constructor(data, width, height, depth) {
 		console.warn('THREE.DataTexture3D has been renamed to Data3DTexture.');
 		super(data, width, height, depth);
 	}
+}
 
-} // r144
+// r144
 
 class BoxBufferGeometry extends BoxGeometry {
 	constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {
 		console.warn('THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.');
 		super(width, height, depth, widthSegments, heightSegments, depthSegments);
 	}
+}
 
-} // r144
+// r144
 
 class CapsuleBufferGeometry extends CapsuleGeometry {
 	constructor(radius, length, capSegments, radialSegments) {
 		console.warn('THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.');
 		super(radius, length, capSegments, radialSegments);
 	}
+}
 
-} // r144
+// r144
 
 class CircleBufferGeometry extends CircleGeometry {
 	constructor(radius, segments, thetaStart, thetaLength) {
 		console.warn('THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.');
 		super(radius, segments, thetaStart, thetaLength);
 	}
+}
 
-} // r144
+// r144
 
 class ConeBufferGeometry extends ConeGeometry {
 	constructor(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
 		console.warn('THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.');
 		super(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
 	}
+}
 
-} // r144
+// r144
 
 class CylinderBufferGeometry extends CylinderGeometry {
 	constructor(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
 		console.warn('THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.');
 		super(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
 	}
+}
 
-} // r144
+// r144
 
 class DodecahedronBufferGeometry extends DodecahedronGeometry {
 	constructor(radius, detail) {
 		console.warn('THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.');
 		super(radius, detail);
 	}
+}
 
-} // r144
+// r144
 
 class ExtrudeBufferGeometry extends ExtrudeGeometry {
 	constructor(shapes, options) {
 		console.warn('THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.');
 		super(shapes, options);
 	}
+}
 
-} // r144
+// r144
 
 class IcosahedronBufferGeometry extends IcosahedronGeometry {
 	constructor(radius, detail) {
 		console.warn('THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.');
 		super(radius, detail);
 	}
+}
 
-} // r144
+// r144
 
 class LatheBufferGeometry extends LatheGeometry {
 	constructor(points, segments, phiStart, phiLength) {
 		console.warn('THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.');
 		super(points, segments, phiStart, phiLength);
 	}
+}
 
-} // r144
+// r144
 
 class OctahedronBufferGeometry extends OctahedronGeometry {
 	constructor(radius, detail) {
 		console.warn('THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.');
 		super(radius, detail);
 	}
+}
 
-} // r144
+// r144
 
 class PlaneBufferGeometry extends PlaneGeometry {
 	constructor(width, height, widthSegments, heightSegments) {
 		console.warn('THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.');
 		super(width, height, widthSegments, heightSegments);
 	}
+}
 
-} // r144
+// r144
 
 class PolyhedronBufferGeometry extends PolyhedronGeometry {
 	constructor(vertices, indices, radius, detail) {
 		console.warn('THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.');
 		super(vertices, indices, radius, detail);
 	}
+}
 
-} // r144
+// r144
 
 class RingBufferGeometry extends RingGeometry {
 	constructor(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
 		console.warn('THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.');
 		super(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength);
 	}
+}
 
-} // r144
+// r144
 
 class ShapeBufferGeometry extends ShapeGeometry {
 	constructor(shapes, curveSegments) {
 		console.warn('THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.');
 		super(shapes, curveSegments);
 	}
+}
 
-} // r144
+// r144
 
 class SphereBufferGeometry extends SphereGeometry {
 	constructor(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
 		console.warn('THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.');
 		super(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
 	}
+}
 
-} // r144
+// r144
 
 class TetrahedronBufferGeometry extends TetrahedronGeometry {
 	constructor(radius, detail) {
 		console.warn('THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.');
 		super(radius, detail);
 	}
+}
 
-} // r144
+// r144
 
 class TorusBufferGeometry extends TorusGeometry {
 	constructor(radius, tube, radialSegments, tubularSegments, arc) {
 		console.warn('THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.');
 		super(radius, tube, radialSegments, tubularSegments, arc);
 	}
+}
 
-} // r144
+// r144
 
 class TorusKnotBufferGeometry extends TorusKnotGeometry {
 	constructor(radius, tube, tubularSegments, radialSegments, p, q) {
 		console.warn('THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.');
 		super(radius, tube, tubularSegments, radialSegments, p, q);
 	}
+}
 
-} // r144
+// r144
 
 class TubeBufferGeometry extends TubeGeometry {
 	constructor(path, tubularSegments, radius, radialSegments, closed) {
 		console.warn('THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.');
 		super(path, tubularSegments, radius, radialSegments, closed);
 	}
-
 }
 
 if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
@@ -36344,7 +32674,6 @@ if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
 		}
 	}));
 }
-
 if (typeof window !== 'undefined') {
 	if (window.__THREE__) {
 		console.warn('WARNING: Multiple instances of Three.js being imported.');
diff --git a/node_modules/super-three/build/three.js b/node_modules/super-three/build/three.js
index 76cc32d..2256af4 100644
--- a/node_modules/super-three/build/three.js
+++ b/node_modules/super-three/build/three.js
@@ -106,7 +106,6 @@
 	const UnsignedInt248Type = 1020;
 	const AlphaFormat = 1021;
 	const RGBFormat = 1022; // @deprecated since r137
-
 	const RGBAFormat = 1023;
 	const LuminanceFormat = 1024;
 	const LuminanceAlphaFormat = 1025;
@@ -162,8 +161,9 @@
 	const BasicDepthPacking = 3200;
 	const RGBADepthPacking = 3201;
 	const TangentSpaceNormalMap = 0;
-	const ObjectSpaceNormalMap = 1; // Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
+	const ObjectSpaceNormalMap = 1;
 
+	// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
 	const NoColorSpace = '';
 	const SRGBColorSpace = 'srgb';
 	const LinearSRGBColorSpace = 'srgb-linear';
@@ -199,179 +199,168 @@
 	/**
 	 * https://github.com/mrdoob/eventdispatcher.js/
 	 */
+
 	class EventDispatcher {
 		addEventListener(type, listener) {
 			if (this._listeners === undefined) this._listeners = {};
 			const listeners = this._listeners;
-
 			if (listeners[type] === undefined) {
 				listeners[type] = [];
 			}
-
 			if (listeners[type].indexOf(listener) === -1) {
 				listeners[type].push(listener);
 			}
 		}
-
 		hasEventListener(type, listener) {
 			if (this._listeners === undefined) return false;
 			const listeners = this._listeners;
 			return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
 		}
-
 		removeEventListener(type, listener) {
 			if (this._listeners === undefined) return;
 			const listeners = this._listeners;
 			const listenerArray = listeners[type];
-
 			if (listenerArray !== undefined) {
 				const index = listenerArray.indexOf(listener);
-
 				if (index !== -1) {
 					listenerArray.splice(index, 1);
 				}
 			}
 		}
-
 		dispatchEvent(event) {
 			if (this._listeners === undefined) return;
 			const listeners = this._listeners;
 			const listenerArray = listeners[event.type];
-
 			if (listenerArray !== undefined) {
-				event.target = this; // Make a copy, in case listeners are removed while iterating.
+				event.target = this;
 
+				// Make a copy, in case listeners are removed while iterating.
 				const array = listenerArray.slice(0);
-
 				for (let i = 0, l = array.length; i < l; i++) {
 					array[i].call(this, event);
 				}
-
 				event.target = null;
 			}
 		}
-
 	}
 
 	const _lut = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'];
 	let _seed = 1234567;
 	const DEG2RAD = Math.PI / 180;
-	const RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
+	const RAD2DEG = 180 / Math.PI;
 
+	// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
 	function generateUUID() {
 		const d0 = Math.random() * 0xffffffff | 0;
 		const d1 = Math.random() * 0xffffffff | 0;
 		const d2 = Math.random() * 0xffffffff | 0;
 		const d3 = Math.random() * 0xffffffff | 0;
-		const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toLowerCase() here flattens concatenated strings to save heap memory space.
+		const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];
 
+		// .toLowerCase() here flattens concatenated strings to save heap memory space.
 		return uuid.toLowerCase();
 	}
-
 	function clamp(value, min, max) {
 		return Math.max(min, Math.min(max, value));
-	} // compute euclidean modulo of m % n
-	// https://en.wikipedia.org/wiki/Modulo_operation
-
+	}
 
+	// compute euclidean modulo of m % n
+	// https://en.wikipedia.org/wiki/Modulo_operation
 	function euclideanModulo(n, m) {
 		return (n % m + m) % m;
-	} // Linear mapping from range <a1, a2> to range <b1, b2>
-
+	}
 
+	// Linear mapping from range <a1, a2> to range <b1, b2>
 	function mapLinear(x, a1, a2, b1, b2) {
 		return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
-	} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
-
+	}
 
+	// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
 	function inverseLerp(x, y, value) {
 		if (x !== y) {
 			return (value - x) / (y - x);
 		} else {
 			return 0;
 		}
-	} // https://en.wikipedia.org/wiki/Linear_interpolation
-
+	}
 
+	// https://en.wikipedia.org/wiki/Linear_interpolation
 	function lerp(x, y, t) {
 		return (1 - t) * x + t * y;
-	} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
-
+	}
 
+	// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
 	function damp(x, y, lambda, dt) {
 		return lerp(x, y, 1 - Math.exp(-lambda * dt));
-	} // https://www.desmos.com/calculator/vcsjnyz7x4
-
+	}
 
+	// https://www.desmos.com/calculator/vcsjnyz7x4
 	function pingpong(x, length = 1) {
 		return length - Math.abs(euclideanModulo(x, length * 2) - length);
-	} // http://en.wikipedia.org/wiki/Smoothstep
-
+	}
 
+	// http://en.wikipedia.org/wiki/Smoothstep
 	function smoothstep(x, min, max) {
 		if (x <= min) return 0;
 		if (x >= max) return 1;
 		x = (x - min) / (max - min);
 		return x * x * (3 - 2 * x);
 	}
-
 	function smootherstep(x, min, max) {
 		if (x <= min) return 0;
 		if (x >= max) return 1;
 		x = (x - min) / (max - min);
 		return x * x * x * (x * (x * 6 - 15) + 10);
-	} // Random integer from <low, high> interval
-
+	}
 
+	// Random integer from <low, high> interval
 	function randInt(low, high) {
 		return low + Math.floor(Math.random() * (high - low + 1));
-	} // Random float from <low, high> interval
-
+	}
 
+	// Random float from <low, high> interval
 	function randFloat(low, high) {
 		return low + Math.random() * (high - low);
-	} // Random float from <-range/2, range/2> interval
-
+	}
 
+	// Random float from <-range/2, range/2> interval
 	function randFloatSpread(range) {
 		return range * (0.5 - Math.random());
-	} // Deterministic pseudo-random float in the interval [ 0, 1 ]
-
+	}
 
+	// Deterministic pseudo-random float in the interval [ 0, 1 ]
 	function seededRandom(s) {
-		if (s !== undefined) _seed = s; // Mulberry32 generator
+		if (s !== undefined) _seed = s;
+
+		// Mulberry32 generator
 
 		let t = _seed += 0x6D2B79F5;
 		t = Math.imul(t ^ t >>> 15, t | 1);
 		t ^= t + Math.imul(t ^ t >>> 7, t | 61);
 		return ((t ^ t >>> 14) >>> 0) / 4294967296;
 	}
-
 	function degToRad(degrees) {
 		return degrees * DEG2RAD;
 	}
-
 	function radToDeg(radians) {
 		return radians * RAD2DEG;
 	}
-
 	function isPowerOfTwo(value) {
 		return (value & value - 1) === 0 && value !== 0;
 	}
-
 	function ceilPowerOfTwo(value) {
 		return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
 	}
-
 	function floorPowerOfTwo(value) {
 		return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
 	}
-
 	function setQuaternionFromProperEuler(q, a, b, c, order) {
 		// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
+
 		// rotations are applied to the axes in the order specified by 'order'
 		// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
 		// angles are in radians
+
 		const cos = Math.cos;
 		const sin = Math.sin;
 		const c2 = cos(b / 2);
@@ -382,76 +371,57 @@
 		const s1_3 = sin((a - c) / 2);
 		const c3_1 = cos((c - a) / 2);
 		const s3_1 = sin((c - a) / 2);
-
 		switch (order) {
 			case 'XYX':
 				q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
 				break;
-
 			case 'YZY':
 				q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
 				break;
-
 			case 'ZXZ':
 				q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
 				break;
-
 			case 'XZX':
 				q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
 				break;
-
 			case 'YXY':
 				q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
 				break;
-
 			case 'ZYZ':
 				q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
 				break;
-
 			default:
 				console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
 		}
 	}
-
 	function denormalize(value, array) {
 		switch (array.constructor) {
 			case Float32Array:
 				return value;
-
 			case Uint16Array:
 				return value / 65535.0;
-
 			case Uint8Array:
 				return value / 255.0;
-
 			case Int16Array:
 				return Math.max(value / 32767.0, -1.0);
-
 			case Int8Array:
 				return Math.max(value / 127.0, -1.0);
-
 			default:
 				throw new Error('Invalid component type.');
 		}
 	}
-
 	function normalize(value, array) {
 		switch (array.constructor) {
 			case Float32Array:
 				return value;
-
 			case Uint16Array:
 				return Math.round(value * 65535.0);
-
 			case Uint8Array:
 				return Math.round(value * 255.0);
-
 			case Int16Array:
 				return Math.round(value * 32767.0);
-
 			case Int8Array:
 				return Math.round(value * 127.0);
-
 			default:
 				throw new Error('Invalid component type.');
 		}
@@ -491,321 +461,263 @@
 			this.x = x;
 			this.y = y;
 		}
-
 		get width() {
 			return this.x;
 		}
-
 		set width(value) {
 			this.x = value;
 		}
-
 		get height() {
 			return this.y;
 		}
-
 		set height(value) {
 			this.y = value;
 		}
-
 		set(x, y) {
 			this.x = x;
 			this.y = y;
 			return this;
 		}
-
 		setScalar(scalar) {
 			this.x = scalar;
 			this.y = scalar;
 			return this;
 		}
-
 		setX(x) {
 			this.x = x;
 			return this;
 		}
-
 		setY(y) {
 			this.y = y;
 			return this;
 		}
-
 		setComponent(index, value) {
 			switch (index) {
 				case 0:
 					this.x = value;
 					break;
-
 				case 1:
 					this.y = value;
 					break;
-
 				default:
 					throw new Error('index is out of range: ' + index);
 			}
-
 			return this;
 		}
-
 		getComponent(index) {
 			switch (index) {
 				case 0:
 					return this.x;
-
 				case 1:
 					return this.y;
-
 				default:
 					throw new Error('index is out of range: ' + index);
 			}
 		}
-
 		clone() {
 			return new this.constructor(this.x, this.y);
 		}
-
 		copy(v) {
 			this.x = v.x;
 			this.y = v.y;
 			return this;
 		}
-
 		add(v) {
 			this.x += v.x;
 			this.y += v.y;
 			return this;
 		}
-
 		addScalar(s) {
 			this.x += s;
 			this.y += s;
 			return this;
 		}
-
 		addVectors(a, b) {
 			this.x = a.x + b.x;
 			this.y = a.y + b.y;
 			return this;
 		}
-
 		addScaledVector(v, s) {
 			this.x += v.x * s;
 			this.y += v.y * s;
 			return this;
 		}
-
 		sub(v) {
 			this.x -= v.x;
 			this.y -= v.y;
 			return this;
 		}
-
 		subScalar(s) {
 			this.x -= s;
 			this.y -= s;
 			return this;
 		}
-
 		subVectors(a, b) {
 			this.x = a.x - b.x;
 			this.y = a.y - b.y;
 			return this;
 		}
-
 		multiply(v) {
 			this.x *= v.x;
 			this.y *= v.y;
 			return this;
 		}
-
 		multiplyScalar(scalar) {
 			this.x *= scalar;
 			this.y *= scalar;
 			return this;
 		}
-
 		divide(v) {
 			this.x /= v.x;
 			this.y /= v.y;
 			return this;
 		}
-
 		divideScalar(scalar) {
 			return this.multiplyScalar(1 / scalar);
 		}
-
 		applyMatrix3(m) {
 			const x = this.x,
-						y = this.y;
+				y = this.y;
 			const e = m.elements;
 			this.x = e[0] * x + e[3] * y + e[6];
 			this.y = e[1] * x + e[4] * y + e[7];
 			return this;
 		}
-
 		min(v) {
 			this.x = Math.min(this.x, v.x);
 			this.y = Math.min(this.y, v.y);
 			return this;
 		}
-
 		max(v) {
 			this.x = Math.max(this.x, v.x);
 			this.y = Math.max(this.y, v.y);
 			return this;
 		}
-
 		clamp(min, max) {
 			// assumes min < max, componentwise
+
 			this.x = Math.max(min.x, Math.min(max.x, this.x));
 			this.y = Math.max(min.y, Math.min(max.y, this.y));
 			return this;
 		}
-
 		clampScalar(minVal, maxVal) {
 			this.x = Math.max(minVal, Math.min(maxVal, this.x));
 			this.y = Math.max(minVal, Math.min(maxVal, this.y));
 			return this;
 		}
-
 		clampLength(min, max) {
 			const length = this.length();
 			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
 		}
-
 		floor() {
 			this.x = Math.floor(this.x);
 			this.y = Math.floor(this.y);
 			return this;
 		}
-
 		ceil() {
 			this.x = Math.ceil(this.x);
 			this.y = Math.ceil(this.y);
 			return this;
 		}
-
 		round() {
 			this.x = Math.round(this.x);
 			this.y = Math.round(this.y);
 			return this;
 		}
-
 		roundToZero() {
 			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
 			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
 			return this;
 		}
-
 		negate() {
 			this.x = -this.x;
 			this.y = -this.y;
 			return this;
 		}
-
 		dot(v) {
 			return this.x * v.x + this.y * v.y;
 		}
-
 		cross(v) {
 			return this.x * v.y - this.y * v.x;
 		}
-
 		lengthSq() {
 			return this.x * this.x + this.y * this.y;
 		}
-
 		length() {
 			return Math.sqrt(this.x * this.x + this.y * this.y);
 		}
-
 		manhattanLength() {
 			return Math.abs(this.x) + Math.abs(this.y);
 		}
-
 		normalize() {
 			return this.divideScalar(this.length() || 1);
 		}
-
 		angle() {
 			// computes the angle in radians with respect to the positive x-axis
+
 			const angle = Math.atan2(-this.y, -this.x) + Math.PI;
 			return angle;
 		}
-
 		distanceTo(v) {
 			return Math.sqrt(this.distanceToSquared(v));
 		}
-
 		distanceToSquared(v) {
 			const dx = this.x - v.x,
-						dy = this.y - v.y;
+				dy = this.y - v.y;
 			return dx * dx + dy * dy;
 		}
-
 		manhattanDistanceTo(v) {
 			return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
 		}
-
 		setLength(length) {
 			return this.normalize().multiplyScalar(length);
 		}
-
 		lerp(v, alpha) {
 			this.x += (v.x - this.x) * alpha;
 			this.y += (v.y - this.y) * alpha;
 			return this;
 		}
-
 		lerpVectors(v1, v2, alpha) {
 			this.x = v1.x + (v2.x - v1.x) * alpha;
 			this.y = v1.y + (v2.y - v1.y) * alpha;
 			return this;
 		}
-
 		equals(v) {
 			return v.x === this.x && v.y === this.y;
 		}
-
 		fromArray(array, offset = 0) {
 			this.x = array[offset];
 			this.y = array[offset + 1];
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			array[offset] = this.x;
 			array[offset + 1] = this.y;
 			return array;
 		}
-
 		fromBufferAttribute(attribute, index) {
 			this.x = attribute.getX(index);
 			this.y = attribute.getY(index);
 			return this;
 		}
-
 		rotateAround(center, angle) {
 			const c = Math.cos(angle),
-						s = Math.sin(angle);
+				s = Math.sin(angle);
 			const x = this.x - center.x;
 			const y = this.y - center.y;
 			this.x = x * c - y * s + center.x;
 			this.y = x * s + y * c + center.y;
 			return this;
 		}
-
 		random() {
 			this.x = Math.random();
 			this.y = Math.random();
 			return this;
 		}
-
 		*[Symbol.iterator]() {
 			yield this.x;
 			yield this.y;
 		}
-
 	}
 
 	class Matrix3 {
@@ -813,7 +725,6 @@
 			Matrix3.prototype.isMatrix3 = true;
 			this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
 		}
-
 		set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
 			const te = this.elements;
 			te[0] = n11;
@@ -827,12 +738,10 @@
 			te[8] = n33;
 			return this;
 		}
-
 		identity() {
 			this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
 			return this;
 		}
-
 		copy(m) {
 			const te = this.elements;
 			const me = m.elements;
@@ -847,50 +756,45 @@
 			te[8] = me[8];
 			return this;
 		}
-
 		extractBasis(xAxis, yAxis, zAxis) {
 			xAxis.setFromMatrix3Column(this, 0);
 			yAxis.setFromMatrix3Column(this, 1);
 			zAxis.setFromMatrix3Column(this, 2);
 			return this;
 		}
-
 		setFromMatrix4(m) {
 			const me = m.elements;
 			this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
 			return this;
 		}
-
 		multiply(m) {
 			return this.multiplyMatrices(this, m);
 		}
-
 		premultiply(m) {
 			return this.multiplyMatrices(m, this);
 		}
-
 		multiplyMatrices(a, b) {
 			const ae = a.elements;
 			const be = b.elements;
 			const te = this.elements;
 			const a11 = ae[0],
-						a12 = ae[3],
-						a13 = ae[6];
+				a12 = ae[3],
+				a13 = ae[6];
 			const a21 = ae[1],
-						a22 = ae[4],
-						a23 = ae[7];
+				a22 = ae[4],
+				a23 = ae[7];
 			const a31 = ae[2],
-						a32 = ae[5],
-						a33 = ae[8];
+				a32 = ae[5],
+				a33 = ae[8];
 			const b11 = be[0],
-						b12 = be[3],
-						b13 = be[6];
+				b12 = be[3],
+				b13 = be[6];
 			const b21 = be[1],
-						b22 = be[4],
-						b23 = be[7];
+				b22 = be[4],
+				b23 = be[7];
 			const b31 = be[2],
-						b32 = be[5],
-						b33 = be[8];
+				b32 = be[5],
+				b33 = be[8];
 			te[0] = a11 * b11 + a12 * b21 + a13 * b31;
 			te[3] = a11 * b12 + a12 * b22 + a13 * b32;
 			te[6] = a11 * b13 + a12 * b23 + a13 * b33;
@@ -902,7 +806,6 @@
 			te[8] = a31 * b13 + a32 * b23 + a33 * b33;
 			return this;
 		}
-
 		multiplyScalar(s) {
 			const te = this.elements;
 			te[0] *= s;
@@ -916,36 +819,34 @@
 			te[8] *= s;
 			return this;
 		}
-
 		determinant() {
 			const te = this.elements;
 			const a = te[0],
-						b = te[1],
-						c = te[2],
-						d = te[3],
-						e = te[4],
-						f = te[5],
-						g = te[6],
-						h = te[7],
-						i = te[8];
+				b = te[1],
+				c = te[2],
+				d = te[3],
+				e = te[4],
+				f = te[5],
+				g = te[6],
+				h = te[7],
+				i = te[8];
 			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
 		}
-
 		invert() {
 			const te = this.elements,
-						n11 = te[0],
-						n21 = te[1],
-						n31 = te[2],
-						n12 = te[3],
-						n22 = te[4],
-						n32 = te[5],
-						n13 = te[6],
-						n23 = te[7],
-						n33 = te[8],
-						t11 = n33 * n22 - n32 * n23,
-						t12 = n32 * n13 - n33 * n12,
-						t13 = n23 * n12 - n22 * n13,
-						det = n11 * t11 + n21 * t12 + n31 * t13;
+				n11 = te[0],
+				n21 = te[1],
+				n31 = te[2],
+				n12 = te[3],
+				n22 = te[4],
+				n32 = te[5],
+				n13 = te[6],
+				n23 = te[7],
+				n33 = te[8],
+				t11 = n33 * n22 - n32 * n23,
+				t12 = n32 * n13 - n33 * n12,
+				t13 = n23 * n12 - n22 * n13,
+				det = n11 * t11 + n21 * t12 + n31 * t13;
 			if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
 			const detInv = 1 / det;
 			te[0] = t11 * detInv;
@@ -959,7 +860,6 @@
 			te[8] = (n22 * n11 - n21 * n12) * detInv;
 			return this;
 		}
-
 		transpose() {
 			let tmp;
 			const m = this.elements;
@@ -974,11 +874,9 @@
 			m[7] = tmp;
 			return this;
 		}
-
 		getNormalMatrix(matrix4) {
 			return this.setFromMatrix4(matrix4).invert().transpose();
 		}
-
 		transposeIntoArray(r) {
 			const m = this.elements;
 			r[0] = m[0];
@@ -992,69 +890,63 @@
 			r[8] = m[8];
 			return this;
 		}
-
 		setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
 			const c = Math.cos(rotation);
 			const s = Math.sin(rotation);
 			this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
 			return this;
-		} //
+		}
 
+		//
 
 		scale(sx, sy) {
 			this.premultiply(_m3.makeScale(sx, sy));
 			return this;
 		}
-
 		rotate(theta) {
 			this.premultiply(_m3.makeRotation(-theta));
 			return this;
 		}
-
 		translate(tx, ty) {
 			this.premultiply(_m3.makeTranslation(tx, ty));
 			return this;
-		} // for 2D Transforms
+		}
 
+		// for 2D Transforms
 
 		makeTranslation(x, y) {
 			this.set(1, 0, x, 0, 1, y, 0, 0, 1);
 			return this;
 		}
-
 		makeRotation(theta) {
 			// counterclockwise
+
 			const c = Math.cos(theta);
 			const s = Math.sin(theta);
 			this.set(c, -s, 0, s, c, 0, 0, 0, 1);
 			return this;
 		}
-
 		makeScale(x, y) {
 			this.set(x, 0, 0, 0, y, 0, 0, 0, 1);
 			return this;
-		} //
+		}
 
+		//
 
 		equals(matrix) {
 			const te = this.elements;
 			const me = matrix.elements;
-
 			for (let i = 0; i < 9; i++) {
 				if (te[i] !== me[i]) return false;
 			}
-
 			return true;
 		}
-
 		fromArray(array, offset = 0) {
 			for (let i = 0; i < 9; i++) {
 				this.elements[i] = array[i + offset];
 			}
-
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			const te = this.elements;
 			array[offset] = te[0];
@@ -1068,24 +960,21 @@
 			array[offset + 8] = te[8];
 			return array;
 		}
-
 		clone() {
 			return new this.constructor().fromArray(this.elements);
 		}
-
 	}
-
 	const _m3 = /*@__PURE__*/new Matrix3();
 
 	function arrayNeedsUint32(array) {
 		// assumes larger values usually on last
+
 		for (let i = array.length - 1; i >= 0; --i) {
 			if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565
 		}
 
 		return false;
 	}
-
 	const TYPED_ARRAYS = {
 		Int8Array: Int8Array,
 		Uint8Array: Uint8Array,
@@ -1097,11 +986,9 @@
 		Float32Array: Float32Array,
 		Float64Array: Float64Array
 	};
-
 	function getTypedArray(type, buffer) {
 		return new TYPED_ARRAYS[type](buffer);
 	}
-
 	function createElementNS(name) {
 		return document.createElementNS('http://www.w3.org/1999/xhtml', name);
 	}
@@ -1111,9 +998,10 @@
 	}
 	function LinearToSRGB(c) {
 		return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
-	} // JavaScript RGB-to-RGB transforms, defined as
-	// FN[InputColorSpace][OutputColorSpace] callback functions.
+	}
 
+	// JavaScript RGB-to-RGB transforms, defined as
+	// FN[InputColorSpace][OutputColorSpace] callback functions.
 	const FN = {
 		[SRGBColorSpace]: {
 			[LinearSRGBColorSpace]: SRGBToLinear
@@ -1124,20 +1012,16 @@
 	};
 	const ColorManagement = {
 		legacyMode: true,
-
 		get workingColorSpace() {
 			return LinearSRGBColorSpace;
 		},
-
 		set workingColorSpace(colorSpace) {
 			console.warn('THREE.ColorManagement: .workingColorSpace is readonly.');
 		},
-
 		convert: function (color, sourceColorSpace, targetColorSpace) {
 			if (this.legacyMode || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
 				return color;
 			}
-
 			if (FN[sourceColorSpace] && FN[sourceColorSpace][targetColorSpace] !== undefined) {
 				const fn = FN[sourceColorSpace][targetColorSpace];
 				color.r = fn(color.r);
@@ -1145,7 +1029,6 @@
 				color.b = fn(color.b);
 				return color;
 			}
-
 			throw new Error('Unsupported color space conversion.');
 		},
 		fromWorkingColorSpace: function (color, targetColorSpace) {
@@ -1321,7 +1204,6 @@
 		s: 0,
 		l: 0
 	};
-
 	function hue2rgb(p, q, t) {
 		if (t < 0) t += 1;
 		if (t > 1) t -= 1;
@@ -1330,29 +1212,24 @@
 		if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
 		return p;
 	}
-
 	function toComponents(source, target) {
 		target.r = source.r;
 		target.g = source.g;
 		target.b = source.b;
 		return target;
 	}
-
 	class Color {
 		constructor(r, g, b) {
 			this.isColor = true;
 			this.r = 1;
 			this.g = 1;
 			this.b = 1;
-
 			if (g === undefined && b === undefined) {
 				// r is THREE.Color, hex or string
 				return this.set(r);
 			}
-
 			return this.setRGB(r, g, b);
 		}
-
 		set(value) {
 			if (value && value.isColor) {
 				this.copy(value);
@@ -1361,17 +1238,14 @@
 			} else if (typeof value === 'string') {
 				this.setStyle(value);
 			}
-
 			return this;
 		}
-
 		setScalar(scalar) {
 			this.r = scalar;
 			this.g = scalar;
 			this.b = scalar;
 			return this;
 		}
-
 		setHex(hex, colorSpace = SRGBColorSpace) {
 			hex = Math.floor(hex);
 			this.r = (hex >> 16 & 255) / 255;
@@ -1380,7 +1254,6 @@
 			ColorManagement.toWorkingColorSpace(this, colorSpace);
 			return this;
 		}
-
 		setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
 			this.r = r;
 			this.g = g;
@@ -1388,13 +1261,11 @@
 			ColorManagement.toWorkingColorSpace(this, colorSpace);
 			return this;
 		}
-
 		setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
 			// h,s,l ranges are in 0.0 - 1.0
 			h = euclideanModulo(h, 1);
 			s = clamp(s, 0, 1);
 			l = clamp(l, 0, 1);
-
 			if (s === 0) {
 				this.r = this.g = this.b = l;
 			} else {
@@ -1404,28 +1275,23 @@
 				this.g = hue2rgb(q, p, h);
 				this.b = hue2rgb(q, p, h - 1 / 3);
 			}
-
 			ColorManagement.toWorkingColorSpace(this, colorSpace);
 			return this;
 		}
-
 		setStyle(style, colorSpace = SRGBColorSpace) {
 			function handleAlpha(string) {
 				if (string === undefined) return;
-
 				if (parseFloat(string) < 1) {
 					console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
 				}
 			}
-
 			let m;
-
 			if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
 				// rgb / hsl
+
 				let color;
 				const name = m[1];
 				const components = m[2];
-
 				switch (name) {
 					case 'rgb':
 					case 'rgba':
@@ -1438,7 +1304,6 @@
 							handleAlpha(color[4]);
 							return this;
 						}
-
 						if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
 							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
 							this.r = Math.min(100, parseInt(color[1], 10)) / 100;
@@ -1448,9 +1313,7 @@
 							handleAlpha(color[4]);
 							return this;
 						}
-
 						break;
-
 					case 'hsl':
 					case 'hsla':
 						if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
@@ -1461,14 +1324,13 @@
 							handleAlpha(color[4]);
 							return this.setHSL(h, s, l, colorSpace);
 						}
-
 						break;
 				}
 			} else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
 				// hex color
+
 				const hex = m[1];
 				const size = hex.length;
-
 				if (size === 3) {
 					// #ff0
 					this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
@@ -1485,18 +1347,14 @@
 					return this;
 				}
 			}
-
 			if (style && style.length > 0) {
 				return this.setColorName(style, colorSpace);
 			}
-
 			return this;
 		}
-
 		setColorName(style, colorSpace = SRGBColorSpace) {
 			// color keywords
 			const hex = _colorKeywords[style.toLowerCase()];
-
 			if (hex !== undefined) {
 				// red
 				this.setHex(hex, colorSpace);
@@ -1504,95 +1362,79 @@
 				// unknown color
 				console.warn('THREE.Color: Unknown color ' + style);
 			}
-
 			return this;
 		}
-
 		clone() {
 			return new this.constructor(this.r, this.g, this.b);
 		}
-
 		copy(color) {
 			this.r = color.r;
 			this.g = color.g;
 			this.b = color.b;
 			return this;
 		}
-
 		copySRGBToLinear(color) {
 			this.r = SRGBToLinear(color.r);
 			this.g = SRGBToLinear(color.g);
 			this.b = SRGBToLinear(color.b);
 			return this;
 		}
-
 		copyLinearToSRGB(color) {
 			this.r = LinearToSRGB(color.r);
 			this.g = LinearToSRGB(color.g);
 			this.b = LinearToSRGB(color.b);
 			return this;
 		}
-
 		convertSRGBToLinear() {
 			this.copySRGBToLinear(this);
 			return this;
 		}
-
 		convertLinearToSRGB() {
 			this.copyLinearToSRGB(this);
 			return this;
 		}
-
 		getHex(colorSpace = SRGBColorSpace) {
 			ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb$1), colorSpace);
 			return clamp(_rgb$1.r * 255, 0, 255) << 16 ^ clamp(_rgb$1.g * 255, 0, 255) << 8 ^ clamp(_rgb$1.b * 255, 0, 255) << 0;
 		}
-
 		getHexString(colorSpace = SRGBColorSpace) {
 			return ('000000' + this.getHex(colorSpace).toString(16)).slice(-6);
 		}
-
 		getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
 			// h,s,l ranges are in 0.0 - 1.0
+
 			ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb$1), colorSpace);
 			const r = _rgb$1.r,
-						g = _rgb$1.g,
-						b = _rgb$1.b;
+				g = _rgb$1.g,
+				b = _rgb$1.b;
 			const max = Math.max(r, g, b);
 			const min = Math.min(r, g, b);
 			let hue, saturation;
 			const lightness = (min + max) / 2.0;
-
 			if (min === max) {
 				hue = 0;
 				saturation = 0;
 			} else {
 				const delta = max - min;
 				saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
-
 				switch (max) {
 					case r:
 						hue = (g - b) / delta + (g < b ? 6 : 0);
 						break;
-
 					case g:
 						hue = (b - r) / delta + 2;
 						break;
-
 					case b:
 						hue = (r - g) / delta + 4;
 						break;
 				}
-
 				hue /= 6;
 			}
-
 			target.h = hue;
 			target.s = saturation;
 			target.l = lightness;
 			return target;
 		}
-
 		getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
 			ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb$1), colorSpace);
 			target.r = _rgb$1.r;
@@ -1600,18 +1442,14 @@
 			target.b = _rgb$1.b;
 			return target;
 		}
-
 		getStyle(colorSpace = SRGBColorSpace) {
 			ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb$1), colorSpace);
-
 			if (colorSpace !== SRGBColorSpace) {
 				// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
 				return `color(${colorSpace} ${_rgb$1.r} ${_rgb$1.g} ${_rgb$1.b})`;
 			}
-
 			return `rgb(${_rgb$1.r * 255 | 0},${_rgb$1.g * 255 | 0},${_rgb$1.b * 255 | 0})`;
 		}
-
 		offsetHSL(h, s, l) {
 			this.getHSL(_hslA);
 			_hslA.h += h;
@@ -1620,63 +1458,54 @@
 			this.setHSL(_hslA.h, _hslA.s, _hslA.l);
 			return this;
 		}
-
 		add(color) {
 			this.r += color.r;
 			this.g += color.g;
 			this.b += color.b;
 			return this;
 		}
-
 		addColors(color1, color2) {
 			this.r = color1.r + color2.r;
 			this.g = color1.g + color2.g;
 			this.b = color1.b + color2.b;
 			return this;
 		}
-
 		addScalar(s) {
 			this.r += s;
 			this.g += s;
 			this.b += s;
 			return this;
 		}
-
 		sub(color) {
 			this.r = Math.max(0, this.r - color.r);
 			this.g = Math.max(0, this.g - color.g);
 			this.b = Math.max(0, this.b - color.b);
 			return this;
 		}
-
 		multiply(color) {
 			this.r *= color.r;
 			this.g *= color.g;
 			this.b *= color.b;
 			return this;
 		}
-
 		multiplyScalar(s) {
 			this.r *= s;
 			this.g *= s;
 			this.b *= s;
 			return this;
 		}
-
 		lerp(color, alpha) {
 			this.r += (color.r - this.r) * alpha;
 			this.g += (color.g - this.g) * alpha;
 			this.b += (color.b - this.b) * alpha;
 			return this;
 		}
-
 		lerpColors(color1, color2, alpha) {
 			this.r = color1.r + (color2.r - color1.r) * alpha;
 			this.g = color1.g + (color2.g - color1.g) * alpha;
 			this.b = color1.b + (color2.b - color1.b) * alpha;
 			return this;
 		}
-
 		lerpHSL(color, alpha) {
 			this.getHSL(_hslA);
 			color.getHSL(_hslB);
@@ -1686,78 +1515,62 @@
 			this.setHSL(h, s, l);
 			return this;
 		}
-
 		equals(c) {
 			return c.r === this.r && c.g === this.g && c.b === this.b;
 		}
-
 		fromArray(array, offset = 0) {
 			this.r = array[offset];
 			this.g = array[offset + 1];
 			this.b = array[offset + 2];
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			array[offset] = this.r;
 			array[offset + 1] = this.g;
 			array[offset + 2] = this.b;
 			return array;
 		}
-
 		fromBufferAttribute(attribute, index) {
 			this.r = attribute.getX(index);
 			this.g = attribute.getY(index);
 			this.b = attribute.getZ(index);
 			return this;
 		}
-
 		toJSON() {
 			return this.getHex();
 		}
-
 		*[Symbol.iterator]() {
 			yield this.r;
 			yield this.g;
 			yield this.b;
 		}
-
 	}
-
 	Color.NAMES = _colorKeywords;
 
 	let _canvas;
-
 	class ImageUtils {
 		static getDataURL(image) {
 			if (/^data:/i.test(image.src)) {
 				return image.src;
 			}
-
 			if (typeof HTMLCanvasElement == 'undefined') {
 				return image.src;
 			}
-
 			let canvas;
-
 			if (image instanceof HTMLCanvasElement) {
 				canvas = image;
 			} else {
 				if (_canvas === undefined) _canvas = createElementNS('canvas');
 				_canvas.width = image.width;
 				_canvas.height = image.height;
-
 				const context = _canvas.getContext('2d');
-
 				if (image instanceof ImageData) {
 					context.putImageData(image, 0, 0);
 				} else {
 					context.drawImage(image, 0, 0, image.width, image.height);
 				}
-
 				canvas = _canvas;
 			}
-
 			if (canvas.width > 2048 || canvas.height > 2048) {
 				console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);
 				return canvas.toDataURL('image/jpeg', 0.6);
@@ -1765,7 +1578,6 @@
 				return canvas.toDataURL('image/png');
 			}
 		}
-
 		static sRGBToLinear(image) {
 			if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
 				const canvas = createElementNS('canvas');
@@ -1775,25 +1587,22 @@
 				context.drawImage(image, 0, 0, image.width, image.height);
 				const imageData = context.getImageData(0, 0, image.width, image.height);
 				const data = imageData.data;
-
 				for (let i = 0; i < data.length; i++) {
 					data[i] = SRGBToLinear(data[i] / 255) * 255;
 				}
-
 				context.putImageData(imageData, 0, 0);
 				return canvas;
 			} else if (image.data) {
 				const data = image.data.slice(0);
-
 				for (let i = 0; i < data.length; i++) {
 					if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
 						data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
 					} else {
 						// assuming float
+
 						data[i] = SRGBToLinear(data[i]);
 					}
 				}
-
 				return {
 					data: data,
 					width: image.width,
@@ -1804,7 +1613,6 @@
 				return image;
 			}
 		}
-
 	}
 
 	class Source {
@@ -1814,31 +1622,25 @@
 			this.data = data;
 			this.version = 0;
 		}
-
 		set needsUpdate(value) {
 			if (value === true) this.version++;
 		}
-
 		toJSON(meta) {
 			const isRootObject = meta === undefined || typeof meta === 'string';
-
 			if (!isRootObject && meta.images[this.uuid] !== undefined) {
 				return meta.images[this.uuid];
 			}
-
 			const output = {
 				uuid: this.uuid,
 				url: ''
 			};
 			const data = this.data;
-
 			if (data !== null) {
 				let url;
-
 				if (Array.isArray(data)) {
 					// cube texture
-					url = [];
 
+					url = [];
 					for (let i = 0, l = data.length; i < l; i++) {
 						if (data[i].isDataTexture) {
 							url.push(serializeImage(data[i].image));
@@ -1848,28 +1650,26 @@
 					}
 				} else {
 					// texture
+
 					url = serializeImage(data);
 				}
-
 				output.url = url;
 			}
-
 			if (!isRootObject) {
 				meta.images[this.uuid] = output;
 			}
-
 			return output;
 		}
-
 	}
-
 	function serializeImage(image) {
 		if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
 			// default images
+
 			return ImageUtils.getDataURL(image);
 		} else {
 			if (image.data) {
 				// images of DataTexture
+
 				return {
 					data: Array.from(image.data),
 					width: image.width,
@@ -1884,7 +1684,6 @@
 	}
 
 	let textureId = 0;
-
 	class Texture extends EventDispatcher {
 		constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, encoding = LinearEncoding) {
 			super();
@@ -1915,36 +1714,31 @@
 			this.premultiplyAlpha = false;
 			this.flipY = true;
 			this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
+
 			// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
 			//
 			// Also changing the encoding after already used by a Material will not automatically make the Material
 			// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
-
 			this.encoding = encoding;
 			this.userData = {};
 			this.version = 0;
 			this.onUpdate = null;
 			this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
-
 			this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
 		}
 
 		get image() {
 			return this.source.data;
 		}
-
 		set image(value) {
 			this.source.data = value;
 		}
-
 		updateMatrix() {
 			this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		copy(source) {
 			this.name = source.name;
 			this.source = source.source;
@@ -1973,14 +1767,11 @@
 			this.needsUpdate = true;
 			return this;
 		}
-
 		toJSON(meta) {
 			const isRootObject = meta === undefined || typeof meta === 'string';
-
 			if (!isRootObject && meta.textures[this.uuid] !== undefined) {
 				return meta.textures[this.uuid];
 			}
-
 			const output = {
 				metadata: {
 					version: 4.5,
@@ -2007,82 +1798,65 @@
 				unpackAlignment: this.unpackAlignment
 			};
 			if (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;
-
 			if (!isRootObject) {
 				meta.textures[this.uuid] = output;
 			}
-
 			return output;
 		}
-
 		dispose() {
 			this.dispatchEvent({
 				type: 'dispose'
 			});
 		}
-
 		transformUv(uv) {
 			if (this.mapping !== UVMapping) return uv;
 			uv.applyMatrix3(this.matrix);
-
 			if (uv.x < 0 || uv.x > 1) {
 				switch (this.wrapS) {
 					case RepeatWrapping:
 						uv.x = uv.x - Math.floor(uv.x);
 						break;
-
 					case ClampToEdgeWrapping:
 						uv.x = uv.x < 0 ? 0 : 1;
 						break;
-
 					case MirroredRepeatWrapping:
 						if (Math.abs(Math.floor(uv.x) % 2) === 1) {
 							uv.x = Math.ceil(uv.x) - uv.x;
 						} else {
 							uv.x = uv.x - Math.floor(uv.x);
 						}
-
 						break;
 				}
 			}
-
 			if (uv.y < 0 || uv.y > 1) {
 				switch (this.wrapT) {
 					case RepeatWrapping:
 						uv.y = uv.y - Math.floor(uv.y);
 						break;
-
 					case ClampToEdgeWrapping:
 						uv.y = uv.y < 0 ? 0 : 1;
 						break;
-
 					case MirroredRepeatWrapping:
 						if (Math.abs(Math.floor(uv.y) % 2) === 1) {
 							uv.y = Math.ceil(uv.y) - uv.y;
 						} else {
 							uv.y = uv.y - Math.floor(uv.y);
 						}
-
 						break;
 				}
 			}
-
 			if (this.flipY) {
 				uv.y = 1 - uv.y;
 			}
-
 			return uv;
 		}
-
 		set needsUpdate(value) {
 			if (value === true) {
 				this.version++;
 				this.source.needsUpdate = true;
 			}
 		}
-
 	}
-
 	Texture.DEFAULT_IMAGE = null;
 	Texture.DEFAULT_MAPPING = UVMapping;
 	Texture.DEFAULT_ANISOTROPY = 1;
@@ -2095,23 +1869,18 @@
 			this.z = z;
 			this.w = w;
 		}
-
 		get width() {
 			return this.z;
 		}
-
 		set width(value) {
 			this.z = value;
 		}
-
 		get height() {
 			return this.w;
 		}
-
 		set height(value) {
 			this.w = value;
 		}
-
 		set(x, y, z, w) {
 			this.x = x;
 			this.y = y;
@@ -2119,7 +1888,6 @@
 			this.w = w;
 			return this;
 		}
-
 		setScalar(scalar) {
 			this.x = scalar;
 			this.y = scalar;
@@ -2127,75 +1895,58 @@
 			this.w = scalar;
 			return this;
 		}
-
 		setX(x) {
 			this.x = x;
 			return this;
 		}
-
 		setY(y) {
 			this.y = y;
 			return this;
 		}
-
 		setZ(z) {
 			this.z = z;
 			return this;
 		}
-
 		setW(w) {
 			this.w = w;
 			return this;
 		}
-
 		setComponent(index, value) {
 			switch (index) {
 				case 0:
 					this.x = value;
 					break;
-
 				case 1:
 					this.y = value;
 					break;
-
 				case 2:
 					this.z = value;
 					break;
-
 				case 3:
 					this.w = value;
 					break;
-
 				default:
 					throw new Error('index is out of range: ' + index);
 			}
-
 			return this;
 		}
-
 		getComponent(index) {
 			switch (index) {
 				case 0:
 					return this.x;
-
 				case 1:
 					return this.y;
-
 				case 2:
 					return this.z;
-
 				case 3:
 					return this.w;
-
 				default:
 					throw new Error('index is out of range: ' + index);
 			}
 		}
-
 		clone() {
 			return new this.constructor(this.x, this.y, this.z, this.w);
 		}
-
 		copy(v) {
 			this.x = v.x;
 			this.y = v.y;
@@ -2203,7 +1954,6 @@
 			this.w = v.w !== undefined ? v.w : 1;
 			return this;
 		}
-
 		add(v) {
 			this.x += v.x;
 			this.y += v.y;
@@ -2211,7 +1961,6 @@
 			this.w += v.w;
 			return this;
 		}
-
 		addScalar(s) {
 			this.x += s;
 			this.y += s;
@@ -2219,7 +1968,6 @@
 			this.w += s;
 			return this;
 		}
-
 		addVectors(a, b) {
 			this.x = a.x + b.x;
 			this.y = a.y + b.y;
@@ -2227,7 +1975,6 @@
 			this.w = a.w + b.w;
 			return this;
 		}
-
 		addScaledVector(v, s) {
 			this.x += v.x * s;
 			this.y += v.y * s;
@@ -2235,7 +1982,6 @@
 			this.w += v.w * s;
 			return this;
 		}
-
 		sub(v) {
 			this.x -= v.x;
 			this.y -= v.y;
@@ -2243,7 +1989,6 @@
 			this.w -= v.w;
 			return this;
 		}
-
 		subScalar(s) {
 			this.x -= s;
 			this.y -= s;
@@ -2251,7 +1996,6 @@
 			this.w -= s;
 			return this;
 		}
-
 		subVectors(a, b) {
 			this.x = a.x - b.x;
 			this.y = a.y - b.y;
@@ -2259,7 +2003,6 @@
 			this.w = a.w - b.w;
 			return this;
 		}
-
 		multiply(v) {
 			this.x *= v.x;
 			this.y *= v.y;
@@ -2267,7 +2010,6 @@
 			this.w *= v.w;
 			return this;
 		}
-
 		multiplyScalar(scalar) {
 			this.x *= scalar;
 			this.y *= scalar;
@@ -2275,12 +2017,11 @@
 			this.w *= scalar;
 			return this;
 		}
-
 		applyMatrix4(m) {
 			const x = this.x,
-						y = this.y,
-						z = this.z,
-						w = this.w;
+				y = this.y,
+				z = this.z,
+				w = this.w;
 			const e = m.elements;
 			this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
 			this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
@@ -2288,17 +2029,16 @@
 			this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
 			return this;
 		}
-
 		divideScalar(scalar) {
 			return this.multiplyScalar(1 / scalar);
 		}
-
 		setAxisAngleFromQuaternion(q) {
 			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
+
 			// q is assumed to be normalized
+
 			this.w = 2 * Math.acos(q.w);
 			const s = Math.sqrt(1 - q.w * q.w);
-
 			if (s < 0.0001) {
 				this.x = 1;
 				this.y = 0;
@@ -2308,40 +2048,42 @@
 				this.y = q.y / s;
 				this.z = q.z / s;
 			}
-
 			return this;
 		}
-
 		setAxisAngleFromRotationMatrix(m) {
 			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
+
 			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
-			let angle, x, y, z; // variables for result
 
+			let angle, x, y, z; // variables for result
 			const epsilon = 0.01,
-						// margin to allow for rounding errors
-			epsilon2 = 0.1,
-						// margin to distinguish between 0 and 180 degrees
-			te = m.elements,
-						m11 = te[0],
-						m12 = te[4],
-						m13 = te[8],
-						m21 = te[1],
-						m22 = te[5],
-						m23 = te[9],
-						m31 = te[2],
-						m32 = te[6],
-						m33 = te[10];
-
+				// margin to allow for rounding errors
+				epsilon2 = 0.1,
+				// margin to distinguish between 0 and 180 degrees
+
+				te = m.elements,
+				m11 = te[0],
+				m12 = te[4],
+				m13 = te[8],
+				m21 = te[1],
+				m22 = te[5],
+				m23 = te[9],
+				m31 = te[2],
+				m32 = te[6],
+				m33 = te[10];
 			if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
 				// singularity found
 				// first check for identity matrix which must have +1 for all terms
 				// in leading diagonal and zero in other terms
+
 				if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
 					// this singularity is identity matrix so angle = 0
+
 					this.set(1, 0, 0, 0);
 					return this; // zero angle, arbitrary axis
-				} // otherwise this singularity is angle = 180
+				}
 
+				// otherwise this singularity is angle = 180
 
 				angle = Math.PI;
 				const xx = (m11 + 1) / 2;
@@ -2350,9 +2092,9 @@
 				const xy = (m12 + m21) / 4;
 				const xz = (m13 + m31) / 4;
 				const yz = (m23 + m32) / 4;
-
 				if (xx > yy && xx > zz) {
 					// m11 is the largest diagonal term
+
 					if (xx < epsilon) {
 						x = 0;
 						y = 0.707106781;
@@ -2364,6 +2106,7 @@
 					}
 				} else if (yy > zz) {
 					// m22 is the largest diagonal term
+
 					if (yy < epsilon) {
 						x = 0.707106781;
 						y = 0;
@@ -2375,6 +2118,7 @@
 					}
 				} else {
 					// m33 is the largest diagonal term so base result on this
+
 					if (zz < epsilon) {
 						x = 0.707106781;
 						y = 0.707106781;
@@ -2385,15 +2129,17 @@
 						y = yz / z;
 					}
 				}
-
 				this.set(x, y, z, angle);
 				return this; // return 180 deg rotation
-			} // as we have reached here there are no singularities so we can handle normally
+			}
 
+			// as we have reached here there are no singularities so we can handle normally
 
 			let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize
 
-			if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be
+			if (Math.abs(s) < 0.001) s = 1;
+
+			// prevent divide by zero, should not happen if matrix is orthogonal and should be
 			// caught by singularity test above, but I've left it in just in case
 
 			this.x = (m32 - m23) / s;
@@ -2402,7 +2148,6 @@
 			this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
 			return this;
 		}
-
 		min(v) {
 			this.x = Math.min(this.x, v.x);
 			this.y = Math.min(this.y, v.y);
@@ -2410,7 +2155,6 @@
 			this.w = Math.min(this.w, v.w);
 			return this;
 		}
-
 		max(v) {
 			this.x = Math.max(this.x, v.x);
 			this.y = Math.max(this.y, v.y);
@@ -2418,16 +2162,15 @@
 			this.w = Math.max(this.w, v.w);
 			return this;
 		}
-
 		clamp(min, max) {
 			// assumes min < max, componentwise
+
 			this.x = Math.max(min.x, Math.min(max.x, this.x));
 			this.y = Math.max(min.y, Math.min(max.y, this.y));
 			this.z = Math.max(min.z, Math.min(max.z, this.z));
 			this.w = Math.max(min.w, Math.min(max.w, this.w));
 			return this;
 		}
-
 		clampScalar(minVal, maxVal) {
 			this.x = Math.max(minVal, Math.min(maxVal, this.x));
 			this.y = Math.max(minVal, Math.min(maxVal, this.y));
@@ -2435,12 +2178,10 @@
 			this.w = Math.max(minVal, Math.min(maxVal, this.w));
 			return this;
 		}
-
 		clampLength(min, max) {
 			const length = this.length();
 			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
 		}
-
 		floor() {
 			this.x = Math.floor(this.x);
 			this.y = Math.floor(this.y);
@@ -2448,7 +2189,6 @@
 			this.w = Math.floor(this.w);
 			return this;
 		}
-
 		ceil() {
 			this.x = Math.ceil(this.x);
 			this.y = Math.ceil(this.y);
@@ -2456,7 +2196,6 @@
 			this.w = Math.ceil(this.w);
 			return this;
 		}
-
 		round() {
 			this.x = Math.round(this.x);
 			this.y = Math.round(this.y);
@@ -2464,7 +2203,6 @@
 			this.w = Math.round(this.w);
 			return this;
 		}
-
 		roundToZero() {
 			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
 			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
@@ -2472,7 +2210,6 @@
 			this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
 			return this;
 		}
-
 		negate() {
 			this.x = -this.x;
 			this.y = -this.y;
@@ -2480,31 +2217,24 @@
 			this.w = -this.w;
 			return this;
 		}
-
 		dot(v) {
 			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
 		}
-
 		lengthSq() {
 			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
 		}
-
 		length() {
 			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
 		}
-
 		manhattanLength() {
 			return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
 		}
-
 		normalize() {
 			return this.divideScalar(this.length() || 1);
 		}
-
 		setLength(length) {
 			return this.normalize().multiplyScalar(length);
 		}
-
 		lerp(v, alpha) {
 			this.x += (v.x - this.x) * alpha;
 			this.y += (v.y - this.y) * alpha;
@@ -2512,7 +2242,6 @@
 			this.w += (v.w - this.w) * alpha;
 			return this;
 		}
-
 		lerpVectors(v1, v2, alpha) {
 			this.x = v1.x + (v2.x - v1.x) * alpha;
 			this.y = v1.y + (v2.y - v1.y) * alpha;
@@ -2520,11 +2249,9 @@
 			this.w = v1.w + (v2.w - v1.w) * alpha;
 			return this;
 		}
-
 		equals(v) {
 			return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
 		}
-
 		fromArray(array, offset = 0) {
 			this.x = array[offset];
 			this.y = array[offset + 1];
@@ -2532,7 +2259,6 @@
 			this.w = array[offset + 3];
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			array[offset] = this.x;
 			array[offset + 1] = this.y;
@@ -2540,7 +2266,6 @@
 			array[offset + 3] = this.w;
 			return array;
 		}
-
 		fromBufferAttribute(attribute, index) {
 			this.x = attribute.getX(index);
 			this.y = attribute.getY(index);
@@ -2548,7 +2273,6 @@
 			this.w = attribute.getW(index);
 			return this;
 		}
-
 		random() {
 			this.x = Math.random();
 			this.y = Math.random();
@@ -2556,14 +2280,12 @@
 			this.w = Math.random();
 			return this;
 		}
-
 		*[Symbol.iterator]() {
 			yield this.x;
 			yield this.y;
 			yield this.z;
 			yield this.w;
 		}
-
 	}
 
 	/*
@@ -2571,7 +2293,6 @@
 	 * Texture parameters for an auto-generated target texture
 	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
 	*/
-
 	class WebGLRenderTarget extends EventDispatcher {
 		constructor(width = 1, height = 1, options = {}) {
 			super();
@@ -2598,7 +2319,6 @@
 			this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
 			this.samples = options.samples !== undefined ? options.samples : 0;
 		}
-
 		setSize(width, height, depth = 1) {
 			if (this.width !== width || this.height !== height || this.depth !== depth) {
 				this.width = width;
@@ -2609,22 +2329,21 @@
 				this.texture.image.depth = depth;
 				this.dispose();
 			}
-
 			this.viewport.set(0, 0, width, height);
 			this.scissor.set(0, 0, width, height);
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		copy(source) {
 			this.width = source.width;
 			this.height = source.height;
 			this.depth = source.depth;
 			this.viewport.copy(source.viewport);
 			this.texture = source.texture.clone();
-			this.texture.isRenderTargetTexture = true; // ensure image object is not shared, see #20328
+			this.texture.isRenderTargetTexture = true;
+
+			// ensure image object is not shared, see #20328
 
 			const image = Object.assign({}, source.texture.image);
 			this.texture.source = new Source(image);
@@ -2634,13 +2353,11 @@
 			this.samples = source.samples;
 			return this;
 		}
-
 		dispose() {
 			this.dispatchEvent({
 				type: 'dispose'
 			});
 		}
-
 	}
 
 	class DataArrayTexture extends Texture {
@@ -2660,7 +2377,6 @@
 			this.flipY = false;
 			this.unpackAlignment = 1;
 		}
-
 	}
 
 	class WebGLArrayRenderTarget extends WebGLRenderTarget {
@@ -2671,7 +2387,6 @@
 			this.texture = new DataArrayTexture(null, width, height, depth);
 			this.texture.isRenderTargetTexture = true;
 		}
-
 	}
 
 	class Data3DTexture extends Texture {
@@ -2683,6 +2398,7 @@
 			// 	texture.anisotropy = 16;
 			//
 			// See #14839
+
 			super(null);
 			this.isData3DTexture = true;
 			this.image = {
@@ -2698,7 +2414,6 @@
 			this.flipY = false;
 			this.unpackAlignment = 1;
 		}
-
 	}
 
 	class WebGL3DRenderTarget extends WebGLRenderTarget {
@@ -2709,7 +2424,6 @@
 			this.texture = new Data3DTexture(null, width, height, depth);
 			this.texture.isRenderTargetTexture = true;
 		}
-
 	}
 
 	class WebGLMultipleRenderTargets extends WebGLRenderTarget {
@@ -2718,33 +2432,27 @@
 			this.isWebGLMultipleRenderTargets = true;
 			const texture = this.texture;
 			this.texture = [];
-
 			for (let i = 0; i < count; i++) {
 				this.texture[i] = texture.clone();
 				this.texture[i].isRenderTargetTexture = true;
 			}
 		}
-
 		setSize(width, height, depth = 1) {
 			if (this.width !== width || this.height !== height || this.depth !== depth) {
 				this.width = width;
 				this.height = height;
 				this.depth = depth;
-
 				for (let i = 0, il = this.texture.length; i < il; i++) {
 					this.texture[i].image.width = width;
 					this.texture[i].image.height = height;
 					this.texture[i].image.depth = depth;
 				}
-
 				this.dispose();
 			}
-
 			this.viewport.set(0, 0, width, height);
 			this.scissor.set(0, 0, width, height);
 			return this;
 		}
-
 		copy(source) {
 			this.dispose();
 			this.width = source.width;
@@ -2756,15 +2464,12 @@
 			this.stencilBuffer = source.stencilBuffer;
 			if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
 			this.texture.length = 0;
-
 			for (let i = 0, il = source.texture.length; i < il; i++) {
 				this.texture[i] = source.texture[i].clone();
 				this.texture[i].isRenderTargetTexture = true;
 			}
-
 			return this;
 		}
-
 	}
 
 	class Quaternion {
@@ -2775,18 +2480,17 @@
 			this._z = z;
 			this._w = w;
 		}
-
 		static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
 			// fuzz-free, array-based Quaternion SLERP operation
+
 			let x0 = src0[srcOffset0 + 0],
-					y0 = src0[srcOffset0 + 1],
-					z0 = src0[srcOffset0 + 2],
-					w0 = src0[srcOffset0 + 3];
+				y0 = src0[srcOffset0 + 1],
+				z0 = src0[srcOffset0 + 2],
+				w0 = src0[srcOffset0 + 3];
 			const x1 = src1[srcOffset1 + 0],
-						y1 = src1[srcOffset1 + 1],
-						z1 = src1[srcOffset1 + 2],
-						w1 = src1[srcOffset1 + 3];
-
+				y1 = src1[srcOffset1 + 1],
+				z1 = src1[srcOffset1 + 2],
+				w1 = src1[srcOffset1 + 3];
 			if (t === 0) {
 				dst[dstOffset + 0] = x0;
 				dst[dstOffset + 1] = y0;
@@ -2794,7 +2498,6 @@
 				dst[dstOffset + 3] = w0;
 				return;
 			}
-
 			if (t === 1) {
 				dst[dstOffset + 0] = x1;
 				dst[dstOffset + 1] = y1;
@@ -2802,26 +2505,26 @@
 				dst[dstOffset + 3] = w1;
 				return;
 			}
-
 			if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
 				let s = 1 - t;
 				const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
-							dir = cos >= 0 ? 1 : -1,
-							sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:
+					dir = cos >= 0 ? 1 : -1,
+					sqrSin = 1 - cos * cos;
 
+				// Skip the Slerp for tiny steps to avoid numeric problems:
 				if (sqrSin > Number.EPSILON) {
 					const sin = Math.sqrt(sqrSin),
-								len = Math.atan2(sin, cos * dir);
+						len = Math.atan2(sin, cos * dir);
 					s = Math.sin(s * len) / sin;
 					t = Math.sin(t * len) / sin;
 				}
-
 				const tDir = t * dir;
 				x0 = x0 * s + x1 * tDir;
 				y0 = y0 * s + y1 * tDir;
 				z0 = z0 * s + z1 * tDir;
-				w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:
+				w0 = w0 * s + w1 * tDir;
 
+				// Normalize in case we just did a lerp:
 				if (s === 1 - t) {
 					const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
 					x0 *= f;
@@ -2830,13 +2533,11 @@
 					w0 *= f;
 				}
 			}
-
 			dst[dstOffset] = x0;
 			dst[dstOffset + 1] = y0;
 			dst[dstOffset + 2] = z0;
 			dst[dstOffset + 3] = w0;
 		}
-
 		static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
 			const x0 = src0[srcOffset0];
 			const y0 = src0[srcOffset0 + 1];
@@ -2852,78 +2553,60 @@
 			dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
 			return dst;
 		}
-
 		get x() {
 			return this._x;
 		}
-
 		set x(value) {
 			this._x = value;
-
 			this._onChangeCallback();
 		}
-
 		get y() {
 			return this._y;
 		}
-
 		set y(value) {
 			this._y = value;
-
 			this._onChangeCallback();
 		}
-
 		get z() {
 			return this._z;
 		}
-
 		set z(value) {
 			this._z = value;
-
 			this._onChangeCallback();
 		}
-
 		get w() {
 			return this._w;
 		}
-
 		set w(value) {
 			this._w = value;
-
 			this._onChangeCallback();
 		}
-
 		set(x, y, z, w) {
 			this._x = x;
 			this._y = y;
 			this._z = z;
 			this._w = w;
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		clone() {
 			return new this.constructor(this._x, this._y, this._z, this._w);
 		}
-
 		copy(quaternion) {
 			this._x = quaternion.x;
 			this._y = quaternion.y;
 			this._z = quaternion.z;
 			this._w = quaternion.w;
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		setFromEuler(euler, update) {
 			const x = euler._x,
-						y = euler._y,
-						z = euler._z,
-						order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/
+				y = euler._y,
+				z = euler._z,
+				order = euler._order;
+
+			// http://www.mathworks.com/matlabcentral/fileexchange/
 			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
 			//	content/SpinCalc.m
 
@@ -2935,7 +2618,6 @@
 			const s1 = sin(x / 2);
 			const s2 = sin(y / 2);
 			const s3 = sin(z / 2);
-
 			switch (order) {
 				case 'XYZ':
 					this._x = s1 * c2 * c3 + c1 * s2 * s3;
@@ -2943,80 +2625,72 @@
 					this._z = c1 * c2 * s3 + s1 * s2 * c3;
 					this._w = c1 * c2 * c3 - s1 * s2 * s3;
 					break;
-
 				case 'YXZ':
 					this._x = s1 * c2 * c3 + c1 * s2 * s3;
 					this._y = c1 * s2 * c3 - s1 * c2 * s3;
 					this._z = c1 * c2 * s3 - s1 * s2 * c3;
 					this._w = c1 * c2 * c3 + s1 * s2 * s3;
 					break;
-
 				case 'ZXY':
 					this._x = s1 * c2 * c3 - c1 * s2 * s3;
 					this._y = c1 * s2 * c3 + s1 * c2 * s3;
 					this._z = c1 * c2 * s3 + s1 * s2 * c3;
 					this._w = c1 * c2 * c3 - s1 * s2 * s3;
 					break;
-
 				case 'ZYX':
 					this._x = s1 * c2 * c3 - c1 * s2 * s3;
 					this._y = c1 * s2 * c3 + s1 * c2 * s3;
 					this._z = c1 * c2 * s3 - s1 * s2 * c3;
 					this._w = c1 * c2 * c3 + s1 * s2 * s3;
 					break;
-
 				case 'YZX':
 					this._x = s1 * c2 * c3 + c1 * s2 * s3;
 					this._y = c1 * s2 * c3 + s1 * c2 * s3;
 					this._z = c1 * c2 * s3 - s1 * s2 * c3;
 					this._w = c1 * c2 * c3 - s1 * s2 * s3;
 					break;
-
 				case 'XZY':
 					this._x = s1 * c2 * c3 - c1 * s2 * s3;
 					this._y = c1 * s2 * c3 - s1 * c2 * s3;
 					this._z = c1 * c2 * s3 + s1 * s2 * c3;
 					this._w = c1 * c2 * c3 + s1 * s2 * s3;
 					break;
-
 				default:
 					console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);
 			}
-
 			if (update !== false) this._onChangeCallback();
 			return this;
 		}
-
 		setFromAxisAngle(axis, angle) {
 			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
+
 			// assumes axis is normalized
+
 			const halfAngle = angle / 2,
-						s = Math.sin(halfAngle);
+				s = Math.sin(halfAngle);
 			this._x = axis.x * s;
 			this._y = axis.y * s;
 			this._z = axis.z * s;
 			this._w = Math.cos(halfAngle);
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		setFromRotationMatrix(m) {
 			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
+
 			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
-			const te = m.elements,
-						m11 = te[0],
-						m12 = te[4],
-						m13 = te[8],
-						m21 = te[1],
-						m22 = te[5],
-						m23 = te[9],
-						m31 = te[2],
-						m32 = te[6],
-						m33 = te[10],
-						trace = m11 + m22 + m33;
 
+			const te = m.elements,
+				m11 = te[0],
+				m12 = te[4],
+				m13 = te[8],
+				m21 = te[1],
+				m22 = te[5],
+				m23 = te[9],
+				m31 = te[2],
+				m32 = te[6],
+				m33 = te[10],
+				trace = m11 + m22 + m33;
 			if (trace > 0) {
 				const s = 0.5 / Math.sqrt(trace + 1.0);
 				this._w = 0.25 / s;
@@ -3042,20 +2716,17 @@
 				this._y = (m23 + m32) / s;
 				this._z = 0.25 * s;
 			}
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		setFromUnitVectors(vFrom, vTo) {
 			// assumes direction vectors vFrom and vTo are normalized
-			let r = vFrom.dot(vTo) + 1;
 
+			let r = vFrom.dot(vTo) + 1;
 			if (r < Number.EPSILON) {
 				// vFrom and vTo point in opposite directions
-				r = 0;
 
+				r = 0;
 				if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
 					this._x = -vFrom.y;
 					this._y = vFrom.x;
@@ -3069,19 +2740,17 @@
 				}
 			} else {
 				// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
+
 				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
 				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
 				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
 				this._w = r;
 			}
-
 			return this.normalize();
 		}
-
 		angleTo(q) {
 			return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
 		}
-
 		rotateTowards(q, step) {
 			const angle = this.angleTo(q);
 			if (angle === 0) return this;
@@ -3089,41 +2758,32 @@
 			this.slerp(q, t);
 			return this;
 		}
-
 		identity() {
 			return this.set(0, 0, 0, 1);
 		}
-
 		invert() {
 			// quaternion is assumed to have unit length
+
 			return this.conjugate();
 		}
-
 		conjugate() {
 			this._x *= -1;
 			this._y *= -1;
 			this._z *= -1;
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		dot(v) {
 			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
 		}
-
 		lengthSq() {
 			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
 		}
-
 		length() {
 			return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
 		}
-
 		normalize() {
 			let l = this.length();
-
 			if (l === 0) {
 				this._x = 0;
 				this._y = 0;
@@ -3136,50 +2796,44 @@
 				this._z = this._z * l;
 				this._w = this._w * l;
 			}
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		multiply(q) {
 			return this.multiplyQuaternions(this, q);
 		}
-
 		premultiply(q) {
 			return this.multiplyQuaternions(q, this);
 		}
-
 		multiplyQuaternions(a, b) {
 			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
+
 			const qax = a._x,
-						qay = a._y,
-						qaz = a._z,
-						qaw = a._w;
+				qay = a._y,
+				qaz = a._z,
+				qaw = a._w;
 			const qbx = b._x,
-						qby = b._y,
-						qbz = b._z,
-						qbw = b._w;
+				qby = b._y,
+				qbz = b._z,
+				qbw = b._w;
 			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
 			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
 			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
 			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		slerp(qb, t) {
 			if (t === 0) return this;
 			if (t === 1) return this.copy(qb);
 			const x = this._x,
-						y = this._y,
-						z = this._z,
-						w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
+				y = this._y,
+				z = this._z,
+				w = this._w;
 
-			let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
+			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
 
+			let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
 			if (cosHalfTheta < 0) {
 				this._w = -qb._w;
 				this._x = -qb._x;
@@ -3189,7 +2843,6 @@
 			} else {
 				this.copy(qb);
 			}
-
 			if (cosHalfTheta >= 1.0) {
 				this._w = w;
 				this._x = x;
@@ -3197,9 +2850,7 @@
 				this._z = z;
 				return this;
 			}
-
 			const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
-
 			if (sqrSinHalfTheta <= Number.EPSILON) {
 				const s = 1 - t;
 				this._w = s * w + t * this._w;
@@ -3207,34 +2858,28 @@
 				this._y = s * y + t * this._y;
 				this._z = s * z + t * this._z;
 				this.normalize();
-
 				this._onChangeCallback();
-
 				return this;
 			}
-
 			const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
 			const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
 			const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
-						ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
+				ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
 			this._w = w * ratioA + this._w * ratioB;
 			this._x = x * ratioA + this._x * ratioB;
 			this._y = y * ratioA + this._y * ratioB;
 			this._z = z * ratioA + this._z * ratioB;
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		slerpQuaternions(qa, qb, t) {
 			return this.copy(qa).slerp(qb, t);
 		}
-
 		random() {
 			// Derived from http://planning.cs.uiuc.edu/node198.html
 			// Note, this source uses w, x, y, z ordering,
 			// so we swap the order below.
+
 			const u1 = Math.random();
 			const sqrt1u1 = Math.sqrt(1 - u1);
 			const sqrtu1 = Math.sqrt(u1);
@@ -3242,22 +2887,17 @@
 			const u3 = 2 * Math.PI * Math.random();
 			return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
 		}
-
 		equals(quaternion) {
 			return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
 		}
-
 		fromArray(array, offset = 0) {
 			this._x = array[offset];
 			this._y = array[offset + 1];
 			this._z = array[offset + 2];
 			this._w = array[offset + 3];
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			array[offset] = this._x;
 			array[offset + 1] = this._y;
@@ -3265,7 +2905,6 @@
 			array[offset + 3] = this._w;
 			return array;
 		}
-
 		fromBufferAttribute(attribute, index) {
 			this._x = attribute.getX(index);
 			this._y = attribute.getY(index);
@@ -3273,21 +2912,17 @@
 			this._w = attribute.getW(index);
 			return this;
 		}
-
 		_onChange(callback) {
 			this._onChangeCallback = callback;
 			return this;
 		}
-
 		_onChangeCallback() {}
-
 		*[Symbol.iterator]() {
 			yield this._x;
 			yield this._y;
 			yield this._z;
 			yield this._w;
 		}
-
 	}
 
 	class Vector3 {
@@ -3297,7 +2932,6 @@
 			this.y = y;
 			this.z = z;
 		}
-
 		set(x, y, z) {
 			if (z === undefined) z = this.z; // sprite.scale.set(x,y)
 
@@ -3306,174 +2940,144 @@
 			this.z = z;
 			return this;
 		}
-
 		setScalar(scalar) {
 			this.x = scalar;
 			this.y = scalar;
 			this.z = scalar;
 			return this;
 		}
-
 		setX(x) {
 			this.x = x;
 			return this;
 		}
-
 		setY(y) {
 			this.y = y;
 			return this;
 		}
-
 		setZ(z) {
 			this.z = z;
 			return this;
 		}
-
 		setComponent(index, value) {
 			switch (index) {
 				case 0:
 					this.x = value;
 					break;
-
 				case 1:
 					this.y = value;
 					break;
-
 				case 2:
 					this.z = value;
 					break;
-
 				default:
 					throw new Error('index is out of range: ' + index);
 			}
-
 			return this;
 		}
-
 		getComponent(index) {
 			switch (index) {
 				case 0:
 					return this.x;
-
 				case 1:
 					return this.y;
-
 				case 2:
 					return this.z;
-
 				default:
 					throw new Error('index is out of range: ' + index);
 			}
 		}
-
 		clone() {
 			return new this.constructor(this.x, this.y, this.z);
 		}
-
 		copy(v) {
 			this.x = v.x;
 			this.y = v.y;
 			this.z = v.z;
 			return this;
 		}
-
 		add(v) {
 			this.x += v.x;
 			this.y += v.y;
 			this.z += v.z;
 			return this;
 		}
-
 		addScalar(s) {
 			this.x += s;
 			this.y += s;
 			this.z += s;
 			return this;
 		}
-
 		addVectors(a, b) {
 			this.x = a.x + b.x;
 			this.y = a.y + b.y;
 			this.z = a.z + b.z;
 			return this;
 		}
-
 		addScaledVector(v, s) {
 			this.x += v.x * s;
 			this.y += v.y * s;
 			this.z += v.z * s;
 			return this;
 		}
-
 		sub(v) {
 			this.x -= v.x;
 			this.y -= v.y;
 			this.z -= v.z;
 			return this;
 		}
-
 		subScalar(s) {
 			this.x -= s;
 			this.y -= s;
 			this.z -= s;
 			return this;
 		}
-
 		subVectors(a, b) {
 			this.x = a.x - b.x;
 			this.y = a.y - b.y;
 			this.z = a.z - b.z;
 			return this;
 		}
-
 		multiply(v) {
 			this.x *= v.x;
 			this.y *= v.y;
 			this.z *= v.z;
 			return this;
 		}
-
 		multiplyScalar(scalar) {
 			this.x *= scalar;
 			this.y *= scalar;
 			this.z *= scalar;
 			return this;
 		}
-
 		multiplyVectors(a, b) {
 			this.x = a.x * b.x;
 			this.y = a.y * b.y;
 			this.z = a.z * b.z;
 			return this;
 		}
-
 		applyEuler(euler) {
 			return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
 		}
-
 		applyAxisAngle(axis, angle) {
 			return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
 		}
-
 		applyMatrix3(m) {
 			const x = this.x,
-						y = this.y,
-						z = this.z;
+				y = this.y,
+				z = this.z;
 			const e = m.elements;
 			this.x = e[0] * x + e[3] * y + e[6] * z;
 			this.y = e[1] * x + e[4] * y + e[7] * z;
 			this.z = e[2] * x + e[5] * y + e[8] * z;
 			return this;
 		}
-
 		applyNormalMatrix(m) {
 			return this.applyMatrix3(m).normalize();
 		}
-
 		applyMatrix4(m) {
 			const x = this.x,
-						y = this.y,
-						z = this.z;
+				y = this.y,
+				z = this.z;
 			const e = m.elements;
 			const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
 			this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
@@ -3481,230 +3085,205 @@
 			this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
 			return this;
 		}
-
 		applyQuaternion(q) {
 			const x = this.x,
-						y = this.y,
-						z = this.z;
+				y = this.y,
+				z = this.z;
 			const qx = q.x,
-						qy = q.y,
-						qz = q.z,
-						qw = q.w; // calculate quat * vector
+				qy = q.y,
+				qz = q.z,
+				qw = q.w;
+
+			// calculate quat * vector
 
 			const ix = qw * x + qy * z - qz * y;
 			const iy = qw * y + qz * x - qx * z;
 			const iz = qw * z + qx * y - qy * x;
-			const iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat
+			const iw = -qx * x - qy * y - qz * z;
+
+			// calculate result * inverse quat
 
 			this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
 			this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
 			this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
 			return this;
 		}
-
 		project(camera) {
 			return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
 		}
-
 		unproject(camera) {
 			return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
 		}
-
 		transformDirection(m) {
 			// input: THREE.Matrix4 affine matrix
 			// vector interpreted as a direction
+
 			const x = this.x,
-						y = this.y,
-						z = this.z;
+				y = this.y,
+				z = this.z;
 			const e = m.elements;
 			this.x = e[0] * x + e[4] * y + e[8] * z;
 			this.y = e[1] * x + e[5] * y + e[9] * z;
 			this.z = e[2] * x + e[6] * y + e[10] * z;
 			return this.normalize();
 		}
-
 		divide(v) {
 			this.x /= v.x;
 			this.y /= v.y;
 			this.z /= v.z;
 			return this;
 		}
-
 		divideScalar(scalar) {
 			return this.multiplyScalar(1 / scalar);
 		}
-
 		min(v) {
 			this.x = Math.min(this.x, v.x);
 			this.y = Math.min(this.y, v.y);
 			this.z = Math.min(this.z, v.z);
 			return this;
 		}
-
 		max(v) {
 			this.x = Math.max(this.x, v.x);
 			this.y = Math.max(this.y, v.y);
 			this.z = Math.max(this.z, v.z);
 			return this;
 		}
-
 		clamp(min, max) {
 			// assumes min < max, componentwise
+
 			this.x = Math.max(min.x, Math.min(max.x, this.x));
 			this.y = Math.max(min.y, Math.min(max.y, this.y));
 			this.z = Math.max(min.z, Math.min(max.z, this.z));
 			return this;
 		}
-
 		clampScalar(minVal, maxVal) {
 			this.x = Math.max(minVal, Math.min(maxVal, this.x));
 			this.y = Math.max(minVal, Math.min(maxVal, this.y));
 			this.z = Math.max(minVal, Math.min(maxVal, this.z));
 			return this;
 		}
-
 		clampLength(min, max) {
 			const length = this.length();
 			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
 		}
-
 		floor() {
 			this.x = Math.floor(this.x);
 			this.y = Math.floor(this.y);
 			this.z = Math.floor(this.z);
 			return this;
 		}
-
 		ceil() {
 			this.x = Math.ceil(this.x);
 			this.y = Math.ceil(this.y);
 			this.z = Math.ceil(this.z);
 			return this;
 		}
-
 		round() {
 			this.x = Math.round(this.x);
 			this.y = Math.round(this.y);
 			this.z = Math.round(this.z);
 			return this;
 		}
-
 		roundToZero() {
 			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
 			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
 			this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
 			return this;
 		}
-
 		negate() {
 			this.x = -this.x;
 			this.y = -this.y;
 			this.z = -this.z;
 			return this;
 		}
-
 		dot(v) {
 			return this.x * v.x + this.y * v.y + this.z * v.z;
-		} // TODO lengthSquared?
+		}
 
+		// TODO lengthSquared?
 
 		lengthSq() {
 			return this.x * this.x + this.y * this.y + this.z * this.z;
 		}
-
 		length() {
 			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
 		}
-
 		manhattanLength() {
 			return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
 		}
-
 		normalize() {
 			return this.divideScalar(this.length() || 1);
 		}
-
 		setLength(length) {
 			return this.normalize().multiplyScalar(length);
 		}
-
 		lerp(v, alpha) {
 			this.x += (v.x - this.x) * alpha;
 			this.y += (v.y - this.y) * alpha;
 			this.z += (v.z - this.z) * alpha;
 			return this;
 		}
-
 		lerpVectors(v1, v2, alpha) {
 			this.x = v1.x + (v2.x - v1.x) * alpha;
 			this.y = v1.y + (v2.y - v1.y) * alpha;
 			this.z = v1.z + (v2.z - v1.z) * alpha;
 			return this;
 		}
-
 		cross(v) {
 			return this.crossVectors(this, v);
 		}
-
 		crossVectors(a, b) {
 			const ax = a.x,
-						ay = a.y,
-						az = a.z;
+				ay = a.y,
+				az = a.z;
 			const bx = b.x,
-						by = b.y,
-						bz = b.z;
+				by = b.y,
+				bz = b.z;
 			this.x = ay * bz - az * by;
 			this.y = az * bx - ax * bz;
 			this.z = ax * by - ay * bx;
 			return this;
 		}
-
 		projectOnVector(v) {
 			const denominator = v.lengthSq();
 			if (denominator === 0) return this.set(0, 0, 0);
 			const scalar = v.dot(this) / denominator;
 			return this.copy(v).multiplyScalar(scalar);
 		}
-
 		projectOnPlane(planeNormal) {
 			_vector$c.copy(this).projectOnVector(planeNormal);
-
 			return this.sub(_vector$c);
 		}
-
 		reflect(normal) {
 			// reflect incident vector off plane orthogonal to normal
 			// normal is assumed to have unit length
+
 			return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
 		}
-
 		angleTo(v) {
 			const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
 			if (denominator === 0) return Math.PI / 2;
-			const theta = this.dot(v) / denominator; // clamp, to handle numerical problems
+			const theta = this.dot(v) / denominator;
+
+			// clamp, to handle numerical problems
 
 			return Math.acos(clamp(theta, -1, 1));
 		}
-
 		distanceTo(v) {
 			return Math.sqrt(this.distanceToSquared(v));
 		}
-
 		distanceToSquared(v) {
 			const dx = this.x - v.x,
-						dy = this.y - v.y,
-						dz = this.z - v.z;
+				dy = this.y - v.y,
+				dz = this.z - v.z;
 			return dx * dx + dy * dy + dz * dz;
 		}
-
 		manhattanDistanceTo(v) {
 			return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
 		}
-
 		setFromSpherical(s) {
 			return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
 		}
-
 		setFromSphericalCoords(radius, phi, theta) {
 			const sinPhiRadius = Math.sin(phi) * radius;
 			this.x = sinPhiRadius * Math.sin(theta);
@@ -3712,18 +3291,15 @@
 			this.z = sinPhiRadius * Math.cos(theta);
 			return this;
 		}
-
 		setFromCylindrical(c) {
 			return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
 		}
-
 		setFromCylindricalCoords(radius, theta, y) {
 			this.x = radius * Math.sin(theta);
 			this.y = y;
 			this.z = radius * Math.cos(theta);
 			return this;
 		}
-
 		setFromMatrixPosition(m) {
 			const e = m.elements;
 			this.x = e[12];
@@ -3731,7 +3307,6 @@
 			this.z = e[14];
 			return this;
 		}
-
 		setFromMatrixScale(m) {
 			const sx = this.setFromMatrixColumn(m, 0).length();
 			const sy = this.setFromMatrixColumn(m, 1).length();
@@ -3741,56 +3316,48 @@
 			this.z = sz;
 			return this;
 		}
-
 		setFromMatrixColumn(m, index) {
 			return this.fromArray(m.elements, index * 4);
 		}
-
 		setFromMatrix3Column(m, index) {
 			return this.fromArray(m.elements, index * 3);
 		}
-
 		setFromEuler(e) {
 			this.x = e._x;
 			this.y = e._y;
 			this.z = e._z;
 			return this;
 		}
-
 		equals(v) {
 			return v.x === this.x && v.y === this.y && v.z === this.z;
 		}
-
 		fromArray(array, offset = 0) {
 			this.x = array[offset];
 			this.y = array[offset + 1];
 			this.z = array[offset + 2];
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			array[offset] = this.x;
 			array[offset + 1] = this.y;
 			array[offset + 2] = this.z;
 			return array;
 		}
-
 		fromBufferAttribute(attribute, index) {
 			this.x = attribute.getX(index);
 			this.y = attribute.getY(index);
 			this.z = attribute.getZ(index);
 			return this;
 		}
-
 		random() {
 			this.x = Math.random();
 			this.y = Math.random();
 			this.z = Math.random();
 			return this;
 		}
-
 		randomDirection() {
 			// Derived from https://mathworld.wolfram.com/SpherePointPicking.html
+
 			const u = (Math.random() - 0.5) * 2;
 			const t = Math.random() * Math.PI * 2;
 			const f = Math.sqrt(1 - u ** 2);
@@ -3799,17 +3366,13 @@
 			this.z = u;
 			return this;
 		}
-
 		*[Symbol.iterator]() {
 			yield this.x;
 			yield this.y;
 			yield this.z;
 		}
-
 	}
-
 	const _vector$c = /*@__PURE__*/new Vector3();
-
 	const _quaternion$4 = /*@__PURE__*/new Quaternion();
 
 	class Box3 {
@@ -3818,13 +3381,11 @@
 			this.min = min;
 			this.max = max;
 		}
-
 		set(min, max) {
 			this.min.copy(min);
 			this.max.copy(max);
 			return this;
 		}
-
 		setFromArray(array) {
 			let minX = +Infinity;
 			let minY = +Infinity;
@@ -3832,7 +3393,6 @@
 			let maxX = -Infinity;
 			let maxY = -Infinity;
 			let maxZ = -Infinity;
-
 			for (let i = 0, l = array.length; i < l; i += 3) {
 				const x = array[i];
 				const y = array[i + 1];
@@ -3844,12 +3404,10 @@
 				if (y > maxY) maxY = y;
 				if (z > maxZ) maxZ = z;
 			}
-
 			this.min.set(minX, minY, minZ);
 			this.max.set(maxX, maxY, maxZ);
 			return this;
 		}
-
 		setFromBufferAttribute(attribute) {
 			let minX = +Infinity;
 			let minY = +Infinity;
@@ -3857,7 +3415,6 @@
 			let maxX = -Infinity;
 			let maxY = -Infinity;
 			let maxZ = -Infinity;
-
 			for (let i = 0, l = attribute.count; i < l; i++) {
 				const x = attribute.getX(i);
 				const y = attribute.getY(i);
@@ -3869,150 +3426,122 @@
 				if (y > maxY) maxY = y;
 				if (z > maxZ) maxZ = z;
 			}
-
 			this.min.set(minX, minY, minZ);
 			this.max.set(maxX, maxY, maxZ);
 			return this;
 		}
-
 		setFromPoints(points) {
 			this.makeEmpty();
-
 			for (let i = 0, il = points.length; i < il; i++) {
 				this.expandByPoint(points[i]);
 			}
-
 			return this;
 		}
-
 		setFromCenterAndSize(center, size) {
 			const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
-
 			this.min.copy(center).sub(halfSize);
 			this.max.copy(center).add(halfSize);
 			return this;
 		}
-
 		setFromObject(object, precise = false) {
 			this.makeEmpty();
 			return this.expandByObject(object, precise);
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		copy(box) {
 			this.min.copy(box.min);
 			this.max.copy(box.max);
 			return this;
 		}
-
 		makeEmpty() {
 			this.min.x = this.min.y = this.min.z = +Infinity;
 			this.max.x = this.max.y = this.max.z = -Infinity;
 			return this;
 		}
-
 		isEmpty() {
 			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
+
 			return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
 		}
-
 		getCenter(target) {
 			return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
 		}
-
 		getSize(target) {
 			return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
 		}
-
 		expandByPoint(point) {
 			this.min.min(point);
 			this.max.max(point);
 			return this;
 		}
-
 		expandByVector(vector) {
 			this.min.sub(vector);
 			this.max.add(vector);
 			return this;
 		}
-
 		expandByScalar(scalar) {
 			this.min.addScalar(-scalar);
 			this.max.addScalar(scalar);
 			return this;
 		}
-
 		expandByObject(object, precise = false) {
 			// Computes the world-axis-aligned bounding box of an object (including its children),
 			// accounting for both the object's, and children's, world transforms
+
 			object.updateWorldMatrix(false, false);
 			const geometry = object.geometry;
-
 			if (geometry !== undefined) {
 				if (precise && geometry.attributes != undefined && geometry.attributes.position !== undefined) {
 					const position = geometry.attributes.position;
-
 					for (let i = 0, l = position.count; i < l; i++) {
 						_vector$b.fromBufferAttribute(position, i).applyMatrix4(object.matrixWorld);
-
 						this.expandByPoint(_vector$b);
 					}
 				} else {
 					if (geometry.boundingBox === null) {
 						geometry.computeBoundingBox();
 					}
-
 					_box$3.copy(geometry.boundingBox);
-
 					_box$3.applyMatrix4(object.matrixWorld);
-
 					this.union(_box$3);
 				}
 			}
-
 			const children = object.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				this.expandByObject(children[i], precise);
 			}
-
 			return this;
 		}
-
 		containsPoint(point) {
 			return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
 		}
-
 		containsBox(box) {
 			return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
 		}
-
 		getParameter(point, target) {
 			// This can potentially have a divide by zero if the box
 			// has a size dimension of 0.
+
 			return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
 		}
-
 		intersectsBox(box) {
 			// using 6 splitting planes to rule out intersections.
 			return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
 		}
-
 		intersectsSphere(sphere) {
 			// Find the point on the AABB closest to the sphere center.
-			this.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.
+			this.clampPoint(sphere.center, _vector$b);
 
+			// If that point is inside the sphere, the AABB and sphere intersect.
 			return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
 		}
-
 		intersectsPlane(plane) {
 			// We compute the minimum and maximum dot product values. If those values
 			// are on the same side (back or front) of the plane, then there is no intersection.
-			let min, max;
 
+			let min, max;
 			if (plane.normal.x > 0) {
 				min = plane.normal.x * this.min.x;
 				max = plane.normal.x * this.max.x;
@@ -4020,7 +3549,6 @@
 				min = plane.normal.x * this.max.x;
 				max = plane.normal.x * this.min.x;
 			}
-
 			if (plane.normal.y > 0) {
 				min += plane.normal.y * this.min.y;
 				max += plane.normal.y * this.max.y;
@@ -4028,7 +3556,6 @@
 				min += plane.normal.y * this.max.y;
 				max += plane.normal.y * this.min.y;
 			}
-
 			if (plane.normal.z > 0) {
 				min += plane.normal.z * this.min.z;
 				max += plane.normal.z * this.max.z;
@@ -4036,418 +3563,318 @@
 				min += plane.normal.z * this.max.z;
 				max += plane.normal.z * this.min.z;
 			}
-
 			return min <= -plane.constant && max >= -plane.constant;
 		}
-
 		intersectsTriangle(triangle) {
 			if (this.isEmpty()) {
 				return false;
-			} // compute box center and extents
-
+			}
 
+			// compute box center and extents
 			this.getCenter(_center);
+			_extents.subVectors(this.max, _center);
 
-			_extents.subVectors(this.max, _center); // translate triangle to aabb origin
-
-
+			// translate triangle to aabb origin
 			_v0$2.subVectors(triangle.a, _center);
-
 			_v1$7.subVectors(triangle.b, _center);
+			_v2$4.subVectors(triangle.c, _center);
 
-			_v2$4.subVectors(triangle.c, _center); // compute edge vectors for triangle
-
-
+			// compute edge vectors for triangle
 			_f0.subVectors(_v1$7, _v0$2);
-
 			_f1.subVectors(_v2$4, _v1$7);
+			_f2.subVectors(_v0$2, _v2$4);
 
-			_f2.subVectors(_v0$2, _v2$4); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
+			// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
 			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
 			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
-
-
 			let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];
-
 			if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
 				return false;
-			} // test 3 face normals from the aabb
-
+			}
 
+			// test 3 face normals from the aabb
 			axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
-
 			if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
 				return false;
-			} // finally testing the face normal of the triangle
-			// use already existing triangle edge vectors here
-
+			}
 
+			// finally testing the face normal of the triangle
+			// use already existing triangle edge vectors here
 			_triangleNormal.crossVectors(_f0, _f1);
-
 			axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
 			return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
 		}
-
 		clampPoint(point, target) {
 			return target.copy(point).clamp(this.min, this.max);
 		}
-
 		distanceToPoint(point) {
 			const clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);
-
 			return clampedPoint.sub(point).length();
 		}
-
 		getBoundingSphere(target) {
 			this.getCenter(target.center);
 			target.radius = this.getSize(_vector$b).length() * 0.5;
 			return target;
 		}
-
 		intersect(box) {
 			this.min.max(box.min);
-			this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
+			this.max.min(box.max);
 
+			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
 			if (this.isEmpty()) this.makeEmpty();
 			return this;
 		}
-
 		union(box) {
 			this.min.min(box.min);
 			this.max.max(box.max);
 			return this;
 		}
-
 		applyMatrix4(matrix) {
 			// transform of empty box is an empty box.
-			if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below
+			if (this.isEmpty()) return this;
 
+			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
 			_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
-
-
 			_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
-
-
 			_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
-
-
 			_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
-
-
 			_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
-
-
 			_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
-
-
 			_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
-
-
 			_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111
 
-
 			this.setFromPoints(_points);
 			return this;
 		}
-
 		translate(offset) {
 			this.min.add(offset);
 			this.max.add(offset);
 			return this;
 		}
-
 		equals(box) {
 			return box.min.equals(this.min) && box.max.equals(this.max);
 		}
-
 	}
-
 	const _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];
-
 	const _vector$b = /*@__PURE__*/new Vector3();
+	const _box$3 = /*@__PURE__*/new Box3();
 
-	const _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices
-
+	// triangle centered vertices
 
 	const _v0$2 = /*@__PURE__*/new Vector3();
-
 	const _v1$7 = /*@__PURE__*/new Vector3();
+	const _v2$4 = /*@__PURE__*/new Vector3();
 
-	const _v2$4 = /*@__PURE__*/new Vector3(); // triangle edge vectors
-
+	// triangle edge vectors
 
 	const _f0 = /*@__PURE__*/new Vector3();
-
 	const _f1 = /*@__PURE__*/new Vector3();
-
 	const _f2 = /*@__PURE__*/new Vector3();
-
 	const _center = /*@__PURE__*/new Vector3();
-
 	const _extents = /*@__PURE__*/new Vector3();
-
 	const _triangleNormal = /*@__PURE__*/new Vector3();
-
 	const _testAxis = /*@__PURE__*/new Vector3();
-
 	function satForAxes(axes, v0, v1, v2, extents) {
 		for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
-			_testAxis.fromArray(axes, i); // project the aabb onto the separating axis
-
-
-			const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the separating axis
-
+			_testAxis.fromArray(axes, i);
+			// project the aabb onto the separating axis
+			const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
+			// project all 3 vertices of the triangle onto the separating axis
 			const p0 = v0.dot(_testAxis);
 			const p1 = v1.dot(_testAxis);
-			const p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r
-
+			const p2 = v2.dot(_testAxis);
+			// actual test, basically see if either of the most extreme of the triangle points intersects r
 			if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
 				// points of the projected triangle are outside the projected half-length of the aabb
 				// the axis is separating and we can exit
 				return false;
 			}
 		}
-
 		return true;
 	}
 
 	const _box$2 = /*@__PURE__*/new Box3();
-
 	const _v1$6 = /*@__PURE__*/new Vector3();
-
 	const _v2$3 = /*@__PURE__*/new Vector3();
-
 	class Sphere {
 		constructor(center = new Vector3(), radius = -1) {
 			this.center = center;
 			this.radius = radius;
 		}
-
 		set(center, radius) {
 			this.center.copy(center);
 			this.radius = radius;
 			return this;
 		}
-
 		setFromPoints(points, optionalCenter) {
 			const center = this.center;
-
 			if (optionalCenter !== undefined) {
 				center.copy(optionalCenter);
 			} else {
 				_box$2.setFromPoints(points).getCenter(center);
 			}
-
 			let maxRadiusSq = 0;
-
 			for (let i = 0, il = points.length; i < il; i++) {
 				maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
 			}
-
 			this.radius = Math.sqrt(maxRadiusSq);
 			return this;
 		}
-
 		copy(sphere) {
 			this.center.copy(sphere.center);
 			this.radius = sphere.radius;
 			return this;
 		}
-
 		isEmpty() {
 			return this.radius < 0;
 		}
-
 		makeEmpty() {
 			this.center.set(0, 0, 0);
 			this.radius = -1;
 			return this;
 		}
-
 		containsPoint(point) {
 			return point.distanceToSquared(this.center) <= this.radius * this.radius;
 		}
-
 		distanceToPoint(point) {
 			return point.distanceTo(this.center) - this.radius;
 		}
-
 		intersectsSphere(sphere) {
 			const radiusSum = this.radius + sphere.radius;
 			return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
 		}
-
 		intersectsBox(box) {
 			return box.intersectsSphere(this);
 		}
-
 		intersectsPlane(plane) {
 			return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
 		}
-
 		clampPoint(point, target) {
 			const deltaLengthSq = this.center.distanceToSquared(point);
 			target.copy(point);
-
 			if (deltaLengthSq > this.radius * this.radius) {
 				target.sub(this.center).normalize();
 				target.multiplyScalar(this.radius).add(this.center);
 			}
-
 			return target;
 		}
-
 		getBoundingBox(target) {
 			if (this.isEmpty()) {
 				// Empty sphere produces empty bounding box
 				target.makeEmpty();
 				return target;
 			}
-
 			target.set(this.center, this.center);
 			target.expandByScalar(this.radius);
 			return target;
 		}
-
 		applyMatrix4(matrix) {
 			this.center.applyMatrix4(matrix);
 			this.radius = this.radius * matrix.getMaxScaleOnAxis();
 			return this;
 		}
-
 		translate(offset) {
 			this.center.add(offset);
 			return this;
 		}
-
 		expandByPoint(point) {
 			if (this.isEmpty()) {
 				this.center.copy(point);
 				this.radius = 0;
 				return this;
 			}
-
 			_v1$6.subVectors(point, this.center);
-
 			const lengthSq = _v1$6.lengthSq();
-
 			if (lengthSq > this.radius * this.radius) {
 				// calculate the minimal sphere
+
 				const length = Math.sqrt(lengthSq);
 				const delta = (length - this.radius) * 0.5;
 				this.center.addScaledVector(_v1$6, delta / length);
 				this.radius += delta;
 			}
-
 			return this;
 		}
-
 		union(sphere) {
 			if (sphere.isEmpty()) {
 				return this;
 			}
-
 			if (this.isEmpty()) {
 				this.copy(sphere);
 				return this;
 			}
-
 			if (this.center.equals(sphere.center) === true) {
 				this.radius = Math.max(this.radius, sphere.radius);
 			} else {
 				_v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
-
 				this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
 				this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
 			}
-
 			return this;
 		}
-
 		equals(sphere) {
 			return sphere.center.equals(this.center) && sphere.radius === this.radius;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	const _vector$a = /*@__PURE__*/new Vector3();
-
 	const _segCenter = /*@__PURE__*/new Vector3();
-
 	const _segDir = /*@__PURE__*/new Vector3();
-
 	const _diff = /*@__PURE__*/new Vector3();
-
 	const _edge1 = /*@__PURE__*/new Vector3();
-
 	const _edge2 = /*@__PURE__*/new Vector3();
-
 	const _normal$1 = /*@__PURE__*/new Vector3();
-
 	class Ray {
 		constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
 			this.origin = origin;
 			this.direction = direction;
 		}
-
 		set(origin, direction) {
 			this.origin.copy(origin);
 			this.direction.copy(direction);
 			return this;
 		}
-
 		copy(ray) {
 			this.origin.copy(ray.origin);
 			this.direction.copy(ray.direction);
 			return this;
 		}
-
 		at(t, target) {
 			return target.copy(this.direction).multiplyScalar(t).add(this.origin);
 		}
-
 		lookAt(v) {
 			this.direction.copy(v).sub(this.origin).normalize();
 			return this;
 		}
-
 		recast(t) {
 			this.origin.copy(this.at(t, _vector$a));
 			return this;
 		}
-
 		closestPointToPoint(point, target) {
 			target.subVectors(point, this.origin);
 			const directionDistance = target.dot(this.direction);
-
 			if (directionDistance < 0) {
 				return target.copy(this.origin);
 			}
-
 			return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
 		}
-
 		distanceToPoint(point) {
 			return Math.sqrt(this.distanceSqToPoint(point));
 		}
-
 		distanceSqToPoint(point) {
-			const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray
+			const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
 
+			// point behind the ray
 
 			if (directionDistance < 0) {
 				return this.origin.distanceToSquared(point);
 			}
-
 			_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
-
 			return _vector$a.distanceToSquared(point);
 		}
-
 		distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
 			// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
 			// It returns the min distance between the ray and the segment
@@ -4455,47 +3882,43 @@
 			// It can also set two optional targets :
 			// - The closest point on the ray
 			// - The closest point on the segment
-			_segCenter.copy(v0).add(v1).multiplyScalar(0.5);
 
+			_segCenter.copy(v0).add(v1).multiplyScalar(0.5);
 			_segDir.copy(v1).sub(v0).normalize();
-
 			_diff.copy(this.origin).sub(_segCenter);
-
 			const segExtent = v0.distanceTo(v1) * 0.5;
 			const a01 = -this.direction.dot(_segDir);
-
 			const b0 = _diff.dot(this.direction);
-
 			const b1 = -_diff.dot(_segDir);
-
 			const c = _diff.lengthSq();
-
 			const det = Math.abs(1 - a01 * a01);
 			let s0, s1, sqrDist, extDet;
-
 			if (det > 0) {
 				// The ray and segment are not parallel.
+
 				s0 = a01 * b1 - b0;
 				s1 = a01 * b0 - b1;
 				extDet = segExtent * det;
-
 				if (s0 >= 0) {
 					if (s1 >= -extDet) {
 						if (s1 <= extDet) {
 							// region 0
 							// Minimum at interior points of ray and segment.
+
 							const invDet = 1 / det;
 							s0 *= invDet;
 							s1 *= invDet;
 							sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
 						} else {
 							// region 1
+
 							s1 = segExtent;
 							s0 = Math.max(0, -(a01 * s1 + b0));
 							sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
 						}
 					} else {
 						// region 5
+
 						s1 = -segExtent;
 						s0 = Math.max(0, -(a01 * s1 + b0));
 						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
@@ -4503,16 +3926,19 @@
 				} else {
 					if (s1 <= -extDet) {
 						// region 4
+
 						s0 = Math.max(0, -(-a01 * segExtent + b0));
 						s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
 						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
 					} else if (s1 <= extDet) {
 						// region 3
+
 						s0 = 0;
 						s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
 						sqrDist = s1 * (s1 + 2 * b1) + c;
 					} else {
 						// region 2
+
 						s0 = Math.max(0, -(a01 * segExtent + b0));
 						s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
 						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
@@ -4520,102 +3946,94 @@
 				}
 			} else {
 				// Ray and segment are parallel.
+
 				s1 = a01 > 0 ? -segExtent : segExtent;
 				s0 = Math.max(0, -(a01 * s1 + b0));
 				sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
 			}
-
 			if (optionalPointOnRay) {
 				optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
 			}
-
 			if (optionalPointOnSegment) {
 				optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
 			}
-
 			return sqrDist;
 		}
-
 		intersectSphere(sphere, target) {
 			_vector$a.subVectors(sphere.center, this.origin);
-
 			const tca = _vector$a.dot(this.direction);
-
 			const d2 = _vector$a.dot(_vector$a) - tca * tca;
 			const radius2 = sphere.radius * sphere.radius;
 			if (d2 > radius2) return null;
-			const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere
+			const thc = Math.sqrt(radius2 - d2);
 
-			const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere
+			// t0 = first intersect point - entrance on front of sphere
+			const t0 = tca - thc;
 
-			const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null
+			// t1 = second intersect point - exit point on back of sphere
+			const t1 = tca + thc;
 
-			if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:
+			// test to see if both t0 and t1 are behind the ray - if so, return null
+			if (t0 < 0 && t1 < 0) return null;
+
+			// test to see if t0 is behind the ray:
 			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
 			// in order to always return an intersect point that is in front of the ray.
+			if (t0 < 0) return this.at(t1, target);
 
-			if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0
-
+			// else t0 is in front of the ray, so return the first collision point scaled by t0
 			return this.at(t0, target);
 		}
-
 		intersectsSphere(sphere) {
 			return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
 		}
-
 		distanceToPlane(plane) {
 			const denominator = plane.normal.dot(this.direction);
-
 			if (denominator === 0) {
 				// line is coplanar, return origin
 				if (plane.distanceToPoint(this.origin) === 0) {
 					return 0;
-				} // Null is preferable to undefined since undefined means.... it is undefined
+				}
 
+				// Null is preferable to undefined since undefined means.... it is undefined
 
 				return null;
 			}
+			const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
 
-			const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane
+			// Return if the ray never intersects the plane
 
 			return t >= 0 ? t : null;
 		}
-
 		intersectPlane(plane, target) {
 			const t = this.distanceToPlane(plane);
-
 			if (t === null) {
 				return null;
 			}
-
 			return this.at(t, target);
 		}
-
 		intersectsPlane(plane) {
 			// check if the ray lies on the plane first
-			const distToPoint = plane.distanceToPoint(this.origin);
 
+			const distToPoint = plane.distanceToPoint(this.origin);
 			if (distToPoint === 0) {
 				return true;
 			}
-
 			const denominator = plane.normal.dot(this.direction);
-
 			if (denominator * distToPoint < 0) {
 				return true;
-			} // ray origin is behind the plane (and is pointing behind it)
+			}
 
+			// ray origin is behind the plane (and is pointing behind it)
 
 			return false;
 		}
-
 		intersectBox(box, target) {
 			let tmin, tmax, tymin, tymax, tzmin, tzmax;
 			const invdirx = 1 / this.direction.x,
-						invdiry = 1 / this.direction.y,
-						invdirz = 1 / this.direction.z;
+				invdiry = 1 / this.direction.y,
+				invdirz = 1 / this.direction.z;
 			const origin = this.origin;
-
 			if (invdirx >= 0) {
 				tmin = (box.min.x - origin.x) * invdirx;
 				tmax = (box.max.x - origin.x) * invdirx;
@@ -4623,7 +4041,6 @@
 				tmin = (box.max.x - origin.x) * invdirx;
 				tmax = (box.min.x - origin.x) * invdirx;
 			}
-
 			if (invdiry >= 0) {
 				tymin = (box.min.y - origin.y) * invdiry;
 				tymax = (box.max.y - origin.y) * invdiry;
@@ -4631,11 +4048,9 @@
 				tymin = (box.max.y - origin.y) * invdiry;
 				tymax = (box.min.y - origin.y) * invdiry;
 			}
-
 			if (tmin > tymax || tymin > tmax) return null;
 			if (tymin > tmin || isNaN(tmin)) tmin = tymin;
 			if (tymax < tmax || isNaN(tmax)) tmax = tymax;
-
 			if (invdirz >= 0) {
 				tzmin = (box.min.z - origin.z) * invdirz;
 				tzmax = (box.max.z - origin.z) * invdirz;
@@ -4643,36 +4058,34 @@
 				tzmin = (box.max.z - origin.z) * invdirz;
 				tzmax = (box.min.z - origin.z) * invdirz;
 			}
-
 			if (tmin > tzmax || tzmin > tmax) return null;
 			if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
-			if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)
+			if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
+
+			//return point closest to the ray (positive side)
 
 			if (tmax < 0) return null;
 			return this.at(tmin >= 0 ? tmin : tmax, target);
 		}
-
 		intersectsBox(box) {
 			return this.intersectBox(box, _vector$a) !== null;
 		}
-
 		intersectTriangle(a, b, c, backfaceCulling, target) {
 			// Compute the offset origin, edges, and normal.
+
 			// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
-			_edge1.subVectors(b, a);
 
+			_edge1.subVectors(b, a);
 			_edge2.subVectors(c, a);
+			_normal$1.crossVectors(_edge1, _edge2);
 
-			_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
+			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
 			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
 			//	 |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
 			//	 |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
 			//	 |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
-
-
 			let DdN = this.direction.dot(_normal$1);
 			let sign;
-
 			if (DdN > 0) {
 				if (backfaceCulling) return null;
 				sign = 1;
@@ -4682,52 +4095,47 @@
 			} else {
 				return null;
 			}
-
 			_diff.subVectors(this.origin, a);
+			const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
 
-			const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection
-
+			// b1 < 0, no intersection
 			if (DdQxE2 < 0) {
 				return null;
 			}
+			const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
 
-			const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection
-
+			// b2 < 0, no intersection
 			if (DdE1xQ < 0) {
 				return null;
-			} // b1+b2 > 1, no intersection
-
+			}
 
+			// b1+b2 > 1, no intersection
 			if (DdQxE2 + DdE1xQ > DdN) {
 				return null;
-			} // Line intersects triangle, check if ray does.
-
-
-			const QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection
+			}
 
+			// Line intersects triangle, check if ray does.
+			const QdN = -sign * _diff.dot(_normal$1);
 
+			// t < 0, no intersection
 			if (QdN < 0) {
 				return null;
-			} // Ray intersects triangle.
-
+			}
 
+			// Ray intersects triangle.
 			return this.at(QdN / DdN, target);
 		}
-
 		applyMatrix4(matrix4) {
 			this.origin.applyMatrix4(matrix4);
 			this.direction.transformDirection(matrix4);
 			return this;
 		}
-
 		equals(ray) {
 			return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	class Matrix4 {
@@ -4735,7 +4143,6 @@
 			Matrix4.prototype.isMatrix4 = true;
 			this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
 		}
-
 		set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
 			const te = this.elements;
 			te[0] = n11;
@@ -4756,16 +4163,13 @@
 			te[15] = n44;
 			return this;
 		}
-
 		identity() {
 			this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		clone() {
 			return new Matrix4().fromArray(this.elements);
 		}
-
 		copy(m) {
 			const te = this.elements;
 			const me = m.elements;
@@ -4787,45 +4191,37 @@
 			te[15] = me[15];
 			return this;
 		}
-
 		copyPosition(m) {
 			const te = this.elements,
-						me = m.elements;
+				me = m.elements;
 			te[12] = me[12];
 			te[13] = me[13];
 			te[14] = me[14];
 			return this;
 		}
-
 		setFromMatrix3(m) {
 			const me = m.elements;
 			this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		extractBasis(xAxis, yAxis, zAxis) {
 			xAxis.setFromMatrixColumn(this, 0);
 			yAxis.setFromMatrixColumn(this, 1);
 			zAxis.setFromMatrixColumn(this, 2);
 			return this;
 		}
-
 		makeBasis(xAxis, yAxis, zAxis) {
 			this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		extractRotation(m) {
 			// this method does not support reflection matrices
+
 			const te = this.elements;
 			const me = m.elements;
-
 			const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
-
 			const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
-
 			const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
-
 			te[0] = me[0] * scaleX;
 			te[1] = me[1] * scaleX;
 			te[2] = me[2] * scaleX;
@@ -4844,24 +4240,22 @@
 			te[15] = 1;
 			return this;
 		}
-
 		makeRotationFromEuler(euler) {
 			const te = this.elements;
 			const x = euler.x,
-						y = euler.y,
-						z = euler.z;
+				y = euler.y,
+				z = euler.z;
 			const a = Math.cos(x),
-						b = Math.sin(x);
+				b = Math.sin(x);
 			const c = Math.cos(y),
-						d = Math.sin(y);
+				d = Math.sin(y);
 			const e = Math.cos(z),
-						f = Math.sin(z);
-
+				f = Math.sin(z);
 			if (euler.order === 'XYZ') {
 				const ae = a * e,
-							af = a * f,
-							be = b * e,
-							bf = b * f;
+					af = a * f,
+					be = b * e,
+					bf = b * f;
 				te[0] = c * e;
 				te[4] = -c * f;
 				te[8] = d;
@@ -4873,9 +4267,9 @@
 				te[10] = a * c;
 			} else if (euler.order === 'YXZ') {
 				const ce = c * e,
-							cf = c * f,
-							de = d * e,
-							df = d * f;
+					cf = c * f,
+					de = d * e,
+					df = d * f;
 				te[0] = ce + df * b;
 				te[4] = de * b - cf;
 				te[8] = a * d;
@@ -4887,9 +4281,9 @@
 				te[10] = a * c;
 			} else if (euler.order === 'ZXY') {
 				const ce = c * e,
-							cf = c * f,
-							de = d * e,
-							df = d * f;
+					cf = c * f,
+					de = d * e,
+					df = d * f;
 				te[0] = ce - df * b;
 				te[4] = -a * f;
 				te[8] = de + cf * b;
@@ -4901,9 +4295,9 @@
 				te[10] = a * c;
 			} else if (euler.order === 'ZYX') {
 				const ae = a * e,
-							af = a * f,
-							be = b * e,
-							bf = b * f;
+					af = a * f,
+					be = b * e,
+					bf = b * f;
 				te[0] = c * e;
 				te[4] = be * d - af;
 				te[8] = ae * d + bf;
@@ -4915,9 +4309,9 @@
 				te[10] = a * c;
 			} else if (euler.order === 'YZX') {
 				const ac = a * c,
-							ad = a * d,
-							bc = b * c,
-							bd = b * d;
+					ad = a * d,
+					bc = b * c,
+					bd = b * d;
 				te[0] = c * e;
 				te[4] = bd - ac * f;
 				te[8] = bc * f + ad;
@@ -4929,9 +4323,9 @@
 				te[10] = ac - bd * f;
 			} else if (euler.order === 'XZY') {
 				const ac = a * c,
-							ad = a * d,
-							bc = b * c,
-							bd = b * d;
+					ad = a * d,
+					bc = b * c,
+					bd = b * d;
 				te[0] = c * e;
 				te[4] = -f;
 				te[8] = d * e;
@@ -4941,55 +4335,46 @@
 				te[2] = bc * f - ad;
 				te[6] = b * e;
 				te[10] = bd * f + ac;
-			} // bottom row
-
+			}
 
+			// bottom row
 			te[3] = 0;
 			te[7] = 0;
-			te[11] = 0; // last column
+			te[11] = 0;
 
+			// last column
 			te[12] = 0;
 			te[13] = 0;
 			te[14] = 0;
 			te[15] = 1;
 			return this;
 		}
-
 		makeRotationFromQuaternion(q) {
 			return this.compose(_zero, q, _one);
 		}
-
 		lookAt(eye, target, up) {
 			const te = this.elements;
-
 			_z.subVectors(eye, target);
-
 			if (_z.lengthSq() === 0) {
 				// eye and target are in the same position
+
 				_z.z = 1;
 			}
-
 			_z.normalize();
-
 			_x.crossVectors(up, _z);
-
 			if (_x.lengthSq() === 0) {
 				// up and z are parallel
+
 				if (Math.abs(up.z) === 1) {
 					_z.x += 0.0001;
 				} else {
 					_z.z += 0.0001;
 				}
-
 				_z.normalize();
-
 				_x.crossVectors(up, _z);
 			}
-
 			_x.normalize();
-
 			_y.crossVectors(_z, _x);
-
 			te[0] = _x.x;
 			te[4] = _y.x;
 			te[8] = _z.x;
@@ -5001,51 +4386,48 @@
 			te[10] = _z.z;
 			return this;
 		}
-
 		multiply(m) {
 			return this.multiplyMatrices(this, m);
 		}
-
 		premultiply(m) {
 			return this.multiplyMatrices(m, this);
 		}
-
 		multiplyMatrices(a, b) {
 			const ae = a.elements;
 			const be = b.elements;
 			const te = this.elements;
 			const a11 = ae[0],
-						a12 = ae[4],
-						a13 = ae[8],
-						a14 = ae[12];
+				a12 = ae[4],
+				a13 = ae[8],
+				a14 = ae[12];
 			const a21 = ae[1],
-						a22 = ae[5],
-						a23 = ae[9],
-						a24 = ae[13];
+				a22 = ae[5],
+				a23 = ae[9],
+				a24 = ae[13];
 			const a31 = ae[2],
-						a32 = ae[6],
-						a33 = ae[10],
-						a34 = ae[14];
+				a32 = ae[6],
+				a33 = ae[10],
+				a34 = ae[14];
 			const a41 = ae[3],
-						a42 = ae[7],
-						a43 = ae[11],
-						a44 = ae[15];
+				a42 = ae[7],
+				a43 = ae[11],
+				a44 = ae[15];
 			const b11 = be[0],
-						b12 = be[4],
-						b13 = be[8],
-						b14 = be[12];
+				b12 = be[4],
+				b13 = be[8],
+				b14 = be[12];
 			const b21 = be[1],
-						b22 = be[5],
-						b23 = be[9],
-						b24 = be[13];
+				b22 = be[5],
+				b23 = be[9],
+				b24 = be[13];
 			const b31 = be[2],
-						b32 = be[6],
-						b33 = be[10],
-						b34 = be[14];
+				b32 = be[6],
+				b33 = be[10],
+				b34 = be[14];
 			const b41 = be[3],
-						b42 = be[7],
-						b43 = be[11],
-						b44 = be[15];
+				b42 = be[7],
+				b43 = be[11],
+				b44 = be[15];
 			te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
 			te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
 			te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
@@ -5064,7 +4446,6 @@
 			te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
 			return this;
 		}
-
 		multiplyScalar(s) {
 			const te = this.elements;
 			te[0] *= s;
@@ -5085,30 +4466,30 @@
 			te[15] *= s;
 			return this;
 		}
-
 		determinant() {
 			const te = this.elements;
 			const n11 = te[0],
-						n12 = te[4],
-						n13 = te[8],
-						n14 = te[12];
+				n12 = te[4],
+				n13 = te[8],
+				n14 = te[12];
 			const n21 = te[1],
-						n22 = te[5],
-						n23 = te[9],
-						n24 = te[13];
+				n22 = te[5],
+				n23 = te[9],
+				n24 = te[13];
 			const n31 = te[2],
-						n32 = te[6],
-						n33 = te[10],
-						n34 = te[14];
+				n32 = te[6],
+				n33 = te[10],
+				n34 = te[14];
 			const n41 = te[3],
-						n42 = te[7],
-						n43 = te[11],
-						n44 = te[15]; //TODO: make this more efficient
+				n42 = te[7],
+				n43 = te[11],
+				n44 = te[15];
+
+			//TODO: make this more efficient
 			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
 
 			return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
 		}
-
 		transpose() {
 			const te = this.elements;
 			let tmp;
@@ -5132,10 +4513,8 @@
 			te[14] = tmp;
 			return this;
 		}
-
 		setPosition(x, y, z) {
 			const te = this.elements;
-
 			if (x.isVector3) {
 				te[12] = x.x;
 				te[13] = x.y;
@@ -5145,33 +4524,31 @@
 				te[13] = y;
 				te[14] = z;
 			}
-
 			return this;
 		}
-
 		invert() {
 			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
 			const te = this.elements,
-						n11 = te[0],
-						n21 = te[1],
-						n31 = te[2],
-						n41 = te[3],
-						n12 = te[4],
-						n22 = te[5],
-						n32 = te[6],
-						n42 = te[7],
-						n13 = te[8],
-						n23 = te[9],
-						n33 = te[10],
-						n43 = te[11],
-						n14 = te[12],
-						n24 = te[13],
-						n34 = te[14],
-						n44 = te[15],
-						t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
-						t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
-						t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
-						t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
+				n11 = te[0],
+				n21 = te[1],
+				n31 = te[2],
+				n41 = te[3],
+				n12 = te[4],
+				n22 = te[5],
+				n32 = te[6],
+				n42 = te[7],
+				n13 = te[8],
+				n23 = te[9],
+				n33 = te[10],
+				n43 = te[11],
+				n14 = te[12],
+				n24 = te[13],
+				n34 = te[14],
+				n44 = te[15],
+				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
+				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
+				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
+				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
 			const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
 			if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
 			const detInv = 1 / det;
@@ -5193,12 +4570,11 @@
 			te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
 			return this;
 		}
-
 		scale(v) {
 			const te = this.elements;
 			const x = v.x,
-						y = v.y,
-						z = v.z;
+				y = v.y,
+				z = v.z;
 			te[0] *= x;
 			te[4] *= y;
 			te[8] *= z;
@@ -5213,7 +4589,6 @@
 			te[11] *= z;
 			return this;
 		}
-
 		getMaxScaleOnAxis() {
 			const te = this.elements;
 			const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
@@ -5221,78 +4596,71 @@
 			const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
 			return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
 		}
-
 		makeTranslation(x, y, z) {
 			this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
 			return this;
 		}
-
 		makeRotationX(theta) {
 			const c = Math.cos(theta),
-						s = Math.sin(theta);
+				s = Math.sin(theta);
 			this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		makeRotationY(theta) {
 			const c = Math.cos(theta),
-						s = Math.sin(theta);
+				s = Math.sin(theta);
 			this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		makeRotationZ(theta) {
 			const c = Math.cos(theta),
-						s = Math.sin(theta);
+				s = Math.sin(theta);
 			this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		makeRotationAxis(axis, angle) {
 			// Based on http://www.gamedev.net/reference/articles/article1199.asp
+
 			const c = Math.cos(angle);
 			const s = Math.sin(angle);
 			const t = 1 - c;
 			const x = axis.x,
-						y = axis.y,
-						z = axis.z;
+				y = axis.y,
+				z = axis.z;
 			const tx = t * x,
-						ty = t * y;
+				ty = t * y;
 			this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		makeScale(x, y, z) {
 			this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		makeShear(xy, xz, yx, yz, zx, zy) {
 			this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
 			return this;
 		}
-
 		compose(position, quaternion, scale) {
 			const te = this.elements;
 			const x = quaternion._x,
-						y = quaternion._y,
-						z = quaternion._z,
-						w = quaternion._w;
+				y = quaternion._y,
+				z = quaternion._z,
+				w = quaternion._w;
 			const x2 = x + x,
-						y2 = y + y,
-						z2 = z + z;
+				y2 = y + y,
+				z2 = z + z;
 			const xx = x * x2,
-						xy = x * y2,
-						xz = x * z2;
+				xy = x * y2,
+				xz = x * z2;
 			const yy = y * y2,
-						yz = y * z2,
-						zz = z * z2;
+				yz = y * z2,
+				zz = z * z2;
 			const wx = w * x2,
-						wy = w * y2,
-						wz = w * z2;
+				wy = w * y2,
+				wz = w * z2;
 			const sx = scale.x,
-						sy = scale.y,
-						sz = scale.z;
+				sy = scale.y,
+				sz = scale.z;
 			te[0] = (1 - (yy + zz)) * sx;
 			te[1] = (xy + wz) * sx;
 			te[2] = (xz - wy) * sx;
@@ -5311,25 +4679,21 @@
 			te[15] = 1;
 			return this;
 		}
-
 		decompose(position, quaternion, scale) {
 			const te = this.elements;
-
 			let sx = _v1$5.set(te[0], te[1], te[2]).length();
-
 			const sy = _v1$5.set(te[4], te[5], te[6]).length();
+			const sz = _v1$5.set(te[8], te[9], te[10]).length();
 
-			const sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale
-
-
+			// if determine is negative, we need to invert one scale
 			const det = this.determinant();
 			if (det < 0) sx = -sx;
 			position.x = te[12];
 			position.y = te[13];
-			position.z = te[14]; // scale the rotation part
+			position.z = te[14];
 
+			// scale the rotation part
 			_m1$2.copy(this);
-
 			const invSX = 1 / sx;
 			const invSY = 1 / sy;
 			const invSZ = 1 / sz;
@@ -5348,7 +4712,6 @@
 			scale.z = sz;
 			return this;
 		}
-
 		makePerspective(left, right, top, bottom, near, far) {
 			const te = this.elements;
 			const x = 2 * near / (right - left);
@@ -5375,7 +4738,6 @@
 			te[15] = 0;
 			return this;
 		}
-
 		makeOrthographic(left, right, top, bottom, near, far) {
 			const te = this.elements;
 			const w = 1.0 / (right - left);
@@ -5402,26 +4764,20 @@
 			te[15] = 1;
 			return this;
 		}
-
 		equals(matrix) {
 			const te = this.elements;
 			const me = matrix.elements;
-
 			for (let i = 0; i < 16; i++) {
 				if (te[i] !== me[i]) return false;
 			}
-
 			return true;
 		}
-
 		fromArray(array, offset = 0) {
 			for (let i = 0; i < 16; i++) {
 				this.elements[i] = array[i + offset];
 			}
-
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			const te = this.elements;
 			array[offset] = te[0];
@@ -5442,27 +4798,17 @@
 			array[offset + 15] = te[15];
 			return array;
 		}
-
 	}
-
 	const _v1$5 = /*@__PURE__*/new Vector3();
-
 	const _m1$2 = /*@__PURE__*/new Matrix4();
-
 	const _zero = /*@__PURE__*/new Vector3(0, 0, 0);
-
 	const _one = /*@__PURE__*/new Vector3(1, 1, 1);
-
 	const _x = /*@__PURE__*/new Vector3();
-
 	const _y = /*@__PURE__*/new Vector3();
-
 	const _z = /*@__PURE__*/new Vector3();
 
 	const _matrix$1 = /*@__PURE__*/new Matrix4();
-
 	const _quaternion$3 = /*@__PURE__*/new Quaternion();
-
 	class Euler {
 		constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {
 			this.isEuler = true;
@@ -5471,90 +4817,69 @@
 			this._z = z;
 			this._order = order;
 		}
-
 		get x() {
 			return this._x;
 		}
-
 		set x(value) {
 			this._x = value;
-
 			this._onChangeCallback();
 		}
-
 		get y() {
 			return this._y;
 		}
-
 		set y(value) {
 			this._y = value;
-
 			this._onChangeCallback();
 		}
-
 		get z() {
 			return this._z;
 		}
-
 		set z(value) {
 			this._z = value;
-
 			this._onChangeCallback();
 		}
-
 		get order() {
 			return this._order;
 		}
-
 		set order(value) {
 			this._order = value;
-
 			this._onChangeCallback();
 		}
-
 		set(x, y, z, order = this._order) {
 			this._x = x;
 			this._y = y;
 			this._z = z;
 			this._order = order;
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		clone() {
 			return new this.constructor(this._x, this._y, this._z, this._order);
 		}
-
 		copy(euler) {
 			this._x = euler._x;
 			this._y = euler._y;
 			this._z = euler._z;
 			this._order = euler._order;
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		setFromRotationMatrix(m, order = this._order, update = true) {
 			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
+
 			const te = m.elements;
 			const m11 = te[0],
-						m12 = te[4],
-						m13 = te[8];
+				m12 = te[4],
+				m13 = te[8];
 			const m21 = te[1],
-						m22 = te[5],
-						m23 = te[9];
+				m22 = te[5],
+				m23 = te[9];
 			const m31 = te[2],
-						m32 = te[6],
-						m33 = te[10];
-
+				m32 = te[6],
+				m33 = te[10];
 			switch (order) {
 				case 'XYZ':
 					this._y = Math.asin(clamp(m13, -1, 1));
-
 					if (Math.abs(m13) < 0.9999999) {
 						this._x = Math.atan2(-m23, m33);
 						this._z = Math.atan2(-m12, m11);
@@ -5562,12 +4887,9 @@
 						this._x = Math.atan2(m32, m22);
 						this._z = 0;
 					}
-
 					break;
-
 				case 'YXZ':
 					this._x = Math.asin(-clamp(m23, -1, 1));
-
 					if (Math.abs(m23) < 0.9999999) {
 						this._y = Math.atan2(m13, m33);
 						this._z = Math.atan2(m21, m22);
@@ -5575,12 +4897,9 @@
 						this._y = Math.atan2(-m31, m11);
 						this._z = 0;
 					}
-
 					break;
-
 				case 'ZXY':
 					this._x = Math.asin(clamp(m32, -1, 1));
-
 					if (Math.abs(m32) < 0.9999999) {
 						this._y = Math.atan2(-m31, m33);
 						this._z = Math.atan2(-m12, m22);
@@ -5588,12 +4907,9 @@
 						this._y = 0;
 						this._z = Math.atan2(m21, m11);
 					}
-
 					break;
-
 				case 'ZYX':
 					this._y = Math.asin(-clamp(m31, -1, 1));
-
 					if (Math.abs(m31) < 0.9999999) {
 						this._x = Math.atan2(m32, m33);
 						this._z = Math.atan2(m21, m11);
@@ -5601,12 +4917,9 @@
 						this._x = 0;
 						this._z = Math.atan2(-m12, m22);
 					}
-
 					break;
-
 				case 'YZX':
 					this._z = Math.asin(clamp(m21, -1, 1));
-
 					if (Math.abs(m21) < 0.9999999) {
 						this._x = Math.atan2(-m23, m22);
 						this._y = Math.atan2(-m31, m11);
@@ -5614,12 +4927,9 @@
 						this._x = 0;
 						this._y = Math.atan2(m13, m33);
 					}
-
 					break;
-
 				case 'XZY':
 					this._z = Math.asin(-clamp(m12, -1, 1));
-
 					if (Math.abs(m12) < 0.9999999) {
 						this._x = Math.atan2(m32, m22);
 						this._y = Math.atan2(m13, m11);
@@ -5627,50 +4937,38 @@
 						this._x = Math.atan2(-m23, m33);
 						this._y = 0;
 					}
-
 					break;
-
 				default:
 					console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);
 			}
-
 			this._order = order;
 			if (update === true) this._onChangeCallback();
 			return this;
 		}
-
 		setFromQuaternion(q, order, update) {
 			_matrix$1.makeRotationFromQuaternion(q);
-
 			return this.setFromRotationMatrix(_matrix$1, order, update);
 		}
-
 		setFromVector3(v, order = this._order) {
 			return this.set(v.x, v.y, v.z, order);
 		}
-
 		reorder(newOrder) {
 			// WARNING: this discards revolution information -bhouston
-			_quaternion$3.setFromEuler(this);
 
+			_quaternion$3.setFromEuler(this);
 			return this.setFromQuaternion(_quaternion$3, newOrder);
 		}
-
 		equals(euler) {
 			return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
 		}
-
 		fromArray(array) {
 			this._x = array[0];
 			this._y = array[1];
 			this._z = array[2];
 			if (array[3] !== undefined) this._order = array[3];
-
 			this._onChangeCallback();
-
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			array[offset] = this._x;
 			array[offset + 1] = this._y;
@@ -5678,28 +4976,24 @@
 			array[offset + 3] = this._order;
 			return array;
 		}
-
 		_onChange(callback) {
 			this._onChangeCallback = callback;
 			return this;
 		}
-
 		_onChangeCallback() {}
-
 		*[Symbol.iterator]() {
 			yield this._x;
 			yield this._y;
 			yield this._z;
 			yield this._order;
-		} // @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53
+		}
 
+		// @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53
 
 		toVector3() {
 			console.error('THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead');
 		}
-
 	}
-
 	Euler.DefaultOrder = 'XYZ';
 	Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];
 
@@ -5707,70 +5001,49 @@
 		constructor() {
 			this.mask = 1 | 0;
 		}
-
 		set(channel) {
 			this.mask = (1 << channel | 0) >>> 0;
 		}
-
 		enable(channel) {
 			this.mask |= 1 << channel | 0;
 		}
-
 		enableAll() {
 			this.mask = 0xffffffff | 0;
 		}
-
 		toggle(channel) {
 			this.mask ^= 1 << channel | 0;
 		}
-
 		disable(channel) {
 			this.mask &= ~(1 << channel | 0);
 		}
-
 		disableAll() {
 			this.mask = 0;
 		}
-
 		test(layers) {
 			return (this.mask & layers.mask) !== 0;
 		}
-
 		isEnabled(channel) {
 			return (this.mask & (1 << channel | 0)) !== 0;
 		}
-
 	}
 
 	let _object3DId = 0;
-
 	const _v1$4 = /*@__PURE__*/new Vector3();
-
 	const _q1 = /*@__PURE__*/new Quaternion();
-
 	const _m1$1 = /*@__PURE__*/new Matrix4();
-
 	const _target = /*@__PURE__*/new Vector3();
-
 	const _position$3 = /*@__PURE__*/new Vector3();
-
 	const _scale$2 = /*@__PURE__*/new Vector3();
-
 	const _quaternion$2 = /*@__PURE__*/new Quaternion();
-
 	const _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);
-
 	const _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);
-
 	const _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);
-
 	const _addedEvent = {
 		type: 'added'
 	};
 	const _removedEvent = {
 		type: 'removed'
 	};
-
 	class Object3D extends EventDispatcher {
 		constructor() {
 			super();
@@ -5788,19 +5061,14 @@
 			const rotation = new Euler();
 			const quaternion = new Quaternion();
 			const scale = new Vector3(1, 1, 1);
-
 			function onRotationChange() {
 				quaternion.setFromEuler(rotation, false);
 			}
-
 			function onQuaternionChange() {
 				rotation.setFromQuaternion(quaternion, undefined, false);
 			}
-
 			rotation._onChange(onRotationChange);
-
 			quaternion._onChange(onQuaternionChange);
-
 			Object.defineProperties(this, {
 				position: {
 					configurable: true,
@@ -5844,363 +5112,294 @@
 			this.animations = [];
 			this.userData = {};
 		}
-
 		onBeforeRender() {}
-
 		onAfterRender() {}
-
 		applyMatrix4(matrix) {
 			if (this.matrixAutoUpdate) this.updateMatrix();
 			this.matrix.premultiply(matrix);
 			this.matrix.decompose(this.position, this.quaternion, this.scale);
 		}
-
 		applyQuaternion(q) {
 			this.quaternion.premultiply(q);
 			return this;
 		}
-
 		setRotationFromAxisAngle(axis, angle) {
 			// assumes axis is normalized
+
 			this.quaternion.setFromAxisAngle(axis, angle);
 		}
-
 		setRotationFromEuler(euler) {
 			this.quaternion.setFromEuler(euler, true);
 		}
-
 		setRotationFromMatrix(m) {
 			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
+
 			this.quaternion.setFromRotationMatrix(m);
 		}
-
 		setRotationFromQuaternion(q) {
 			// assumes q is normalized
+
 			this.quaternion.copy(q);
 		}
-
 		rotateOnAxis(axis, angle) {
 			// rotate object on axis in object space
 			// axis is assumed to be normalized
-			_q1.setFromAxisAngle(axis, angle);
 
+			_q1.setFromAxisAngle(axis, angle);
 			this.quaternion.multiply(_q1);
 			return this;
 		}
-
 		rotateOnWorldAxis(axis, angle) {
 			// rotate object on axis in world space
 			// axis is assumed to be normalized
 			// method assumes no rotated parent
-			_q1.setFromAxisAngle(axis, angle);
 
+			_q1.setFromAxisAngle(axis, angle);
 			this.quaternion.premultiply(_q1);
 			return this;
 		}
-
 		rotateX(angle) {
 			return this.rotateOnAxis(_xAxis, angle);
 		}
-
 		rotateY(angle) {
 			return this.rotateOnAxis(_yAxis, angle);
 		}
-
 		rotateZ(angle) {
 			return this.rotateOnAxis(_zAxis, angle);
 		}
-
 		translateOnAxis(axis, distance) {
 			// translate object by distance along axis in object space
 			// axis is assumed to be normalized
-			_v1$4.copy(axis).applyQuaternion(this.quaternion);
 
+			_v1$4.copy(axis).applyQuaternion(this.quaternion);
 			this.position.add(_v1$4.multiplyScalar(distance));
 			return this;
 		}
-
 		translateX(distance) {
 			return this.translateOnAxis(_xAxis, distance);
 		}
-
 		translateY(distance) {
 			return this.translateOnAxis(_yAxis, distance);
 		}
-
 		translateZ(distance) {
 			return this.translateOnAxis(_zAxis, distance);
 		}
-
 		localToWorld(vector) {
 			return vector.applyMatrix4(this.matrixWorld);
 		}
-
 		worldToLocal(vector) {
 			return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
 		}
-
 		lookAt(x, y, z) {
 			// This method does not support objects having non-uniformly-scaled parent(s)
+
 			if (x.isVector3) {
 				_target.copy(x);
 			} else {
 				_target.set(x, y, z);
 			}
-
 			const parent = this.parent;
 			this.updateWorldMatrix(true, false);
-
 			_position$3.setFromMatrixPosition(this.matrixWorld);
-
 			if (this.isCamera || this.isLight) {
 				_m1$1.lookAt(_position$3, _target, this.up);
 			} else {
 				_m1$1.lookAt(_target, _position$3, this.up);
 			}
-
 			this.quaternion.setFromRotationMatrix(_m1$1);
-
 			if (parent) {
 				_m1$1.extractRotation(parent.matrixWorld);
-
 				_q1.setFromRotationMatrix(_m1$1);
-
 				this.quaternion.premultiply(_q1.invert());
 			}
 		}
-
 		add(object) {
 			if (arguments.length > 1) {
 				for (let i = 0; i < arguments.length; i++) {
 					this.add(arguments[i]);
 				}
-
 				return this;
 			}
-
 			if (object === this) {
 				console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object);
 				return this;
 			}
-
 			if (object && object.isObject3D) {
 				if (object.parent !== null) {
 					object.parent.remove(object);
 				}
-
 				object.parent = this;
 				this.children.push(object);
 				object.dispatchEvent(_addedEvent);
 			} else {
 				console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);
 			}
-
 			return this;
 		}
-
 		remove(object) {
 			if (arguments.length > 1) {
 				for (let i = 0; i < arguments.length; i++) {
 					this.remove(arguments[i]);
 				}
-
 				return this;
 			}
-
 			const index = this.children.indexOf(object);
-
 			if (index !== -1) {
 				object.parent = null;
 				this.children.splice(index, 1);
 				object.dispatchEvent(_removedEvent);
 			}
-
 			return this;
 		}
-
 		removeFromParent() {
 			const parent = this.parent;
-
 			if (parent !== null) {
 				parent.remove(this);
 			}
-
 			return this;
 		}
-
 		clear() {
 			for (let i = 0; i < this.children.length; i++) {
 				const object = this.children[i];
 				object.parent = null;
 				object.dispatchEvent(_removedEvent);
 			}
-
 			this.children.length = 0;
 			return this;
 		}
-
 		attach(object) {
 			// adds object as a child of this, while maintaining the object's world transform
+
 			// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
-			this.updateWorldMatrix(true, false);
 
+			this.updateWorldMatrix(true, false);
 			_m1$1.copy(this.matrixWorld).invert();
-
 			if (object.parent !== null) {
 				object.parent.updateWorldMatrix(true, false);
-
 				_m1$1.multiply(object.parent.matrixWorld);
 			}
-
 			object.applyMatrix4(_m1$1);
 			this.add(object);
 			object.updateWorldMatrix(false, true);
 			return this;
 		}
-
 		getObjectById(id) {
 			return this.getObjectByProperty('id', id);
 		}
-
 		getObjectByName(name) {
 			return this.getObjectByProperty('name', name);
 		}
-
 		getObjectByProperty(name, value) {
 			if (this[name] === value) return this;
-
 			for (let i = 0, l = this.children.length; i < l; i++) {
 				const child = this.children[i];
 				const object = child.getObjectByProperty(name, value);
-
 				if (object !== undefined) {
 					return object;
 				}
 			}
-
 			return undefined;
 		}
-
 		getWorldPosition(target) {
 			this.updateWorldMatrix(true, false);
 			return target.setFromMatrixPosition(this.matrixWorld);
 		}
-
 		getWorldQuaternion(target) {
 			this.updateWorldMatrix(true, false);
 			this.matrixWorld.decompose(_position$3, target, _scale$2);
 			return target;
 		}
-
 		getWorldScale(target) {
 			this.updateWorldMatrix(true, false);
 			this.matrixWorld.decompose(_position$3, _quaternion$2, target);
 			return target;
 		}
-
 		getWorldDirection(target) {
 			this.updateWorldMatrix(true, false);
 			const e = this.matrixWorld.elements;
 			return target.set(e[8], e[9], e[10]).normalize();
 		}
-
 		raycast() {}
-
 		traverse(callback) {
 			callback(this);
 			const children = this.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				children[i].traverse(callback);
 			}
 		}
-
 		traverseVisible(callback) {
 			if (this.visible === false) return;
 			callback(this);
 			const children = this.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				children[i].traverseVisible(callback);
 			}
 		}
-
 		traverseAncestors(callback) {
 			const parent = this.parent;
-
 			if (parent !== null) {
 				callback(parent);
 				parent.traverseAncestors(callback);
 			}
 		}
-
 		updateMatrix() {
 			this.matrix.compose(this.position, this.quaternion, this.scale);
 			this.matrixWorldNeedsUpdate = true;
 		}
-
 		updateMatrixWorld(force) {
 			if (this.matrixAutoUpdate) this.updateMatrix();
-
 			if (this.matrixWorldNeedsUpdate || force) {
 				if (this.parent === null) {
 					this.matrixWorld.copy(this.matrix);
 				} else {
 					this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
 				}
-
 				this.matrixWorldNeedsUpdate = false;
 				force = true;
-			} // update children
+			}
 
+			// update children
 
 			const children = this.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				const child = children[i];
-
 				if (child.matrixWorldAutoUpdate === true || force === true) {
 					child.updateMatrixWorld(force);
 				}
 			}
 		}
-
 		updateWorldMatrix(updateParents, updateChildren) {
 			const parent = this.parent;
-
 			if (updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true) {
 				parent.updateWorldMatrix(true, false);
 			}
-
 			if (this.matrixAutoUpdate) this.updateMatrix();
-
 			if (this.parent === null) {
 				this.matrixWorld.copy(this.matrix);
 			} else {
 				this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
-			} // update children
+			}
 
+			// update children
 
 			if (updateChildren === true) {
 				const children = this.children;
-
 				for (let i = 0, l = children.length; i < l; i++) {
 					const child = children[i];
-
 					if (child.matrixWorldAutoUpdate === true) {
 						child.updateWorldMatrix(false, true);
 					}
 				}
 			}
 		}
-
 		toJSON(meta) {
 			// meta is a string when called from JSON.stringify
 			const isRootObject = meta === undefined || typeof meta === 'string';
-			const output = {}; // meta is a hash used to collect geometries, materials.
+			const output = {};
+
+			// meta is a hash used to collect geometries, materials.
 			// not providing it implies that this is the root object
 			// being serialized.
-
 			if (isRootObject) {
 				// initialize meta obj
 				meta = {
@@ -6218,8 +5417,9 @@
 					type: 'Object',
 					generator: 'Object3D.toJSON'
 				};
-			} // standard Object3D serialization
+			}
 
+			// standard Object3D serialization
 
 			const object = {};
 			object.uuid = this.uuid;
@@ -6233,24 +5433,25 @@
 			if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
 			object.layers = this.layers.mask;
 			object.matrix = this.matrix.toArray();
-			if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties
+			if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
+
+			// object specific properties
 
 			if (this.isInstancedMesh) {
 				object.type = 'InstancedMesh';
 				object.count = this.count;
 				object.instanceMatrix = this.instanceMatrix.toJSON();
 				if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
-			} //
+			}
 
+			//
 
 			function serialize(library, element) {
 				if (library[element.uuid] === undefined) {
 					library[element.uuid] = element.toJSON(meta);
 				}
-
 				return element.uuid;
 			}
-
 			if (this.isScene) {
 				if (this.background) {
 					if (this.background.isColor) {
@@ -6259,17 +5460,14 @@
 						object.background = this.background.toJSON(meta).uuid;
 					}
 				}
-
 				if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
 					object.environment = this.environment.toJSON(meta).uuid;
 				}
 			} else if (this.isMesh || this.isLine || this.isPoints) {
 				object.geometry = serialize(meta.geometries, this.geometry);
 				const parameters = this.geometry.parameters;
-
 				if (parameters !== undefined && parameters.shapes !== undefined) {
 					const shapes = parameters.shapes;
-
 					if (Array.isArray(shapes)) {
 						for (let i = 0, l = shapes.length; i < l; i++) {
 							const shape = shapes[i];
@@ -6280,50 +5478,44 @@
 					}
 				}
 			}
-
 			if (this.isSkinnedMesh) {
 				object.bindMode = this.bindMode;
 				object.bindMatrix = this.bindMatrix.toArray();
-
 				if (this.skeleton !== undefined) {
 					serialize(meta.skeletons, this.skeleton);
 					object.skeleton = this.skeleton.uuid;
 				}
 			}
-
 			if (this.material !== undefined) {
 				if (Array.isArray(this.material)) {
 					const uuids = [];
-
 					for (let i = 0, l = this.material.length; i < l; i++) {
 						uuids.push(serialize(meta.materials, this.material[i]));
 					}
-
 					object.material = uuids;
 				} else {
 					object.material = serialize(meta.materials, this.material);
 				}
-			} //
+			}
 
+			//
 
 			if (this.children.length > 0) {
 				object.children = [];
-
 				for (let i = 0; i < this.children.length; i++) {
 					object.children.push(this.children[i].toJSON(meta).object);
 				}
-			} //
+			}
 
+			//
 
 			if (this.animations.length > 0) {
 				object.animations = [];
-
 				for (let i = 0; i < this.animations.length; i++) {
 					const animation = this.animations[i];
 					object.animations.push(serialize(meta.animations, animation));
 				}
 			}
-
 			if (isRootObject) {
 				const geometries = extractFromCache(meta.geometries);
 				const materials = extractFromCache(meta.materials);
@@ -6342,29 +5534,25 @@
 				if (animations.length > 0) output.animations = animations;
 				if (nodes.length > 0) output.nodes = nodes;
 			}
-
 			output.object = object;
-			return output; // extract data from the cache hash
+			return output;
+
+			// extract data from the cache hash
 			// remove metadata on each item
 			// and return as array
-
 			function extractFromCache(cache) {
 				const values = [];
-
 				for (const key in cache) {
 					const data = cache[key];
 					delete data.metadata;
 					values.push(data);
 				}
-
 				return values;
 			}
 		}
-
 		clone(recursive) {
 			return new this.constructor().copy(this, recursive);
 		}
-
 		copy(source, recursive = true) {
 			this.name = source.name;
 			this.up.copy(source.up);
@@ -6384,104 +5572,76 @@
 			this.frustumCulled = source.frustumCulled;
 			this.renderOrder = source.renderOrder;
 			this.userData = JSON.parse(JSON.stringify(source.userData));
-
 			if (recursive === true) {
 				for (let i = 0; i < source.children.length; i++) {
 					const child = source.children[i];
 					this.add(child.clone());
 				}
 			}
-
 			return this;
 		}
-
 	}
-
 	Object3D.DefaultUp = /*@__PURE__*/new Vector3(0, 1, 0);
 	Object3D.DefaultMatrixAutoUpdate = true;
 	Object3D.DefaultMatrixWorldAutoUpdate = true;
 
 	const _v0$1 = /*@__PURE__*/new Vector3();
-
 	const _v1$3 = /*@__PURE__*/new Vector3();
-
 	const _v2$2 = /*@__PURE__*/new Vector3();
-
 	const _v3$1 = /*@__PURE__*/new Vector3();
-
 	const _vab = /*@__PURE__*/new Vector3();
-
 	const _vac = /*@__PURE__*/new Vector3();
-
 	const _vbc = /*@__PURE__*/new Vector3();
-
 	const _vap = /*@__PURE__*/new Vector3();
-
 	const _vbp = /*@__PURE__*/new Vector3();
-
 	const _vcp = /*@__PURE__*/new Vector3();
-
 	class Triangle {
 		constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
 			this.a = a;
 			this.b = b;
 			this.c = c;
 		}
-
 		static getNormal(a, b, c, target) {
 			target.subVectors(c, b);
-
 			_v0$1.subVectors(a, b);
-
 			target.cross(_v0$1);
 			const targetLengthSq = target.lengthSq();
-
 			if (targetLengthSq > 0) {
 				return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
 			}
-
 			return target.set(0, 0, 0);
-		} // static/instance method to calculate barycentric coordinates
-		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
-
+		}
 
+		// static/instance method to calculate barycentric coordinates
+		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
 		static getBarycoord(point, a, b, c, target) {
 			_v0$1.subVectors(c, a);
-
 			_v1$3.subVectors(b, a);
-
 			_v2$2.subVectors(point, a);
-
 			const dot00 = _v0$1.dot(_v0$1);
-
 			const dot01 = _v0$1.dot(_v1$3);
-
 			const dot02 = _v0$1.dot(_v2$2);
-
 			const dot11 = _v1$3.dot(_v1$3);
-
 			const dot12 = _v1$3.dot(_v2$2);
+			const denom = dot00 * dot11 - dot01 * dot01;
 
-			const denom = dot00 * dot11 - dot01 * dot01; // collinear or singular triangle
-
+			// collinear or singular triangle
 			if (denom === 0) {
 				// arbitrary location outside of triangle?
 				// not sure if this is the best idea, maybe should be returning undefined
 				return target.set(-2, -1, -1);
 			}
-
 			const invDenom = 1 / denom;
 			const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
-			const v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1
+			const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
 
+			// barycentric coordinates must always sum to 1
 			return target.set(1 - u - v, v, u);
 		}
-
 		static containsPoint(point, a, b, c) {
 			this.getBarycoord(point, a, b, c, _v3$1);
 			return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
 		}
-
 		static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
 			this.getBarycoord(point, p1, p2, p3, _v3$1);
 			target.set(0, 0);
@@ -6490,177 +5650,137 @@
 			target.addScaledVector(uv3, _v3$1.z);
 			return target;
 		}
-
 		static isFrontFacing(a, b, c, direction) {
 			_v0$1.subVectors(c, b);
+			_v1$3.subVectors(a, b);
 
-			_v1$3.subVectors(a, b); // strictly front facing
-
-
+			// strictly front facing
 			return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
 		}
-
 		set(a, b, c) {
 			this.a.copy(a);
 			this.b.copy(b);
 			this.c.copy(c);
 			return this;
 		}
-
 		setFromPointsAndIndices(points, i0, i1, i2) {
 			this.a.copy(points[i0]);
 			this.b.copy(points[i1]);
 			this.c.copy(points[i2]);
 			return this;
 		}
-
 		setFromAttributeAndIndices(attribute, i0, i1, i2) {
 			this.a.fromBufferAttribute(attribute, i0);
 			this.b.fromBufferAttribute(attribute, i1);
 			this.c.fromBufferAttribute(attribute, i2);
 			return this;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		copy(triangle) {
 			this.a.copy(triangle.a);
 			this.b.copy(triangle.b);
 			this.c.copy(triangle.c);
 			return this;
 		}
-
 		getArea() {
 			_v0$1.subVectors(this.c, this.b);
-
 			_v1$3.subVectors(this.a, this.b);
-
 			return _v0$1.cross(_v1$3).length() * 0.5;
 		}
-
 		getMidpoint(target) {
 			return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
 		}
-
 		getNormal(target) {
 			return Triangle.getNormal(this.a, this.b, this.c, target);
 		}
-
 		getPlane(target) {
 			return target.setFromCoplanarPoints(this.a, this.b, this.c);
 		}
-
 		getBarycoord(point, target) {
 			return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
 		}
-
 		getUV(point, uv1, uv2, uv3, target) {
 			return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
 		}
-
 		containsPoint(point) {
 			return Triangle.containsPoint(point, this.a, this.b, this.c);
 		}
-
 		isFrontFacing(direction) {
 			return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
 		}
-
 		intersectsBox(box) {
 			return box.intersectsTriangle(this);
 		}
-
 		closestPointToPoint(p, target) {
 			const a = this.a,
-						b = this.b,
-						c = this.c;
-			let v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
+				b = this.b,
+				c = this.c;
+			let v, w;
+
+			// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
 			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
 			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
 			// basically, we're distinguishing which of the voronoi regions of the triangle
 			// the point lies in with the minimum amount of redundant computation.
 
 			_vab.subVectors(b, a);
-
 			_vac.subVectors(c, a);
-
 			_vap.subVectors(p, a);
-
 			const d1 = _vab.dot(_vap);
-
 			const d2 = _vac.dot(_vap);
-
 			if (d1 <= 0 && d2 <= 0) {
 				// vertex region of A; barycentric coords (1, 0, 0)
 				return target.copy(a);
 			}
-
 			_vbp.subVectors(p, b);
-
 			const d3 = _vab.dot(_vbp);
-
 			const d4 = _vac.dot(_vbp);
-
 			if (d3 >= 0 && d4 <= d3) {
 				// vertex region of B; barycentric coords (0, 1, 0)
 				return target.copy(b);
 			}
-
 			const vc = d1 * d4 - d3 * d2;
-
 			if (vc <= 0 && d1 >= 0 && d3 <= 0) {
-				v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)
-
+				v = d1 / (d1 - d3);
+				// edge region of AB; barycentric coords (1-v, v, 0)
 				return target.copy(a).addScaledVector(_vab, v);
 			}
-
 			_vcp.subVectors(p, c);
-
 			const d5 = _vab.dot(_vcp);
-
 			const d6 = _vac.dot(_vcp);
-
 			if (d6 >= 0 && d5 <= d6) {
 				// vertex region of C; barycentric coords (0, 0, 1)
 				return target.copy(c);
 			}
-
 			const vb = d5 * d2 - d1 * d6;
-
 			if (vb <= 0 && d2 >= 0 && d6 <= 0) {
-				w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)
-
+				w = d2 / (d2 - d6);
+				// edge region of AC; barycentric coords (1-w, 0, w)
 				return target.copy(a).addScaledVector(_vac, w);
 			}
-
 			const va = d3 * d6 - d5 * d4;
-
 			if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
 				_vbc.subVectors(c, b);
-
-				w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)
-
+				w = (d4 - d3) / (d4 - d3 + (d5 - d6));
+				// edge region of BC; barycentric coords (0, 1-w, w)
 				return target.copy(b).addScaledVector(_vbc, w); // edge region of BC
-			} // face region
-
-
-			const denom = 1 / (va + vb + vc); // u = va * denom
+			}
 
+			// face region
+			const denom = 1 / (va + vb + vc);
+			// u = va * denom
 			v = vb * denom;
 			w = vc * denom;
 			return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
 		}
-
 		equals(triangle) {
 			return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
 		}
-
 	}
 
 	let materialId = 0;
-
 	class Material extends EventDispatcher {
 		constructor() {
 			super();
@@ -6712,47 +5832,34 @@
 			this.version = 0;
 			this._alphaTest = 0;
 		}
-
 		get alphaTest() {
 			return this._alphaTest;
 		}
-
 		set alphaTest(value) {
 			if (this._alphaTest > 0 !== value > 0) {
 				this.version++;
 			}
-
 			this._alphaTest = value;
 		}
-
 		onBuild() {}
-
 		onBeforeRender() {}
-
 		onBeforeCompile() {}
-
 		customProgramCacheKey() {
 			return this.onBeforeCompile.toString();
 		}
-
 		setValues(values) {
 			if (values === undefined) return;
-
 			for (const key in values) {
 				const newValue = values[key];
-
 				if (newValue === undefined) {
 					console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
 					continue;
 				}
-
 				const currentValue = this[key];
-
 				if (currentValue === undefined) {
 					console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
 					continue;
 				}
-
 				if (currentValue && currentValue.isColor) {
 					currentValue.set(newValue);
 				} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {
@@ -6762,25 +5869,23 @@
 				}
 			}
 		}
-
 		toJSON(meta) {
 			const isRootObject = meta === undefined || typeof meta === 'string';
-
 			if (isRootObject) {
 				meta = {
 					textures: {},
 					images: {}
 				};
 			}
-
 			const data = {
 				metadata: {
 					version: 4.5,
 					type: 'Material',
 					generator: 'Material.toJSON'
 				}
-			}; // standard Material serialization
+			};
 
+			// standard Material serialization
 			data.uuid = this.uuid;
 			data.type = this.type;
 			if (this.name !== '') data.name = this.name;
@@ -6798,83 +5903,66 @@
 			if (this.shininess !== undefined) data.shininess = this.shininess;
 			if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
 			if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;
-
 			if (this.clearcoatMap && this.clearcoatMap.isTexture) {
 				data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
 			}
-
 			if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
 				data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
 			}
-
 			if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
 				data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
 				data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
 			}
-
 			if (this.iridescence !== undefined) data.iridescence = this.iridescence;
 			if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;
 			if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
-
 			if (this.iridescenceMap && this.iridescenceMap.isTexture) {
 				data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
 			}
-
 			if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
 				data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
 			}
-
 			if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
 			if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
 			if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
-
 			if (this.lightMap && this.lightMap.isTexture) {
 				data.lightMap = this.lightMap.toJSON(meta).uuid;
 				data.lightMapIntensity = this.lightMapIntensity;
 			}
-
 			if (this.aoMap && this.aoMap.isTexture) {
 				data.aoMap = this.aoMap.toJSON(meta).uuid;
 				data.aoMapIntensity = this.aoMapIntensity;
 			}
-
 			if (this.bumpMap && this.bumpMap.isTexture) {
 				data.bumpMap = this.bumpMap.toJSON(meta).uuid;
 				data.bumpScale = this.bumpScale;
 			}
-
 			if (this.normalMap && this.normalMap.isTexture) {
 				data.normalMap = this.normalMap.toJSON(meta).uuid;
 				data.normalMapType = this.normalMapType;
 				data.normalScale = this.normalScale.toArray();
 			}
-
 			if (this.displacementMap && this.displacementMap.isTexture) {
 				data.displacementMap = this.displacementMap.toJSON(meta).uuid;
 				data.displacementScale = this.displacementScale;
 				data.displacementBias = this.displacementBias;
 			}
-
 			if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
 			if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
 			if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
 			if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
 			if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
 			if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
-
 			if (this.envMap && this.envMap.isTexture) {
 				data.envMap = this.envMap.toJSON(meta).uuid;
 				if (this.combine !== undefined) data.combine = this.combine;
 			}
-
 			if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
 			if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
 			if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;
-
 			if (this.gradientMap && this.gradientMap.isTexture) {
 				data.gradientMap = this.gradientMap.toJSON(meta).uuid;
 			}
-
 			if (this.transmission !== undefined) data.transmission = this.transmission;
 			if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
 			if (this.thickness !== undefined) data.thickness = this.thickness;
@@ -6900,8 +5988,9 @@
 			data.stencilFuncMask = this.stencilFuncMask;
 			data.stencilFail = this.stencilFail;
 			data.stencilZFail = this.stencilZFail;
-			data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)
+			data.stencilZPass = this.stencilZPass;
 
+			// rotation (SpriteMaterial)
 			if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;
 			if (this.polygonOffset === true) data.polygonOffset = true;
 			if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
@@ -6922,34 +6011,30 @@
 			if (this.visible === false) data.visible = false;
 			if (this.toneMapped === false) data.toneMapped = false;
 			if (this.fog === false) data.fog = false;
-			if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON
+			if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;
+
+			// TODO: Copied from Object3D.toJSON
 
 			function extractFromCache(cache) {
 				const values = [];
-
 				for (const key in cache) {
 					const data = cache[key];
 					delete data.metadata;
 					values.push(data);
 				}
-
 				return values;
 			}
-
 			if (isRootObject) {
 				const textures = extractFromCache(meta.textures);
 				const images = extractFromCache(meta.images);
 				if (textures.length > 0) data.textures = textures;
 				if (images.length > 0) data.images = images;
 			}
-
 			return data;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		copy(source) {
 			this.name = source.name;
 			this.blending = source.blending;
@@ -6976,16 +6061,13 @@
 			this.stencilWrite = source.stencilWrite;
 			const srcPlanes = source.clippingPlanes;
 			let dstPlanes = null;
-
 			if (srcPlanes !== null) {
 				const n = srcPlanes.length;
 				dstPlanes = new Array(n);
-
 				for (let i = 0; i !== n; ++i) {
 					dstPlanes[i] = srcPlanes[i].clone();
 				}
 			}
-
 			this.clippingPlanes = dstPlanes;
 			this.clipIntersection = source.clipIntersection;
 			this.clipShadows = source.clipShadows;
@@ -7004,17 +6086,14 @@
 			this.userData = JSON.parse(JSON.stringify(source.userData));
 			return this;
 		}
-
 		dispose() {
 			this.dispatchEvent({
 				type: 'dispose'
 			});
 		}
-
 		set needsUpdate(value) {
 			if (value === true) this.version++;
 		}
-
 	}
 
 	class MeshBasicMaterial extends Material {
@@ -7042,7 +6121,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.color.copy(source.color);
@@ -7064,19 +6142,15 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	const _vector$9 = /*@__PURE__*/new Vector3();
-
 	const _vector2$1 = /*@__PURE__*/new Vector2();
-
 	class BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			if (Array.isArray(array)) {
 				throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
 			}
-
 			this.isBufferAttribute = true;
 			this.name = '';
 			this.array = array;
@@ -7090,18 +6164,14 @@
 			};
 			this.version = 0;
 		}
-
 		onUploadCallback() {}
-
 		set needsUpdate(value) {
 			if (value === true) this.version++;
 		}
-
 		setUsage(value) {
 			this.usage = value;
 			return this;
 		}
-
 		copy(source) {
 			this.name = source.name;
 			this.array = new source.array.constructor(source.array);
@@ -7111,189 +6181,146 @@
 			this.usage = source.usage;
 			return this;
 		}
-
 		copyAt(index1, attribute, index2) {
 			index1 *= this.itemSize;
 			index2 *= attribute.itemSize;
-
 			for (let i = 0, l = this.itemSize; i < l; i++) {
 				this.array[index1 + i] = attribute.array[index2 + i];
 			}
-
 			return this;
 		}
-
 		copyArray(array) {
 			this.array.set(array);
 			return this;
 		}
-
 		applyMatrix3(m) {
 			if (this.itemSize === 2) {
 				for (let i = 0, l = this.count; i < l; i++) {
 					_vector2$1.fromBufferAttribute(this, i);
-
 					_vector2$1.applyMatrix3(m);
-
 					this.setXY(i, _vector2$1.x, _vector2$1.y);
 				}
 			} else if (this.itemSize === 3) {
 				for (let i = 0, l = this.count; i < l; i++) {
 					_vector$9.fromBufferAttribute(this, i);
-
 					_vector$9.applyMatrix3(m);
-
 					this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
 				}
 			}
-
 			return this;
 		}
-
 		applyMatrix4(m) {
 			for (let i = 0, l = this.count; i < l; i++) {
 				_vector$9.fromBufferAttribute(this, i);
-
 				_vector$9.applyMatrix4(m);
-
 				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
 			}
-
 			return this;
 		}
-
 		applyNormalMatrix(m) {
 			for (let i = 0, l = this.count; i < l; i++) {
 				_vector$9.fromBufferAttribute(this, i);
-
 				_vector$9.applyNormalMatrix(m);
-
 				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
 			}
-
 			return this;
 		}
-
 		transformDirection(m) {
 			for (let i = 0, l = this.count; i < l; i++) {
 				_vector$9.fromBufferAttribute(this, i);
-
 				_vector$9.transformDirection(m);
-
 				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
 			}
-
 			return this;
 		}
-
 		set(value, offset = 0) {
 			// Matching BufferAttribute constructor, do not normalize the array.
 			this.array.set(value, offset);
 			return this;
 		}
-
 		getX(index) {
 			let x = this.array[index * this.itemSize];
 			if (this.normalized) x = denormalize(x, this.array);
 			return x;
 		}
-
 		setX(index, x) {
 			if (this.normalized) x = normalize(x, this.array);
 			this.array[index * this.itemSize] = x;
 			return this;
 		}
-
 		getY(index) {
 			let y = this.array[index * this.itemSize + 1];
 			if (this.normalized) y = denormalize(y, this.array);
 			return y;
 		}
-
 		setY(index, y) {
 			if (this.normalized) y = normalize(y, this.array);
 			this.array[index * this.itemSize + 1] = y;
 			return this;
 		}
-
 		getZ(index) {
 			let z = this.array[index * this.itemSize + 2];
 			if (this.normalized) z = denormalize(z, this.array);
 			return z;
 		}
-
 		setZ(index, z) {
 			if (this.normalized) z = normalize(z, this.array);
 			this.array[index * this.itemSize + 2] = z;
 			return this;
 		}
-
 		getW(index) {
 			let w = this.array[index * this.itemSize + 3];
 			if (this.normalized) w = denormalize(w, this.array);
 			return w;
 		}
-
 		setW(index, w) {
 			if (this.normalized) w = normalize(w, this.array);
 			this.array[index * this.itemSize + 3] = w;
 			return this;
 		}
-
 		setXY(index, x, y) {
 			index *= this.itemSize;
-
 			if (this.normalized) {
 				x = normalize(x, this.array);
 				y = normalize(y, this.array);
 			}
-
 			this.array[index + 0] = x;
 			this.array[index + 1] = y;
 			return this;
 		}
-
 		setXYZ(index, x, y, z) {
 			index *= this.itemSize;
-
 			if (this.normalized) {
 				x = normalize(x, this.array);
 				y = normalize(y, this.array);
 				z = normalize(z, this.array);
 			}
-
 			this.array[index + 0] = x;
 			this.array[index + 1] = y;
 			this.array[index + 2] = z;
 			return this;
 		}
-
 		setXYZW(index, x, y, z, w) {
 			index *= this.itemSize;
-
 			if (this.normalized) {
 				x = normalize(x, this.array);
 				y = normalize(y, this.array);
 				z = normalize(z, this.array);
 				w = normalize(w, this.array);
 			}
-
 			this.array[index + 0] = x;
 			this.array[index + 1] = y;
 			this.array[index + 2] = z;
 			this.array[index + 3] = w;
 			return this;
 		}
-
 		onUpload(callback) {
 			this.onUploadCallback = callback;
 			return this;
 		}
-
 		clone() {
 			return new this.constructor(this.array, this.itemSize).copy(this);
 		}
-
 		toJSON() {
 			const data = {
 				itemSize: this.itemSize,
@@ -7305,113 +6332,85 @@
 			if (this.usage !== StaticDrawUsage) data.usage = this.usage;
 			if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
 			return data;
-		} // @deprecated
+		}
 
+		// @deprecated
 
 		copyColorsArray() {
 			console.error('THREE.BufferAttribute: copyColorsArray() was removed in r144.');
 		}
-
 		copyVector2sArray() {
 			console.error('THREE.BufferAttribute: copyVector2sArray() was removed in r144.');
 		}
-
 		copyVector3sArray() {
 			console.error('THREE.BufferAttribute: copyVector3sArray() was removed in r144.');
 		}
-
 		copyVector4sArray() {
 			console.error('THREE.BufferAttribute: copyVector4sArray() was removed in r144.');
 		}
+	}
 
-	} //
-
+	//
 
 	class Int8BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Int8Array(array), itemSize, normalized);
 		}
-
 	}
-
 	class Uint8BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Uint8Array(array), itemSize, normalized);
 		}
-
 	}
-
 	class Uint8ClampedBufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Uint8ClampedArray(array), itemSize, normalized);
 		}
-
 	}
-
 	class Int16BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Int16Array(array), itemSize, normalized);
 		}
-
 	}
-
 	class Uint16BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Uint16Array(array), itemSize, normalized);
 		}
-
 	}
-
 	class Int32BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Int32Array(array), itemSize, normalized);
 		}
-
 	}
-
 	class Uint32BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Uint32Array(array), itemSize, normalized);
 		}
-
 	}
-
 	class Float16BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Uint16Array(array), itemSize, normalized);
 			this.isFloat16BufferAttribute = true;
 		}
-
 	}
-
 	class Float32BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Float32Array(array), itemSize, normalized);
 		}
-
 	}
-
 	class Float64BufferAttribute extends BufferAttribute {
 		constructor(array, itemSize, normalized) {
 			super(new Float64Array(array), itemSize, normalized);
 		}
-
-	} //
+	}
 
 	let _id$1 = 0;
-
 	const _m1 = /*@__PURE__*/new Matrix4();
-
 	const _obj = /*@__PURE__*/new Object3D();
-
 	const _offset = /*@__PURE__*/new Vector3();
-
 	const _box$1 = /*@__PURE__*/new Box3();
-
 	const _boxMorphTargets = /*@__PURE__*/new Box3();
-
 	const _vector$8 = /*@__PURE__*/new Vector3();
-
 	class BufferGeometry extends EventDispatcher {
 		constructor() {
 			super();
@@ -7435,39 +6434,31 @@
 			};
 			this.userData = {};
 		}
-
 		getIndex() {
 			return this.index;
 		}
-
 		setIndex(index) {
 			if (Array.isArray(index)) {
 				this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
 			} else {
 				this.index = index;
 			}
-
 			return this;
 		}
-
 		getAttribute(name) {
 			return this.attributes[name];
 		}
-
 		setAttribute(name, attribute) {
 			this.attributes[name] = attribute;
 			return this;
 		}
-
 		deleteAttribute(name) {
 			delete this.attributes[name];
 			return this;
 		}
-
 		hasAttribute(name) {
 			return this.attributes[name] !== undefined;
 		}
-
 		addGroup(start, count, materialIndex = 0) {
 			this.groups.push({
 				start: start,
@@ -7475,155 +6466,123 @@
 				materialIndex: materialIndex
 			});
 		}
-
 		clearGroups() {
 			this.groups = [];
 		}
-
 		setDrawRange(start, count) {
 			this.drawRange.start = start;
 			this.drawRange.count = count;
 		}
-
 		applyMatrix4(matrix) {
 			const position = this.attributes.position;
-
 			if (position !== undefined) {
 				position.applyMatrix4(matrix);
 				position.needsUpdate = true;
 			}
-
 			const normal = this.attributes.normal;
-
 			if (normal !== undefined) {
 				const normalMatrix = new Matrix3().getNormalMatrix(matrix);
 				normal.applyNormalMatrix(normalMatrix);
 				normal.needsUpdate = true;
 			}
-
 			const tangent = this.attributes.tangent;
-
 			if (tangent !== undefined) {
 				tangent.transformDirection(matrix);
 				tangent.needsUpdate = true;
 			}
-
 			if (this.boundingBox !== null) {
 				this.computeBoundingBox();
 			}
-
 			if (this.boundingSphere !== null) {
 				this.computeBoundingSphere();
 			}
-
 			return this;
 		}
-
 		applyQuaternion(q) {
 			_m1.makeRotationFromQuaternion(q);
-
 			this.applyMatrix4(_m1);
 			return this;
 		}
-
 		rotateX(angle) {
 			// rotate geometry around world x-axis
-			_m1.makeRotationX(angle);
 
+			_m1.makeRotationX(angle);
 			this.applyMatrix4(_m1);
 			return this;
 		}
-
 		rotateY(angle) {
 			// rotate geometry around world y-axis
-			_m1.makeRotationY(angle);
 
+			_m1.makeRotationY(angle);
 			this.applyMatrix4(_m1);
 			return this;
 		}
-
 		rotateZ(angle) {
 			// rotate geometry around world z-axis
-			_m1.makeRotationZ(angle);
 
+			_m1.makeRotationZ(angle);
 			this.applyMatrix4(_m1);
 			return this;
 		}
-
 		translate(x, y, z) {
 			// translate geometry
-			_m1.makeTranslation(x, y, z);
 
+			_m1.makeTranslation(x, y, z);
 			this.applyMatrix4(_m1);
 			return this;
 		}
-
 		scale(x, y, z) {
 			// scale geometry
-			_m1.makeScale(x, y, z);
 
+			_m1.makeScale(x, y, z);
 			this.applyMatrix4(_m1);
 			return this;
 		}
-
 		lookAt(vector) {
 			_obj.lookAt(vector);
-
 			_obj.updateMatrix();
-
 			this.applyMatrix4(_obj.matrix);
 			return this;
 		}
-
 		center() {
 			this.computeBoundingBox();
 			this.boundingBox.getCenter(_offset).negate();
 			this.translate(_offset.x, _offset.y, _offset.z);
 			return this;
 		}
-
 		setFromPoints(points) {
 			const position = [];
-
 			for (let i = 0, l = points.length; i < l; i++) {
 				const point = points[i];
 				position.push(point.x, point.y, point.z || 0);
 			}
-
 			this.setAttribute('position', new Float32BufferAttribute(position, 3));
 			return this;
 		}
-
 		computeBoundingBox() {
 			if (this.boundingBox === null) {
 				this.boundingBox = new Box3();
 			}
-
 			const position = this.attributes.position;
 			const morphAttributesPosition = this.morphAttributes.position;
-
 			if (position && position.isGLBufferAttribute) {
 				console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
 				this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));
 				return;
 			}
-
 			if (position !== undefined) {
-				this.boundingBox.setFromBufferAttribute(position); // process morph attributes if present
+				this.boundingBox.setFromBufferAttribute(position);
+
+				// process morph attributes if present
 
 				if (morphAttributesPosition) {
 					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
 						const morphAttribute = morphAttributesPosition[i];
-
 						_box$1.setFromBufferAttribute(morphAttribute);
-
 						if (this.morphTargetsRelative) {
 							_vector$8.addVectors(this.boundingBox.min, _box$1.min);
-
 							this.boundingBox.expandByPoint(_vector$8);
-
 							_vector$8.addVectors(this.boundingBox.max, _box$1.max);
-
 							this.boundingBox.expandByPoint(_vector$8);
 						} else {
 							this.boundingBox.expandByPoint(_box$1.min);
@@ -7634,133 +6593,111 @@
 			} else {
 				this.boundingBox.makeEmpty();
 			}
-
 			if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
 				console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
 			}
 		}
-
 		computeBoundingSphere() {
 			if (this.boundingSphere === null) {
 				this.boundingSphere = new Sphere();
 			}
-
 			const position = this.attributes.position;
 			const morphAttributesPosition = this.morphAttributes.position;
-
 			if (position && position.isGLBufferAttribute) {
 				console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
 				this.boundingSphere.set(new Vector3(), Infinity);
 				return;
 			}
-
 			if (position) {
 				// first, find the center of the bounding sphere
-				const center = this.boundingSphere.center;
 
-				_box$1.setFromBufferAttribute(position); // process morph attributes if present
+				const center = this.boundingSphere.center;
+				_box$1.setFromBufferAttribute(position);
 
+				// process morph attributes if present
 
 				if (morphAttributesPosition) {
 					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
 						const morphAttribute = morphAttributesPosition[i];
-
 						_boxMorphTargets.setFromBufferAttribute(morphAttribute);
-
 						if (this.morphTargetsRelative) {
 							_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);
-
 							_box$1.expandByPoint(_vector$8);
-
 							_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);
-
 							_box$1.expandByPoint(_vector$8);
 						} else {
 							_box$1.expandByPoint(_boxMorphTargets.min);
-
 							_box$1.expandByPoint(_boxMorphTargets.max);
 						}
 					}
 				}
+				_box$1.getCenter(center);
 
-				_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the
+				// second, try to find a boundingSphere with a radius smaller than the
 				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
 
-
 				let maxRadiusSq = 0;
-
 				for (let i = 0, il = position.count; i < il; i++) {
 					_vector$8.fromBufferAttribute(position, i);
-
 					maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
-				} // process morph attributes if present
+				}
 
+				// process morph attributes if present
 
 				if (morphAttributesPosition) {
 					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
 						const morphAttribute = morphAttributesPosition[i];
 						const morphTargetsRelative = this.morphTargetsRelative;
-
 						for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
 							_vector$8.fromBufferAttribute(morphAttribute, j);
-
 							if (morphTargetsRelative) {
 								_offset.fromBufferAttribute(position, j);
-
 								_vector$8.add(_offset);
 							}
-
 							maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
 						}
 					}
 				}
-
 				this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
-
 				if (isNaN(this.boundingSphere.radius)) {
 					console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
 				}
 			}
 		}
-
 		computeTangents() {
 			const index = this.index;
-			const attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html
+			const attributes = this.attributes;
+
+			// based on http://www.terathon.com/code/tangent.html
 			// (per vertex tangents)
 
 			if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
 				console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');
 				return;
 			}
-
 			const indices = index.array;
 			const positions = attributes.position.array;
 			const normals = attributes.normal.array;
 			const uvs = attributes.uv.array;
 			const nVertices = positions.length / 3;
-
 			if (this.hasAttribute('tangent') === false) {
 				this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));
 			}
-
 			const tangents = this.getAttribute('tangent').array;
 			const tan1 = [],
-						tan2 = [];
-
+				tan2 = [];
 			for (let i = 0; i < nVertices; i++) {
 				tan1[i] = new Vector3();
 				tan2[i] = new Vector3();
 			}
-
 			const vA = new Vector3(),
-						vB = new Vector3(),
-						vC = new Vector3(),
-						uvA = new Vector2(),
-						uvB = new Vector2(),
-						uvC = new Vector2(),
-						sdir = new Vector3(),
-						tdir = new Vector3();
-
+				vB = new Vector3(),
+				vC = new Vector3(),
+				uvA = new Vector2(),
+				uvB = new Vector2(),
+				uvC = new Vector2(),
+				sdir = new Vector3(),
+				tdir = new Vector3();
 			function handleTriangle(a, b, c) {
 				vA.fromArray(positions, a * 3);
 				vB.fromArray(positions, b * 3);
@@ -7772,7 +6709,9 @@
 				vC.sub(vA);
 				uvB.sub(uvA);
 				uvC.sub(uvA);
-				const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices
+				const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);
+
+				// silently ignore degenerate uv triangles having coincident or colinear vertices
 
 				if (!isFinite(r)) return;
 				sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
@@ -7784,38 +6723,36 @@
 				tan2[b].add(tdir);
 				tan2[c].add(tdir);
 			}
-
 			let groups = this.groups;
-
 			if (groups.length === 0) {
 				groups = [{
 					start: 0,
 					count: indices.length
 				}];
 			}
-
 			for (let i = 0, il = groups.length; i < il; ++i) {
 				const group = groups[i];
 				const start = group.start;
 				const count = group.count;
-
 				for (let j = start, jl = start + count; j < jl; j += 3) {
 					handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
 				}
 			}
-
 			const tmp = new Vector3(),
-						tmp2 = new Vector3();
+				tmp2 = new Vector3();
 			const n = new Vector3(),
-						n2 = new Vector3();
-
+				n2 = new Vector3();
 			function handleVertex(v) {
 				n.fromArray(normals, v * 3);
 				n2.copy(n);
-				const t = tan1[v]; // Gram-Schmidt orthogonalize
+				const t = tan1[v];
+
+				// Gram-Schmidt orthogonalize
 
 				tmp.copy(t);
-				tmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness
+				tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
+
+				// Calculate handedness
 
 				tmp2.crossVectors(n2, t);
 				const test = tmp2.dot(tan2[v]);
@@ -7825,12 +6762,10 @@
 				tangents[v * 4 + 2] = tmp.z;
 				tangents[v * 4 + 3] = w;
 			}
-
 			for (let i = 0, il = groups.length; i < il; ++i) {
 				const group = groups[i];
 				const start = group.start;
 				const count = group.count;
-
 				for (let j = start, jl = start + count; j < jl; j += 3) {
 					handleVertex(indices[j + 0]);
 					handleVertex(indices[j + 1]);
@@ -7838,32 +6773,31 @@
 				}
 			}
 		}
-
 		computeVertexNormals() {
 			const index = this.index;
 			const positionAttribute = this.getAttribute('position');
-
 			if (positionAttribute !== undefined) {
 				let normalAttribute = this.getAttribute('normal');
-
 				if (normalAttribute === undefined) {
 					normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
 					this.setAttribute('normal', normalAttribute);
 				} else {
 					// reset existing normals to zero
+
 					for (let i = 0, il = normalAttribute.count; i < il; i++) {
 						normalAttribute.setXYZ(i, 0, 0, 0);
 					}
 				}
-
 				const pA = new Vector3(),
-							pB = new Vector3(),
-							pC = new Vector3();
+					pB = new Vector3(),
+					pC = new Vector3();
 				const nA = new Vector3(),
-							nB = new Vector3(),
-							nC = new Vector3();
+					nB = new Vector3(),
+					nC = new Vector3();
 				const cb = new Vector3(),
-							ab = new Vector3(); // indexed elements
+					ab = new Vector3();
+
+				// indexed elements
 
 				if (index) {
 					for (let i = 0, il = index.count; i < il; i += 3) {
@@ -7888,6 +6822,7 @@
 					}
 				} else {
 					// non-indexed elements (unconnected triangle soup)
+
 					for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
 						pA.fromBufferAttribute(positionAttribute, i + 0);
 						pB.fromBufferAttribute(positionAttribute, i + 1);
@@ -7900,30 +6835,25 @@
 						normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
 					}
 				}
-
 				this.normalizeNormals();
 				normalAttribute.needsUpdate = true;
 			}
-		} // @deprecated since r144
+		}
 
+		// @deprecated since r144
 
 		merge() {
 			console.error('THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead.');
 			return this;
 		}
-
 		normalizeNormals() {
 			const normals = this.attributes.normal;
-
 			for (let i = 0, il = normals.count; i < il; i++) {
 				_vector$8.fromBufferAttribute(normals, i);
-
 				_vector$8.normalize();
-
 				normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
 			}
 		}
-
 		toNonIndexed() {
 			function convertBufferAttribute(attribute, indices) {
 				const array = attribute.array;
@@ -7931,42 +6861,41 @@
 				const normalized = attribute.normalized;
 				const array2 = new array.constructor(indices.length * itemSize);
 				let index = 0,
-						index2 = 0;
-
+					index2 = 0;
 				for (let i = 0, l = indices.length; i < l; i++) {
 					if (attribute.isInterleavedBufferAttribute) {
 						index = indices[i] * attribute.data.stride + attribute.offset;
 					} else {
 						index = indices[i] * itemSize;
 					}
-
 					for (let j = 0; j < itemSize; j++) {
 						array2[index2++] = array[index++];
 					}
 				}
-
 				return new BufferAttribute(array2, itemSize, normalized);
-			} //
+			}
 
+			//
 
 			if (this.index === null) {
 				console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');
 				return this;
 			}
-
 			const geometry2 = new BufferGeometry();
 			const indices = this.index.array;
-			const attributes = this.attributes; // attributes
+			const attributes = this.attributes;
+
+			// attributes
 
 			for (const name in attributes) {
 				const attribute = attributes[name];
 				const newAttribute = convertBufferAttribute(attribute, indices);
 				geometry2.setAttribute(name, newAttribute);
-			} // morph attributes
+			}
 
+			// morph attributes
 
 			const morphAttributes = this.morphAttributes;
-
 			for (const name in morphAttributes) {
 				const morphArray = [];
 				const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes
@@ -7976,22 +6905,19 @@
 					const newAttribute = convertBufferAttribute(attribute, indices);
 					morphArray.push(newAttribute);
 				}
-
 				geometry2.morphAttributes[name] = morphArray;
 			}
+			geometry2.morphTargetsRelative = this.morphTargetsRelative;
 
-			geometry2.morphTargetsRelative = this.morphTargetsRelative; // groups
+			// groups
 
 			const groups = this.groups;
-
 			for (let i = 0, l = groups.length; i < l; i++) {
 				const group = groups[i];
 				geometry2.addGroup(group.start, group.count, group.materialIndex);
 			}
-
 			return geometry2;
 		}
-
 		toJSON() {
 			const data = {
 				metadata: {
@@ -7999,118 +6925,109 @@
 					type: 'BufferGeometry',
 					generator: 'BufferGeometry.toJSON'
 				}
-			}; // standard BufferGeometry serialization
+			};
+
+			// standard BufferGeometry serialization
 
 			data.uuid = this.uuid;
 			data.type = this.type;
 			if (this.name !== '') data.name = this.name;
 			if (Object.keys(this.userData).length > 0) data.userData = this.userData;
-
 			if (this.parameters !== undefined) {
 				const parameters = this.parameters;
-
 				for (const key in parameters) {
 					if (parameters[key] !== undefined) data[key] = parameters[key];
 				}
-
 				return data;
-			} // for simplicity the code assumes attributes are not shared across geometries, see #15811
+			}
 
+			// for simplicity the code assumes attributes are not shared across geometries, see #15811
 
 			data.data = {
 				attributes: {}
 			};
 			const index = this.index;
-
 			if (index !== null) {
 				data.data.index = {
 					type: index.array.constructor.name,
 					array: Array.prototype.slice.call(index.array)
 				};
 			}
-
 			const attributes = this.attributes;
-
 			for (const key in attributes) {
 				const attribute = attributes[key];
 				data.data.attributes[key] = attribute.toJSON(data.data);
 			}
-
 			const morphAttributes = {};
 			let hasMorphAttributes = false;
-
 			for (const key in this.morphAttributes) {
 				const attributeArray = this.morphAttributes[key];
 				const array = [];
-
 				for (let i = 0, il = attributeArray.length; i < il; i++) {
 					const attribute = attributeArray[i];
 					array.push(attribute.toJSON(data.data));
 				}
-
 				if (array.length > 0) {
 					morphAttributes[key] = array;
 					hasMorphAttributes = true;
 				}
 			}
-
 			if (hasMorphAttributes) {
 				data.data.morphAttributes = morphAttributes;
 				data.data.morphTargetsRelative = this.morphTargetsRelative;
 			}
-
 			const groups = this.groups;
-
 			if (groups.length > 0) {
 				data.data.groups = JSON.parse(JSON.stringify(groups));
 			}
-
 			const boundingSphere = this.boundingSphere;
-
 			if (boundingSphere !== null) {
 				data.data.boundingSphere = {
 					center: boundingSphere.center.toArray(),
 					radius: boundingSphere.radius
 				};
 			}
-
 			return data;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		copy(source) {
 			// reset
+
 			this.index = null;
 			this.attributes = {};
 			this.morphAttributes = {};
 			this.groups = [];
 			this.boundingBox = null;
-			this.boundingSphere = null; // used for storing cloned, shared data
+			this.boundingSphere = null;
 
-			const data = {}; // name
+			// used for storing cloned, shared data
 
-			this.name = source.name; // index
+			const data = {};
 
-			const index = source.index;
+			// name
+
+			this.name = source.name;
+
+			// index
 
+			const index = source.index;
 			if (index !== null) {
 				this.setIndex(index.clone(data));
-			} // attributes
+			}
 
+			// attributes
 
 			const attributes = source.attributes;
-
 			for (const name in attributes) {
 				const attribute = attributes[name];
 				this.setAttribute(name, attribute.clone(data));
-			} // morph attributes
+			}
 
+			// morph attributes
 
 			const morphAttributes = source.morphAttributes;
-
 			for (const name in morphAttributes) {
 				const array = [];
 				const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes
@@ -8118,85 +7035,70 @@
 				for (let i = 0, l = morphAttribute.length; i < l; i++) {
 					array.push(morphAttribute[i].clone(data));
 				}
-
 				this.morphAttributes[name] = array;
 			}
+			this.morphTargetsRelative = source.morphTargetsRelative;
 
-			this.morphTargetsRelative = source.morphTargetsRelative; // groups
+			// groups
 
 			const groups = source.groups;
-
 			for (let i = 0, l = groups.length; i < l; i++) {
 				const group = groups[i];
 				this.addGroup(group.start, group.count, group.materialIndex);
-			} // bounding box
+			}
 
+			// bounding box
 
 			const boundingBox = source.boundingBox;
-
 			if (boundingBox !== null) {
 				this.boundingBox = boundingBox.clone();
-			} // bounding sphere
+			}
 
+			// bounding sphere
 
 			const boundingSphere = source.boundingSphere;
-
 			if (boundingSphere !== null) {
 				this.boundingSphere = boundingSphere.clone();
-			} // draw range
+			}
 
+			// draw range
 
 			this.drawRange.start = source.drawRange.start;
-			this.drawRange.count = source.drawRange.count; // user data
+			this.drawRange.count = source.drawRange.count;
+
+			// user data
 
-			this.userData = source.userData; // geometry generator parameters
+			this.userData = source.userData;
+
+			// geometry generator parameters
 
 			if (source.parameters !== undefined) this.parameters = Object.assign({}, source.parameters);
 			return this;
 		}
-
 		dispose() {
 			this.dispatchEvent({
 				type: 'dispose'
 			});
 		}
-
 	}
 
 	const _inverseMatrix$2 = /*@__PURE__*/new Matrix4();
-
 	const _ray$2 = /*@__PURE__*/new Ray();
-
 	const _sphere$3 = /*@__PURE__*/new Sphere();
-
 	const _vA$1 = /*@__PURE__*/new Vector3();
-
 	const _vB$1 = /*@__PURE__*/new Vector3();
-
 	const _vC$1 = /*@__PURE__*/new Vector3();
-
 	const _tempA = /*@__PURE__*/new Vector3();
-
 	const _tempB = /*@__PURE__*/new Vector3();
-
 	const _tempC = /*@__PURE__*/new Vector3();
-
 	const _morphA = /*@__PURE__*/new Vector3();
-
 	const _morphB = /*@__PURE__*/new Vector3();
-
 	const _morphC = /*@__PURE__*/new Vector3();
-
 	const _uvA$1 = /*@__PURE__*/new Vector2();
-
 	const _uvB$1 = /*@__PURE__*/new Vector2();
-
 	const _uvC$1 = /*@__PURE__*/new Vector2();
-
 	const _intersectionPoint = /*@__PURE__*/new Vector3();
-
 	const _intersectionPointWorld = /*@__PURE__*/new Vector3();
-
 	class Mesh extends Object3D {
 		constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
 			super();
@@ -8206,35 +7108,27 @@
 			this.material = material;
 			this.updateMorphTargets();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
-
 			if (source.morphTargetInfluences !== undefined) {
 				this.morphTargetInfluences = source.morphTargetInfluences.slice();
 			}
-
 			if (source.morphTargetDictionary !== undefined) {
 				this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
 			}
-
 			this.material = source.material;
 			this.geometry = source.geometry;
 			return this;
 		}
-
 		updateMorphTargets() {
 			const geometry = this.geometry;
 			const morphAttributes = geometry.morphAttributes;
 			const keys = Object.keys(morphAttributes);
-
 			if (keys.length > 0) {
 				const morphAttribute = morphAttributes[keys[0]];
-
 				if (morphAttribute !== undefined) {
 					this.morphTargetInfluences = [];
 					this.morphTargetDictionary = {};
-
 					for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
 						const name = morphAttribute[m].name || String(m);
 						this.morphTargetInfluences.push(0);
@@ -8243,30 +7137,29 @@
 				}
 			}
 		}
-
 		raycast(raycaster, intersects) {
 			const geometry = this.geometry;
 			const material = this.material;
 			const matrixWorld = this.matrixWorld;
-			if (material === undefined) return; // Checking boundingSphere distance to ray
+			if (material === undefined) return;
 
-			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
+			// Checking boundingSphere distance to ray
 
+			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
 			_sphere$3.copy(geometry.boundingSphere);
-
 			_sphere$3.applyMatrix4(matrixWorld);
+			if (raycaster.ray.intersectsSphere(_sphere$3) === false) return;
 
-			if (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //
+			//
 
 			_inverseMatrix$2.copy(matrixWorld).invert();
+			_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
 
-			_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing
-
+			// Check boundingBox before continuing
 
 			if (geometry.boundingBox !== null) {
 				if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;
 			}
-
 			let intersection;
 			const index = geometry.index;
 			const position = geometry.attributes.position;
@@ -8276,25 +7169,22 @@
 			const uv2 = geometry.attributes.uv2;
 			const groups = geometry.groups;
 			const drawRange = geometry.drawRange;
-
 			if (index !== null) {
 				// indexed buffer geometry
+
 				if (Array.isArray(material)) {
 					for (let i = 0, il = groups.length; i < il; i++) {
 						const group = groups[i];
 						const groupMaterial = material[group.materialIndex];
 						const start = Math.max(group.start, drawRange.start);
 						const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
-
 						for (let j = start, jl = end; j < jl; j += 3) {
 							const a = index.getX(j);
 							const b = index.getX(j + 1);
 							const c = index.getX(j + 2);
 							intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
-
 							if (intersection) {
 								intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics
-
 								intersection.face.materialIndex = group.materialIndex;
 								intersects.push(intersection);
 							}
@@ -8303,38 +7193,33 @@
 				} else {
 					const start = Math.max(0, drawRange.start);
 					const end = Math.min(index.count, drawRange.start + drawRange.count);
-
 					for (let i = start, il = end; i < il; i += 3) {
 						const a = index.getX(i);
 						const b = index.getX(i + 1);
 						const c = index.getX(i + 2);
 						intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
-
 						if (intersection) {
 							intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics
-
 							intersects.push(intersection);
 						}
 					}
 				}
 			} else if (position !== undefined) {
 				// non-indexed buffer geometry
+
 				if (Array.isArray(material)) {
 					for (let i = 0, il = groups.length; i < il; i++) {
 						const group = groups[i];
 						const groupMaterial = material[group.materialIndex];
 						const start = Math.max(group.start, drawRange.start);
 						const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
-
 						for (let j = start, jl = end; j < jl; j += 3) {
 							const a = j;
 							const b = j + 1;
 							const c = j + 2;
 							intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
-
 							if (intersection) {
 								intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics
-
 								intersection.face.materialIndex = group.materialIndex;
 								intersects.push(intersection);
 							}
@@ -8343,40 +7228,30 @@
 				} else {
 					const start = Math.max(0, drawRange.start);
 					const end = Math.min(position.count, drawRange.start + drawRange.count);
-
 					for (let i = start, il = end; i < il; i += 3) {
 						const a = i;
 						const b = i + 1;
 						const c = i + 2;
 						intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
-
 						if (intersection) {
 							intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics
-
 							intersects.push(intersection);
 						}
 					}
 				}
 			}
 		}
-
 	}
-
 	function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
 		let intersect;
-
 		if (material.side === BackSide) {
 			intersect = ray.intersectTriangle(pC, pB, pA, true, point);
 		} else {
 			intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
 		}
-
 		if (intersect === null) return null;
-
 		_intersectionPointWorld.copy(point);
-
 		_intersectionPointWorld.applyMatrix4(object.matrixWorld);
-
 		const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
 		if (distance < raycaster.near || distance > raycaster.far) return null;
 		return {
@@ -8385,85 +7260,55 @@
 			object: object
 		};
 	}
-
 	function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
 		_vA$1.fromBufferAttribute(position, a);
-
 		_vB$1.fromBufferAttribute(position, b);
-
 		_vC$1.fromBufferAttribute(position, c);
-
 		const morphInfluences = object.morphTargetInfluences;
-
 		if (morphPosition && morphInfluences) {
 			_morphA.set(0, 0, 0);
-
 			_morphB.set(0, 0, 0);
-
 			_morphC.set(0, 0, 0);
-
 			for (let i = 0, il = morphPosition.length; i < il; i++) {
 				const influence = morphInfluences[i];
 				const morphAttribute = morphPosition[i];
 				if (influence === 0) continue;
-
 				_tempA.fromBufferAttribute(morphAttribute, a);
-
 				_tempB.fromBufferAttribute(morphAttribute, b);
-
 				_tempC.fromBufferAttribute(morphAttribute, c);
-
 				if (morphTargetsRelative) {
 					_morphA.addScaledVector(_tempA, influence);
-
 					_morphB.addScaledVector(_tempB, influence);
-
 					_morphC.addScaledVector(_tempC, influence);
 				} else {
 					_morphA.addScaledVector(_tempA.sub(_vA$1), influence);
-
 					_morphB.addScaledVector(_tempB.sub(_vB$1), influence);
-
 					_morphC.addScaledVector(_tempC.sub(_vC$1), influence);
 				}
 			}
-
 			_vA$1.add(_morphA);
-
 			_vB$1.add(_morphB);
-
 			_vC$1.add(_morphC);
 		}
-
 		if (object.isSkinnedMesh) {
 			object.boneTransform(a, _vA$1);
 			object.boneTransform(b, _vB$1);
 			object.boneTransform(c, _vC$1);
 		}
-
 		const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
-
 		if (intersection) {
 			if (uv) {
 				_uvA$1.fromBufferAttribute(uv, a);
-
 				_uvB$1.fromBufferAttribute(uv, b);
-
 				_uvC$1.fromBufferAttribute(uv, c);
-
 				intersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
 			}
-
 			if (uv2) {
 				_uvA$1.fromBufferAttribute(uv2, a);
-
 				_uvB$1.fromBufferAttribute(uv2, b);
-
 				_uvC$1.fromBufferAttribute(uv2, c);
-
 				intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
 			}
-
 			const face = {
 				a: a,
 				b: b,
@@ -8474,7 +7319,6 @@
 			Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
 			intersection.face = face;
 		}
-
 		return intersection;
 	}
 
@@ -8490,38 +7334,41 @@
 				heightSegments: heightSegments,
 				depthSegments: depthSegments
 			};
-			const scope = this; // segments
+			const scope = this;
+
+			// segments
 
 			widthSegments = Math.floor(widthSegments);
 			heightSegments = Math.floor(heightSegments);
-			depthSegments = Math.floor(depthSegments); // buffers
+			depthSegments = Math.floor(depthSegments);
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
-			const uvs = []; // helper variables
+			const uvs = [];
+
+			// helper variables
 
 			let numberOfVertices = 0;
-			let groupStart = 0; // build each side of the box geometry
+			let groupStart = 0;
 
-			buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px
+			// build each side of the box geometry
 
+			buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px
 			buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx
-
 			buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py
-
 			buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny
-
 			buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz
-
 			buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
+
 			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
-
 			function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
 				const segmentWidth = width / gridX;
 				const segmentHeight = height / gridY;
@@ -8532,64 +7379,86 @@
 				const gridY1 = gridY + 1;
 				let vertexCounter = 0;
 				let groupCount = 0;
-				const vector = new Vector3(); // generate vertices, normals and uvs
+				const vector = new Vector3();
+
+				// generate vertices, normals and uvs
 
 				for (let iy = 0; iy < gridY1; iy++) {
 					const y = iy * segmentHeight - heightHalf;
-
 					for (let ix = 0; ix < gridX1; ix++) {
-						const x = ix * segmentWidth - widthHalf; // set values to correct vector component
+						const x = ix * segmentWidth - widthHalf;
+
+						// set values to correct vector component
 
 						vector[u] = x * udir;
 						vector[v] = y * vdir;
-						vector[w] = depthHalf; // now apply vector to vertex buffer
+						vector[w] = depthHalf;
+
+						// now apply vector to vertex buffer
+
+						vertices.push(vector.x, vector.y, vector.z);
 
-						vertices.push(vector.x, vector.y, vector.z); // set values to correct vector component
+						// set values to correct vector component
 
 						vector[u] = 0;
 						vector[v] = 0;
-						vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer
+						vector[w] = depth > 0 ? 1 : -1;
 
-						normals.push(vector.x, vector.y, vector.z); // uvs
+						// now apply vector to normal buffer
+
+						normals.push(vector.x, vector.y, vector.z);
+
+						// uvs
 
 						uvs.push(ix / gridX);
-						uvs.push(1 - iy / gridY); // counters
+						uvs.push(1 - iy / gridY);
+
+						// counters
 
 						vertexCounter += 1;
 					}
-				} // indices
+				}
+
+				// indices
+
 				// 1. you need three indices to draw a single face
 				// 2. a single segment consists of two faces
 				// 3. so we need to generate six (2*3) indices per segment
 
-
 				for (let iy = 0; iy < gridY; iy++) {
 					for (let ix = 0; ix < gridX; ix++) {
 						const a = numberOfVertices + ix + gridX1 * iy;
 						const b = numberOfVertices + ix + gridX1 * (iy + 1);
 						const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
-						const d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces
+						const d = numberOfVertices + (ix + 1) + gridX1 * iy;
+
+						// faces
 
 						indices.push(a, b, d);
-						indices.push(b, c, d); // increase counter
+						indices.push(b, c, d);
+
+						// increase counter
 
 						groupCount += 6;
 					}
-				} // add a group to the geometry. this will ensure multi material support
+				}
+
+				// add a group to the geometry. this will ensure multi material support
+
+				scope.addGroup(groupStart, groupCount, materialIndex);
 
+				// calculate new start value for groups
 
-				scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups
+				groupStart += groupCount;
 
-				groupStart += groupCount; // update total number of vertices
+				// update total number of vertices
 
 				numberOfVertices += vertexCounter;
 			}
 		}
-
 		static fromJSON(data) {
 			return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
 		}
-
 	}
 
 	/**
@@ -8598,13 +7467,10 @@
 
 	function cloneUniforms(src) {
 		const dst = {};
-
 		for (const u in src) {
 			dst[u] = {};
-
 			for (const p in src[u]) {
 				const property = src[u][p];
-
 				if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
 					dst[u][p] = property.clone();
 				} else if (Array.isArray(property)) {
@@ -8614,29 +7480,23 @@
 				}
 			}
 		}
-
 		return dst;
 	}
 	function mergeUniforms(uniforms) {
 		const merged = {};
-
 		for (let u = 0; u < uniforms.length; u++) {
 			const tmp = cloneUniforms(uniforms[u]);
-
 			for (const p in tmp) {
 				merged[p] = tmp[p];
 			}
 		}
-
 		return merged;
 	}
 	function cloneUniformsGroups(src) {
 		const dst = [];
-
 		for (let u = 0; u < src.length; u++) {
 			dst.push(src[u].clone());
 		}
-
 		return dst;
 	}
 	function getUnlitUniformColorSpace(renderer) {
@@ -8644,9 +7504,10 @@
 			// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
 			return renderer.outputEncoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;
 		}
-
 		return LinearSRGBColorSpace;
-	} // Legacy
+	}
+
+	// Legacy
 
 	const UniformsUtils = {
 		clone: cloneUniforms,
@@ -8671,9 +7532,7 @@
 			this.wireframe = false;
 			this.wireframeLinewidth = 1;
 			this.fog = false; // set to use scene fog
-
 			this.lights = false; // set to use scene lights
-
 			this.clipping = false; // set to use user-defined clipping planes
 
 			this.extensions = {
@@ -8684,10 +7543,10 @@
 				drawBuffers: false,
 				// set to use draw buffers
 				shaderTextureLOD: false // set to use shader texture LOD
+			};
 
-			}; // When rendered geometry doesn't include these attributes but the material does,
+			// When rendered geometry doesn't include these attributes but the material does,
 			// use these default values in WebGL. This avoids errors when buffer data is missing.
-
 			this.defaultAttributeValues = {
 				'color': [1, 1, 1],
 				'uv': [0, 0],
@@ -8696,12 +7555,10 @@
 			this.index0AttributeName = undefined;
 			this.uniformsNeedUpdate = false;
 			this.glslVersion = null;
-
 			if (parameters !== undefined) {
 				this.setValues(parameters);
 			}
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.fragmentShader = source.fragmentShader;
@@ -8718,16 +7575,13 @@
 			this.glslVersion = source.glslVersion;
 			return this;
 		}
-
 		toJSON(meta) {
 			const data = super.toJSON(meta);
 			data.glslVersion = this.glslVersion;
 			data.uniforms = {};
-
 			for (const name in this.uniforms) {
 				const uniform = this.uniforms[name];
 				const value = uniform.value;
-
 				if (value && value.isTexture) {
 					data.uniforms[name] = {
 						type: 't',
@@ -8766,7 +7620,9 @@
 				} else {
 					data.uniforms[name] = {
 						value: value
-					}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
+					};
+
+					// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
 				}
 			}
 
@@ -8774,15 +7630,12 @@
 			data.vertexShader = this.vertexShader;
 			data.fragmentShader = this.fragmentShader;
 			const extensions = {};
-
 			for (const key in this.extensions) {
 				if (this.extensions[key] === true) extensions[key] = true;
 			}
-
 			if (Object.keys(extensions).length > 0) data.extensions = extensions;
 			return data;
 		}
-
 	}
 
 	class Camera extends Object3D {
@@ -8794,7 +7647,6 @@
 			this.projectionMatrix = new Matrix4();
 			this.projectionMatrixInverse = new Matrix4();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.matrixWorldInverse.copy(source.matrixWorldInverse);
@@ -8802,27 +7654,22 @@
 			this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
 			return this;
 		}
-
 		getWorldDirection(target) {
 			this.updateWorldMatrix(true, false);
 			const e = this.matrixWorld.elements;
 			return target.set(-e[8], -e[9], -e[10]).normalize();
 		}
-
 		updateMatrixWorld(force) {
 			super.updateMatrixWorld(force);
 			this.matrixWorldInverse.copy(this.matrixWorld).invert();
 		}
-
 		updateWorldMatrix(updateParents, updateChildren) {
 			super.updateWorldMatrix(updateParents, updateChildren);
 			this.matrixWorldInverse.copy(this.matrixWorld).invert();
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	class PerspectiveCamera extends Camera {
@@ -8838,12 +7685,10 @@
 			this.aspect = aspect;
 			this.view = null;
 			this.filmGauge = 35; // width of the film (default in millimeters)
-
 			this.filmOffset = 0; // horizontal film offset (same unit as gauge)
 
 			this.updateProjectionMatrix();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.fov = source.fov;
@@ -8857,6 +7702,7 @@
 			this.filmOffset = source.filmOffset;
 			return this;
 		}
+
 		/**
 		 * Sets the FOV by focal length in respect to the current .filmGauge.
 		 *
@@ -8865,37 +7711,32 @@
 		 *
 		 * Values for focal length and film gauge must have the same unit.
 		 */
-
-
 		setFocalLength(focalLength) {
 			/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
 			const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
 			this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
 			this.updateProjectionMatrix();
 		}
+
 		/**
 		 * Calculates the focal length from the current .fov and .filmGauge.
 		 */
-
-
 		getFocalLength() {
 			const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
 			return 0.5 * this.getFilmHeight() / vExtentSlope;
 		}
-
 		getEffectiveFOV() {
 			return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
 		}
-
 		getFilmWidth() {
 			// film not completely covered in portrait format (aspect < 1)
 			return this.filmGauge * Math.min(this.aspect, 1);
 		}
-
 		getFilmHeight() {
 			// film not completely covered in landscape format (aspect > 1)
 			return this.filmGauge / Math.max(this.aspect, 1);
 		}
+
 		/**
 		 * Sets an offset in a larger frustum. This is useful for multi-window or
 		 * multi-monitor/multi-machine setups.
@@ -8931,11 +7772,8 @@
 		 *
 		 *	 Note there is no reason monitors have to be the same size or in a grid.
 		 */
-
-
 		setViewOffset(fullWidth, fullHeight, x, y, width, height) {
 			this.aspect = fullWidth / fullHeight;
-
 			if (this.view === null) {
 				this.view = {
 					enabled: true,
@@ -8947,7 +7785,6 @@
 					height: 1
 				};
 			}
-
 			this.view.enabled = true;
 			this.view.fullWidth = fullWidth;
 			this.view.fullHeight = fullHeight;
@@ -8957,15 +7794,12 @@
 			this.view.height = height;
 			this.updateProjectionMatrix();
 		}
-
 		clearViewOffset() {
 			if (this.view !== null) {
 				this.view.enabled = false;
 			}
-
 			this.updateProjectionMatrix();
 		}
-
 		updateProjectionMatrix() {
 			const near = this.near;
 			let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
@@ -8973,22 +7807,19 @@
 			let width = this.aspect * height;
 			let left = -0.5 * width;
 			const view = this.view;
-
 			if (this.view !== null && this.view.enabled) {
 				const fullWidth = view.fullWidth,
-							fullHeight = view.fullHeight;
+					fullHeight = view.fullHeight;
 				left += view.offsetX * width / fullWidth;
 				top -= view.offsetY * height / fullHeight;
 				width *= view.width / fullWidth;
 				height *= view.height / fullHeight;
 			}
-
 			const skew = this.filmOffset;
 			if (skew !== 0) left += near * skew / this.getFilmWidth();
 			this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
 			this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
 		}
-
 		toJSON(meta) {
 			const data = super.toJSON(meta);
 			data.object.fov = this.fov;
@@ -9002,13 +7833,10 @@
 			data.object.filmOffset = this.filmOffset;
 			return data;
 		}
-
 	}
 
 	const fov = -90; // negative fov is not an error
-
 	const aspect = 1;
-
 	class CubeCamera extends Object3D {
 		constructor(near, far, renderTarget) {
 			super();
@@ -9045,7 +7873,6 @@
 			cameraNZ.lookAt(0, 0, -1);
 			this.add(cameraNZ);
 		}
-
 		update(renderer, scene) {
 			if (this.parent === null) this.updateMatrixWorld();
 			const renderTarget = this.renderTarget;
@@ -9075,7 +7902,6 @@
 			renderer.xr.enabled = currentXrEnabled;
 			renderTarget.texture.needsPMREMUpdate = true;
 		}
-
 	}
 
 	class CubeTexture extends Texture {
@@ -9086,15 +7912,12 @@
 			this.isCubeTexture = true;
 			this.flipY = false;
 		}
-
 		get images() {
 			return this.image;
 		}
-
 		set images(value) {
 			this.image = value;
 		}
-
 	}
 
 	class WebGLCubeRenderTarget extends WebGLRenderTarget {
@@ -9107,9 +7930,12 @@
 				depth: 1
 			};
 			const images = [image, image, image, image, image, image];
-			this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding); // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
+			this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
+
+			// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
 			// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
 			// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
+
 			// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
 			// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
 			// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
@@ -9118,7 +7944,6 @@
 			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
 			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
 		}
-
 		fromEquirectangularTexture(renderer, texture) {
 			this.texture.type = texture.type;
 			this.texture.encoding = texture.encoding;
@@ -9131,9 +7956,7 @@
 						value: null
 					}
 				},
-				vertexShader:
-				/* glsl */
-				`
+				vertexShader: /* glsl */`
 
 				varying vec3 vWorldDirection;
 
@@ -9152,9 +7975,7 @@
 
 				}
 			`,
-				fragmentShader:
-				/* glsl */
-				`
+				fragmentShader: /* glsl */`
 
 				uniform sampler2D tEquirect;
 
@@ -9184,8 +8005,9 @@
 			});
 			material.uniforms.tEquirect.value = texture;
 			const mesh = new Mesh(geometry, material);
-			const currentMinFilter = texture.minFilter; // Avoid blurred poles
+			const currentMinFilter = texture.minFilter;
 
+			// Avoid blurred poles
 			if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
 			const camera = new CubeCamera(1, 10, this);
 			camera.update(renderer, mesh);
@@ -9194,167 +8016,137 @@
 			mesh.material.dispose();
 			return this;
 		}
-
 		clear(renderer, color, depth, stencil) {
 			const currentRenderTarget = renderer.getRenderTarget();
-
 			for (let i = 0; i < 6; i++) {
 				renderer.setRenderTarget(this, i);
 				renderer.clear(color, depth, stencil);
 			}
-
 			renderer.setRenderTarget(currentRenderTarget);
 		}
-
 	}
 
 	const _vector1 = /*@__PURE__*/new Vector3();
-
 	const _vector2 = /*@__PURE__*/new Vector3();
-
 	const _normalMatrix = /*@__PURE__*/new Matrix3();
-
 	class Plane {
 		constructor(normal = new Vector3(1, 0, 0), constant = 0) {
-			this.isPlane = true; // normal is assumed to be normalized
+			this.isPlane = true;
+
+			// normal is assumed to be normalized
 
 			this.normal = normal;
 			this.constant = constant;
 		}
-
 		set(normal, constant) {
 			this.normal.copy(normal);
 			this.constant = constant;
 			return this;
 		}
-
 		setComponents(x, y, z, w) {
 			this.normal.set(x, y, z);
 			this.constant = w;
 			return this;
 		}
-
 		setFromNormalAndCoplanarPoint(normal, point) {
 			this.normal.copy(normal);
 			this.constant = -point.dot(this.normal);
 			return this;
 		}
-
 		setFromCoplanarPoints(a, b, c) {
-			const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
+			const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
 
+			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
 
 			this.setFromNormalAndCoplanarPoint(normal, a);
 			return this;
 		}
-
 		copy(plane) {
 			this.normal.copy(plane.normal);
 			this.constant = plane.constant;
 			return this;
 		}
-
 		normalize() {
 			// Note: will lead to a divide by zero if the plane is invalid.
+
 			const inverseNormalLength = 1.0 / this.normal.length();
 			this.normal.multiplyScalar(inverseNormalLength);
 			this.constant *= inverseNormalLength;
 			return this;
 		}
-
 		negate() {
 			this.constant *= -1;
 			this.normal.negate();
 			return this;
 		}
-
 		distanceToPoint(point) {
 			return this.normal.dot(point) + this.constant;
 		}
-
 		distanceToSphere(sphere) {
 			return this.distanceToPoint(sphere.center) - sphere.radius;
 		}
-
 		projectPoint(point, target) {
 			return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
 		}
-
 		intersectLine(line, target) {
 			const direction = line.delta(_vector1);
 			const denominator = this.normal.dot(direction);
-
 			if (denominator === 0) {
 				// line is coplanar, return origin
 				if (this.distanceToPoint(line.start) === 0) {
 					return target.copy(line.start);
-				} // Unsure if this is the correct method to handle this case.
-
+				}
 
+				// Unsure if this is the correct method to handle this case.
 				return null;
 			}
-
 			const t = -(line.start.dot(this.normal) + this.constant) / denominator;
-
 			if (t < 0 || t > 1) {
 				return null;
 			}
-
 			return target.copy(direction).multiplyScalar(t).add(line.start);
 		}
-
 		intersectsLine(line) {
 			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
+
 			const startSign = this.distanceToPoint(line.start);
 			const endSign = this.distanceToPoint(line.end);
 			return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
 		}
-
 		intersectsBox(box) {
 			return box.intersectsPlane(this);
 		}
-
 		intersectsSphere(sphere) {
 			return sphere.intersectsPlane(this);
 		}
-
 		coplanarPoint(target) {
 			return target.copy(this.normal).multiplyScalar(-this.constant);
 		}
-
 		applyMatrix4(matrix, optionalNormalMatrix) {
 			const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
-
 			const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
 			const normal = this.normal.applyMatrix3(normalMatrix).normalize();
 			this.constant = -referencePoint.dot(normal);
 			return this;
 		}
-
 		translate(offset) {
 			this.constant -= offset.dot(this.normal);
 			return this;
 		}
-
 		equals(plane) {
 			return plane.normal.equals(this.normal) && plane.constant === this.constant;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	const _sphere$2 = /*@__PURE__*/new Sphere();
-
 	const _vector$7 = /*@__PURE__*/new Vector3();
-
 	class Frustum {
 		constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
 			this.planes = [p0, p1, p2, p3, p4, p5];
 		}
-
 		set(p0, p1, p2, p3, p4, p5) {
 			const planes = this.planes;
 			planes[0].copy(p0);
@@ -9365,36 +8157,32 @@
 			planes[5].copy(p5);
 			return this;
 		}
-
 		copy(frustum) {
 			const planes = this.planes;
-
 			for (let i = 0; i < 6; i++) {
 				planes[i].copy(frustum.planes[i]);
 			}
-
 			return this;
 		}
-
 		setFromProjectionMatrix(m) {
 			const planes = this.planes;
 			const me = m.elements;
 			const me0 = me[0],
-						me1 = me[1],
-						me2 = me[2],
-						me3 = me[3];
+				me1 = me[1],
+				me2 = me[2],
+				me3 = me[3];
 			const me4 = me[4],
-						me5 = me[5],
-						me6 = me[6],
-						me7 = me[7];
+				me5 = me[5],
+				me6 = me[6],
+				me7 = me[7];
 			const me8 = me[8],
-						me9 = me[9],
-						me10 = me[10],
-						me11 = me[11];
+				me9 = me[9],
+				me10 = me[10],
+				me11 = me[11];
 			const me12 = me[12],
-						me13 = me[13],
-						me14 = me[14],
-						me15 = me[15];
+				me13 = me[13],
+				me14 = me[14],
+				me15 = me[15];
 			planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
 			planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
 			planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
@@ -9403,76 +8191,58 @@
 			planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
 			return this;
 		}
-
 		intersectsObject(object) {
 			const geometry = object.geometry;
 			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
-
 			_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
-
 			return this.intersectsSphere(_sphere$2);
 		}
-
 		intersectsSprite(sprite) {
 			_sphere$2.center.set(0, 0, 0);
-
 			_sphere$2.radius = 0.7071067811865476;
-
 			_sphere$2.applyMatrix4(sprite.matrixWorld);
-
 			return this.intersectsSphere(_sphere$2);
 		}
-
 		intersectsSphere(sphere) {
 			const planes = this.planes;
 			const center = sphere.center;
 			const negRadius = -sphere.radius;
-
 			for (let i = 0; i < 6; i++) {
 				const distance = planes[i].distanceToPoint(center);
-
 				if (distance < negRadius) {
 					return false;
 				}
 			}
-
 			return true;
 		}
-
 		intersectsBox(box) {
 			const planes = this.planes;
-
 			for (let i = 0; i < 6; i++) {
-				const plane = planes[i]; // corner at max distance
+				const plane = planes[i];
+
+				// corner at max distance
 
 				_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
 				_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
 				_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
-
 				if (plane.distanceToPoint(_vector$7) < 0) {
 					return false;
 				}
 			}
-
 			return true;
 		}
-
 		containsPoint(point) {
 			const planes = this.planes;
-
 			for (let i = 0; i < 6; i++) {
 				if (planes[i].distanceToPoint(point) < 0) {
 					return false;
 				}
 			}
-
 			return true;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	function WebGLAnimation() {
@@ -9480,12 +8250,10 @@
 		let isAnimating = false;
 		let animationLoop = null;
 		let requestId = null;
-
 		function onAnimationFrame(time, frame) {
 			animationLoop(time, frame);
 			requestId = context.requestAnimationFrame(onAnimationFrame);
 		}
-
 		return {
 			start: function () {
 				if (isAnimating === true) return;
@@ -9509,7 +8277,6 @@
 	function WebGLAttributes(gl, capabilities) {
 		const isWebGL2 = capabilities.isWebGL2;
 		const buffers = new WeakMap();
-
 		function createBuffer(attribute, bufferType) {
 			const array = attribute.array;
 			const usage = attribute.usage;
@@ -9518,7 +8285,6 @@
 			gl.bufferData(bufferType, array, usage);
 			attribute.onUploadCallback();
 			let type;
-
 			if (array instanceof Float32Array) {
 				type = gl.FLOAT;
 			} else if (array instanceof Uint16Array) {
@@ -9546,7 +8312,6 @@
 			} else {
 				throw new Error('THREE.WebGLAttributes: Unsupported buffer data format: ' + array);
 			}
-
 			return {
 				buffer: buffer,
 				type: type,
@@ -9554,14 +8319,13 @@
 				version: attribute.version
 			};
 		}
-
 		function updateBuffer(buffer, attribute, bufferType) {
 			const array = attribute.array;
 			const updateRange = attribute.updateRange;
 			gl.bindBuffer(bufferType, buffer);
-
 			if (updateRange.count === -1) {
 				// Not using update ranges
+
 				gl.bufferSubData(bufferType, 0, array);
 			} else {
 				if (isWebGL2) {
@@ -9569,33 +8333,29 @@
 				} else {
 					gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
 				}
-
 				updateRange.count = -1; // reset range
 			}
 
 			attribute.onUploadCallback();
-		} //
+		}
 
+		//
 
 		function get(attribute) {
 			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
 			return buffers.get(attribute);
 		}
-
 		function remove(attribute) {
 			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
 			const data = buffers.get(attribute);
-
 			if (data) {
 				gl.deleteBuffer(data.buffer);
 				buffers.delete(attribute);
 			}
 		}
-
 		function update(attribute, bufferType) {
 			if (attribute.isGLBufferAttribute) {
 				const cached = buffers.get(attribute);
-
 				if (!cached || cached.version < attribute.version) {
 					buffers.set(attribute, {
 						buffer: attribute.buffer,
@@ -9604,13 +8364,10 @@
 						version: attribute.version
 					});
 				}
-
 				return;
 			}
-
 			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
 			const data = buffers.get(attribute);
-
 			if (data === undefined) {
 				buffers.set(attribute, createBuffer(attribute, bufferType));
 			} else if (data.version < attribute.version) {
@@ -9618,7 +8375,6 @@
 				data.version = attribute.version;
 			}
 		}
-
 		return {
 			get: get,
 			remove: remove,
@@ -9643,16 +8399,16 @@
 			const gridX1 = gridX + 1;
 			const gridY1 = gridY + 1;
 			const segment_width = width / gridX;
-			const segment_height = height / gridY; //
+			const segment_height = height / gridY;
+
+			//
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
 			const uvs = [];
-
 			for (let iy = 0; iy < gridY1; iy++) {
 				const y = iy * segment_height - height_half;
-
 				for (let ix = 0; ix < gridX1; ix++) {
 					const x = ix * segment_width - width_half;
 					vertices.push(x, -y, 0);
@@ -9661,7 +8417,6 @@
 					uvs.push(1 - iy / gridY);
 				}
 			}
-
 			for (let iy = 0; iy < gridY; iy++) {
 				for (let ix = 0; ix < gridX; ix++) {
 					const a = ix + gridX1 * iy;
@@ -9672,17 +8427,14 @@
 					indices.push(b, c, d);
 				}
 			}
-
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 		}
-
 		static fromJSON(data) {
 			return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
 		}
-
 	}
 
 	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
@@ -10142,8 +8894,8 @@
 			refractionRatio: {
 				value: 0.98
 			} // basic, lambert, phong
-
 		},
+
 		aomap: {
 			aoMap: {
 				value: null
@@ -10429,8 +9181,8 @@
 				envMapIntensity: {
 					value: 1
 				} // temporary
-
 			}]),
+
 			vertexShader: ShaderChunk.meshphysical_vert,
 			fragmentShader: ShaderChunk.meshphysical_frag
 		},
@@ -10675,7 +9427,6 @@
 		b: 0,
 		g: 0
 	};
-
 	function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
 		const clearColor = new Color(0x000000);
 		let clearAlpha = alpha === true ? 0 : 1;
@@ -10684,37 +9435,31 @@
 		let currentBackground = null;
 		let currentBackgroundVersion = 0;
 		let currentTonemapping = null;
-
 		function render(renderList, scene) {
 			let forceClear = false;
 			let background = scene.isScene === true ? scene.background : null;
-
 			if (background && background.isTexture) {
 				const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
-
 				background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
-			} // Ignore background in AR
-			// TODO: Reconsider this.
+			}
 
+			// Ignore background in AR
+			// TODO: Reconsider this.
 
 			const xr = renderer.xr;
 			const session = xr.getSession && xr.getSession();
-
 			if (session && session.environmentBlendMode === 'additive') {
 				background = null;
 			}
-
 			if (background === null) {
 				setClear(clearColor, clearAlpha);
 			} else if (background && background.isColor) {
 				setClear(background, 1);
 				forceClear = true;
 			}
-
 			if (renderer.autoClear || forceClear) {
 				renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
 			}
-
 			if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
 				if (boxMesh === undefined) {
 					boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
@@ -10729,12 +9474,11 @@
 					}));
 					boxMesh.geometry.deleteAttribute('normal');
 					boxMesh.geometry.deleteAttribute('uv');
-
 					boxMesh.onBeforeRender = function (renderer, scene, camera) {
 						this.matrixWorld.copyPosition(camera.matrixWorld);
-					}; // add "envMap" material property so the renderer can evaluate it like for built-in materials
-
+					};
 
+					// add "envMap" material property so the renderer can evaluate it like for built-in materials
 					Object.defineProperty(boxMesh.material, 'envMap', {
 						get: function () {
 							return this.uniforms.envMap.value;
@@ -10742,21 +9486,19 @@
 					});
 					objects.update(boxMesh);
 				}
-
 				boxMesh.material.uniforms.envMap.value = background;
 				boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
 				boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
 				boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
-
 				if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
 					boxMesh.material.needsUpdate = true;
 					currentBackground = background;
 					currentBackgroundVersion = background.version;
 					currentTonemapping = renderer.toneMapping;
 				}
+				boxMesh.layers.enableAll();
 
-				boxMesh.layers.enableAll(); // push to the pre-sorted opaque render list
-
+				// push to the pre-sorted opaque render list
 				renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
 			} else if (background && background.isTexture) {
 				if (planeMesh === undefined) {
@@ -10770,8 +9512,9 @@
 						depthWrite: false,
 						fog: false
 					}));
-					planeMesh.geometry.deleteAttribute('normal'); // add "map" material property so the renderer can evaluate it like for built-in materials
+					planeMesh.geometry.deleteAttribute('normal');
 
+					// add "map" material property so the renderer can evaluate it like for built-in materials
 					Object.defineProperty(planeMesh.material, 'map', {
 						get: function () {
 							return this.uniforms.t2D.value;
@@ -10779,34 +9522,28 @@
 					});
 					objects.update(planeMesh);
 				}
-
 				planeMesh.material.uniforms.t2D.value = background;
 				planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
-
 				if (background.matrixAutoUpdate === true) {
 					background.updateMatrix();
 				}
-
 				planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
-
 				if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
 					planeMesh.material.needsUpdate = true;
 					currentBackground = background;
 					currentBackgroundVersion = background.version;
 					currentTonemapping = renderer.toneMapping;
 				}
+				planeMesh.layers.enableAll();
 
-				planeMesh.layers.enableAll(); // push to the pre-sorted opaque render list
-
+				// push to the pre-sorted opaque render list
 				renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
 			}
 		}
-
 		function setClear(color, alpha) {
 			color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));
 			state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha);
 		}
-
 		return {
 			getClearColor: function () {
 				return clearColor;
@@ -10835,23 +9572,18 @@
 		const defaultState = createBindingState(null);
 		let currentState = defaultState;
 		let forceUpdate = false;
-
 		function setup(object, material, program, geometry, index) {
 			let updateBuffers = false;
-
 			if (vaoAvailable) {
 				const state = getBindingState(geometry, program, material);
-
 				if (currentState !== state) {
 					currentState = state;
 					bindVertexArrayObject(currentState.object);
 				}
-
 				updateBuffers = needsUpdate(object, geometry, program, index);
 				if (updateBuffers) saveCache(object, geometry, program, index);
 			} else {
 				const wireframe = material.wireframe === true;
-
 				if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
 					currentState.geometry = geometry.id;
 					currentState.program = program.id;
@@ -10859,73 +9591,57 @@
 					updateBuffers = true;
 				}
 			}
-
 			if (index !== null) {
 				attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
 			}
-
 			if (updateBuffers || forceUpdate) {
 				forceUpdate = false;
 				setupVertexAttributes(object, material, program, geometry);
-
 				if (index !== null) {
 					gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
 				}
 			}
 		}
-
 		function createVertexArrayObject() {
 			if (capabilities.isWebGL2) return gl.createVertexArray();
 			return extension.createVertexArrayOES();
 		}
-
 		function bindVertexArrayObject(vao) {
 			if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
 			return extension.bindVertexArrayOES(vao);
 		}
-
 		function deleteVertexArrayObject(vao) {
 			if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
 			return extension.deleteVertexArrayOES(vao);
 		}
-
 		function getBindingState(geometry, program, material) {
 			const wireframe = material.wireframe === true;
 			let programMap = bindingStates[geometry.id];
-
 			if (programMap === undefined) {
 				programMap = {};
 				bindingStates[geometry.id] = programMap;
 			}
-
 			let stateMap = programMap[program.id];
-
 			if (stateMap === undefined) {
 				stateMap = {};
 				programMap[program.id] = stateMap;
 			}
-
 			let state = stateMap[wireframe];
-
 			if (state === undefined) {
 				state = createBindingState(createVertexArrayObject());
 				stateMap[wireframe] = state;
 			}
-
 			return state;
 		}
-
 		function createBindingState(vao) {
 			const newAttributes = [];
 			const enabledAttributes = [];
 			const attributeDivisors = [];
-
 			for (let i = 0; i < maxVertexAttributes; i++) {
 				newAttributes[i] = 0;
 				enabledAttributes[i] = 0;
 				attributeDivisors[i] = 0;
 			}
-
 			return {
 				// for backward compatibility on non-VAO support browser
 				geometry: null,
@@ -10939,105 +9655,83 @@
 				index: null
 			};
 		}
-
 		function needsUpdate(object, geometry, program, index) {
 			const cachedAttributes = currentState.attributes;
 			const geometryAttributes = geometry.attributes;
 			let attributesNum = 0;
 			const programAttributes = program.getAttributes();
-
 			for (const name in programAttributes) {
 				const programAttribute = programAttributes[name];
-
 				if (programAttribute.location >= 0) {
 					const cachedAttribute = cachedAttributes[name];
 					let geometryAttribute = geometryAttributes[name];
-
 					if (geometryAttribute === undefined) {
 						if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
 						if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;
 					}
-
 					if (cachedAttribute === undefined) return true;
 					if (cachedAttribute.attribute !== geometryAttribute) return true;
 					if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;
 					attributesNum++;
 				}
 			}
-
 			if (currentState.attributesNum !== attributesNum) return true;
 			if (currentState.index !== index) return true;
 			return false;
 		}
-
 		function saveCache(object, geometry, program, index) {
 			const cache = {};
 			const attributes = geometry.attributes;
 			let attributesNum = 0;
 			const programAttributes = program.getAttributes();
-
 			for (const name in programAttributes) {
 				const programAttribute = programAttributes[name];
-
 				if (programAttribute.location >= 0) {
 					let attribute = attributes[name];
-
 					if (attribute === undefined) {
 						if (name === 'instanceMatrix' && object.instanceMatrix) attribute = object.instanceMatrix;
 						if (name === 'instanceColor' && object.instanceColor) attribute = object.instanceColor;
 					}
-
 					const data = {};
 					data.attribute = attribute;
-
 					if (attribute && attribute.data) {
 						data.data = attribute.data;
 					}
-
 					cache[name] = data;
 					attributesNum++;
 				}
 			}
-
 			currentState.attributes = cache;
 			currentState.attributesNum = attributesNum;
 			currentState.index = index;
 		}
-
 		function initAttributes() {
 			const newAttributes = currentState.newAttributes;
-
 			for (let i = 0, il = newAttributes.length; i < il; i++) {
 				newAttributes[i] = 0;
 			}
 		}
-
 		function enableAttribute(attribute) {
 			enableAttributeAndDivisor(attribute, 0);
 		}
-
 		function enableAttributeAndDivisor(attribute, meshPerAttribute) {
 			const newAttributes = currentState.newAttributes;
 			const enabledAttributes = currentState.enabledAttributes;
 			const attributeDivisors = currentState.attributeDivisors;
 			newAttributes[attribute] = 1;
-
 			if (enabledAttributes[attribute] === 0) {
 				gl.enableVertexAttribArray(attribute);
 				enabledAttributes[attribute] = 1;
 			}
-
 			if (attributeDivisors[attribute] !== meshPerAttribute) {
 				const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');
 				extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);
 				attributeDivisors[attribute] = meshPerAttribute;
 			}
 		}
-
 		function disableUnusedAttributes() {
 			const newAttributes = currentState.newAttributes;
 			const enabledAttributes = currentState.enabledAttributes;
-
 			for (let i = 0, il = enabledAttributes.length; i < il; i++) {
 				if (enabledAttributes[i] !== newAttributes[i]) {
 					gl.disableVertexAttribArray(i);
@@ -11045,7 +9739,6 @@
 				}
 			}
 		}
-
 		function vertexAttribPointer(index, size, type, normalized, stride, offset) {
 			if (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {
 				gl.vertexAttribIPointer(index, size, type, stride, offset);
@@ -11053,48 +9746,41 @@
 				gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
 			}
 		}
-
 		function setupVertexAttributes(object, material, program, geometry) {
 			if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
 				if (extensions.get('ANGLE_instanced_arrays') === null) return;
 			}
-
 			initAttributes();
 			const geometryAttributes = geometry.attributes;
 			const programAttributes = program.getAttributes();
 			const materialDefaultAttributeValues = material.defaultAttributeValues;
-
 			for (const name in programAttributes) {
 				const programAttribute = programAttributes[name];
-
 				if (programAttribute.location >= 0) {
 					let geometryAttribute = geometryAttributes[name];
-
 					if (geometryAttribute === undefined) {
 						if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
 						if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;
 					}
-
 					if (geometryAttribute !== undefined) {
 						const normalized = geometryAttribute.normalized;
 						const size = geometryAttribute.itemSize;
-						const attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore
+						const attribute = attributes.get(geometryAttribute);
+
+						// TODO Attribute may not be available on context restore
 
 						if (attribute === undefined) continue;
 						const buffer = attribute.buffer;
 						const type = attribute.type;
 						const bytesPerElement = attribute.bytesPerElement;
-
 						if (geometryAttribute.isInterleavedBufferAttribute) {
 							const data = geometryAttribute.data;
 							const stride = data.stride;
 							const offset = geometryAttribute.offset;
-
 							if (data.isInstancedInterleavedBuffer) {
 								for (let i = 0; i < programAttribute.locationSize; i++) {
 									enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
 								}
-
 								if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {
 									geometry._maxInstanceCount = data.meshPerAttribute * data.count;
 								}
@@ -11103,9 +9789,7 @@
 									enableAttribute(programAttribute.location + i);
 								}
 							}
-
 							gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
-
 							for (let i = 0; i < programAttribute.locationSize; i++) {
 								vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement);
 							}
@@ -11114,7 +9798,6 @@
 								for (let i = 0; i < programAttribute.locationSize; i++) {
 									enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
 								}
-
 								if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {
 									geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
 								}
@@ -11123,30 +9806,24 @@
 									enableAttribute(programAttribute.location + i);
 								}
 							}
-
 							gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
-
 							for (let i = 0; i < programAttribute.locationSize; i++) {
 								vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement);
 							}
 						}
 					} else if (materialDefaultAttributeValues !== undefined) {
 						const value = materialDefaultAttributeValues[name];
-
 						if (value !== undefined) {
 							switch (value.length) {
 								case 2:
 									gl.vertexAttrib2fv(programAttribute.location, value);
 									break;
-
 								case 3:
 									gl.vertexAttrib3fv(programAttribute.location, value);
 									break;
-
 								case 4:
 									gl.vertexAttrib4fv(programAttribute.location, value);
 									break;
-
 								default:
 									gl.vertexAttrib1fv(programAttribute.location, value);
 							}
@@ -11154,79 +9831,63 @@
 					}
 				}
 			}
-
 			disableUnusedAttributes();
 		}
-
 		function dispose() {
 			reset();
-
 			for (const geometryId in bindingStates) {
 				const programMap = bindingStates[geometryId];
-
 				for (const programId in programMap) {
 					const stateMap = programMap[programId];
-
 					for (const wireframe in stateMap) {
 						deleteVertexArrayObject(stateMap[wireframe].object);
 						delete stateMap[wireframe];
 					}
-
 					delete programMap[programId];
 				}
-
 				delete bindingStates[geometryId];
 			}
 		}
-
 		function releaseStatesOfGeometry(geometry) {
 			if (bindingStates[geometry.id] === undefined) return;
 			const programMap = bindingStates[geometry.id];
-
 			for (const programId in programMap) {
 				const stateMap = programMap[programId];
-
 				for (const wireframe in stateMap) {
 					deleteVertexArrayObject(stateMap[wireframe].object);
 					delete stateMap[wireframe];
 				}
-
 				delete programMap[programId];
 			}
-
 			delete bindingStates[geometry.id];
 		}
-
 		function releaseStatesOfProgram(program) {
 			for (const geometryId in bindingStates) {
 				const programMap = bindingStates[geometryId];
 				if (programMap[program.id] === undefined) continue;
 				const stateMap = programMap[program.id];
-
 				for (const wireframe in stateMap) {
 					deleteVertexArrayObject(stateMap[wireframe].object);
 					delete stateMap[wireframe];
 				}
-
 				delete programMap[program.id];
 			}
 		}
-
 		function reset() {
 			resetDefaultState();
 			forceUpdate = true;
 			if (currentState === defaultState) return;
 			currentState = defaultState;
 			bindVertexArrayObject(currentState.object);
-		} // for backward-compatibility
+		}
 
+		// for backward-compatibility
 
 		function resetDefaultState() {
 			defaultState.geometry = null;
 			defaultState.program = null;
 			defaultState.wireframe = false;
 		}
-
 		return {
 			setup: setup,
 			reset: reset,
@@ -11243,37 +9904,32 @@
 	function WebGLBufferRenderer(gl, extensions, info, capabilities) {
 		const isWebGL2 = capabilities.isWebGL2;
 		let mode;
-
 		function setMode(value) {
 			mode = value;
 		}
-
 		function render(start, count) {
 			gl.drawArrays(mode, start, count);
 			info.update(count, mode, 1);
 		}
-
 		function renderInstances(start, count, primcount) {
 			if (primcount === 0) return;
 			let extension, methodName;
-
 			if (isWebGL2) {
 				extension = gl;
 				methodName = 'drawArraysInstanced';
 			} else {
 				extension = extensions.get('ANGLE_instanced_arrays');
 				methodName = 'drawArraysInstancedANGLE';
-
 				if (extension === null) {
 					console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
 					return;
 				}
 			}
-
 			extension[methodName](mode, start, count, primcount);
 			info.update(count, mode, primcount);
-		} //
+		}
 
+		//
 
 		this.setMode = setMode;
 		this.render = render;
@@ -11282,47 +9938,37 @@
 
 	function WebGLCapabilities(gl, extensions, parameters) {
 		let maxAnisotropy;
-
 		function getMaxAnisotropy() {
 			if (maxAnisotropy !== undefined) return maxAnisotropy;
-
 			if (extensions.has('EXT_texture_filter_anisotropic') === true) {
 				const extension = extensions.get('EXT_texture_filter_anisotropic');
 				maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
 			} else {
 				maxAnisotropy = 0;
 			}
-
 			return maxAnisotropy;
 		}
-
 		function getMaxPrecision(precision) {
 			if (precision === 'highp') {
 				if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
 					return 'highp';
 				}
-
 				precision = 'mediump';
 			}
-
 			if (precision === 'mediump') {
 				if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
 					return 'mediump';
 				}
 			}
-
 			return 'lowp';
 		}
-
 		const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;
 		let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
 		const maxPrecision = getMaxPrecision(precision);
-
 		if (maxPrecision !== precision) {
 			console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');
 			precision = maxPrecision;
 		}
-
 		const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');
 		const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
 		const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
@@ -11362,21 +10008,21 @@
 	function WebGLClipping(properties) {
 		const scope = this;
 		let globalState = null,
-				numGlobalPlanes = 0,
-				localClippingEnabled = false,
-				renderingShadows = false;
+			numGlobalPlanes = 0,
+			localClippingEnabled = false,
+			renderingShadows = false;
 		const plane = new Plane(),
-					viewNormalMatrix = new Matrix3(),
-					uniform = {
-			value: null,
-			needsUpdate: false
-		};
+			viewNormalMatrix = new Matrix3(),
+			uniform = {
+				value: null,
+				needsUpdate: false
+			};
 		this.uniform = uniform;
 		this.numPlanes = 0;
 		this.numIntersection = 0;
-
 		this.init = function (planes, enableLocalClipping, camera) {
-			const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
+			const enabled = planes.length !== 0 || enableLocalClipping ||
+			// enable state of previous frame - the clipping code has to
 			// run another frame in order to reset the state:
 			numGlobalPlanes !== 0 || localClippingEnabled;
 			localClippingEnabled = enableLocalClipping;
@@ -11384,86 +10030,73 @@
 			numGlobalPlanes = planes.length;
 			return enabled;
 		};
-
 		this.beginShadows = function () {
 			renderingShadows = true;
 			projectPlanes(null);
 		};
-
 		this.endShadows = function () {
 			renderingShadows = false;
 			resetGlobalState();
 		};
-
 		this.setState = function (material, camera, useCache) {
 			const planes = material.clippingPlanes,
-						clipIntersection = material.clipIntersection,
-						clipShadows = material.clipShadows;
+				clipIntersection = material.clipIntersection,
+				clipShadows = material.clipShadows;
 			const materialProperties = properties.get(material);
-
 			if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
 				// there's no local clipping
+
 				if (renderingShadows) {
 					// there's no global clipping
+
 					projectPlanes(null);
 				} else {
 					resetGlobalState();
 				}
 			} else {
 				const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
-							lGlobal = nGlobal * 4;
+					lGlobal = nGlobal * 4;
 				let dstArray = materialProperties.clippingState || null;
 				uniform.value = dstArray; // ensure unique state
 
 				dstArray = projectPlanes(planes, camera, lGlobal, useCache);
-
 				for (let i = 0; i !== lGlobal; ++i) {
 					dstArray[i] = globalState[i];
 				}
-
 				materialProperties.clippingState = dstArray;
 				this.numIntersection = clipIntersection ? this.numPlanes : 0;
 				this.numPlanes += nGlobal;
 			}
 		};
-
 		function resetGlobalState() {
 			if (uniform.value !== globalState) {
 				uniform.value = globalState;
 				uniform.needsUpdate = numGlobalPlanes > 0;
 			}
-
 			scope.numPlanes = numGlobalPlanes;
 			scope.numIntersection = 0;
 		}
-
 		function projectPlanes(planes, camera, dstOffset, skipTransform) {
 			const nPlanes = planes !== null ? planes.length : 0;
 			let dstArray = null;
-
 			if (nPlanes !== 0) {
 				dstArray = uniform.value;
-
 				if (skipTransform !== true || dstArray === null) {
 					const flatSize = dstOffset + nPlanes * 4,
-								viewMatrix = camera.matrixWorldInverse;
+						viewMatrix = camera.matrixWorldInverse;
 					viewNormalMatrix.getNormalMatrix(viewMatrix);
-
 					if (dstArray === null || dstArray.length < flatSize) {
 						dstArray = new Float32Array(flatSize);
 					}
-
 					for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
 						plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
 						plane.normal.toArray(dstArray, i4);
 						dstArray[i4 + 3] = plane.constant;
 					}
 				}
-
 				uniform.value = dstArray;
 				uniform.needsUpdate = true;
 			}
-
 			scope.numPlanes = nPlanes;
 			scope.numIntersection = 0;
 			return dstArray;
@@ -11472,28 +10105,23 @@
 
 	function WebGLCubeMaps(renderer) {
 		let cubemaps = new WeakMap();
-
 		function mapTextureMapping(texture, mapping) {
 			if (mapping === EquirectangularReflectionMapping) {
 				texture.mapping = CubeReflectionMapping;
 			} else if (mapping === EquirectangularRefractionMapping) {
 				texture.mapping = CubeRefractionMapping;
 			}
-
 			return texture;
 		}
-
 		function get(texture) {
 			if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
 				const mapping = texture.mapping;
-
 				if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
 					if (cubemaps.has(texture)) {
 						const cubemap = cubemaps.get(texture).texture;
 						return mapTextureMapping(cubemap, texture.mapping);
 					} else {
 						const image = texture.image;
-
 						if (image && image.height > 0) {
 							const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
 							renderTarget.fromEquirectangularTexture(renderer, texture);
@@ -11502,30 +10130,26 @@
 							return mapTextureMapping(renderTarget.texture, texture.mapping);
 						} else {
 							// image not yet ready. try the conversion next frame
+
 							return null;
 						}
 					}
 				}
 			}
-
 			return texture;
 		}
-
 		function onTextureDispose(event) {
 			const texture = event.target;
 			texture.removeEventListener('dispose', onTextureDispose);
 			const cubemap = cubemaps.get(texture);
-
 			if (cubemap !== undefined) {
 				cubemaps.delete(texture);
 				cubemap.dispose();
 			}
 		}
-
 		function dispose() {
 			cubemaps = new WeakMap();
 		}
-
 		return {
 			get: get,
 			dispose: dispose
@@ -11547,7 +10171,6 @@
 			this.far = far;
 			this.updateProjectionMatrix();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.left = source.left;
@@ -11560,7 +10183,6 @@
 			this.view = source.view === null ? null : Object.assign({}, source.view);
 			return this;
 		}
-
 		setViewOffset(fullWidth, fullHeight, x, y, width, height) {
 			if (this.view === null) {
 				this.view = {
@@ -11573,7 +10195,6 @@
 					height: 1
 				};
 			}
-
 			this.view.enabled = true;
 			this.view.fullWidth = fullWidth;
 			this.view.fullHeight = fullHeight;
@@ -11583,15 +10204,12 @@
 			this.view.height = height;
 			this.updateProjectionMatrix();
 		}
-
 		clearViewOffset() {
 			if (this.view !== null) {
 				this.view.enabled = false;
 			}
-
 			this.updateProjectionMatrix();
 		}
-
 		updateProjectionMatrix() {
 			const dx = (this.right - this.left) / (2 * this.zoom);
 			const dy = (this.top - this.bottom) / (2 * this.zoom);
@@ -11601,7 +10219,6 @@
 			let right = cx + dx;
 			let top = cy + dy;
 			let bottom = cy - dy;
-
 			if (this.view !== null && this.view.enabled) {
 				const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
 				const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
@@ -11610,11 +10227,9 @@
 				top -= scaleH * this.view.offsetY;
 				bottom = top - scaleH * this.view.height;
 			}
-
 			this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
 			this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
 		}
-
 		toJSON(meta) {
 			const data = super.toJSON(meta);
 			data.object.zoom = this.zoom;
@@ -11627,30 +10242,31 @@
 			if (this.view !== null) data.object.view = Object.assign({}, this.view);
 			return data;
 		}
-
 	}
 
-	const LOD_MIN = 4; // The standard deviations (radians) associated with the extra mips. These are
+	const LOD_MIN = 4;
+
+	// The standard deviations (radians) associated with the extra mips. These are
 	// chosen to approximate a Trowbridge-Reitz distribution function times the
 	// geometric shadowing function. These sigma values squared must match the
 	// variance #defines in cube_uv_reflection_fragment.glsl.js.
+	const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
 
-	const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582]; // The maximum length of the blur for loop. Smaller sigmas will use fewer
+	// The maximum length of the blur for loop. Smaller sigmas will use fewer
 	// samples and exit early, but not recompile the shader.
-
 	const MAX_SAMPLES = 20;
-
 	const _flatCamera = /*@__PURE__*/new OrthographicCamera();
-
 	const _clearColor = /*@__PURE__*/new Color();
+	let _oldTarget = null;
 
-	let _oldTarget = null; // Golden Ratio
-
+	// Golden Ratio
 	const PHI = (1 + Math.sqrt(5)) / 2;
-	const INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the
-	// same axis), used as axis directions evenly spread on a sphere.
+	const INV_PHI = 1 / PHI;
 
+	// Vertices of a dodecahedron (except the opposites, which represent the
+	// same axis), used as axis directions evenly spread on a sphere.
 	const _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];
+
 	/**
 	 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 	 * (PMREM) from a cubeMap environment texture. This allows different levels of
@@ -11678,9 +10294,9 @@
 			this._blurMaterial = null;
 			this._cubemapMaterial = null;
 			this._equirectMaterial = null;
-
 			this._compileMaterial(this._blurMaterial);
 		}
+
 		/**
 		 * Generates a PMREM from a supplied Scene, which can be faster than using an
 		 * image if networking bandwidth is low. Optional sigma specifies a blur radius
@@ -11688,133 +10304,104 @@
 		 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
 		 * is placed at the origin).
 		 */
-
-
 		fromScene(scene, sigma = 0, near = 0.1, far = 100) {
 			_oldTarget = this._renderer.getRenderTarget();
-
 			this._setSize(256);
-
 			const cubeUVRenderTarget = this._allocateTargets();
-
 			cubeUVRenderTarget.depthBuffer = true;
-
 			this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
-
 			if (sigma > 0) {
 				this._blur(cubeUVRenderTarget, 0, 0, sigma);
 			}
-
 			this._applyPMREM(cubeUVRenderTarget);
-
 			this._cleanup(cubeUVRenderTarget);
-
 			return cubeUVRenderTarget;
 		}
+
 		/**
 		 * Generates a PMREM from an equirectangular texture, which can be either LDR
 		 * or HDR. The ideal input image size is 1k (1024 x 512),
 		 * as this matches best with the 256 x 256 cubemap output.
 		 */
-
-
 		fromEquirectangular(equirectangular, renderTarget = null) {
 			return this._fromTexture(equirectangular, renderTarget);
 		}
+
 		/**
 		 * Generates a PMREM from an cubemap texture, which can be either LDR
 		 * or HDR. The ideal input cube size is 256 x 256,
 		 * as this matches best with the 256 x 256 cubemap output.
 		 */
-
-
 		fromCubemap(cubemap, renderTarget = null) {
 			return this._fromTexture(cubemap, renderTarget);
 		}
+
 		/**
 		 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
 		 * your texture's network fetch for increased concurrency.
 		 */
-
-
 		compileCubemapShader() {
 			if (this._cubemapMaterial === null) {
 				this._cubemapMaterial = _getCubemapMaterial();
-
 				this._compileMaterial(this._cubemapMaterial);
 			}
 		}
+
 		/**
 		 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
 		 * your texture's network fetch for increased concurrency.
 		 */
-
-
 		compileEquirectangularShader() {
 			if (this._equirectMaterial === null) {
 				this._equirectMaterial = _getEquirectMaterial();
-
 				this._compileMaterial(this._equirectMaterial);
 			}
 		}
+
 		/**
 		 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
 		 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
 		 * one of them will cause any others to also become unusable.
 		 */
-
-
 		dispose() {
 			this._dispose();
-
 			if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
 			if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
-		} // private interface
+		}
 
+		// private interface
 
 		_setSize(cubeSize) {
 			this._lodMax = Math.floor(Math.log2(cubeSize));
 			this._cubeSize = Math.pow(2, this._lodMax);
 		}
-
 		_dispose() {
 			if (this._blurMaterial !== null) this._blurMaterial.dispose();
 			if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
-
 			for (let i = 0; i < this._lodPlanes.length; i++) {
 				this._lodPlanes[i].dispose();
 			}
 		}
-
 		_cleanup(outputTarget) {
 			this._renderer.setRenderTarget(_oldTarget);
-
 			outputTarget.scissorTest = false;
-
 			_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
 		}
-
 		_fromTexture(texture, renderTarget) {
 			if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
 				this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
 			} else {
 				// Equirectangular
+
 				this._setSize(texture.image.width / 4);
 			}
-
 			_oldTarget = this._renderer.getRenderTarget();
-
 			const cubeUVRenderTarget = renderTarget || this._allocateTargets();
-
 			this._textureToCubeUV(texture, cubeUVRenderTarget);
-
 			this._applyPMREM(cubeUVRenderTarget);
-
 			this._cleanup(cubeUVRenderTarget);
-
 			return cubeUVRenderTarget;
 		}
-
 		_allocateTargets() {
 			const width = 3 * Math.max(this._cubeSize, 16 * 7);
 			const height = 4 * this._cubeSize;
@@ -11827,14 +10414,11 @@
 				encoding: LinearEncoding,
 				depthBuffer: false
 			};
-
 			const cubeUVRenderTarget = _createRenderTarget(width, height, params);
-
 			if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width) {
 				if (this._pingPongRenderTarget !== null) {
 					this._dispose();
 				}
-
 				this._pingPongRenderTarget = _createRenderTarget(width, height, params);
 				const {
 					_lodMax
@@ -11846,16 +10430,12 @@
 				} = _createPlanes(_lodMax));
 				this._blurMaterial = _getBlurShader(_lodMax, width, height);
 			}
-
 			return cubeUVRenderTarget;
 		}
-
 		_compileMaterial(material) {
 			const tmpMesh = new Mesh(this._lodPlanes[0], material);
-
 			this._renderer.compile(tmpMesh, _flatCamera);
 		}
-
 		_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
 			const fov = 90;
 			const aspect = 1;
@@ -11877,7 +10457,6 @@
 			const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
 			let useSolidColor = false;
 			const background = scene.background;
-
 			if (background) {
 				if (background.isColor) {
 					backgroundMaterial.color.copy(background);
@@ -11888,10 +10467,8 @@
 				backgroundMaterial.color.copy(_clearColor);
 				useSolidColor = true;
 			}
-
 			for (let i = 0; i < 6; i++) {
 				const col = i % 3;
-
 				if (col === 0) {
 					cubeCamera.up.set(0, upSign[i], 0);
 					cubeCamera.lookAt(forwardSign[i], 0, 0);
@@ -11902,69 +10479,54 @@
 					cubeCamera.up.set(0, upSign[i], 0);
 					cubeCamera.lookAt(0, 0, forwardSign[i]);
 				}
-
 				const size = this._cubeSize;
-
 				_setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
-
 				renderer.setRenderTarget(cubeUVRenderTarget);
-
 				if (useSolidColor) {
 					renderer.render(backgroundBox, cubeCamera);
 				}
-
 				renderer.render(scene, cubeCamera);
 			}
-
 			backgroundBox.geometry.dispose();
 			backgroundBox.material.dispose();
 			renderer.toneMapping = toneMapping;
 			renderer.autoClear = originalAutoClear;
 			scene.background = background;
 		}
-
 		_textureToCubeUV(texture, cubeUVRenderTarget) {
 			const renderer = this._renderer;
 			const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
-
 			if (isCubeTexture) {
 				if (this._cubemapMaterial === null) {
 					this._cubemapMaterial = _getCubemapMaterial();
 				}
-
 				this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
 			} else {
 				if (this._equirectMaterial === null) {
 					this._equirectMaterial = _getEquirectMaterial();
 				}
 			}
-
 			const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
 			const mesh = new Mesh(this._lodPlanes[0], material);
 			const uniforms = material.uniforms;
 			uniforms['envMap'].value = texture;
 			const size = this._cubeSize;
-
 			_setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
-
 			renderer.setRenderTarget(cubeUVRenderTarget);
 			renderer.render(mesh, _flatCamera);
 		}
-
 		_applyPMREM(cubeUVRenderTarget) {
 			const renderer = this._renderer;
 			const autoClear = renderer.autoClear;
 			renderer.autoClear = false;
-
 			for (let i = 1; i < this._lodPlanes.length; i++) {
 				const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
 				const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
-
 				this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
 			}
-
 			renderer.autoClear = autoClear;
 		}
+
 		/**
 		 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
 		 * vertically and horizontally, but this breaks down on a cube. Here we apply
@@ -11972,25 +10534,19 @@
 		 * the poles) to approximate the orthogonally-separable blur. It is least
 		 * accurate at the poles, but still does a decent job.
 		 */
-
-
 		_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
 			const pingPongRenderTarget = this._pingPongRenderTarget;
-
 			this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);
-
 			this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);
 		}
-
 		_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
 			const renderer = this._renderer;
 			const blurMaterial = this._blurMaterial;
-
 			if (direction !== 'latitudinal' && direction !== 'longitudinal') {
 				console.error('blur direction must be either latitudinal or longitudinal!');
-			} // Number of standard deviations at which to cut off the discrete approximation.
-
+			}
 
+			// Number of standard deviations at which to cut off the discrete approximation.
 			const STANDARD_DEVIATIONS = 3;
 			const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
 			const blurUniforms = blurMaterial.uniforms;
@@ -11998,39 +10554,31 @@
 			const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
 			const sigmaPixels = sigmaRadians / radiansPerPixel;
 			const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
-
 			if (samples > MAX_SAMPLES) {
 				console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
 			}
-
 			const weights = [];
 			let sum = 0;
-
 			for (let i = 0; i < MAX_SAMPLES; ++i) {
 				const x = i / sigmaPixels;
 				const weight = Math.exp(-x * x / 2);
 				weights.push(weight);
-
 				if (i === 0) {
 					sum += weight;
 				} else if (i < samples) {
 					sum += 2 * weight;
 				}
 			}
-
 			for (let i = 0; i < weights.length; i++) {
 				weights[i] = weights[i] / sum;
 			}
-
 			blurUniforms['envMap'].value = targetIn.texture;
 			blurUniforms['samples'].value = samples;
 			blurUniforms['weights'].value = weights;
 			blurUniforms['latitudinal'].value = direction === 'latitudinal';
-
 			if (poleAxis) {
 				blurUniforms['poleAxis'].value = poleAxis;
 			}
-
 			const {
 				_lodMax
 			} = this;
@@ -12039,33 +10587,26 @@
 			const outputSize = this._sizeLods[lodOut];
 			const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
 			const y = 4 * (this._cubeSize - outputSize);
-
 			_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
-
 			renderer.setRenderTarget(targetOut);
 			renderer.render(blurMesh, _flatCamera);
 		}
-
 	}
-
 	function _createPlanes(lodMax) {
 		const lodPlanes = [];
 		const sizeLods = [];
 		const sigmas = [];
 		let lod = lodMax;
 		const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
-
 		for (let i = 0; i < totalLods; i++) {
 			const sizeLod = Math.pow(2, lod);
 			sizeLods.push(sizeLod);
 			let sigma = 1.0 / sizeLod;
-
 			if (i > lodMax - LOD_MIN) {
 				sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
 			} else if (i === 0) {
 				sigma = 0;
 			}
-
 			sigmas.push(sigma);
 			const texelSize = 1.0 / (sizeLod - 2);
 			const min = -texelSize;
@@ -12079,7 +10620,6 @@
 			const position = new Float32Array(positionSize * vertices * cubeFaces);
 			const uv = new Float32Array(uvSize * vertices * cubeFaces);
 			const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
-
 			for (let face = 0; face < cubeFaces; face++) {
 				const x = face % 3 * 2 / 3 - 1;
 				const y = face > 2 ? 0 : -1;
@@ -12089,25 +10629,21 @@
 				const fill = [face, face, face, face, face, face];
 				faceIndex.set(fill, faceIndexSize * vertices * face);
 			}
-
 			const planes = new BufferGeometry();
 			planes.setAttribute('position', new BufferAttribute(position, positionSize));
 			planes.setAttribute('uv', new BufferAttribute(uv, uvSize));
 			planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));
 			lodPlanes.push(planes);
-
 			if (lod > LOD_MIN) {
 				lod--;
 			}
 		}
-
 		return {
 			lodPlanes,
 			sizeLods,
 			sigmas
 		};
 	}
-
 	function _createRenderTarget(width, height, params) {
 		const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
 		cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
@@ -12115,12 +10651,10 @@
 		cubeUVRenderTarget.scissorTest = true;
 		return cubeUVRenderTarget;
 	}
-
 	function _setViewport(target, x, y, width, height) {
 		target.viewport.set(x, y, width, height);
 		target.scissor.set(x, y, width, height);
 	}
-
 	function _getBlurShader(lodMax, width, height) {
 		const weights = new Float32Array(MAX_SAMPLES);
 		const poleAxis = new Vector3(0, 1, 0);
@@ -12156,9 +10690,7 @@
 				}
 			},
 			vertexShader: _getCommonVertexShader(),
-			fragmentShader:
-			/* glsl */
-			`
+			fragmentShader: /* glsl */`
 
 			precision mediump float;
 			precision mediump int;
@@ -12225,7 +10757,6 @@
 		});
 		return shaderMaterial;
 	}
-
 	function _getEquirectMaterial() {
 		return new ShaderMaterial({
 			name: 'EquirectangularToCubeUV',
@@ -12235,9 +10766,7 @@
 				}
 			},
 			vertexShader: _getCommonVertexShader(),
-			fragmentShader:
-			/* glsl */
-			`
+			fragmentShader: /* glsl */`
 
 			precision mediump float;
 			precision mediump int;
@@ -12262,7 +10791,6 @@
 			depthWrite: false
 		});
 	}
-
 	function _getCubemapMaterial() {
 		return new ShaderMaterial({
 			name: 'CubemapToCubeUV',
@@ -12275,9 +10803,7 @@
 				}
 			},
 			vertexShader: _getCommonVertexShader(),
-			fragmentShader:
-			/* glsl */
-			`
+			fragmentShader: /* glsl */`
 
 			precision mediump float;
 			precision mediump int;
@@ -12299,11 +10825,8 @@
 			depthWrite: false
 		});
 	}
-
 	function _getCommonVertexShader() {
-		return (
-			/* glsl */
-			`
+		return (/* glsl */`
 
 		precision mediump float;
 		precision mediump int;
@@ -12365,12 +10888,13 @@
 	function WebGLCubeUVMaps(renderer) {
 		let cubeUVmaps = new WeakMap();
 		let pmremGenerator = null;
-
 		function get(texture) {
 			if (texture && texture.isTexture) {
 				const mapping = texture.mapping;
 				const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
-				const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping; // equirect/cube map to cubeUV conversion
+				const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
+
+				// equirect/cube map to cubeUV conversion
 
 				if (isEquirectMap || isCubeMap) {
 					if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
@@ -12385,7 +10909,6 @@
 							return cubeUVmaps.get(texture).texture;
 						} else {
 							const image = texture.image;
-
 							if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
 								if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
 								const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
@@ -12394,47 +10917,39 @@
 								return renderTarget.texture;
 							} else {
 								// image not yet ready. try the conversion next frame
+
 								return null;
 							}
 						}
 					}
 				}
 			}
-
 			return texture;
 		}
-
 		function isCubeTextureComplete(image) {
 			let count = 0;
 			const length = 6;
-
 			for (let i = 0; i < length; i++) {
 				if (image[i] !== undefined) count++;
 			}
-
 			return count === length;
 		}
-
 		function onTextureDispose(event) {
 			const texture = event.target;
 			texture.removeEventListener('dispose', onTextureDispose);
 			const cubemapUV = cubeUVmaps.get(texture);
-
 			if (cubemapUV !== undefined) {
 				cubeUVmaps.delete(texture);
 				cubemapUV.dispose();
 			}
 		}
-
 		function dispose() {
 			cubeUVmaps = new WeakMap();
-
 			if (pmremGenerator !== null) {
 				pmremGenerator.dispose();
 				pmremGenerator = null;
 			}
 		}
-
 		return {
 			get: get,
 			dispose: dispose
@@ -12443,39 +10958,30 @@
 
 	function WebGLExtensions(gl) {
 		const extensions = {};
-
 		function getExtension(name) {
 			if (extensions[name] !== undefined) {
 				return extensions[name];
 			}
-
 			let extension;
-
 			switch (name) {
 				case 'WEBGL_depth_texture':
 					extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
 					break;
-
 				case 'EXT_texture_filter_anisotropic':
 					extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
 					break;
-
 				case 'WEBGL_compressed_texture_s3tc':
 					extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
 					break;
-
 				case 'WEBGL_compressed_texture_pvrtc':
 					extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
 					break;
-
 				default:
 					extension = gl.getExtension(name);
 			}
-
 			extensions[name] = extension;
 			return extension;
 		}
-
 		return {
 			has: function (name) {
 				return getExtension(name) !== null;
@@ -12493,18 +10999,15 @@
 					getExtension('OES_vertex_array_object');
 					getExtension('ANGLE_instanced_arrays');
 				}
-
 				getExtension('OES_texture_float_linear');
 				getExtension('EXT_color_buffer_half_float');
 				getExtension('WEBGL_multisampled_render_to_texture');
 			},
 			get: function (name) {
 				const extension = getExtension(name);
-
 				if (extension === null) {
 					console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');
 				}
-
 				return extension;
 			}
 		};
@@ -12513,37 +11016,30 @@
 	function WebGLGeometries(gl, attributes, info, bindingStates) {
 		const geometries = {};
 		const wireframeAttributes = new WeakMap();
-
 		function onGeometryDispose(event) {
 			const geometry = event.target;
-
 			if (geometry.index !== null) {
 				attributes.remove(geometry.index);
 			}
-
 			for (const name in geometry.attributes) {
 				attributes.remove(geometry.attributes[name]);
 			}
-
 			geometry.removeEventListener('dispose', onGeometryDispose);
 			delete geometries[geometry.id];
 			const attribute = wireframeAttributes.get(geometry);
-
 			if (attribute) {
 				attributes.remove(attribute);
 				wireframeAttributes.delete(geometry);
 			}
-
 			bindingStates.releaseStatesOfGeometry(geometry);
-
 			if (geometry.isInstancedBufferGeometry === true) {
 				delete geometry._maxInstanceCount;
-			} //
+			}
 
+			//
 
 			info.memory.geometries--;
 		}
-
 		function get(object, geometry) {
 			if (geometries[geometry.id] === true) return geometry;
 			geometry.addEventListener('dispose', onGeometryDispose);
@@ -12551,36 +11047,33 @@
 			info.memory.geometries++;
 			return geometry;
 		}
-
 		function update(geometry) {
-			const geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.
+			const geometryAttributes = geometry.attributes;
+
+			// Updating index buffer in VAO now. See WebGLBindingStates.
 
 			for (const name in geometryAttributes) {
 				attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
-			} // morph targets
+			}
 
+			// morph targets
 
 			const morphAttributes = geometry.morphAttributes;
-
 			for (const name in morphAttributes) {
 				const array = morphAttributes[name];
-
 				for (let i = 0, l = array.length; i < l; i++) {
 					attributes.update(array[i], gl.ARRAY_BUFFER);
 				}
 			}
 		}
-
 		function updateWireframeAttribute(geometry) {
 			const indices = [];
 			const geometryIndex = geometry.index;
 			const geometryPosition = geometry.attributes.position;
 			let version = 0;
-
 			if (geometryIndex !== null) {
 				const array = geometryIndex.array;
 				version = geometryIndex.version;
-
 				for (let i = 0, l = array.length; i < l; i += 3) {
 					const a = array[i + 0];
 					const b = array[i + 1];
@@ -12590,7 +11083,6 @@
 			} else {
 				const array = geometryPosition.array;
 				version = geometryPosition.version;
-
 				for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
 					const a = i + 0;
 					const b = i + 1;
@@ -12598,25 +11090,27 @@
 					indices.push(a, b, b, c, c, a);
 				}
 			}
-
 			const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
-			attribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates
+			attribute.version = version;
+
+			// Updating index buffer in VAO now. See WebGLBindingStates
+
 			//
 
 			const previousAttribute = wireframeAttributes.get(geometry);
-			if (previousAttribute) attributes.remove(previousAttribute); //
+			if (previousAttribute) attributes.remove(previousAttribute);
+
+			//
 
 			wireframeAttributes.set(geometry, attribute);
 		}
-
 		function getWireframeAttribute(geometry) {
 			const currentAttribute = wireframeAttributes.get(geometry);
-
 			if (currentAttribute) {
 				const geometryIndex = geometry.index;
-
 				if (geometryIndex !== null) {
 					// if the attribute is obsolete, create a new one
+
 					if (currentAttribute.version < geometryIndex.version) {
 						updateWireframeAttribute(geometry);
 					}
@@ -12624,10 +11118,8 @@
 			} else {
 				updateWireframeAttribute(geometry);
 			}
-
 			return wireframeAttributes.get(geometry);
 		}
-
 		return {
 			get: get,
 			update: update,
@@ -12638,44 +11130,37 @@
 	function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
 		const isWebGL2 = capabilities.isWebGL2;
 		let mode;
-
 		function setMode(value) {
 			mode = value;
 		}
-
 		let type, bytesPerElement;
-
 		function setIndex(value) {
 			type = value.type;
 			bytesPerElement = value.bytesPerElement;
 		}
-
 		function render(start, count) {
 			gl.drawElements(mode, count, type, start * bytesPerElement);
 			info.update(count, mode, 1);
 		}
-
 		function renderInstances(start, count, primcount) {
 			if (primcount === 0) return;
 			let extension, methodName;
-
 			if (isWebGL2) {
 				extension = gl;
 				methodName = 'drawElementsInstanced';
 			} else {
 				extension = extensions.get('ANGLE_instanced_arrays');
 				methodName = 'drawElementsInstancedANGLE';
-
 				if (extension === null) {
 					console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
 					return;
 				}
 			}
-
 			extension[methodName](mode, count, type, start * bytesPerElement, primcount);
 			info.update(count, mode, primcount);
-		} //
+		}
 
+		//
 
 		this.setMode = setMode;
 		this.setIndex = setIndex;
@@ -12695,37 +11180,29 @@
 			points: 0,
 			lines: 0
 		};
-
 		function update(count, mode, instanceCount) {
 			render.calls++;
-
 			switch (mode) {
 				case gl.TRIANGLES:
 					render.triangles += instanceCount * (count / 3);
 					break;
-
 				case gl.LINES:
 					render.lines += instanceCount * (count / 2);
 					break;
-
 				case gl.LINE_STRIP:
 					render.lines += instanceCount * (count - 1);
 					break;
-
 				case gl.LINE_LOOP:
 					render.lines += instanceCount * count;
 					break;
-
 				case gl.POINTS:
 					render.points += instanceCount * count;
 					break;
-
 				default:
 					console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
 					break;
 			}
 		}
-
 		function reset() {
 			render.frame++;
 			render.calls = 0;
@@ -12733,7 +11210,6 @@
 			render.points = 0;
 			render.lines = 0;
 		}
-
 		return {
 			memory: memory,
 			render: render,
@@ -12747,32 +11223,27 @@
 	function numericalSort(a, b) {
 		return a[0] - b[0];
 	}
-
 	function absNumericalSort(a, b) {
 		return Math.abs(b[1]) - Math.abs(a[1]);
 	}
-
 	function WebGLMorphtargets(gl, capabilities, textures) {
 		const influencesList = {};
 		const morphInfluences = new Float32Array(8);
 		const morphTextures = new WeakMap();
 		const morph = new Vector4();
 		const workInfluences = [];
-
 		for (let i = 0; i < 8; i++) {
 			workInfluences[i] = [i, 0];
 		}
-
 		function update(object, geometry, material, program) {
 			const objectInfluences = object.morphTargetInfluences;
-
 			if (capabilities.isWebGL2 === true) {
 				// instead of using attributes, the WebGL 2 code path encodes morph targets
 				// into an array of data textures. Each layer represents a single morph target.
+
 				const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
 				const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
 				let entry = morphTextures.get(geometry);
-
 				if (entry === undefined || entry.count !== morphTargetsCount) {
 					if (entry !== undefined) entry.texture.dispose();
 					const hasMorphPosition = geometry.morphAttributes.position !== undefined;
@@ -12787,28 +11258,25 @@
 					if (hasMorphColors === true) vertexDataCount = 3;
 					let width = geometry.attributes.position.count * vertexDataCount;
 					let height = 1;
-
 					if (width > capabilities.maxTextureSize) {
 						height = Math.ceil(width / capabilities.maxTextureSize);
 						width = capabilities.maxTextureSize;
 					}
-
 					const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
 					const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
 					texture.type = FloatType;
-					texture.needsUpdate = true; // fill buffer
+					texture.needsUpdate = true;
 
-					const vertexDataStride = vertexDataCount * 4;
+					// fill buffer
 
+					const vertexDataStride = vertexDataCount * 4;
 					for (let i = 0; i < morphTargetsCount; i++) {
 						const morphTarget = morphTargets[i];
 						const morphNormal = morphNormals[i];
 						const morphColor = morphColors[i];
 						const offset = width * height * 4 * i;
-
 						for (let j = 0; j < morphTarget.count; j++) {
 							const stride = j * vertexDataStride;
-
 							if (hasMorphPosition === true) {
 								morph.fromBufferAttribute(morphTarget, j);
 								buffer[offset + stride + 0] = morph.x;
@@ -12816,7 +11284,6 @@
 								buffer[offset + stride + 2] = morph.z;
 								buffer[offset + stride + 3] = 0;
 							}
-
 							if (hasMorphNormals === true) {
 								morph.fromBufferAttribute(morphNormal, j);
 								buffer[offset + stride + 4] = morph.x;
@@ -12824,7 +11291,6 @@
 								buffer[offset + stride + 6] = morph.z;
 								buffer[offset + stride + 7] = 0;
 							}
-
 							if (hasMorphColors === true) {
 								morph.fromBufferAttribute(morphColor, j);
 								buffer[offset + stride + 8] = morph.x;
@@ -12834,30 +11300,26 @@
 							}
 						}
 					}
-
 					entry = {
 						count: morphTargetsCount,
 						texture: texture,
 						size: new Vector2(width, height)
 					};
 					morphTextures.set(geometry, entry);
-
 					function disposeTexture() {
 						texture.dispose();
 						morphTextures.delete(geometry);
 						geometry.removeEventListener('dispose', disposeTexture);
 					}
-
 					geometry.addEventListener('dispose', disposeTexture);
-				} //
+				}
 
+				//
 
 				let morphInfluencesSum = 0;
-
 				for (let i = 0; i < objectInfluences.length; i++) {
 					morphInfluencesSum += objectInfluences[i];
 				}
-
 				const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
 				program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
 				program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);
@@ -12866,29 +11328,27 @@
 			} else {
 				// When object doesn't have morph target influences defined, we treat it as a 0-length array
 				// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
+
 				const length = objectInfluences === undefined ? 0 : objectInfluences.length;
 				let influences = influencesList[geometry.id];
-
 				if (influences === undefined || influences.length !== length) {
 					// initialise list
-					influences = [];
 
+					influences = [];
 					for (let i = 0; i < length; i++) {
 						influences[i] = [i, 0];
 					}
-
 					influencesList[geometry.id] = influences;
-				} // Collect influences
+				}
 
+				// Collect influences
 
 				for (let i = 0; i < length; i++) {
 					const influence = influences[i];
 					influence[0] = i;
 					influence[1] = objectInfluences[i];
 				}
-
 				influences.sort(absNumericalSort);
-
 				for (let i = 0; i < 8; i++) {
 					if (i < length && influences[i][1]) {
 						workInfluences[i][0] = influences[i][0];
@@ -12898,50 +11358,42 @@
 						workInfluences[i][1] = 0;
 					}
 				}
-
 				workInfluences.sort(numericalSort);
 				const morphTargets = geometry.morphAttributes.position;
 				const morphNormals = geometry.morphAttributes.normal;
 				let morphInfluencesSum = 0;
-
 				for (let i = 0; i < 8; i++) {
 					const influence = workInfluences[i];
 					const index = influence[0];
 					const value = influence[1];
-
 					if (index !== Number.MAX_SAFE_INTEGER && value) {
 						if (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {
 							geometry.setAttribute('morphTarget' + i, morphTargets[index]);
 						}
-
 						if (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {
 							geometry.setAttribute('morphNormal' + i, morphNormals[index]);
 						}
-
 						morphInfluences[i] = value;
 						morphInfluencesSum += value;
 					} else {
 						if (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {
 							geometry.deleteAttribute('morphTarget' + i);
 						}
-
 						if (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {
 							geometry.deleteAttribute('morphNormal' + i);
 						}
-
 						morphInfluences[i] = 0;
 					}
-				} // GLSL shader uses formula baseinfluence * base + sum(target * influence)
+				}
+
+				// GLSL shader uses formula baseinfluence * base + sum(target * influence)
 				// This allows us to switch between absolute morphs and relative morphs without changing shader code
 				// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
-
-
 				const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
 				program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
 				program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
 			}
 		}
-
 		return {
 			update: update
 		};
@@ -12949,43 +11401,37 @@
 
 	function WebGLObjects(gl, geometries, attributes, info) {
 		let updateMap = new WeakMap();
-
 		function update(object) {
 			const frame = info.render.frame;
 			const geometry = object.geometry;
-			const buffergeometry = geometries.get(object, geometry); // Update once per frame
+			const buffergeometry = geometries.get(object, geometry);
+
+			// Update once per frame
 
 			if (updateMap.get(buffergeometry) !== frame) {
 				geometries.update(buffergeometry);
 				updateMap.set(buffergeometry, frame);
 			}
-
 			if (object.isInstancedMesh) {
 				if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {
 					object.addEventListener('dispose', onInstancedMeshDispose);
 				}
-
 				attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
-
 				if (object.instanceColor !== null) {
 					attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
 				}
 			}
-
 			return buffergeometry;
 		}
-
 		function dispose() {
 			updateMap = new WeakMap();
 		}
-
 		function onInstancedMeshDispose(event) {
 			const instancedMesh = event.target;
 			instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);
 			attributes.remove(instancedMesh.instanceMatrix);
 			if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
 		}
-
 		return {
 			update: update,
 			dispose: dispose
@@ -13037,88 +11483,89 @@
 	const emptyTexture = /*@__PURE__*/new Texture();
 	const emptyArrayTexture = /*@__PURE__*/new DataArrayTexture();
 	const empty3dTexture = /*@__PURE__*/new Data3DTexture();
-	const emptyCubeTexture = /*@__PURE__*/new CubeTexture(); // --- Utilities ---
+	const emptyCubeTexture = /*@__PURE__*/new CubeTexture();
+
+	// --- Utilities ---
+
 	// Array Caches (provide typed arrays for temporary by size)
 
 	const arrayCacheF32 = [];
-	const arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms
+	const arrayCacheI32 = [];
+
+	// Float32Array caches used for uploading Matrix uniforms
 
 	const mat4array = new Float32Array(16);
 	const mat3array = new Float32Array(9);
-	const mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices
+	const mat2array = new Float32Array(4);
+
+	// Flattening for arrays of vectors and matrices
 
 	function flatten(array, nBlocks, blockSize) {
 		const firstElem = array[0];
-		if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )
+		if (firstElem <= 0 || firstElem > 0) return array;
+		// unoptimized: ! isNaN( firstElem )
 		// see http://jacksondunstan.com/articles/983
 
 		const n = nBlocks * blockSize;
 		let r = arrayCacheF32[n];
-
 		if (r === undefined) {
 			r = new Float32Array(n);
 			arrayCacheF32[n] = r;
 		}
-
 		if (nBlocks !== 0) {
 			firstElem.toArray(r, 0);
-
 			for (let i = 1, offset = 0; i !== nBlocks; ++i) {
 				offset += blockSize;
 				array[i].toArray(r, offset);
 			}
 		}
-
 		return r;
 	}
-
 	function arraysEqual(a, b) {
 		if (a.length !== b.length) return false;
-
 		for (let i = 0, l = a.length; i < l; i++) {
 			if (a[i] !== b[i]) return false;
 		}
-
 		return true;
 	}
-
 	function copyArray(a, b) {
 		for (let i = 0, l = b.length; i < l; i++) {
 			a[i] = b[i];
 		}
-	} // Texture unit allocation
+	}
 
+	// Texture unit allocation
 
 	function allocTexUnits(textures, n) {
 		let r = arrayCacheI32[n];
-
 		if (r === undefined) {
 			r = new Int32Array(n);
 			arrayCacheI32[n] = r;
 		}
-
 		for (let i = 0; i !== n; ++i) {
 			r[i] = textures.allocateTextureUnit();
 		}
-
 		return r;
-	} // --- Setters ---
+	}
+
+	// --- Setters ---
+
 	// Note: Defining these methods externally, because they come in a bunch
 	// and this way their names minify.
-	// Single scalar
 
+	// Single scalar
 
 	function setValueV1f(gl, v) {
 		const cache = this.cache;
 		if (cache[0] === v) return;
 		gl.uniform1f(this.addr, v);
 		cache[0] = v;
-	} // Single float vector (from flat array or THREE.VectorN)
+	}
 
+	// Single float vector (from flat array or THREE.VectorN)
 
 	function setValueV2f(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y) {
 				gl.uniform2f(this.addr, v.x, v.y);
@@ -13131,10 +11578,8 @@
 			copyArray(cache, v);
 		}
 	}
-
 	function setValueV3f(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
 				gl.uniform3f(this.addr, v.x, v.y, v.z);
@@ -13155,10 +11600,8 @@
 			copyArray(cache, v);
 		}
 	}
-
 	function setValueV4f(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
 				gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
@@ -13172,13 +11615,13 @@
 			gl.uniform4fv(this.addr, v);
 			copyArray(cache, v);
 		}
-	} // Single matrix (from flat array or THREE.MatrixN)
+	}
 
+	// Single matrix (from flat array or THREE.MatrixN)
 
 	function setValueM2(gl, v) {
 		const cache = this.cache;
 		const elements = v.elements;
-
 		if (elements === undefined) {
 			if (arraysEqual(cache, v)) return;
 			gl.uniformMatrix2fv(this.addr, false, v);
@@ -13190,11 +11633,9 @@
 			copyArray(cache, elements);
 		}
 	}
-
 	function setValueM3(gl, v) {
 		const cache = this.cache;
 		const elements = v.elements;
-
 		if (elements === undefined) {
 			if (arraysEqual(cache, v)) return;
 			gl.uniformMatrix3fv(this.addr, false, v);
@@ -13206,11 +11647,9 @@
 			copyArray(cache, elements);
 		}
 	}
-
 	function setValueM4(gl, v) {
 		const cache = this.cache;
 		const elements = v.elements;
-
 		if (elements === undefined) {
 			if (arraysEqual(cache, v)) return;
 			gl.uniformMatrix4fv(this.addr, false, v);
@@ -13221,20 +11660,21 @@
 			gl.uniformMatrix4fv(this.addr, false, mat4array);
 			copyArray(cache, elements);
 		}
-	} // Single integer / boolean
+	}
 
+	// Single integer / boolean
 
 	function setValueV1i(gl, v) {
 		const cache = this.cache;
 		if (cache[0] === v) return;
 		gl.uniform1i(this.addr, v);
 		cache[0] = v;
-	} // Single integer / boolean vector (from flat array or THREE.VectorN)
+	}
 
+	// Single integer / boolean vector (from flat array or THREE.VectorN)
 
 	function setValueV2i(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y) {
 				gl.uniform2i(this.addr, v.x, v.y);
@@ -13247,10 +11687,8 @@
 			copyArray(cache, v);
 		}
 	}
-
 	function setValueV3i(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
 				gl.uniform3i(this.addr, v.x, v.y, v.z);
@@ -13264,10 +11702,8 @@
 			copyArray(cache, v);
 		}
 	}
-
 	function setValueV4i(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
 				gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
@@ -13281,20 +11717,21 @@
 			gl.uniform4iv(this.addr, v);
 			copyArray(cache, v);
 		}
-	} // Single unsigned integer
+	}
 
+	// Single unsigned integer
 
 	function setValueV1ui(gl, v) {
 		const cache = this.cache;
 		if (cache[0] === v) return;
 		gl.uniform1ui(this.addr, v);
 		cache[0] = v;
-	} // Single unsigned integer vector (from flat array or THREE.VectorN)
+	}
 
+	// Single unsigned integer vector (from flat array or THREE.VectorN)
 
 	function setValueV2ui(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y) {
 				gl.uniform2ui(this.addr, v.x, v.y);
@@ -13307,10 +11744,8 @@
 			copyArray(cache, v);
 		}
 	}
-
 	function setValueV3ui(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
 				gl.uniform3ui(this.addr, v.x, v.y, v.z);
@@ -13324,10 +11759,8 @@
 			copyArray(cache, v);
 		}
 	}
-
 	function setValueV4ui(gl, v) {
 		const cache = this.cache;
-
 		if (v.x !== undefined) {
 			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
 				gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
@@ -13341,72 +11774,60 @@
 			gl.uniform4uiv(this.addr, v);
 			copyArray(cache, v);
 		}
-	} // Single texture (2D / Cube)
+	}
 
+	// Single texture (2D / Cube)
 
 	function setValueT1(gl, v, textures) {
 		const cache = this.cache;
 		const unit = textures.allocateTextureUnit();
-
 		if (cache[0] !== unit) {
 			gl.uniform1i(this.addr, unit);
 			cache[0] = unit;
 		}
-
 		textures.setTexture2D(v || emptyTexture, unit);
 	}
-
 	function setValueT3D1(gl, v, textures) {
 		const cache = this.cache;
 		const unit = textures.allocateTextureUnit();
-
 		if (cache[0] !== unit) {
 			gl.uniform1i(this.addr, unit);
 			cache[0] = unit;
 		}
-
 		textures.setTexture3D(v || empty3dTexture, unit);
 	}
-
 	function setValueT6(gl, v, textures) {
 		const cache = this.cache;
 		const unit = textures.allocateTextureUnit();
-
 		if (cache[0] !== unit) {
 			gl.uniform1i(this.addr, unit);
 			cache[0] = unit;
 		}
-
 		textures.setTextureCube(v || emptyCubeTexture, unit);
 	}
-
 	function setValueT2DArray1(gl, v, textures) {
 		const cache = this.cache;
 		const unit = textures.allocateTextureUnit();
-
 		if (cache[0] !== unit) {
 			gl.uniform1i(this.addr, unit);
 			cache[0] = unit;
 		}
-
 		textures.setTexture2DArray(v || emptyArrayTexture, unit);
-	} // Helper to pick the right setter for the singular case
+	}
 
+	// Helper to pick the right setter for the singular case
 
 	function getSingularSetter(type) {
 		switch (type) {
 			case 0x1406:
 				return setValueV1f;
 			// FLOAT
-
 			case 0x8b50:
 				return setValueV2f;
 			// _VEC2
-
 			case 0x8b51:
 				return setValueV3f;
 			// _VEC3
-
 			case 0x8b52:
 				return setValueV4f;
 			// _VEC4
@@ -13414,11 +11835,9 @@
 			case 0x8b5a:
 				return setValueM2;
 			// _MAT2
-
 			case 0x8b5b:
 				return setValueM3;
 			// _MAT3
-
 			case 0x8b5c:
 				return setValueM4;
 			// _MAT4
@@ -13427,17 +11846,14 @@
 			case 0x8b56:
 				return setValueV1i;
 			// INT, BOOL
-
 			case 0x8b53:
 			case 0x8b57:
 				return setValueV2i;
 			// _VEC2
-
 			case 0x8b54:
 			case 0x8b58:
 				return setValueV3i;
 			// _VEC3
-
 			case 0x8b55:
 			case 0x8b59:
 				return setValueV4i;
@@ -13446,210 +11862,179 @@
 			case 0x1405:
 				return setValueV1ui;
 			// UINT
-
 			case 0x8dc6:
 				return setValueV2ui;
 			// _VEC2
-
 			case 0x8dc7:
 				return setValueV3ui;
 			// _VEC3
-
 			case 0x8dc8:
 				return setValueV4ui;
 			// _VEC4
 
 			case 0x8b5e: // SAMPLER_2D
-
 			case 0x8d66: // SAMPLER_EXTERNAL_OES
-
 			case 0x8dca: // INT_SAMPLER_2D
-
 			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
-
 			case 0x8b62:
 				// SAMPLER_2D_SHADOW
 				return setValueT1;
-
 			case 0x8b5f: // SAMPLER_3D
-
 			case 0x8dcb: // INT_SAMPLER_3D
-
 			case 0x8dd3:
 				// UNSIGNED_INT_SAMPLER_3D
 				return setValueT3D1;
-
 			case 0x8b60: // SAMPLER_CUBE
-
 			case 0x8dcc: // INT_SAMPLER_CUBE
-
 			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
-
 			case 0x8dc5:
 				// SAMPLER_CUBE_SHADOW
 				return setValueT6;
-
 			case 0x8dc1: // SAMPLER_2D_ARRAY
-
 			case 0x8dcf: // INT_SAMPLER_2D_ARRAY
-
 			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
-
 			case 0x8dc4:
 				// SAMPLER_2D_ARRAY_SHADOW
 				return setValueT2DArray1;
 		}
-	} // Array of scalars
+	}
 
+	// Array of scalars
 
 	function setValueV1fArray(gl, v) {
 		gl.uniform1fv(this.addr, v);
-	} // Array of vectors (from flat array or array of THREE.VectorN)
+	}
 
+	// Array of vectors (from flat array or array of THREE.VectorN)
 
 	function setValueV2fArray(gl, v) {
 		const data = flatten(v, this.size, 2);
 		gl.uniform2fv(this.addr, data);
 	}
-
 	function setValueV3fArray(gl, v) {
 		const data = flatten(v, this.size, 3);
 		gl.uniform3fv(this.addr, data);
 	}
-
 	function setValueV4fArray(gl, v) {
 		const data = flatten(v, this.size, 4);
 		gl.uniform4fv(this.addr, data);
-	} // Array of matrices (from flat array or array of THREE.MatrixN)
+	}
 
+	// Array of matrices (from flat array or array of THREE.MatrixN)
 
 	function setValueM2Array(gl, v) {
 		const data = flatten(v, this.size, 4);
 		gl.uniformMatrix2fv(this.addr, false, data);
 	}
-
 	function setValueM3Array(gl, v) {
 		const data = flatten(v, this.size, 9);
 		gl.uniformMatrix3fv(this.addr, false, data);
 	}
-
 	function setValueM4Array(gl, v) {
 		const data = flatten(v, this.size, 16);
 		gl.uniformMatrix4fv(this.addr, false, data);
-	} // Array of integer / boolean
+	}
 
+	// Array of integer / boolean
 
 	function setValueV1iArray(gl, v) {
 		gl.uniform1iv(this.addr, v);
-	} // Array of integer / boolean vectors (from flat array)
+	}
 
+	// Array of integer / boolean vectors (from flat array)
 
 	function setValueV2iArray(gl, v) {
 		gl.uniform2iv(this.addr, v);
 	}
-
 	function setValueV3iArray(gl, v) {
 		gl.uniform3iv(this.addr, v);
 	}
-
 	function setValueV4iArray(gl, v) {
 		gl.uniform4iv(this.addr, v);
-	} // Array of unsigned integer
+	}
 
+	// Array of unsigned integer
 
 	function setValueV1uiArray(gl, v) {
 		gl.uniform1uiv(this.addr, v);
-	} // Array of unsigned integer vectors (from flat array)
+	}
 
+	// Array of unsigned integer vectors (from flat array)
 
 	function setValueV2uiArray(gl, v) {
 		gl.uniform2uiv(this.addr, v);
 	}
-
 	function setValueV3uiArray(gl, v) {
 		gl.uniform3uiv(this.addr, v);
 	}
-
 	function setValueV4uiArray(gl, v) {
 		gl.uniform4uiv(this.addr, v);
-	} // Array of textures (2D / 3D / Cube / 2DArray)
+	}
 
+	// Array of textures (2D / 3D / Cube / 2DArray)
 
 	function setValueT1Array(gl, v, textures) {
 		const cache = this.cache;
 		const n = v.length;
 		const units = allocTexUnits(textures, n);
-
 		if (!arraysEqual(cache, units)) {
 			gl.uniform1iv(this.addr, units);
 			copyArray(cache, units);
 		}
-
 		for (let i = 0; i !== n; ++i) {
 			textures.setTexture2D(v[i] || emptyTexture, units[i]);
 		}
 	}
-
 	function setValueT3DArray(gl, v, textures) {
 		const cache = this.cache;
 		const n = v.length;
 		const units = allocTexUnits(textures, n);
-
 		if (!arraysEqual(cache, units)) {
 			gl.uniform1iv(this.addr, units);
 			copyArray(cache, units);
 		}
-
 		for (let i = 0; i !== n; ++i) {
 			textures.setTexture3D(v[i] || empty3dTexture, units[i]);
 		}
 	}
-
 	function setValueT6Array(gl, v, textures) {
 		const cache = this.cache;
 		const n = v.length;
 		const units = allocTexUnits(textures, n);
-
 		if (!arraysEqual(cache, units)) {
 			gl.uniform1iv(this.addr, units);
 			copyArray(cache, units);
 		}
-
 		for (let i = 0; i !== n; ++i) {
 			textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
 		}
 	}
-
 	function setValueT2DArrayArray(gl, v, textures) {
 		const cache = this.cache;
 		const n = v.length;
 		const units = allocTexUnits(textures, n);
-
 		if (!arraysEqual(cache, units)) {
 			gl.uniform1iv(this.addr, units);
 			copyArray(cache, units);
 		}
-
 		for (let i = 0; i !== n; ++i) {
 			textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
 		}
-	} // Helper to pick the right setter for a pure (bottom-level) array
+	}
 
+	// Helper to pick the right setter for a pure (bottom-level) array
 
 	function getPureArraySetter(type) {
 		switch (type) {
 			case 0x1406:
 				return setValueV1fArray;
 			// FLOAT
-
 			case 0x8b50:
 				return setValueV2fArray;
 			// _VEC2
-
 			case 0x8b51:
 				return setValueV3fArray;
 			// _VEC3
-
 			case 0x8b52:
 				return setValueV4fArray;
 			// _VEC4
@@ -13657,11 +12042,9 @@
 			case 0x8b5a:
 				return setValueM2Array;
 			// _MAT2
-
 			case 0x8b5b:
 				return setValueM3Array;
 			// _MAT3
-
 			case 0x8b5c:
 				return setValueM4Array;
 			// _MAT4
@@ -13670,17 +12053,14 @@
 			case 0x8b56:
 				return setValueV1iArray;
 			// INT, BOOL
-
 			case 0x8b53:
 			case 0x8b57:
 				return setValueV2iArray;
 			// _VEC2
-
 			case 0x8b54:
 			case 0x8b58:
 				return setValueV3iArray;
 			// _VEC3
-
 			case 0x8b55:
 			case 0x8b59:
 				return setValueV4iArray;
@@ -13689,70 +12069,54 @@
 			case 0x1405:
 				return setValueV1uiArray;
 			// UINT
-
 			case 0x8dc6:
 				return setValueV2uiArray;
 			// _VEC2
-
 			case 0x8dc7:
 				return setValueV3uiArray;
 			// _VEC3
-
 			case 0x8dc8:
 				return setValueV4uiArray;
 			// _VEC4
 
 			case 0x8b5e: // SAMPLER_2D
-
 			case 0x8d66: // SAMPLER_EXTERNAL_OES
-
 			case 0x8dca: // INT_SAMPLER_2D
-
 			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
-
 			case 0x8b62:
 				// SAMPLER_2D_SHADOW
 				return setValueT1Array;
-
 			case 0x8b5f: // SAMPLER_3D
-
 			case 0x8dcb: // INT_SAMPLER_3D
-
 			case 0x8dd3:
 				// UNSIGNED_INT_SAMPLER_3D
 				return setValueT3DArray;
-
 			case 0x8b60: // SAMPLER_CUBE
-
 			case 0x8dcc: // INT_SAMPLER_CUBE
-
 			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
-
 			case 0x8dc5:
 				// SAMPLER_CUBE_SHADOW
 				return setValueT6Array;
-
 			case 0x8dc1: // SAMPLER_2D_ARRAY
-
 			case 0x8dcf: // INT_SAMPLER_2D_ARRAY
-
 			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
-
 			case 0x8dc4:
 				// SAMPLER_2D_ARRAY_SHADOW
 				return setValueT2DArrayArray;
 		}
-	} // --- Uniform Classes ---
+	}
 
+	// --- Uniform Classes ---
 
 	class SingleUniform {
 		constructor(id, activeInfo, addr) {
 			this.id = id;
 			this.addr = addr;
 			this.cache = [];
-			this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
-		}
+			this.setValue = getSingularSetter(activeInfo.type);
 
+			// this.path = activeInfo.name; // DEBUG
+		}
 	}
 
 	class PureArrayUniform {
@@ -13761,9 +12125,10 @@
 			this.addr = addr;
 			this.cache = [];
 			this.size = activeInfo.size;
-			this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
-		}
+			this.setValue = getPureArraySetter(activeInfo.type);
 
+			// this.path = activeInfo.name; // DEBUG
+		}
 	}
 
 	class StructuredUniform {
@@ -13772,21 +12137,22 @@
 			this.seq = [];
 			this.map = {};
 		}
-
 		setValue(gl, value, textures) {
 			const seq = this.seq;
-
 			for (let i = 0, n = seq.length; i !== n; ++i) {
 				const u = seq[i];
 				u.setValue(gl, value[u.id], textures);
 			}
 		}
+	}
+
+	// --- Top-level ---
 
-	} // --- Top-level ---
 	// Parser - builds up the property tree from the path strings
 
+	const RePathPart = /(\w+)(\])?(\[|\.)?/g;
 
-	const RePathPart = /(\w+)(\])?(\[|\.)?/g; // extracts
+	// extracts
 	// 	- the identifier (member name or array index)
 	//	- followed by an optional right bracket (found when array index)
 	//	- followed by an optional left bracket or dot (type of subscript)
@@ -13799,87 +12165,78 @@
 		container.seq.push(uniformObject);
 		container.map[uniformObject.id] = uniformObject;
 	}
-
 	function parseUniform(activeInfo, addr, container) {
 		const path = activeInfo.name,
-					pathLength = path.length; // reset RegExp object, because of the early exit of a previous run
+			pathLength = path.length;
 
+		// reset RegExp object, because of the early exit of a previous run
 		RePathPart.lastIndex = 0;
-
 		while (true) {
 			const match = RePathPart.exec(path),
-						matchEnd = RePathPart.lastIndex;
+				matchEnd = RePathPart.lastIndex;
 			let id = match[1];
 			const idIsIndex = match[2] === ']',
-						subscript = match[3];
+				subscript = match[3];
 			if (idIsIndex) id = id | 0; // convert to integer
 
 			if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {
 				// bare name or "pure" bottom-level array "[0]" suffix
+
 				addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
 				break;
 			} else {
 				// step into inner node / create it in case it doesn't exist
+
 				const map = container.map;
 				let next = map[id];
-
 				if (next === undefined) {
 					next = new StructuredUniform(id);
 					addUniform(container, next);
 				}
-
 				container = next;
 			}
 		}
-	} // Root Container
+	}
 
+	// Root Container
 
 	class WebGLUniforms {
 		constructor(gl, program) {
 			this.seq = [];
 			this.map = {};
 			const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
-
 			for (let i = 0; i < n; ++i) {
 				const info = gl.getActiveUniform(program, i),
-							addr = gl.getUniformLocation(program, info.name);
+					addr = gl.getUniformLocation(program, info.name);
 				parseUniform(info, addr, this);
 			}
 		}
-
 		setValue(gl, name, value, textures) {
 			const u = this.map[name];
 			if (u !== undefined) u.setValue(gl, value, textures);
 		}
-
 		setOptional(gl, object, name) {
 			const v = object[name];
 			if (v !== undefined) this.setValue(gl, name, v);
 		}
-
 		static upload(gl, seq, values, textures) {
 			for (let i = 0, n = seq.length; i !== n; ++i) {
 				const u = seq[i],
-							v = values[u.id];
-
+					v = values[u.id];
 				if (v.needsUpdate !== false) {
 					// note: always updating when .needsUpdate is undefined
 					u.setValue(gl, v.value, textures);
 				}
 			}
 		}
-
 		static seqWithValue(seq, values) {
 			const r = [];
-
 			for (let i = 0, n = seq.length; i !== n; ++i) {
 				const u = seq[i];
 				if (u.id in values) r.push(u);
 			}
-
 			return r;
 		}
-
 	}
 
 	function WebGLShader(gl, type, string) {
@@ -13890,116 +12247,96 @@
 	}
 
 	let programIdCount = 0;
-
 	function handleSource(string, errorLine) {
 		const lines = string.split('\n');
 		const lines2 = [];
 		const from = Math.max(errorLine - 6, 0);
 		const to = Math.min(errorLine + 6, lines.length);
-
 		for (let i = from; i < to; i++) {
 			const line = i + 1;
 			lines2.push(`${line === errorLine ? '>' : ' '} ${line}: ${lines[i]}`);
 		}
-
 		return lines2.join('\n');
 	}
-
 	function getEncodingComponents(encoding) {
 		switch (encoding) {
 			case LinearEncoding:
 				return ['Linear', '( value )'];
-
 			case sRGBEncoding:
 				return ['sRGB', '( value )'];
-
 			default:
 				console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);
 				return ['Linear', '( value )'];
 		}
 	}
-
 	function getShaderErrors(gl, shader, type) {
 		const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
 		const errors = gl.getShaderInfoLog(shader).trim();
 		if (status && errors === '') return '';
 		const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
-
 		if (errorMatches) {
 			// --enable-privileged-webgl-extension
 			// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
+
 			const errorLine = parseInt(errorMatches[1]);
 			return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource(gl.getShaderSource(shader), errorLine);
 		} else {
 			return errors;
 		}
 	}
-
 	function getTexelEncodingFunction(functionName, encoding) {
 		const components = getEncodingComponents(encoding);
 		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';
 	}
-
 	function getToneMappingFunction(functionName, toneMapping) {
 		let toneMappingName;
-
 		switch (toneMapping) {
 			case LinearToneMapping:
 				toneMappingName = 'Linear';
 				break;
-
 			case ReinhardToneMapping:
 				toneMappingName = 'Reinhard';
 				break;
-
 			case CineonToneMapping:
 				toneMappingName = 'OptimizedCineon';
 				break;
-
 			case ACESFilmicToneMapping:
 				toneMappingName = 'ACESFilmic';
 				break;
-
 			case CustomToneMapping:
 				toneMappingName = 'Custom';
 				break;
-
 			default:
 				console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);
 				toneMappingName = 'Linear';
 		}
-
 		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
 	}
-
 	function generateExtensions(parameters) {
 		const chunks = [parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];
 		return chunks.filter(filterEmptyLine).join('\n');
 	}
-
 	function generateDefines(defines) {
 		const chunks = [];
-
 		for (const name in defines) {
 			const value = defines[name];
 			if (value === false) continue;
 			chunks.push('#define ' + name + ' ' + value);
 		}
-
 		return chunks.join('\n');
 	}
-
 	function fetchAttributeLocations(gl, program) {
 		const attributes = {};
 		const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
-
 		for (let i = 0; i < n; i++) {
 			const info = gl.getActiveAttrib(program, i);
 			const name = info.name;
 			let locationSize = 1;
 			if (info.type === gl.FLOAT_MAT2) locationSize = 2;
 			if (info.type === gl.FLOAT_MAT3) locationSize = 3;
-			if (info.type === gl.FLOAT_MAT4) locationSize = 4; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
+			if (info.type === gl.FLOAT_MAT4) locationSize = 4;
+
+			// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
 
 			attributes[name] = {
 				type: info.type,
@@ -14007,61 +12344,51 @@
 				locationSize: locationSize
 			};
 		}
-
 		return attributes;
 	}
-
 	function filterEmptyLine(string) {
 		return string !== '';
 	}
-
 	function replaceLightNums(string, parameters) {
 		const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
 		return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
 	}
-
 	function replaceClippingPlaneNums(string, parameters) {
 		return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
-	} // Resolve Includes
+	}
 
+	// Resolve Includes
 
 	const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
-
 	function resolveIncludes(string) {
 		return string.replace(includePattern, includeReplacer);
 	}
-
 	function includeReplacer(match, include) {
 		const string = ShaderChunk[include];
-
 		if (string === undefined) {
 			throw new Error('Can not resolve #include <' + include + '>');
 		}
-
 		return resolveIncludes(string);
-	} // Unroll Loops
+	}
 
+	// Unroll Loops
 
 	const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
-
 	function unrollLoops(string) {
 		return string.replace(unrollLoopPattern, loopReplacer);
 	}
-
 	function loopReplacer(match, start, end, snippet) {
 		let string = '';
-
 		for (let i = parseInt(start); i < parseInt(end); i++) {
 			string += snippet.replace(/\[\s*i\s*\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);
 		}
-
 		return string;
-	} //
+	}
 
+	//
 
 	function generatePrecision(parameters) {
 		let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';
-
 		if (parameters.precision === 'highp') {
 			precisionstring += '\n#define HIGH_PRECISION';
 		} else if (parameters.precision === 'mediump') {
@@ -14069,13 +12396,10 @@
 		} else if (parameters.precision === 'lowp') {
 			precisionstring += '\n#define LOW_PRECISION';
 		}
-
 		return precisionstring;
 	}
-
 	function generateShadowMapTypeDefine(parameters) {
 		let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
-
 		if (parameters.shadowMapType === PCFShadowMap) {
 			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
 		} else if (parameters.shadowMapType === PCFSoftShadowMap) {
@@ -14083,32 +12407,25 @@
 		} else if (parameters.shadowMapType === VSMShadowMap) {
 			shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
 		}
-
 		return shadowMapTypeDefine;
 	}
-
 	function generateEnvMapTypeDefine(parameters) {
 		let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
-
 		if (parameters.envMap) {
 			switch (parameters.envMapMode) {
 				case CubeReflectionMapping:
 				case CubeRefractionMapping:
 					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
 					break;
-
 				case CubeUVReflectionMapping:
 					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
 					break;
 			}
 		}
-
 		return envMapTypeDefine;
 	}
-
 	function generateEnvMapModeDefine(parameters) {
 		let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
-
 		if (parameters.envMap) {
 			switch (parameters.envMapMode) {
 				case CubeRefractionMapping:
@@ -14116,32 +12433,25 @@
 					break;
 			}
 		}
-
 		return envMapModeDefine;
 	}
-
 	function generateEnvMapBlendingDefine(parameters) {
 		let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';
-
 		if (parameters.envMap) {
 			switch (parameters.combine) {
 				case MultiplyOperation:
 					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
 					break;
-
 				case MixOperation:
 					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
 					break;
-
 				case AddOperation:
 					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
 					break;
 			}
 		}
-
 		return envMapBlendingDefine;
 	}
-
 	function generateCubeUVSize(parameters) {
 		const imageHeight = parameters.envMapCubeUVHeight;
 		if (imageHeight === null) return null;
@@ -14154,10 +12464,10 @@
 			maxMip
 		};
 	}
-
 	function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
 		// TODO Send this event to Three.js DevTools
 		// console.log( 'WebGLProgram', cacheKey );
+
 		const gl = renderer.getContext();
 		const defines = parameters.defines;
 		let vertexShader = parameters.vertexShader;
@@ -14172,26 +12482,23 @@
 		const program = gl.createProgram();
 		let prefixVertex, prefixFragment;
 		let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';
-
 		if (parameters.isRawShaderMaterial) {
 			prefixVertex = [customDefines].filter(filterEmptyLine).join('\n');
-
 			if (prefixVertex.length > 0) {
 				prefixVertex += '\n';
 			}
-
 			prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\n');
-
 			if (prefixFragment.length > 0) {
 				prefixFragment += '\n';
 			}
 		} else {
 			prefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '', parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.morphColors && parameters.isWebGL2 ? '#define USE_MORPHCOLORS' : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '	attribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '	attribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '	attribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '	attribute vec4 color;', '#elif defined( USE_COLOR )', '	attribute vec3 color;', '#endif', '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )', '	attribute vec3 morphTarget0;', '	attribute vec3 morphTarget1;', '	attribute vec3 morphTarget2;', '	attribute vec3 morphTarget3;', '	#ifdef USE_MORPHNORMALS', '		attribute vec3 morphNormal0;', '		attribute vec3 morphNormal1;', '		attribute vec3 morphNormal2;', '		attribute vec3 morphNormal3;', '	#else', '		attribute vec3 morphTarget4;', '		attribute vec3 morphTarget5;', '		attribute vec3 morphTarget6;', '		attribute vec3 morphTarget7;', '	#endif', '#endif', '#ifdef USE_SKINNING', '	attribute vec4 skinIndex;', '	attribute vec4 skinWeight;', '#endif', '\n'].filter(filterEmptyLine).join('\n');
-			prefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '', envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.iridescence ? '#define USE_IRIDESCENCE' : '', parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '', parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below
-			parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.opaque ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below
+			prefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '', envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.iridescence ? '#define USE_IRIDESCENCE' : '', parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '', parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '',
+			// this code is required here because it is used by the toneMapping() function defined below
+			parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.opaque ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'],
+			// this code is required here because it is used by the various encoding/decoding function defined below
 			getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\n'].filter(filterEmptyLine).join('\n');
 		}
-
 		vertexShader = resolveIncludes(vertexShader);
 		vertexShader = replaceLightNums(vertexShader, parameters);
 		vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
@@ -14200,22 +12507,25 @@
 		fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
 		vertexShader = unrollLoops(vertexShader);
 		fragmentShader = unrollLoops(fragmentShader);
-
 		if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
 			// GLSL 3.0 conversion for built-in materials and ShaderMaterial
+
 			versionString = '#version 300 es\n';
 			prefixVertex = ['precision mediump sampler2DArray;', '#define attribute in', '#define varying out', '#define texture2D texture'].join('\n') + '\n' + prefixVertex;
 			prefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\n') + '\n' + prefixFragment;
 		}
-
 		const vertexGlsl = versionString + prefixVertex + vertexShader;
-		const fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );
+		const fragmentGlsl = versionString + prefixFragment + fragmentShader;
+
+		// console.log( '*VERTEX*', vertexGlsl );
 		// console.log( '*FRAGMENT*', fragmentGlsl );
 
 		const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
 		const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
 		gl.attachShader(program, glVertexShader);
-		gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.
+		gl.attachShader(program, glFragmentShader);
+
+		// Force a particular attribute to index 0.
 
 		if (parameters.index0AttributeName !== undefined) {
 			gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
@@ -14223,16 +12533,15 @@
 			// programs with morphTargets displace position out of attribute 0
 			gl.bindAttribLocation(program, 0, 'position');
 		}
+		gl.linkProgram(program);
 
-		gl.linkProgram(program); // check for link errors
-
+		// check for link errors
 		if (renderer.debug.checkShaderErrors) {
 			const programLog = gl.getProgramInfoLog(program).trim();
 			const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
 			const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
 			let runnable = true;
 			let haveDiagnostics = true;
-
 			if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
 				runnable = false;
 				const vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');
@@ -14243,7 +12552,6 @@
 			} else if (vertexLog === '' || fragmentLog === '') {
 				haveDiagnostics = false;
 			}
-
 			if (haveDiagnostics) {
 				this.diagnostics = {
 					runnable: runnable,
@@ -14258,43 +12566,46 @@
 					}
 				};
 			}
-		} // Clean up
+		}
+
+		// Clean up
+
 		// Crashes in iOS9 and iOS10. #18402
 		// gl.detachShader( program, glVertexShader );
 		// gl.detachShader( program, glFragmentShader );
 
-
 		gl.deleteShader(glVertexShader);
-		gl.deleteShader(glFragmentShader); // set up caching for uniform locations
+		gl.deleteShader(glFragmentShader);
 
-		let cachedUniforms;
+		// set up caching for uniform locations
 
+		let cachedUniforms;
 		this.getUniforms = function () {
 			if (cachedUniforms === undefined) {
 				cachedUniforms = new WebGLUniforms(gl, program);
 			}
-
 			return cachedUniforms;
-		}; // set up caching for attribute locations
+		};
 
+		// set up caching for attribute locations
 
 		let cachedAttributes;
-
 		this.getAttributes = function () {
 			if (cachedAttributes === undefined) {
 				cachedAttributes = fetchAttributeLocations(gl, program);
 			}
-
 			return cachedAttributes;
-		}; // free resource
+		};
 
+		// free resource
 
 		this.destroy = function () {
 			bindingStates.releaseStatesOfProgram(this);
 			gl.deleteProgram(program);
 			this.program = undefined;
-		}; //
+		};
 
+		//
 
 		this.name = parameters.shaderName;
 		this.id = programIdCount++;
@@ -14307,101 +12618,76 @@
 	}
 
 	let _id = 0;
-
 	class WebGLShaderCache {
 		constructor() {
 			this.shaderCache = new Map();
 			this.materialCache = new Map();
 		}
-
 		update(material) {
 			const vertexShader = material.vertexShader;
 			const fragmentShader = material.fragmentShader;
-
 			const vertexShaderStage = this._getShaderStage(vertexShader);
-
 			const fragmentShaderStage = this._getShaderStage(fragmentShader);
-
 			const materialShaders = this._getShaderCacheForMaterial(material);
-
 			if (materialShaders.has(vertexShaderStage) === false) {
 				materialShaders.add(vertexShaderStage);
 				vertexShaderStage.usedTimes++;
 			}
-
 			if (materialShaders.has(fragmentShaderStage) === false) {
 				materialShaders.add(fragmentShaderStage);
 				fragmentShaderStage.usedTimes++;
 			}
-
 			return this;
 		}
-
 		remove(material) {
 			const materialShaders = this.materialCache.get(material);
-
 			for (const shaderStage of materialShaders) {
 				shaderStage.usedTimes--;
 				if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
 			}
-
 			this.materialCache.delete(material);
 			return this;
 		}
-
 		getVertexShaderID(material) {
 			return this._getShaderStage(material.vertexShader).id;
 		}
-
 		getFragmentShaderID(material) {
 			return this._getShaderStage(material.fragmentShader).id;
 		}
-
 		dispose() {
 			this.shaderCache.clear();
 			this.materialCache.clear();
 		}
-
 		_getShaderCacheForMaterial(material) {
 			const cache = this.materialCache;
 			let set = cache.get(material);
-
 			if (set === undefined) {
 				set = new Set();
 				cache.set(material, set);
 			}
-
 			return set;
 		}
-
 		_getShaderStage(code) {
 			const cache = this.shaderCache;
 			let stage = cache.get(code);
-
 			if (stage === undefined) {
 				stage = new WebGLShaderStage(code);
 				cache.set(code, stage);
 			}
-
 			return stage;
 		}
-
 	}
-
 	class WebGLShaderStage {
 		constructor(code) {
 			this.id = _id++;
 			this.code = code;
 			this.usedTimes = 0;
 		}
-
 	}
 
 	function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
 		const _programLayers = new Layers();
-
 		const _customShaders = new WebGLShaderCache();
-
 		const programs = [];
 		const isWebGL2 = capabilities.isWebGL2;
 		const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
@@ -14424,35 +12710,37 @@
 			ShadowMaterial: 'shadow',
 			SpriteMaterial: 'sprite'
 		};
-
 		function getParameters(material, lights, shadows, scene, object) {
 			const fog = scene.fog;
 			const geometry = object.geometry;
 			const environment = material.isMeshStandardMaterial ? scene.environment : null;
 			const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
 			const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
-			const shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene
+			const shaderID = shaderIDs[material.type];
+
+			// heuristics to create shader parameters according to lights in the scene
 			// (not to blow over maxLights budget)
 
 			if (material.precision !== null) {
 				precision = capabilities.getMaxPrecision(material.precision);
-
 				if (precision !== material.precision) {
 					console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');
 				}
-			} //
+			}
 
+			//
 
 			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
 			const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
 			let morphTextureStride = 0;
 			if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;
 			if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;
-			if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3; //
+			if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3;
+
+			//
 
 			let vertexShader, fragmentShader;
 			let customVertexShaderID, customFragmentShaderID;
-
 			if (shaderID) {
 				const shader = ShaderLib[shaderID];
 				vertexShader = shader.vertexShader;
@@ -14460,13 +12748,10 @@
 			} else {
 				vertexShader = material.vertexShader;
 				fragmentShader = material.fragmentShader;
-
 				_customShaders.update(material);
-
 				customVertexShaderID = _customShaders.getVertexShaderID(material);
 				customFragmentShaderID = _customShaders.getFragmentShaderID(material);
 			}
-
 			const currentRenderTarget = renderer.getRenderTarget();
 			const useAlphaTest = material.alphaTest > 0;
 			const useClearcoat = material.clearcoat > 0;
@@ -14575,34 +12860,28 @@
 			};
 			return parameters;
 		}
-
 		function getProgramCacheKey(parameters) {
 			const array = [];
-
 			if (parameters.shaderID) {
 				array.push(parameters.shaderID);
 			} else {
 				array.push(parameters.customVertexShaderID);
 				array.push(parameters.customFragmentShaderID);
 			}
-
 			if (parameters.defines !== undefined) {
 				for (const name in parameters.defines) {
 					array.push(name);
 					array.push(parameters.defines[name]);
 				}
 			}
-
 			if (parameters.isRawShaderMaterial === false) {
 				getProgramCacheKeyParameters(array, parameters);
 				getProgramCacheKeyBooleans(array, parameters);
 				array.push(renderer.outputEncoding);
 			}
-
 			array.push(parameters.customProgramCacheKey);
 			return array.join();
 		}
-
 		function getProgramCacheKeyParameters(array, parameters) {
 			array.push(parameters.precision);
 			array.push(parameters.outputEncoding);
@@ -14630,10 +12909,8 @@
 			array.push(parameters.numClipIntersection);
 			array.push(parameters.depthPacking);
 		}
-
 		function getProgramCacheKeyBooleans(array, parameters) {
 			_programLayers.disableAll();
-
 			if (parameters.isWebGL2) _programLayers.enable(0);
 			if (parameters.supportsVertexTextures) _programLayers.enable(1);
 			if (parameters.instancing) _programLayers.enable(2);
@@ -14668,9 +12945,7 @@
 			if (parameters.vertexTangents) _programLayers.enable(31);
 			if (parameters.uvsVertexOnly) _programLayers.enable(32);
 			array.push(_programLayers.mask);
-
 			_programLayers.disableAll();
-
 			if (parameters.fog) _programLayers.enable(0);
 			if (parameters.useFog) _programLayers.enable(1);
 			if (parameters.flatShading) _programLayers.enable(2);
@@ -14698,61 +12973,52 @@
 			if (parameters.opaque) _programLayers.enable(24);
 			array.push(_programLayers.mask);
 		}
-
 		function getUniforms(material) {
 			const shaderID = shaderIDs[material.type];
 			let uniforms;
-
 			if (shaderID) {
 				const shader = ShaderLib[shaderID];
 				uniforms = UniformsUtils.clone(shader.uniforms);
 			} else {
 				uniforms = material.uniforms;
 			}
-
 			return uniforms;
 		}
-
 		function acquireProgram(parameters, cacheKey) {
-			let program; // Check if code has been already compiled
+			let program;
 
+			// Check if code has been already compiled
 			for (let p = 0, pl = programs.length; p < pl; p++) {
 				const preexistingProgram = programs[p];
-
 				if (preexistingProgram.cacheKey === cacheKey) {
 					program = preexistingProgram;
 					++program.usedTimes;
 					break;
 				}
 			}
-
 			if (program === undefined) {
 				program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
 				programs.push(program);
 			}
-
 			return program;
 		}
-
 		function releaseProgram(program) {
 			if (--program.usedTimes === 0) {
 				// Remove from unordered set
 				const i = programs.indexOf(program);
 				programs[i] = programs[programs.length - 1];
-				programs.pop(); // Free WebGL resources
+				programs.pop();
 
+				// Free WebGL resources
 				program.destroy();
 			}
 		}
-
 		function releaseShaderCache(material) {
 			_customShaders.remove(material);
 		}
-
 		function dispose() {
 			_customShaders.dispose();
 		}
-
 		return {
 			getParameters: getParameters,
 			getProgramCacheKey: getProgramCacheKey,
@@ -14768,30 +13034,23 @@
 
 	function WebGLProperties() {
 		let properties = new WeakMap();
-
 		function get(object) {
 			let map = properties.get(object);
-
 			if (map === undefined) {
 				map = {};
 				properties.set(object, map);
 			}
-
 			return map;
 		}
-
 		function remove(object) {
 			properties.delete(object);
 		}
-
 		function update(object, key, value) {
 			properties.get(object)[key] = value;
 		}
-
 		function dispose() {
 			properties = new WeakMap();
 		}
-
 		return {
 			get: get,
 			remove: remove,
@@ -14813,7 +13072,6 @@
 			return a.id - b.id;
 		}
 	}
-
 	function reversePainterSortStable(a, b) {
 		if (a.groupOrder !== b.groupOrder) {
 			return a.groupOrder - b.groupOrder;
@@ -14825,24 +13083,20 @@
 			return a.id - b.id;
 		}
 	}
-
 	function WebGLRenderList() {
 		const renderItems = [];
 		let renderItemsIndex = 0;
 		const opaque = [];
 		const transmissive = [];
 		const transparent = [];
-
 		function init() {
 			renderItemsIndex = 0;
 			opaque.length = 0;
 			transmissive.length = 0;
 			transparent.length = 0;
 		}
-
 		function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
 			let renderItem = renderItems[renderItemsIndex];
-
 			if (renderItem === undefined) {
 				renderItem = {
 					id: object.id,
@@ -14865,14 +13119,11 @@
 				renderItem.z = z;
 				renderItem.group = group;
 			}
-
 			renderItemsIndex++;
 			return renderItem;
 		}
-
 		function push(object, geometry, material, groupOrder, z, group) {
 			const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
-
 			if (material.transmission > 0.0) {
 				transmissive.push(renderItem);
 			} else if (material.transparent === true) {
@@ -14881,10 +13132,8 @@
 				opaque.push(renderItem);
 			}
 		}
-
 		function unshift(object, geometry, material, groupOrder, z, group) {
 			const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
-
 			if (material.transmission > 0.0) {
 				transmissive.unshift(renderItem);
 			} else if (material.transparent === true) {
@@ -14893,15 +13142,14 @@
 				opaque.unshift(renderItem);
 			}
 		}
-
 		function sort(customOpaqueSort, customTransparentSort) {
 			if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
 			if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
 			if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
 		}
-
 		function finish() {
 			// Clear references from inactive renderItems in the list
+
 			for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
 				const renderItem = renderItems[i];
 				if (renderItem.id === null) break;
@@ -14912,7 +13160,6 @@
 				renderItem.group = null;
 			}
 		}
-
 		return {
 			opaque: opaque,
 			transmissive: transmissive,
@@ -14924,14 +13171,11 @@
 			sort: sort
 		};
 	}
-
 	function WebGLRenderLists() {
 		let lists = new WeakMap();
-
 		function get(scene, renderCallDepth) {
 			const listArray = lists.get(scene);
 			let list;
-
 			if (listArray === undefined) {
 				list = new WebGLRenderList();
 				lists.set(scene, [list]);
@@ -14943,14 +13187,11 @@
 					list = listArray[renderCallDepth];
 				}
 			}
-
 			return list;
 		}
-
 		function dispose() {
 			lists = new WeakMap();
 		}
-
 		return {
 			get: get,
 			dispose: dispose
@@ -14964,9 +13205,7 @@
 				if (lights[light.id] !== undefined) {
 					return lights[light.id];
 				}
-
 				let uniforms;
-
 				switch (light.type) {
 					case 'DirectionalLight':
 						uniforms = {
@@ -14974,7 +13213,6 @@
 							color: new Color()
 						};
 						break;
-
 					case 'SpotLight':
 						uniforms = {
 							position: new Vector3(),
@@ -14986,7 +13224,6 @@
 							decay: 0
 						};
 						break;
-
 					case 'PointLight':
 						uniforms = {
 							position: new Vector3(),
@@ -14995,7 +13232,6 @@
 							decay: 0
 						};
 						break;
-
 					case 'HemisphereLight':
 						uniforms = {
 							direction: new Vector3(),
@@ -15003,7 +13239,6 @@
 							groundColor: new Color()
 						};
 						break;
-
 					case 'RectAreaLight':
 						uniforms = {
 							color: new Color(),
@@ -15013,13 +13248,11 @@
 						};
 						break;
 				}
-
 				lights[light.id] = uniforms;
 				return uniforms;
 			}
 		};
 	}
-
 	function ShadowUniformsCache() {
 		const lights = {};
 		return {
@@ -15027,9 +13260,7 @@
 				if (lights[light.id] !== undefined) {
 					return lights[light.id];
 				}
-
 				let uniforms;
-
 				switch (light.type) {
 					case 'DirectionalLight':
 						uniforms = {
@@ -15039,7 +13270,6 @@
 							shadowMapSize: new Vector2()
 						};
 						break;
-
 					case 'SpotLight':
 						uniforms = {
 							shadowBias: 0,
@@ -15048,7 +13278,6 @@
 							shadowMapSize: new Vector2()
 						};
 						break;
-
 					case 'PointLight':
 						uniforms = {
 							shadowBias: 0,
@@ -15059,6 +13288,7 @@
 							shadowCameraFar: 1000
 						};
 						break;
+
 					// TODO (abelnation): set RectAreaLight shadow uniforms
 				}
 
@@ -15067,13 +13297,10 @@
 			}
 		};
 	}
-
 	let nextVersion = 0;
-
 	function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
 		return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
 	}
-
 	function WebGLLights(extensions, capabilities) {
 		const cache = new UniformsCache();
 		const shadowCache = ShadowUniformsCache();
@@ -15111,20 +13338,15 @@
 			hemi: [],
 			numSpotLightShadowsWithMaps: 0
 		};
-
 		for (let i = 0; i < 9; i++) state.probe.push(new Vector3());
-
 		const vector3 = new Vector3();
 		const matrix4 = new Matrix4();
 		const matrix42 = new Matrix4();
-
 		function setup(lights, physicallyCorrectLights) {
 			let r = 0,
-					g = 0,
-					b = 0;
-
+				g = 0,
+				b = 0;
 			for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);
-
 			let directionalLength = 0;
 			let pointLength = 0;
 			let spotLength = 0;
@@ -15134,19 +13356,19 @@
 			let numPointShadows = 0;
 			let numSpotShadows = 0;
 			let numSpotMaps = 0;
-			let numSpotShadowsWithMaps = 0; // ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
+			let numSpotShadowsWithMaps = 0;
 
-			lights.sort(shadowCastingAndTexturingLightsFirst); // artist-friendly light intensity scaling factor
+			// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
+			lights.sort(shadowCastingAndTexturingLightsFirst);
 
+			// artist-friendly light intensity scaling factor
 			const scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;
-
 			for (let i = 0, l = lights.length; i < l; i++) {
 				const light = lights[i];
 				const color = light.color;
 				const intensity = light.intensity;
 				const distance = light.distance;
 				const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
-
 				if (light.isAmbientLight) {
 					r += color.r * intensity * scaleFactor;
 					g += color.g * intensity * scaleFactor;
@@ -15158,7 +13380,6 @@
 				} else if (light.isDirectionalLight) {
 					const uniforms = cache.get(light);
 					uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
-
 					if (light.castShadow) {
 						const shadow = light.shadow;
 						const shadowUniforms = shadowCache.get(light);
@@ -15171,7 +13392,6 @@
 						state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
 						numDirectionalShadows++;
 					}
-
 					state.directional[directionalLength] = uniforms;
 					directionalLength++;
 				} else if (light.isSpotLight) {
@@ -15184,18 +13404,16 @@
 					uniforms.decay = light.decay;
 					state.spot[spotLength] = uniforms;
 					const shadow = light.shadow;
-
 					if (light.map) {
 						state.spotLightMap[numSpotMaps] = light.map;
-						numSpotMaps++; // make sure the lightMatrix is up to date
-						// TODO : do it if required only
+						numSpotMaps++;
 
+						// make sure the lightMatrix is up to date
+						// TODO : do it if required only
 						shadow.updateMatrices(light);
 						if (light.castShadow) numSpotShadowsWithMaps++;
 					}
-
 					state.spotLightMatrix[spotLength] = shadow.matrix;
-
 					if (light.castShadow) {
 						const shadowUniforms = shadowCache.get(light);
 						shadowUniforms.shadowBias = shadow.bias;
@@ -15206,7 +13424,6 @@
 						state.spotShadowMap[spotLength] = shadowMap;
 						numSpotShadows++;
 					}
-
 					spotLength++;
 				} else if (light.isRectAreaLight) {
 					const uniforms = cache.get(light);
@@ -15220,7 +13437,6 @@
 					uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
 					uniforms.distance = light.distance;
 					uniforms.decay = light.decay;
-
 					if (light.castShadow) {
 						const shadow = light.shadow;
 						const shadowUniforms = shadowCache.get(light);
@@ -15235,7 +13451,6 @@
 						state.pointShadowMatrix[pointLength] = light.shadow.matrix;
 						numPointShadows++;
 					}
-
 					state.point[pointLength] = uniforms;
 					pointLength++;
 				} else if (light.isHemisphereLight) {
@@ -15246,14 +13461,15 @@
 					hemiLength++;
 				}
 			}
-
 			if (rectAreaLength > 0) {
 				if (capabilities.isWebGL2) {
 					// WebGL 2
+
 					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
 					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
 				} else {
 					// WebGL 1
+
 					if (extensions.has('OES_texture_float_linear') === true) {
 						state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
 						state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
@@ -15265,12 +13481,10 @@
 					}
 				}
 			}
-
 			state.ambient[0] = r;
 			state.ambient[1] = g;
 			state.ambient[2] = b;
 			const hash = state.hash;
-
 			if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps) {
 				state.directional.length = directionalLength;
 				state.spot.length = spotLength;
@@ -15300,7 +13514,6 @@
 				state.version = nextVersion++;
 			}
 		}
-
 		function setupView(lights, camera) {
 			let directionalLength = 0;
 			let pointLength = 0;
@@ -15308,10 +13521,8 @@
 			let rectAreaLength = 0;
 			let hemiLength = 0;
 			const viewMatrix = camera.matrixWorldInverse;
-
 			for (let i = 0, l = lights.length; i < l; i++) {
 				const light = lights[i];
-
 				if (light.isDirectionalLight) {
 					const uniforms = state.directional[directionalLength];
 					uniforms.direction.setFromMatrixPosition(light.matrixWorld);
@@ -15331,8 +13542,9 @@
 				} else if (light.isRectAreaLight) {
 					const uniforms = state.rectArea[rectAreaLength];
 					uniforms.position.setFromMatrixPosition(light.matrixWorld);
-					uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors
+					uniforms.position.applyMatrix4(viewMatrix);
 
+					// extract local rotation of light to derive width/height half vectors
 					matrix42.identity();
 					matrix4.copy(light.matrixWorld);
 					matrix4.premultiply(viewMatrix);
@@ -15355,7 +13567,6 @@
 				}
 			}
 		}
-
 		return {
 			setup: setup,
 			setupView: setupView,
@@ -15367,28 +13578,22 @@
 		const lights = new WebGLLights(extensions, capabilities);
 		const lightsArray = [];
 		const shadowsArray = [];
-
 		function init() {
 			lightsArray.length = 0;
 			shadowsArray.length = 0;
 		}
-
 		function pushLight(light) {
 			lightsArray.push(light);
 		}
-
 		function pushShadow(shadowLight) {
 			shadowsArray.push(shadowLight);
 		}
-
 		function setupLights(physicallyCorrectLights) {
 			lights.setup(lightsArray, physicallyCorrectLights);
 		}
-
 		function setupLightsView(camera) {
 			lights.setupView(lightsArray, camera);
 		}
-
 		const state = {
 			lightsArray: lightsArray,
 			shadowsArray: shadowsArray,
@@ -15403,14 +13608,11 @@
 			pushShadow: pushShadow
 		};
 	}
-
 	function WebGLRenderStates(extensions, capabilities) {
 		let renderStates = new WeakMap();
-
 		function get(scene, renderCallDepth = 0) {
 			const renderStateArray = renderStates.get(scene);
 			let renderState;
-
 			if (renderStateArray === undefined) {
 				renderState = new WebGLRenderState(extensions, capabilities);
 				renderStates.set(scene, [renderState]);
@@ -15422,14 +13624,11 @@
 					renderState = renderStateArray[renderCallDepth];
 				}
 			}
-
 			return renderState;
 		}
-
 		function dispose() {
 			renderStates = new WeakMap();
 		}
-
 		return {
 			get: get,
 			dispose: dispose
@@ -15451,7 +13650,6 @@
 			this.wireframeLinewidth = 1;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.depthPacking = source.depthPacking;
@@ -15464,7 +13662,6 @@
 			this.wireframeLinewidth = source.wireframeLinewidth;
 			return this;
 		}
-
 	}
 
 	class MeshDistanceMaterial extends Material {
@@ -15482,7 +13679,6 @@
 			this.displacementBias = 0;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.referencePosition.copy(source.referencePosition);
@@ -15495,7 +13691,6 @@
 			this.displacementBias = source.displacementBias;
 			return this;
 		}
-
 	}
 
 	const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
@@ -15503,17 +13698,15 @@
 
 	function WebGLShadowMap(_renderer, _objects, _capabilities) {
 		let _frustum = new Frustum();
-
 		const _shadowMapSize = new Vector2(),
-					_viewportSize = new Vector2(),
-					_viewport = new Vector4(),
-					_depthMaterial = new MeshDepthMaterial({
-			depthPacking: RGBADepthPacking
-		}),
-					_distanceMaterial = new MeshDistanceMaterial(),
-					_materialCache = {},
-					_maxTextureSize = _capabilities.maxTextureSize;
-
+			_viewportSize = new Vector2(),
+			_viewport = new Vector4(),
+			_depthMaterial = new MeshDepthMaterial({
+				depthPacking: RGBADepthPacking
+			}),
+			_distanceMaterial = new MeshDistanceMaterial(),
+			_materialCache = {},
+			_maxTextureSize = _capabilities.maxTextureSize;
 		const shadowSide = {
 			0: BackSide,
 			1: FrontSide,
@@ -15547,62 +13740,47 @@
 		this.autoUpdate = true;
 		this.needsUpdate = false;
 		this.type = PCFShadowMap;
-
 		this.render = function (lights, scene, camera) {
 			if (scope.enabled === false) return;
 			if (scope.autoUpdate === false && scope.needsUpdate === false) return;
 			if (lights.length === 0) return;
-
 			const currentRenderTarget = _renderer.getRenderTarget();
-
 			const activeCubeFace = _renderer.getActiveCubeFace();
-
 			const activeMipmapLevel = _renderer.getActiveMipmapLevel();
+			const _state = _renderer.state;
 
-			const _state = _renderer.state; // Set GL state for depth map.
-
+			// Set GL state for depth map.
 			_state.setBlending(NoBlending);
-
 			_state.buffers.color.setClear(1, 1, 1, 1);
-
 			_state.buffers.depth.setTest(true);
+			_state.setScissorTest(false);
 
-			_state.setScissorTest(false); // render depth map
-
+			// render depth map
 
 			for (let i = 0, il = lights.length; i < il; i++) {
 				const light = lights[i];
 				const shadow = light.shadow;
-
 				if (shadow === undefined) {
 					console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
 					continue;
 				}
-
 				if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
-
 				_shadowMapSize.copy(shadow.mapSize);
-
 				const shadowFrameExtents = shadow.getFrameExtents();
-
 				_shadowMapSize.multiply(shadowFrameExtents);
-
 				_viewportSize.copy(shadow.mapSize);
-
 				if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
 					if (_shadowMapSize.x > _maxTextureSize) {
 						_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
 						_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
 						shadow.mapSize.x = _viewportSize.x;
 					}
-
 					if (_shadowMapSize.y > _maxTextureSize) {
 						_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
 						_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
 						shadow.mapSize.y = _viewportSize.y;
 					}
 				}
-
 				if (shadow.map === null) {
 					const pars = this.type !== VSMShadowMap ? {
 						minFilter: NearestFilter,
@@ -15612,116 +13790,91 @@
 					shadow.map.texture.name = light.name + '.shadowMap';
 					shadow.camera.updateProjectionMatrix();
 				}
-
 				_renderer.setRenderTarget(shadow.map);
-
 				_renderer.clear();
-
 				const viewportCount = shadow.getViewportCount();
-
 				for (let vp = 0; vp < viewportCount; vp++) {
 					const viewport = shadow.getViewport(vp);
-
 					_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
-
 					_state.viewport(_viewport);
-
 					shadow.updateMatrices(light, vp);
 					_frustum = shadow.getFrustum();
 					renderObject(scene, camera, shadow.camera, light, this.type);
-				} // do blur pass for VSM
+				}
 
+				// do blur pass for VSM
 
 				if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
 					VSMPass(shadow, camera);
 				}
-
 				shadow.needsUpdate = false;
 			}
-
 			scope.needsUpdate = false;
-
 			_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
 		};
-
 		function VSMPass(shadow, camera) {
 			const geometry = _objects.update(fullScreenMesh);
-
 			if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
 				shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
 				shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
 				shadowMaterialVertical.needsUpdate = true;
 				shadowMaterialHorizontal.needsUpdate = true;
 			}
-
 			if (shadow.mapPass === null) {
 				shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
-			} // vertical pass
+			}
 
+			// vertical pass
 
 			shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
 			shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
 			shadowMaterialVertical.uniforms.radius.value = shadow.radius;
-
 			_renderer.setRenderTarget(shadow.mapPass);
-
 			_renderer.clear();
+			_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
 
-			_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass
-
+			// horizontal pass
 
 			shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
 			shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
 			shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
-
 			_renderer.setRenderTarget(shadow.map);
-
 			_renderer.clear();
-
 			_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
 		}
-
 		function getDepthMaterial(object, material, light, shadowCameraNear, shadowCameraFar, type) {
 			let result = null;
 			const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
-
 			if (customMaterial !== undefined) {
 				result = customMaterial;
 			} else {
 				result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
 			}
-
 			if (_renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
 				// in this case we need a unique material instance reflecting the
 				// appropriate state
+
 				const keyA = result.uuid,
-							keyB = material.uuid;
+					keyB = material.uuid;
 				let materialsForVariant = _materialCache[keyA];
-
 				if (materialsForVariant === undefined) {
 					materialsForVariant = {};
 					_materialCache[keyA] = materialsForVariant;
 				}
-
 				let cachedMaterial = materialsForVariant[keyB];
-
 				if (cachedMaterial === undefined) {
 					cachedMaterial = result.clone();
 					materialsForVariant[keyB] = cachedMaterial;
 				}
-
 				result = cachedMaterial;
 			}
-
 			result.visible = material.visible;
 			result.wireframe = material.wireframe;
-
 			if (type === VSMShadowMap) {
 				result.side = material.shadowSide !== null ? material.shadowSide : material.side;
 			} else {
 				result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
 			}
-
 			result.alphaMap = material.alphaMap;
 			result.alphaTest = material.alphaTest;
 			result.map = material.map;
@@ -15733,51 +13886,38 @@
 			result.displacementBias = material.displacementBias;
 			result.wireframeLinewidth = material.wireframeLinewidth;
 			result.linewidth = material.linewidth;
-
 			if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
 				result.referencePosition.setFromMatrixPosition(light.matrixWorld);
 				result.nearDistance = shadowCameraNear;
 				result.farDistance = shadowCameraFar;
 			}
-
 			return result;
 		}
-
 		function renderObject(object, camera, shadowCamera, light, type) {
 			if (object.visible === false) return;
 			const visible = object.layers.test(camera.layers);
-
 			if (visible && (object.isMesh || object.isLine || object.isPoints)) {
 				if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
 					object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
-
 					const geometry = _objects.update(object);
-
 					const material = object.material;
-
 					if (Array.isArray(material)) {
 						const groups = geometry.groups;
-
 						for (let k = 0, kl = groups.length; k < kl; k++) {
 							const group = groups[k];
 							const groupMaterial = material[group.materialIndex];
-
 							if (groupMaterial && groupMaterial.visible) {
 								const depthMaterial = getDepthMaterial(object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
-
 								_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
 							}
 						}
 					} else if (material.visible) {
 						const depthMaterial = getDepthMaterial(object, material, light, shadowCamera.near, shadowCamera.far, type);
-
 						_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
 					}
 				}
 			}
-
 			const children = object.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				renderObject(children[i], camera, shadowCamera, light, type);
 			}
@@ -15786,7 +13926,6 @@
 
 	function WebGLState(gl, extensions, capabilities) {
 		const isWebGL2 = capabilities.isWebGL2;
-
 		function ColorBuffer() {
 			let locked = false;
 			const color = new Vector4();
@@ -15808,9 +13947,7 @@
 						g *= a;
 						b *= a;
 					}
-
 					color.set(r, g, b, a);
-
 					if (currentColorClear.equals(color) === false) {
 						gl.clearColor(r, g, b, a);
 						currentColorClear.copy(color);
@@ -15849,39 +13986,30 @@
 							case NeverDepth:
 								gl.depthFunc(gl.NEVER);
 								break;
-
 							case AlwaysDepth:
 								gl.depthFunc(gl.ALWAYS);
 								break;
-
 							case LessDepth:
 								gl.depthFunc(gl.LESS);
 								break;
-
 							case LessEqualDepth:
 								gl.depthFunc(gl.LEQUAL);
 								break;
-
 							case EqualDepth:
 								gl.depthFunc(gl.EQUAL);
 								break;
-
 							case GreaterEqualDepth:
 								gl.depthFunc(gl.GEQUAL);
 								break;
-
 							case GreaterDepth:
 								gl.depthFunc(gl.GREATER);
 								break;
-
 							case NotEqualDepth:
 								gl.depthFunc(gl.NOTEQUAL);
 								break;
-
 							default:
 								gl.depthFunc(gl.LEQUAL);
 						}
-
 						currentDepthFunc = depthFunc;
 					}
 				},
@@ -15902,7 +14030,6 @@
 				}
 			};
 		}
-
 		function StencilBuffer() {
 			let locked = false;
 			let currentStencilMask = null;
@@ -15966,8 +14093,9 @@
 					currentStencilClear = null;
 				}
 			};
-		} //
+		}
 
+		//
 
 		const colorBuffer = new ColorBuffer();
 		const depthBuffer = new DepthBuffer();
@@ -15997,7 +14125,6 @@
 		let lineWidthAvailable = false;
 		let version = 0;
 		const glVersion = gl.getParameter(gl.VERSION);
-
 		if (glVersion.indexOf('WebGL') !== -1) {
 			version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
 			lineWidthAvailable = version >= 1.0;
@@ -16005,32 +14132,28 @@
 			version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
 			lineWidthAvailable = version >= 2.0;
 		}
-
 		let currentTextureSlot = null;
 		let currentBoundTextures = {};
 		const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
 		const viewportParam = gl.getParameter(gl.VIEWPORT);
 		const currentScissor = new Vector4().fromArray(scissorParam);
 		const currentViewport = new Vector4().fromArray(viewportParam);
-
 		function createTexture(type, target, count) {
 			const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
-
 			const texture = gl.createTexture();
 			gl.bindTexture(type, texture);
 			gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
 			gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
-
 			for (let i = 0; i < count; i++) {
 				gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
 			}
-
 			return texture;
 		}
-
 		const emptyTextures = {};
 		emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
-		emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init
+		emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
+
+		// init
 
 		colorBuffer.setClear(0, 0, 0, 1);
 		depthBuffer.setClear(1);
@@ -16040,7 +14163,9 @@
 		setFlipSided(false);
 		setCullFace(CullFaceBack);
 		enable(gl.CULL_FACE);
-		setBlending(NoBlending); //
+		setBlending(NoBlending);
+
+		//
 
 		function enable(id) {
 			if (enabledCapabilities[id] !== true) {
@@ -16048,56 +14173,45 @@
 				enabledCapabilities[id] = true;
 			}
 		}
-
 		function disable(id) {
 			if (enabledCapabilities[id] !== false) {
 				gl.disable(id);
 				enabledCapabilities[id] = false;
 			}
 		}
-
 		function bindFramebuffer(target, framebuffer) {
 			if (currentBoundFramebuffers[target] !== framebuffer) {
 				gl.bindFramebuffer(target, framebuffer);
 				currentBoundFramebuffers[target] = framebuffer;
-
 				if (isWebGL2) {
 					// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER
+
 					if (target === gl.DRAW_FRAMEBUFFER) {
 						currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
 					}
-
 					if (target === gl.FRAMEBUFFER) {
 						currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
 					}
 				}
-
 				return true;
 			}
-
 			return false;
 		}
-
 		function drawBuffers(renderTarget, framebuffer) {
 			let drawBuffers = defaultDrawbuffers;
 			let needsUpdate = false;
-
 			if (renderTarget) {
 				drawBuffers = currentDrawbuffers.get(framebuffer);
-
 				if (drawBuffers === undefined) {
 					drawBuffers = [];
 					currentDrawbuffers.set(framebuffer, drawBuffers);
 				}
-
 				if (renderTarget.isWebGLMultipleRenderTargets) {
 					const textures = renderTarget.texture;
-
 					if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
 						for (let i = 0, il = textures.length; i < il; i++) {
 							drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;
 						}
-
 						drawBuffers.length = textures.length;
 						needsUpdate = true;
 					}
@@ -16113,7 +14227,6 @@
 					needsUpdate = true;
 				}
 			}
-
 			if (needsUpdate) {
 				if (capabilities.isWebGL2) {
 					gl.drawBuffers(drawBuffers);
@@ -16122,35 +14235,29 @@
 				}
 			}
 		}
-
 		function useProgram(program) {
 			if (currentProgram !== program) {
 				gl.useProgram(program);
 				currentProgram = program;
 				return true;
 			}
-
 			return false;
 		}
-
 		const equationToGL = {
 			[AddEquation]: gl.FUNC_ADD,
 			[SubtractEquation]: gl.FUNC_SUBTRACT,
 			[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
 		};
-
 		if (isWebGL2) {
 			equationToGL[MinEquation] = gl.MIN;
 			equationToGL[MaxEquation] = gl.MAX;
 		} else {
 			const extension = extensions.get('EXT_blend_minmax');
-
 			if (extension !== null) {
 				equationToGL[MinEquation] = extension.MIN_EXT;
 				equationToGL[MaxEquation] = extension.MAX_EXT;
 			}
 		}
-
 		const factorToGL = {
 			[ZeroFactor]: gl.ZERO,
 			[OneFactor]: gl.ONE,
@@ -16164,22 +14271,18 @@
 			[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
 			[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
 		};
-
 		function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
 			if (blending === NoBlending) {
 				if (currentBlendingEnabled === true) {
 					disable(gl.BLEND);
 					currentBlendingEnabled = false;
 				}
-
 				return;
 			}
-
 			if (currentBlendingEnabled === false) {
 				enable(gl.BLEND);
 				currentBlendingEnabled = true;
 			}
-
 			if (blending !== CustomBlending) {
 				if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
 					if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
@@ -16187,25 +14290,20 @@
 						currentBlendEquation = AddEquation;
 						currentBlendEquationAlpha = AddEquation;
 					}
-
 					if (premultipliedAlpha) {
 						switch (blending) {
 							case NormalBlending:
 								gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
 								break;
-
 							case AdditiveBlending:
 								gl.blendFunc(gl.ONE, gl.ONE);
 								break;
-
 							case SubtractiveBlending:
 								gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
 								break;
-
 							case MultiplyBlending:
 								gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
 								break;
-
 							default:
 								console.error('THREE.WebGLState: Invalid blending: ', blending);
 								break;
@@ -16215,25 +14313,20 @@
 							case NormalBlending:
 								gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
 								break;
-
 							case AdditiveBlending:
 								gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
 								break;
-
 							case SubtractiveBlending:
 								gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
 								break;
-
 							case MultiplyBlending:
 								gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
 								break;
-
 							default:
 								console.error('THREE.WebGLState: Invalid blending: ', blending);
 								break;
 						}
 					}
-
 					currentBlendSrc = null;
 					currentBlendDst = null;
 					currentBlendSrcAlpha = null;
@@ -16241,21 +14334,19 @@
 					currentBlending = blending;
 					currentPremultipledAlpha = premultipliedAlpha;
 				}
-
 				return;
-			} // custom blending
+			}
 
+			// custom blending
 
 			blendEquationAlpha = blendEquationAlpha || blendEquation;
 			blendSrcAlpha = blendSrcAlpha || blendSrc;
 			blendDstAlpha = blendDstAlpha || blendDst;
-
 			if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
 				gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
 				currentBlendEquation = blendEquation;
 				currentBlendEquationAlpha = blendEquationAlpha;
 			}
-
 			if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
 				gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
 				currentBlendSrc = blendSrc;
@@ -16263,11 +14354,9 @@
 				currentBlendSrcAlpha = blendSrcAlpha;
 				currentBlendDstAlpha = blendDstAlpha;
 			}
-
 			currentBlending = blending;
 			currentPremultipledAlpha = false;
 		}
-
 		function setMaterial(material, frontFaceCW) {
 			material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
 			let flipSided = material.side === BackSide;
@@ -16280,17 +14369,16 @@
 			colorBuffer.setMask(material.colorWrite);
 			const stencilWrite = material.stencilWrite;
 			stencilBuffer.setTest(stencilWrite);
-
 			if (stencilWrite) {
 				stencilBuffer.setMask(material.stencilWriteMask);
 				stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
 				stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
 			}
-
 			setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
 			material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
-		} //
+		}
 
+		//
 
 		function setFlipSided(flipSided) {
 			if (currentFlipSided !== flipSided) {
@@ -16299,15 +14387,12 @@
 				} else {
 					gl.frontFace(gl.CCW);
 				}
-
 				currentFlipSided = flipSided;
 			}
 		}
-
 		function setCullFace(cullFace) {
 			if (cullFace !== CullFaceNone) {
 				enable(gl.CULL_FACE);
-
 				if (cullFace !== currentCullFace) {
 					if (cullFace === CullFaceBack) {
 						gl.cullFace(gl.BACK);
@@ -16320,21 +14405,17 @@
 			} else {
 				disable(gl.CULL_FACE);
 			}
-
 			currentCullFace = cullFace;
 		}
-
 		function setLineWidth(width) {
 			if (width !== currentLineWidth) {
 				if (lineWidthAvailable) gl.lineWidth(width);
 				currentLineWidth = width;
 			}
 		}
-
 		function setPolygonOffset(polygonOffset, factor, units) {
 			if (polygonOffset) {
 				enable(gl.POLYGON_OFFSET_FILL);
-
 				if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
 					gl.polygonOffset(factor, units);
 					currentPolygonOffsetFactor = factor;
@@ -16344,25 +14425,23 @@
 				disable(gl.POLYGON_OFFSET_FILL);
 			}
 		}
-
 		function setScissorTest(scissorTest) {
 			if (scissorTest) {
 				enable(gl.SCISSOR_TEST);
 			} else {
 				disable(gl.SCISSOR_TEST);
 			}
-		} // texture
+		}
 
+		// texture
 
 		function activeTexture(webglSlot) {
 			if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;
-
 			if (currentTextureSlot !== webglSlot) {
 				gl.activeTexture(webglSlot);
 				currentTextureSlot = webglSlot;
 			}
 		}
-
 		function bindTexture(webglType, webglTexture, webglSlot) {
 			if (webglSlot === undefined) {
 				if (currentTextureSlot === null) {
@@ -16371,9 +14450,7 @@
 					webglSlot = currentTextureSlot;
 				}
 			}
-
 			let boundTexture = currentBoundTextures[webglSlot];
-
 			if (boundTexture === undefined) {
 				boundTexture = {
 					type: undefined,
@@ -16381,29 +14458,24 @@
 				};
 				currentBoundTextures[webglSlot] = boundTexture;
 			}
-
 			if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
 				if (currentTextureSlot !== webglSlot) {
 					gl.activeTexture(webglSlot);
 					currentTextureSlot = webglSlot;
 				}
-
 				gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
 				boundTexture.type = webglType;
 				boundTexture.texture = webglTexture;
 			}
 		}
-
 		function unbindTexture() {
 			const boundTexture = currentBoundTextures[currentTextureSlot];
-
 			if (boundTexture !== undefined && boundTexture.type !== undefined) {
 				gl.bindTexture(boundTexture.type, null);
 				boundTexture.type = undefined;
 				boundTexture.texture = undefined;
 			}
 		}
-
 		function compressedTexImage2D() {
 			try {
 				gl.compressedTexImage2D.apply(gl, arguments);
@@ -16411,7 +14483,6 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function compressedTexImage3D() {
 			try {
 				gl.compressedTexImage3D.apply(gl, arguments);
@@ -16419,7 +14490,6 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function texSubImage2D() {
 			try {
 				gl.texSubImage2D.apply(gl, arguments);
@@ -16427,7 +14497,6 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function texSubImage3D() {
 			try {
 				gl.texSubImage3D.apply(gl, arguments);
@@ -16435,7 +14504,6 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function compressedTexSubImage2D() {
 			try {
 				gl.compressedTexSubImage2D.apply(gl, arguments);
@@ -16443,7 +14511,6 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function compressedTexSubImage3D() {
 			try {
 				gl.compressedTexSubImage3D.apply(gl, arguments);
@@ -16451,7 +14518,6 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function texStorage2D() {
 			try {
 				gl.texStorage2D.apply(gl, arguments);
@@ -16459,7 +14525,6 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function texStorage3D() {
 			try {
 				gl.texStorage3D.apply(gl, arguments);
@@ -16467,7 +14532,6 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function texImage2D() {
 			try {
 				gl.texImage2D.apply(gl, arguments);
@@ -16475,15 +14539,15 @@
 				console.error('THREE.WebGLState:', error);
 			}
 		}
-
 		function texImage3D() {
 			try {
 				gl.texImage3D.apply(gl, arguments);
 			} catch (error) {
 				console.error('THREE.WebGLState:', error);
 			}
-		} //
+		}
 
+		//
 
 		function scissor(scissor) {
 			if (currentScissor.equals(scissor) === false) {
@@ -16491,44 +14555,40 @@
 				currentScissor.copy(scissor);
 			}
 		}
-
 		function viewport(viewport) {
 			if (currentViewport.equals(viewport) === false) {
 				gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
 				currentViewport.copy(viewport);
 			}
 		}
-
 		function updateUBOMapping(uniformsGroup, program) {
 			let mapping = uboProgamMap.get(program);
-
 			if (mapping === undefined) {
 				mapping = new WeakMap();
 				uboProgamMap.set(program, mapping);
 			}
-
 			let blockIndex = mapping.get(uniformsGroup);
-
 			if (blockIndex === undefined) {
 				blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
 				mapping.set(uniformsGroup, blockIndex);
 			}
 		}
-
 		function uniformBlockBinding(uniformsGroup, program) {
 			const mapping = uboProgamMap.get(program);
 			const blockIndex = mapping.get(uniformsGroup);
-
 			if (uboBindings.get(uniformsGroup) !== blockIndex) {
 				// bind shader specific block index to global block point
+
 				gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
 				uboBindings.set(uniformsGroup, blockIndex);
 			}
-		} //
+		}
 
+		//
 
 		function reset() {
 			// reset state
+
 			gl.disable(gl.BLEND);
 			gl.disable(gl.CULL_FACE);
 			gl.disable(gl.DEPTH_TEST);
@@ -16553,16 +14613,16 @@
 			gl.polygonOffset(0, 0);
 			gl.activeTexture(gl.TEXTURE0);
 			gl.bindFramebuffer(gl.FRAMEBUFFER, null);
-
 			if (isWebGL2 === true) {
 				gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
 				gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
 			}
-
 			gl.useProgram(null);
 			gl.lineWidth(1);
 			gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
-			gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals
+			gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
+
+			// reset internals
 
 			enabledCapabilities = {};
 			currentTextureSlot = null;
@@ -16591,7 +14651,6 @@
 			depthBuffer.reset();
 			stencilBuffer.reset();
 		}
-
 		return {
 			buffers: {
 				color: colorBuffer,
@@ -16639,46 +14698,51 @@
 		const maxSamples = capabilities.maxSamples;
 		const multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;
 		const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test(navigator.userAgent);
-
 		const _videoTextures = new WeakMap();
-
 		let _canvas;
-
 		const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source
+
 		// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
 		// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
 		// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
 
-
 		let useOffscreenCanvas = false;
-
 		try {
-			useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' // eslint-disable-next-line compat/compat
+			useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
+			// eslint-disable-next-line compat/compat
 			&& new OffscreenCanvas(1, 1).getContext('2d') !== null;
-		} catch (err) {// Ignore any errors
-		}
+		} catch (err) {
 
+			// Ignore any errors
+		}
 		function createCanvas(width, height) {
 			// Use OffscreenCanvas when available. Specially needed in web workers
-			return useOffscreenCanvas ? // eslint-disable-next-line compat/compat
+
+			return useOffscreenCanvas ?
+			// eslint-disable-next-line compat/compat
 			new OffscreenCanvas(width, height) : createElementNS('canvas');
 		}
-
 		function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
-			let scale = 1; // handle case if texture exceeds max size
+			let scale = 1;
+
+			// handle case if texture exceeds max size
 
 			if (image.width > maxSize || image.height > maxSize) {
 				scale = maxSize / Math.max(image.width, image.height);
-			} // only perform resize if necessary
+			}
 
+			// only perform resize if necessary
 
 			if (scale < 1 || needsPowerOfTwo === true) {
 				// only perform resize for certain image types
+
 				if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
 					const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
 					const width = floor(scale * image.width);
 					const height = floor(scale * image.height);
-					if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas
+					if (_canvas === undefined) _canvas = createCanvas(width, height);
+
+					// cube textures can't reuse the same canvas
 
 					const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
 					canvas.width = width;
@@ -16691,53 +14755,41 @@
 					if ('data' in image) {
 						console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
 					}
-
 					return image;
 				}
 			}
-
 			return image;
 		}
-
 		function isPowerOfTwo$1(image) {
 			return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
 		}
-
 		function textureNeedsPowerOfTwo(texture) {
 			if (isWebGL2) return false;
 			return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
 		}
-
 		function textureNeedsGenerateMipmaps(texture, supportsMips) {
 			return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
 		}
-
 		function generateMipmap(target) {
 			_gl.generateMipmap(target);
 		}
-
 		function getInternalFormat(internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false) {
 			if (isWebGL2 === false) return glFormat;
-
 			if (internalFormatName !== null) {
 				if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
 				console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');
 			}
-
 			let internalFormat = glFormat;
-
 			if (glFormat === _gl.RED) {
 				if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
 				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
 				if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
 			}
-
 			if (glFormat === _gl.RG) {
 				if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
 				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
 				if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
 			}
-
 			if (glFormat === _gl.RGBA) {
 				if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
 				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
@@ -16745,165 +14797,143 @@
 				if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
 				if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
 			}
-
 			if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
 				extensions.get('EXT_color_buffer_float');
 			}
-
 			return internalFormat;
 		}
-
 		function getMipLevels(texture, image, supportsMips) {
 			if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
 				return Math.log2(Math.max(image.width, image.height)) + 1;
 			} else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {
 				// user-defined mipmaps
+
 				return texture.mipmaps.length;
 			} else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
 				return image.mipmaps.length;
 			} else {
 				// texture without mipmaps (only base level)
+
 				return 1;
 			}
-		} // Fallback filters for non-power-of-2 textures
+		}
 
+		// Fallback filters for non-power-of-2 textures
 
 		function filterFallback(f) {
 			if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
 				return _gl.NEAREST;
 			}
-
 			return _gl.LINEAR;
-		} //
+		}
 
+		//
 
 		function onTextureDispose(event) {
 			const texture = event.target;
 			texture.removeEventListener('dispose', onTextureDispose);
 			deallocateTexture(texture);
-
 			if (texture.isVideoTexture) {
 				_videoTextures.delete(texture);
 			}
 		}
-
 		function onRenderTargetDispose(event) {
 			const renderTarget = event.target;
 			renderTarget.removeEventListener('dispose', onRenderTargetDispose);
 			deallocateRenderTarget(renderTarget);
-		} //
+		}
 
+		//
 
 		function deallocateTexture(texture) {
 			const textureProperties = properties.get(texture);
-			if (textureProperties.__webglInit === undefined) return; // check if it's necessary to remove the WebGLTexture object
+			if (textureProperties.__webglInit === undefined) return;
 
-			const source = texture.source;
+			// check if it's necessary to remove the WebGLTexture object
 
+			const source = texture.source;
 			const webglTextures = _sources.get(source);
-
 			if (webglTextures) {
 				const webglTexture = webglTextures[textureProperties.__cacheKey];
-				webglTexture.usedTimes--; // the WebGLTexture object is not used anymore, remove it
+				webglTexture.usedTimes--;
+
+				// the WebGLTexture object is not used anymore, remove it
 
 				if (webglTexture.usedTimes === 0) {
 					deleteTexture(texture);
-				} // remove the weak map entry if no WebGLTexture uses the source anymore
+				}
 
+				// remove the weak map entry if no WebGLTexture uses the source anymore
 
 				if (Object.keys(webglTextures).length === 0) {
 					_sources.delete(source);
 				}
 			}
-
 			properties.remove(texture);
 		}
-
 		function deleteTexture(texture) {
 			const textureProperties = properties.get(texture);
-
 			_gl.deleteTexture(textureProperties.__webglTexture);
-
 			const source = texture.source;
-
 			const webglTextures = _sources.get(source);
-
 			delete webglTextures[textureProperties.__cacheKey];
 			info.memory.textures--;
 		}
-
 		function deallocateRenderTarget(renderTarget) {
 			const texture = renderTarget.texture;
 			const renderTargetProperties = properties.get(renderTarget);
 			const textureProperties = properties.get(texture);
-
 			if (textureProperties.__webglTexture !== undefined) {
 				_gl.deleteTexture(textureProperties.__webglTexture);
-
 				info.memory.textures--;
 			}
-
 			if (renderTarget.depthTexture) {
 				renderTarget.depthTexture.dispose();
 			}
-
 			if (renderTarget.isWebGLCubeRenderTarget) {
 				for (let i = 0; i < 6; i++) {
 					_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
-
 					if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
 				}
 			} else {
 				_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
-
 				if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
 				if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
-
 				if (renderTargetProperties.__webglColorRenderbuffer) {
 					for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {
 						if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
 					}
 				}
-
 				if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
 			}
-
 			if (renderTarget.isWebGLMultipleRenderTargets) {
 				for (let i = 0, il = texture.length; i < il; i++) {
 					const attachmentProperties = properties.get(texture[i]);
-
 					if (attachmentProperties.__webglTexture) {
 						_gl.deleteTexture(attachmentProperties.__webglTexture);
-
 						info.memory.textures--;
 					}
-
 					properties.remove(texture[i]);
 				}
 			}
-
 			properties.remove(texture);
 			properties.remove(renderTarget);
-		} //
+		}
 
+		//
 
 		let textureUnits = 0;
-
 		function resetTextureUnits() {
 			textureUnits = 0;
 		}
-
 		function allocateTextureUnit() {
 			const textureUnit = textureUnits;
-
 			if (textureUnit >= maxTextures) {
 				console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);
 			}
-
 			textureUnits += 1;
 			return textureUnit;
 		}
-
 		function getTextureCacheKey(texture) {
 			const array = [];
 			array.push(texture.wrapS);
@@ -16921,16 +14951,15 @@
 			array.push(texture.unpackAlignment);
 			array.push(texture.encoding);
 			return array.join();
-		} //
+		}
 
+		//
 
 		function setTexture2D(texture, slot) {
 			const textureProperties = properties.get(texture);
 			if (texture.isVideoTexture) updateVideoTexture(texture);
-
 			if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
 				const image = texture.image;
-
 				if (image === null) {
 					console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');
 				} else if (image.complete === false) {
@@ -16940,43 +14969,32 @@
 					return;
 				}
 			}
-
 			state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 		}
-
 		function setTexture2DArray(texture, slot) {
 			const textureProperties = properties.get(texture);
-
 			if (texture.version > 0 && textureProperties.__version !== texture.version) {
 				uploadTexture(textureProperties, texture, slot);
 				return;
 			}
-
 			state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 		}
-
 		function setTexture3D(texture, slot) {
 			const textureProperties = properties.get(texture);
-
 			if (texture.version > 0 && textureProperties.__version !== texture.version) {
 				uploadTexture(textureProperties, texture, slot);
 				return;
 			}
-
 			state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 		}
-
 		function setTextureCube(texture, slot) {
 			const textureProperties = properties.get(texture);
-
 			if (texture.version > 0 && textureProperties.__version !== texture.version) {
 				uploadCubeTexture(textureProperties, texture, slot);
 				return;
 			}
-
 			state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 		}
-
 		const wrappingToGL = {
 			[RepeatWrapping]: _gl.REPEAT,
 			[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
@@ -16990,113 +15008,97 @@
 			[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
 			[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
 		};
-
 		function setTextureParameters(textureType, texture, supportsMips) {
 			if (supportsMips) {
 				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
-
 				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
-
 				if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
 					_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
 				}
-
 				_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
-
 				_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
 			} else {
 				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
-
 				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
-
 				if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
 					_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
 				}
-
 				if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
 					console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');
 				}
-
 				_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
-
 				_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));
-
 				if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
 					console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');
 				}
 			}
-
 			if (extensions.has('EXT_texture_filter_anisotropic') === true) {
 				const extension = extensions.get('EXT_texture_filter_anisotropic');
 				if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2
-
 				if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only
 
 				if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
 					_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
-
 					properties.get(texture).__currentAnisotropy = texture.anisotropy;
 				}
 			}
 		}
-
 		function initTexture(textureProperties, texture) {
 			let forceUpload = false;
-
 			if (textureProperties.__webglInit === undefined) {
 				textureProperties.__webglInit = true;
 				texture.addEventListener('dispose', onTextureDispose);
-			} // create Source <-> WebGLTextures mapping if necessary
+			}
 
+			// create Source <-> WebGLTextures mapping if necessary
 
 			const source = texture.source;
-
 			let webglTextures = _sources.get(source);
-
 			if (webglTextures === undefined) {
 				webglTextures = {};
-
 				_sources.set(source, webglTextures);
-			} // check if there is already a WebGLTexture object for the given texture parameters
+			}
 
+			// check if there is already a WebGLTexture object for the given texture parameters
 
 			const textureCacheKey = getTextureCacheKey(texture);
-
 			if (textureCacheKey !== textureProperties.__cacheKey) {
 				// if not, create a new instance of WebGLTexture
+
 				if (webglTextures[textureCacheKey] === undefined) {
 					// create new entry
+
 					webglTextures[textureCacheKey] = {
 						texture: _gl.createTexture(),
 						usedTimes: 0
 					};
-					info.memory.textures++; // when a new instance of WebGLTexture was created, a texture upload is required
+					info.memory.textures++;
+
+					// when a new instance of WebGLTexture was created, a texture upload is required
 					// even if the image contents are identical
 
 					forceUpload = true;
 				}
+				webglTextures[textureCacheKey].usedTimes++;
 
-				webglTextures[textureCacheKey].usedTimes++; // every time the texture cache key changes, it's necessary to check if an instance of
+				// every time the texture cache key changes, it's necessary to check if an instance of
 				// WebGLTexture can be deleted in order to avoid a memory leak.
 
 				const webglTexture = webglTextures[textureProperties.__cacheKey];
-
 				if (webglTexture !== undefined) {
 					webglTextures[textureProperties.__cacheKey].usedTimes--;
-
 					if (webglTexture.usedTimes === 0) {
 						deleteTexture(texture);
 					}
-				} // store references to cache key and WebGLTexture object
+				}
 
+				// store references to cache key and WebGLTexture object
 
 				textureProperties.__cacheKey = textureCacheKey;
 				textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
 			}
-
 			return forceUpload;
 		}
-
 		function uploadTexture(textureProperties, texture, slot) {
 			let textureType = _gl.TEXTURE_2D;
 			if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
@@ -17105,36 +15107,29 @@
 			const source = texture.source;
 			state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 			const sourceProperties = properties.get(source);
-
 			if (source.version !== sourceProperties.__version || forceUpload === true) {
 				state.activeTexture(_gl.TEXTURE0 + slot);
-
 				_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
-
 				_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
-
 				_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
-
 				_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
-
 				const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
 				let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
 				image = verifyColorSpace(texture, image);
 				const supportsMips = isPowerOfTwo$1(image) || isWebGL2,
-							glFormat = utils.convert(texture.format, texture.encoding);
+					glFormat = utils.convert(texture.format, texture.encoding);
 				let glType = utils.convert(texture.type),
-						glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);
+					glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);
 				setTextureParameters(textureType, texture, supportsMips);
 				let mipmap;
 				const mipmaps = texture.mipmaps;
 				const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
 				const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;
 				const levels = getMipLevels(texture, image, supportsMips);
-
 				if (texture.isDepthTexture) {
 					// populate depth texture with dummy data
-					glInternalFormat = _gl.DEPTH_COMPONENT;
 
+					glInternalFormat = _gl.DEPTH_COMPONENT;
 					if (isWebGL2) {
 						if (texture.type === FloatType) {
 							glInternalFormat = _gl.DEPTH_COMPONENT32F;
@@ -17149,8 +15144,9 @@
 						if (texture.type === FloatType) {
 							console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');
 						}
-					} // validation checks for WebGL 1
+					}
 
+					// validation checks for WebGL 1
 
 					if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
 						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
@@ -17162,21 +15158,22 @@
 							glType = utils.convert(texture.type);
 						}
 					}
-
 					if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
 						// Depth stencil textures need the DEPTH_STENCIL internal format
 						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
-						glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
+						glInternalFormat = _gl.DEPTH_STENCIL;
+
+						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
 						// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
 						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
-
 						if (texture.type !== UnsignedInt248Type) {
 							console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');
 							texture.type = UnsignedInt248Type;
 							glType = utils.convert(texture.type);
 						}
-					} //
+					}
 
+					//
 
 					if (allocateMemory) {
 						if (useTexStorage) {
@@ -17189,28 +15186,25 @@
 					// use manually created mipmaps if available
 					// if there are no manual mipmaps
 					// set 0 level mipmap and then use GL to generate other mipmap levels
+
 					if (mipmaps.length > 0 && supportsMips) {
 						if (useTexStorage && allocateMemory) {
 							state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
 						}
-
 						for (let i = 0, il = mipmaps.length; i < il; i++) {
 							mipmap = mipmaps[i];
-
 							if (useTexStorage) {
 								state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
 							} else {
 								state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
 							}
 						}
-
 						texture.generateMipmaps = false;
 					} else {
 						if (useTexStorage) {
 							if (allocateMemory) {
 								state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
 							}
-
 							state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
 						} else {
 							state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
@@ -17221,10 +15215,8 @@
 						if (useTexStorage && allocateMemory) {
 							state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
 						}
-
 						for (let i = 0, il = mipmaps.length; i < il; i++) {
 							mipmap = mipmaps[i];
-
 							if (texture.format !== RGBAFormat) {
 								if (glFormat !== null) {
 									if (useTexStorage) {
@@ -17247,10 +15239,8 @@
 						if (useTexStorage && allocateMemory) {
 							state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
 						}
-
 						for (let i = 0, il = mipmaps.length; i < il; i++) {
 							mipmap = mipmaps[i];
-
 							if (texture.format !== RGBAFormat) {
 								if (glFormat !== null) {
 									if (useTexStorage) {
@@ -17275,7 +15265,6 @@
 						if (allocateMemory) {
 							state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
 						}
-
 						state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
 					} else {
 						state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
@@ -17285,7 +15274,6 @@
 						if (allocateMemory) {
 							state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
 						}
-
 						state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
 					} else {
 						state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
@@ -17296,8 +15284,7 @@
 							state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
 						} else {
 							let width = image.width,
-									height = image.height;
-
+								height = image.height;
 							for (let i = 0; i < levels; i++) {
 								state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
 								width >>= 1;
@@ -17307,103 +15294,84 @@
 					}
 				} else {
 					// regular Texture (image, video, canvas)
+
 					// use manually created mipmaps if available
 					// if there are no manual mipmaps
 					// set 0 level mipmap and then use GL to generate other mipmap levels
+
 					if (mipmaps.length > 0 && supportsMips) {
 						if (useTexStorage && allocateMemory) {
 							state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
 						}
-
 						for (let i = 0, il = mipmaps.length; i < il; i++) {
 							mipmap = mipmaps[i];
-
 							if (useTexStorage) {
 								state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
 							} else {
 								state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
 							}
 						}
-
 						texture.generateMipmaps = false;
 					} else {
 						if (useTexStorage) {
 							if (allocateMemory) {
 								state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
 							}
-
 							state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
 						} else {
 							state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
 						}
 					}
 				}
-
 				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 					generateMipmap(textureType);
 				}
-
 				sourceProperties.__version = source.version;
 				if (texture.onUpdate) texture.onUpdate(texture);
 			}
-
 			textureProperties.__version = texture.version;
 		}
-
 		function uploadCubeTexture(textureProperties, texture, slot) {
 			if (texture.image.length !== 6) return;
 			const forceUpload = initTexture(textureProperties, texture);
 			const source = texture.source;
 			state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
 			const sourceProperties = properties.get(source);
-
 			if (source.version !== sourceProperties.__version || forceUpload === true) {
 				state.activeTexture(_gl.TEXTURE0 + slot);
-
 				_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
-
 				_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
-
 				_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
-
 				_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
-
 				const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
 				const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
 				const cubeImage = [];
-
 				for (let i = 0; i < 6; i++) {
 					if (!isCompressed && !isDataTexture) {
 						cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
 					} else {
 						cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
 					}
-
 					cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
 				}
-
 				const image = cubeImage[0],
-							supportsMips = isPowerOfTwo$1(image) || isWebGL2,
-							glFormat = utils.convert(texture.format, texture.encoding),
-							glType = utils.convert(texture.type),
-							glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
+					supportsMips = isPowerOfTwo$1(image) || isWebGL2,
+					glFormat = utils.convert(texture.format, texture.encoding),
+					glType = utils.convert(texture.type),
+					glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
 				const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
 				const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;
 				let levels = getMipLevels(texture, image, supportsMips);
 				setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
 				let mipmaps;
-
 				if (isCompressed) {
 					if (useTexStorage && allocateMemory) {
 						state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
 					}
-
 					for (let i = 0; i < 6; i++) {
 						mipmaps = cubeImage[i].mipmaps;
-
 						for (let j = 0; j < mipmaps.length; j++) {
 							const mipmap = mipmaps[j];
-
 							if (texture.format !== RGBAFormat) {
 								if (glFormat !== null) {
 									if (useTexStorage) {
@@ -17425,15 +15393,14 @@
 					}
 				} else {
 					mipmaps = texture.mipmaps;
-
 					if (useTexStorage && allocateMemory) {
 						// TODO: Uniformly handle mipmap definitions
 						// Normal textures and compressed cube textures define base level + mips with their mipmap array
 						// Uncompressed cube textures use their mipmap array only for mips (no base level)
+
 						if (mipmaps.length > 0) levels++;
 						state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
 					}
-
 					for (let i = 0; i < 6; i++) {
 						if (isDataTexture) {
 							if (useTexStorage) {
@@ -17441,11 +15408,9 @@
 							} else {
 								state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
 							}
-
 							for (let j = 0; j < mipmaps.length; j++) {
 								const mipmap = mipmaps[j];
 								const mipmapImage = mipmap.image[i].image;
-
 								if (useTexStorage) {
 									state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
 								} else {
@@ -17458,10 +15423,8 @@
 							} else {
 								state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
 							}
-
 							for (let j = 0; j < mipmaps.length; j++) {
 								const mipmap = mipmaps[j];
-
 								if (useTexStorage) {
 									state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
 								} else {
@@ -17471,27 +15434,24 @@
 						}
 					}
 				}
-
 				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 					// We assume images for cube map have the same size.
 					generateMipmap(_gl.TEXTURE_CUBE_MAP);
 				}
-
 				sourceProperties.__version = source.version;
 				if (texture.onUpdate) texture.onUpdate(texture);
 			}
-
 			textureProperties.__version = texture.version;
-		} // Render targets
-		// Setup storage for target texture and bind it to correct framebuffer
+		}
 
+		// Render targets
 
+		// Setup storage for target texture and bind it to correct framebuffer
 		function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
 			const glFormat = utils.convert(texture.format, texture.encoding);
 			const glType = utils.convert(texture.type);
 			const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
 			const renderTargetProperties = properties.get(renderTarget);
-
 			if (!renderTargetProperties.__hasExternalTextures) {
 				if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
 					state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
@@ -17499,29 +15459,24 @@
 					state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
 				}
 			}
-
 			state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
-
 			if (useMultisampledRTT(renderTarget)) {
 				multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
 			} else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
 				// see #24753
+
 				_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
 			}
-
 			state.bindFramebuffer(_gl.FRAMEBUFFER, null);
-		} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
-
+		}
 
+		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
 		function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
 			_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
-
 			if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
 				let glInternalFormat = _gl.DEPTH_COMPONENT16;
-
 				if (isMultisample || useMultisampledRTT(renderTarget)) {
 					const depthTexture = renderTarget.depthTexture;
-
 					if (depthTexture && depthTexture.isDepthTexture) {
 						if (depthTexture.type === FloatType) {
 							glInternalFormat = _gl.DEPTH_COMPONENT32F;
@@ -17529,9 +15484,7 @@
 							glInternalFormat = _gl.DEPTH_COMPONENT24;
 						}
 					}
-
 					const samples = getRenderTargetSamples(renderTarget);
-
 					if (useMultisampledRTT(renderTarget)) {
 						multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
 					} else {
@@ -17540,11 +15493,9 @@
 				} else {
 					_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
 				}
-
 				_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
 			} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
 				const samples = getRenderTargetSamples(renderTarget);
-
 				if (isMultisample && useMultisampledRTT(renderTarget) === false) {
 					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
 				} else if (useMultisampledRTT(renderTarget)) {
@@ -17552,18 +15503,15 @@
 				} else {
 					_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
 				}
-
 				_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
 			} else {
 				const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
-
 				for (let i = 0; i < textures.length; i++) {
 					const texture = textures[i];
 					const glFormat = utils.convert(texture.format, texture.encoding);
 					const glType = utils.convert(texture.type);
 					const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
 					const samples = getRenderTargetSamples(renderTarget);
-
 					if (isMultisample && useMultisampledRTT(renderTarget) === false) {
 						_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
 					} else if (useMultisampledRTT(renderTarget)) {
@@ -17573,33 +15521,27 @@
 					}
 				}
 			}
-
 			_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
-		} // Setup resources for a Depth Texture for a FBO (needs an extension)
-
+		}
 
+		// Setup resources for a Depth Texture for a FBO (needs an extension)
 		function setupDepthTexture(framebuffer, renderTarget) {
 			const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
 			if (isCube) throw new Error('Depth Texture with cube render targets is not supported');
 			state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
-
 			if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
 				throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
-			} // upload an empty depth texture with framebuffer size
-
+			}
 
+			// upload an empty depth texture with framebuffer size
 			if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
 				renderTarget.depthTexture.image.width = renderTarget.width;
 				renderTarget.depthTexture.image.height = renderTarget.height;
 				renderTarget.depthTexture.needsUpdate = true;
 			}
-
 			setTexture2D(renderTarget.depthTexture, 0);
-
 			const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
-
 			const samples = getRenderTargetSamples(renderTarget);
-
 			if (renderTarget.depthTexture.format === DepthFormat) {
 				if (useMultisampledRTT(renderTarget)) {
 					multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
@@ -17615,20 +15557,18 @@
 			} else {
 				throw new Error('Unknown depthTexture format');
 			}
-		} // Setup GL resources for a non-texture depth buffer
-
+		}
 
+		// Setup GL resources for a non-texture depth buffer
 		function setupDepthRenderbuffer(renderTarget) {
 			const renderTargetProperties = properties.get(renderTarget);
 			const isCube = renderTarget.isWebGLCubeRenderTarget === true;
-
 			if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
 				if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');
 				setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
 			} else {
 				if (isCube) {
 					renderTargetProperties.__webglDepthbuffer = [];
-
 					for (let i = 0; i < 6; i++) {
 						state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
 						renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
@@ -17640,59 +15580,51 @@
 					setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
 				}
 			}
-
 			state.bindFramebuffer(_gl.FRAMEBUFFER, null);
-		} // rebind framebuffer with external textures
-
+		}
 
+		// rebind framebuffer with external textures
 		function rebindTextures(renderTarget, colorTexture, depthTexture) {
 			const renderTargetProperties = properties.get(renderTarget);
-
 			if (colorTexture !== undefined) {
 				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);
 			}
-
 			if (depthTexture !== undefined) {
 				setupDepthRenderbuffer(renderTarget);
 			}
-		} // Set up GL resources for the render target
-
+		}
 
+		// Set up GL resources for the render target
 		function setupRenderTarget(renderTarget) {
 			const texture = renderTarget.texture;
 			const renderTargetProperties = properties.get(renderTarget);
 			const textureProperties = properties.get(texture);
 			renderTarget.addEventListener('dispose', onRenderTargetDispose);
-
 			if (renderTarget.isWebGLMultipleRenderTargets !== true) {
 				if (textureProperties.__webglTexture === undefined) {
 					textureProperties.__webglTexture = _gl.createTexture();
 				}
-
 				textureProperties.__version = texture.version;
 				info.memory.textures++;
 			}
-
 			const isCube = renderTarget.isWebGLCubeRenderTarget === true;
 			const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
-			const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Setup framebuffer
+			const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
+
+			// Setup framebuffer
 
 			if (isCube) {
 				renderTargetProperties.__webglFramebuffer = [];
-
 				for (let i = 0; i < 6; i++) {
 					renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
 				}
 			} else {
 				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
-
 				if (isMultipleRenderTargets) {
 					if (capabilities.drawBuffers) {
 						const textures = renderTarget.texture;
-
 						for (let i = 0, il = textures.length; i < il; i++) {
 							const attachmentProperties = properties.get(textures[i]);
-
 							if (attachmentProperties.__webglTexture === undefined) {
 								attachmentProperties.__webglTexture = _gl.createTexture();
 								info.memory.textures++;
@@ -17702,73 +15634,58 @@
 						console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');
 					}
 				}
-
 				if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
 					const textures = isMultipleRenderTargets ? texture : [texture];
 					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
 					renderTargetProperties.__webglColorRenderbuffer = [];
 					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
-
 					for (let i = 0; i < textures.length; i++) {
 						const texture = textures[i];
 						renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
-
 						_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
-
 						const glFormat = utils.convert(texture.format, texture.encoding);
 						const glType = utils.convert(texture.type);
 						const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true);
 						const samples = getRenderTargetSamples(renderTarget);
-
 						_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
-
 						_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
 					}
-
 					_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
-
 					if (renderTarget.depthBuffer) {
 						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
 						setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
 					}
-
 					state.bindFramebuffer(_gl.FRAMEBUFFER, null);
 				}
-			} // Setup color buffer
+			}
 
+			// Setup color buffer
 
 			if (isCube) {
 				state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
 				setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
-
 				for (let i = 0; i < 6; i++) {
 					setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
 				}
-
 				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 					generateMipmap(_gl.TEXTURE_CUBE_MAP);
 				}
-
 				state.unbindTexture();
 			} else if (isMultipleRenderTargets) {
 				const textures = renderTarget.texture;
-
 				for (let i = 0, il = textures.length; i < il; i++) {
 					const attachment = textures[i];
 					const attachmentProperties = properties.get(attachment);
 					state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
 					setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);
 					setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);
-
 					if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {
 						generateMipmap(_gl.TEXTURE_2D);
 					}
 				}
-
 				state.unbindTexture();
 			} else {
 				let glTextureType = _gl.TEXTURE_2D;
-
 				if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
 					if (isWebGL2) {
 						glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
@@ -17776,43 +15693,35 @@
 						console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');
 					}
 				}
-
 				state.bindTexture(glTextureType, textureProperties.__webglTexture);
 				setTextureParameters(glTextureType, texture, supportsMips);
 				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);
-
 				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 					generateMipmap(glTextureType);
 				}
-
 				state.unbindTexture();
-			} // Setup depth and stencil buffers
+			}
 
+			// Setup depth and stencil buffers
 
 			if (renderTarget.depthBuffer) {
 				setupDepthRenderbuffer(renderTarget);
 			}
 		}
-
 		function updateRenderTargetMipmap(renderTarget) {
 			const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
 			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
-
 			for (let i = 0, il = textures.length; i < il; i++) {
 				const texture = textures[i];
-
 				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
 					const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
-
 					const webglTexture = properties.get(texture).__webglTexture;
-
 					state.bindTexture(target, webglTexture);
 					generateMipmap(target);
 					state.unbindTexture();
 				}
 			}
 		}
-
 		function updateMultisampleRenderTarget(renderTarget) {
 			if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
 				const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [renderTarget.texture];
@@ -17822,122 +15731,105 @@
 				const invalidationArray = [];
 				const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
 				const renderTargetProperties = properties.get(renderTarget);
-				const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true; // If MRT we need to remove FBO attachments
+				const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
 
+				// If MRT we need to remove FBO attachments
 				if (isMultipleRenderTargets) {
 					for (let i = 0; i < textures.length; i++) {
 						state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
-
 						_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
-
 						state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
-
 						_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
 					}
 				}
-
 				state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
 				state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
-
 				for (let i = 0; i < textures.length; i++) {
 					invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);
-
 					if (renderTarget.depthBuffer) {
 						invalidationArray.push(depthStyle);
 					}
-
 					const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;
-
 					if (ignoreDepthValues === false) {
 						if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
 						if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
 					}
-
 					if (isMultipleRenderTargets) {
 						_gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
 					}
-
 					if (ignoreDepthValues === true) {
 						_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);
-
 						_gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
 					}
-
 					if (isMultipleRenderTargets) {
 						const webglTexture = properties.get(textures[i]).__webglTexture;
-
 						_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
 					}
-
 					_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
-
 					if (supportsInvalidateFramebuffer) {
 						_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);
 					}
 				}
-
 				state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
-				state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null); // If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
+				state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
 
+				// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
 				if (isMultipleRenderTargets) {
 					for (let i = 0; i < textures.length; i++) {
 						state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
-
 						_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
-
 						const webglTexture = properties.get(textures[i]).__webglTexture;
-
 						state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
-
 						_gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
 					}
 				}
-
 				state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
 			}
 		}
-
 		function getRenderTargetSamples(renderTarget) {
 			return Math.min(maxSamples, renderTarget.samples);
 		}
-
 		function useMultisampledRTT(renderTarget) {
 			const renderTargetProperties = properties.get(renderTarget);
 			return isWebGL2 && renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;
 		}
-
 		function updateVideoTexture(texture) {
-			const frame = info.render.frame; // Check the last frame we updated the VideoTexture
+			const frame = info.render.frame;
+
+			// Check the last frame we updated the VideoTexture
 
 			if (_videoTextures.get(texture) !== frame) {
 				_videoTextures.set(texture, frame);
-
 				texture.update();
 			}
 		}
-
 		function verifyColorSpace(texture, image) {
 			const encoding = texture.encoding;
 			const format = texture.format;
 			const type = texture.type;
 			if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat) return image;
-
 			if (encoding !== LinearEncoding) {
 				// sRGB
+
 				if (encoding === sRGBEncoding) {
 					if (isWebGL2 === false) {
 						// in WebGL 1, try to use EXT_sRGB extension and unsized formats
+
 						if (extensions.has('EXT_sRGB') === true && format === RGBAFormat) {
-							texture.format = _SRGBAFormat; // it's not possible to generate mips in WebGL 1 with this extension
+							texture.format = _SRGBAFormat;
+
+							// it's not possible to generate mips in WebGL 1 with this extension
 
 							texture.minFilter = LinearFilter;
 							texture.generateMipmaps = false;
 						} else {
 							// slow fallback (CPU decode)
+
 							image = ImageUtils.sRGBToLinear(image);
 						}
 					} else {
 						// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
+
 						if (format !== RGBAFormat || type !== UnsignedByteType) {
 							console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');
 						}
@@ -17946,10 +15838,10 @@
 					console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);
 				}
 			}
-
 			return image;
-		} //
+		}
 
+		//
 
 		this.allocateTextureUnit = allocateTextureUnit;
 		this.resetTextureUnits = resetTextureUnits;
@@ -17968,7 +15860,6 @@
 
 	function WebGLUtils(gl, extensions, capabilities) {
 		const isWebGL2 = capabilities.isWebGL2;
-
 		function convert(p, encoding = null) {
 			let extension;
 			if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;
@@ -17980,52 +15871,53 @@
 			if (p === IntType) return gl.INT;
 			if (p === UnsignedIntType) return gl.UNSIGNED_INT;
 			if (p === FloatType) return gl.FLOAT;
-
 			if (p === HalfFloatType) {
 				if (isWebGL2) return gl.HALF_FLOAT;
 				extension = extensions.get('OES_texture_half_float');
-
 				if (extension !== null) {
 					return extension.HALF_FLOAT_OES;
 				} else {
 					return null;
 				}
 			}
-
 			if (p === AlphaFormat) return gl.ALPHA;
 			if (p === RGBAFormat) return gl.RGBA;
 			if (p === LuminanceFormat) return gl.LUMINANCE;
 			if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;
 			if (p === DepthFormat) return gl.DEPTH_COMPONENT;
-			if (p === DepthStencilFormat) return gl.DEPTH_STENCIL; // @deprecated since r137
+			if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;
+
+			// @deprecated since r137
 
 			if (p === RGBFormat) {
 				console.warn('THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228');
 				return gl.RGBA;
-			} // WebGL 1 sRGB fallback
+			}
 
+			// WebGL 1 sRGB fallback
 
 			if (p === _SRGBAFormat) {
 				extension = extensions.get('EXT_sRGB');
-
 				if (extension !== null) {
 					return extension.SRGB_ALPHA_EXT;
 				} else {
 					return null;
 				}
-			} // WebGL2 formats.
+			}
 
+			// WebGL2 formats.
 
 			if (p === RedFormat) return gl.RED;
 			if (p === RedIntegerFormat) return gl.RED_INTEGER;
 			if (p === RGFormat) return gl.RG;
 			if (p === RGIntegerFormat) return gl.RG_INTEGER;
-			if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER; // S3TC
+			if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;
+
+			// S3TC
 
 			if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
 				if (encoding === sRGBEncoding) {
 					extension = extensions.get('WEBGL_compressed_texture_s3tc_srgb');
-
 					if (extension !== null) {
 						if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
 						if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
@@ -18036,7 +15928,6 @@
 					}
 				} else {
 					extension = extensions.get('WEBGL_compressed_texture_s3tc');
-
 					if (extension !== null) {
 						if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
 						if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
@@ -18046,12 +15937,12 @@
 						return null;
 					}
 				}
-			} // PVRTC
+			}
 
+			// PVRTC
 
 			if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
 				extension = extensions.get('WEBGL_compressed_texture_pvrtc');
-
 				if (extension !== null) {
 					if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
 					if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
@@ -18060,35 +15951,35 @@
 				} else {
 					return null;
 				}
-			} // ETC1
+			}
 
+			// ETC1
 
 			if (p === RGB_ETC1_Format) {
 				extension = extensions.get('WEBGL_compressed_texture_etc1');
-
 				if (extension !== null) {
 					return extension.COMPRESSED_RGB_ETC1_WEBGL;
 				} else {
 					return null;
 				}
-			} // ETC2
+			}
 
+			// ETC2
 
 			if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
 				extension = extensions.get('WEBGL_compressed_texture_etc');
-
 				if (extension !== null) {
 					if (p === RGB_ETC2_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
 					if (p === RGBA_ETC2_EAC_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
 				} else {
 					return null;
 				}
-			} // ASTC
+			}
 
+			// ASTC
 
 			if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
 				extension = extensions.get('WEBGL_compressed_texture_astc');
-
 				if (extension !== null) {
 					if (p === RGBA_ASTC_4x4_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
 					if (p === RGBA_ASTC_5x4_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
@@ -18107,35 +15998,35 @@
 				} else {
 					return null;
 				}
-			} // BPTC
+			}
 
+			// BPTC
 
 			if (p === RGBA_BPTC_Format) {
 				extension = extensions.get('EXT_texture_compression_bptc');
-
 				if (extension !== null) {
 					if (p === RGBA_BPTC_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
 				} else {
 					return null;
 				}
-			} //
+			}
 
+			//
 
 			if (p === UnsignedInt248Type) {
 				if (isWebGL2) return gl.UNSIGNED_INT_24_8;
 				extension = extensions.get('WEBGL_depth_texture');
-
 				if (extension !== null) {
 					return extension.UNSIGNED_INT_24_8_WEBGL;
 				} else {
 					return null;
 				}
-			} // if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)
+			}
 
+			// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)
 
 			return gl[p] !== undefined ? gl[p] : null;
 		}
-
 		return {
 			convert: convert
 		};
@@ -18147,7 +16038,6 @@
 			this.isGroup = true;
 			this.type = 'Group';
 		}
-
 	}
 
 	class ArrayCamera extends PerspectiveCamera {
@@ -18156,7 +16046,6 @@
 			this.isArrayCamera = true;
 			this.cameras = array;
 		}
-
 	}
 
 	/**
@@ -18165,22 +16054,23 @@
 	 */
 	var cameraLPos = new Vector3();
 	var cameraRPos = new Vector3();
+
 	/**
 	 * Assumes 2 cameras that are parallel and share an X-axis, and that
 	 * the cameras' projection and world matrices have already been set.
 	 * And that near and far planes are identical for both cameras.
 	 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
 	 */
-
 	function setProjectionFromUnion(camera, cameraL, cameraR) {
 		cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
 		cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
 		var ipd = cameraLPos.distanceTo(cameraRPos);
 		var projL = cameraL.projectionMatrix.elements;
-		var projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and
+		var projR = cameraR.projectionMatrix.elements;
+
+		// VR systems will have identical far and near planes, and
 		// most likely identical top and bottom frustum extents.
 		// Use the left camera for these values.
-
 		var near = projL[14] / (projL[10] - 1);
 		var far = projL[14] / (projL[10] + 1);
 		var topFov = (projL[9] + 1) / projL[5];
@@ -18188,20 +16078,23 @@
 		var leftFov = (projL[8] - 1) / projL[0];
 		var rightFov = (projR[8] + 1) / projR[0];
 		var left = near * leftFov;
-		var right = near * rightFov; // Calculate the new camera's position offset from the
-		// left camera. xOffset should be roughly half `ipd`.
+		var right = near * rightFov;
 
+		// Calculate the new camera's position offset from the
+		// left camera. xOffset should be roughly half `ipd`.
 		var zOffset = ipd / (-leftFov + rightFov);
-		var xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?
+		var xOffset = zOffset * -leftFov;
 
+		// TODO: Better way to apply this offset?
 		cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
 		camera.translateX(xOffset);
 		camera.translateZ(zOffset);
 		camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
-		camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale
+		camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
+
+		// Find the union of the frustum values of the cameras and scale
 		// the values so that the near plane's position does not change in world space,
 		// although must now be relative to the new union camera.
-
 		var near2 = near + zOffset;
 		var far2 = far + zOffset;
 		var left2 = left - xOffset;
@@ -18214,7 +16107,6 @@
 	/**
 	 * @author mrdoob / http://mrdoob.com/
 	 */
-
 	function WebVRManager(renderer) {
 		var renderWidth, renderHeight;
 		var scope = this;
@@ -18226,12 +16118,10 @@
 		var standingMatrixInverse = new Matrix4();
 		var framebufferScaleFactor = 1.0;
 		var referenceSpaceType = 'local-floor';
-
 		if (typeof window !== 'undefined' && 'VRFrameData' in window) {
 			frameData = new window.VRFrameData();
 			window.addEventListener('vrdisplaypresentchange', onVRDisplayPresentChange, false);
 		}
-
 		var matrixWorldInverse = new Matrix4();
 		var tempQuaternion = new Quaternion();
 		var tempPosition = new Vector3();
@@ -18245,11 +16135,9 @@
 		cameraVR.layers.enable(1);
 		cameraVR.layers.enable(2);
 		var currentSize = new Vector2(),
-				currentPixelRatio;
-
+			currentPixelRatio;
 		function onVRDisplayPresentChange() {
 			var isPresenting = scope.isPresenting = device !== null && device.isPresenting === true;
-
 			if (isPresenting) {
 				var eyeParameters = device.getEyeParameters('left');
 				renderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;
@@ -18267,24 +16155,21 @@
 				if (scope.enabled) {
 					renderer.setDrawingBufferSize(currentSize.width, currentSize.height, currentPixelRatio);
 				}
-
 				animation.stop();
 				scope.dispatchEvent({
 					type: 'sessionend'
 				});
 			}
-		} //
+		}
 
+		//
 
 		var triggers = [];
 		var grips = [];
-
 		function findGamepad(id) {
 			var gamepads = navigator.getGamepads && navigator.getGamepads();
-
 			for (var i = 0, l = gamepads.length; i < l; i++) {
 				var gamepad = gamepads[i];
-
 				if (gamepad && (gamepad.id === 'Daydream Controller' || gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' || gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith('Oculus Touch') || gamepad.id.startsWith('HTC Vive Focus') || gamepad.id.startsWith('Spatial Controller'))) {
 					var hand = gamepad.hand;
 					if (id === 0 && (hand === '' || hand === 'right')) return gamepad;
@@ -18292,14 +16177,14 @@
 				}
 			}
 		}
-
 		function updateControllers() {
 			for (var i = 0; i < controllers.length; i++) {
 				var controller = controllers[i];
 				var gamepad = findGamepad(i);
-
 				if (gamepad !== undefined && gamepad.pose !== undefined) {
-					if (gamepad.pose === null) return; // Pose
+					if (gamepad.pose === null) return;
+
+					// Pose
 
 					var pose = gamepad.pose;
 					if (pose.hasPosition === false) controller.position.set(0.2, -0.6, -0.05);
@@ -18309,14 +16194,14 @@
 					controller.matrix.premultiply(standingMatrix);
 					controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
 					controller.matrixWorldNeedsUpdate = true;
-					controller.visible = true; // Trigger
+					controller.visible = true;
+
+					// Trigger
 
 					var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;
 					if (triggers[i] === undefined) triggers[i] = false;
-
 					if (triggers[i] !== gamepad.buttons[buttonId].pressed) {
 						triggers[i] = gamepad.buttons[buttonId].pressed;
-
 						if (triggers[i] === true) {
 							controller.dispatchEvent({
 								type: 'selectstart'
@@ -18329,16 +16214,16 @@
 								type: 'select'
 							});
 						}
-					} // Grip
-
+					}
 
+					// Grip
 					buttonId = 2;
-					if (grips[i] === undefined) grips[i] = false; // Skip if the grip button doesn't exist on this controller
+					if (grips[i] === undefined) grips[i] = false;
 
+					// Skip if the grip button doesn't exist on this controller
 					if (gamepad.buttons[buttonId] !== undefined) {
 						if (grips[i] !== gamepad.buttons[buttonId].pressed) {
 							grips[i] = gamepad.buttons[buttonId].pressed;
-
 							if (grips[i] === true) {
 								controller.dispatchEvent({
 									type: 'squeezestart'
@@ -18358,181 +16243,169 @@
 				}
 			}
 		}
-
 		function updateViewportFromBounds(viewport, bounds) {
 			if (bounds !== null && bounds.length === 4) {
 				viewport.set(bounds[0] * renderWidth, bounds[1] * renderHeight, bounds[2] * renderWidth, bounds[3] * renderHeight);
 			}
-		} //
+		}
 
+		//
 
 		this.enabled = false;
-
 		this.getController = function (id) {
 			var controller = controllers[id];
-
 			if (controller === undefined) {
 				controller = new Group();
 				controller.matrixAutoUpdate = false;
 				controller.visible = false;
 				controllers[id] = controller;
 			}
-
 			return controller;
 		};
-
 		this.getDevice = function () {
 			return device;
 		};
-
 		this.setDevice = function (value) {
 			if (value !== undefined) device = value;
 			animation.setContext(value);
 		};
-
 		this.setFramebufferScaleFactor = function (value) {
 			framebufferScaleFactor = value;
 		};
-
 		this.setReferenceSpaceType = function (value) {
 			referenceSpaceType = value;
 		};
-
 		this.setPoseTarget = function (object) {
 			if (object !== undefined) poseTarget = object;
-		}; //
+		};
 
+		//
 
 		this.cameraAutoUpdate = true;
-
 		this.updateCamera = function (camera) {
 			var userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;
 			device.depthNear = camera.near;
 			device.depthFar = camera.far;
-			device.getFrameData(frameData); //
+			device.getFrameData(frameData);
+
+			//
 
 			if (referenceSpaceType === 'local-floor') {
 				var stageParameters = device.stageParameters;
-
 				if (stageParameters) {
 					standingMatrix.fromArray(stageParameters.sittingToStandingTransform);
 				} else {
 					standingMatrix.makeTranslation(0, userHeight, 0);
 				}
 			}
-
 			var pose = frameData.pose;
-			var poseObject = poseTarget !== null ? poseTarget : camera; // We want to manipulate poseObject by its position and quaternion components since users may rely on them.
+			var poseObject = poseTarget !== null ? poseTarget : camera;
 
+			// We want to manipulate poseObject by its position and quaternion components since users may rely on them.
 			poseObject.matrix.copy(standingMatrix);
 			poseObject.matrix.decompose(poseObject.position, poseObject.quaternion, poseObject.scale);
-
 			if (pose.orientation !== null) {
 				tempQuaternion.fromArray(pose.orientation);
 				poseObject.quaternion.multiply(tempQuaternion);
 			}
-
 			if (pose.position !== null) {
 				tempQuaternion.setFromRotationMatrix(standingMatrix);
 				tempPosition.fromArray(pose.position);
 				tempPosition.applyQuaternion(tempQuaternion);
 				poseObject.position.add(tempPosition);
 			}
-
 			poseObject.updateMatrixWorld();
 			var children = poseObject.children;
-
 			for (var i = 0, l = children.length; i < l; i++) {
 				children[i].updateMatrixWorld(true);
-			} //
+			}
 
+			//
 
 			cameraL.near = camera.near;
 			cameraR.near = camera.near;
 			cameraL.far = camera.far;
 			cameraR.far = camera.far;
 			cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix);
-			cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix); // TODO (mrdoob) Double check this code
+			cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix);
 
-			standingMatrixInverse.copy(standingMatrix).invert();
+			// TODO (mrdoob) Double check this code
 
+			standingMatrixInverse.copy(standingMatrix).invert();
 			if (referenceSpaceType === 'local-floor') {
 				cameraL.matrixWorldInverse.multiply(standingMatrixInverse);
 				cameraR.matrixWorldInverse.multiply(standingMatrixInverse);
 			}
-
 			var parent = poseObject.parent;
-
 			if (parent !== null) {
 				matrixWorldInverse.copy(parent.matrixWorld).invert();
 				cameraL.matrixWorldInverse.multiply(matrixWorldInverse);
 				cameraR.matrixWorldInverse.multiply(matrixWorldInverse);
-			} // envMap and Mirror needs camera.matrixWorld
+			}
 
+			// envMap and Mirror needs camera.matrixWorld
 
 			cameraL.matrixWorld.copy(cameraL.matrixWorldInverse).invert();
 			cameraR.matrixWorld.copy(cameraR.matrixWorldInverse).invert();
 			cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix);
 			cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix);
-			setProjectionFromUnion(cameraVR, cameraL, cameraR); //
+			setProjectionFromUnion(cameraVR, cameraL, cameraR);
 
-			var layers = device.getLayers();
+			//
 
+			var layers = device.getLayers();
 			if (layers.length) {
 				var layer = layers[0];
 				updateViewportFromBounds(cameraL.viewport, layer.leftBounds);
 				updateViewportFromBounds(cameraR.viewport, layer.rightBounds);
 			}
-
 			updateControllers();
 			return cameraVR;
 		};
-
 		this.getCamera = function () {
 			return cameraVR;
-		}; // Dummy getFoveation/setFoveation to have the same API as WebXR
+		};
 
+		// Dummy getFoveation/setFoveation to have the same API as WebXR
 
 		this.getFoveation = function () {
 			return 1;
 		};
-
 		this.setFoveation = function (foveation) {
 			if (foveation !== 1) {
 				console.warn('THREE.WebVRManager: setFoveation() not used in WebVR.');
 			}
-		}; //
+		};
 
+		//
 
 		this.getStandingMatrix = function () {
 			return standingMatrix;
 		};
+		this.isPresenting = false;
 
-		this.isPresenting = false; // Animation Loop
+		// Animation Loop
 
 		var animation = new WebGLAnimation();
-
 		this.setAnimationLoop = function (callback) {
 			animation.setAnimationLoop(callback);
 			if (this.isPresenting) animation.start();
 		};
-
 		this.submitFrame = function () {
 			if (this.isPresenting) device.submitFrame();
 		};
-
 		this.dispose = function () {
 			if (typeof window !== 'undefined') {
 				window.removeEventListener('vrdisplaypresentchange', onVRDisplayPresentChange);
 			}
-		}; // DEPRECATED
+		};
 
+		// DEPRECATED
 
 		this.setFrameOfReferenceType = function () {
 			console.warn('THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.');
 		};
 	}
-
 	Object.assign(WebVRManager.prototype, {
 		addEventListener: EventDispatcher.prototype.addEventListener,
 		hasEventListener: EventDispatcher.prototype.hasEventListener,
@@ -18543,14 +16416,12 @@
 	const _moveEvent = {
 		type: 'move'
 	};
-
 	class WebXRController {
 		constructor() {
 			this._targetRay = null;
 			this._grip = null;
 			this._hand = null;
 		}
-
 		getHandSpace() {
 			if (this._hand === null) {
 				this._hand = new Group();
@@ -18561,10 +16432,8 @@
 					pinching: false
 				};
 			}
-
 			return this._hand;
 		}
-
 		getTargetRaySpace() {
 			if (this._targetRay === null) {
 				this._targetRay = new Group();
@@ -18575,10 +16444,8 @@
 				this._targetRay.hasAngularVelocity = false;
 				this._targetRay.angularVelocity = new Vector3();
 			}
-
 			return this._targetRay;
 		}
-
 		getGripSpace() {
 			if (this._grip === null) {
 				this._grip = new Group();
@@ -18589,30 +16456,23 @@
 				this._grip.hasAngularVelocity = false;
 				this._grip.angularVelocity = new Vector3();
 			}
-
 			return this._grip;
 		}
-
 		dispatchEvent(event) {
 			if (this._targetRay !== null) {
 				this._targetRay.dispatchEvent(event);
 			}
-
 			if (this._grip !== null) {
 				this._grip.dispatchEvent(event);
 			}
-
 			if (this._hand !== null) {
 				this._hand.dispatchEvent(event);
 			}
-
 			return this;
 		}
-
 		connect(inputSource) {
 			if (inputSource && inputSource.hand) {
 				const hand = this._hand;
-
 				if (hand) {
 					for (const inputjoint of inputSource.hand.values()) {
 						// Initialize hand with joints when connected
@@ -18620,35 +16480,28 @@
 					}
 				}
 			}
-
 			this.dispatchEvent({
 				type: 'connected',
 				data: inputSource
 			});
 			return this;
 		}
-
 		disconnect(inputSource) {
 			this.dispatchEvent({
 				type: 'disconnected',
 				data: inputSource
 			});
-
 			if (this._targetRay !== null) {
 				this._targetRay.visible = false;
 			}
-
 			if (this._grip !== null) {
 				this._grip.visible = false;
 			}
-
 			if (this._hand !== null) {
 				this._hand.visible = false;
 			}
-
 			return this;
 		}
-
 		update(inputSource, frame, referenceSpace) {
 			let inputPose = null;
 			let gripPose = null;
@@ -18656,34 +16509,31 @@
 			const targetRay = this._targetRay;
 			const grip = this._grip;
 			const hand = this._hand;
-
 			if (inputSource && frame.session.visibilityState !== 'visible-blurred') {
 				if (hand && inputSource.hand) {
 					handPose = true;
-
 					for (const inputjoint of inputSource.hand.values()) {
 						// Update the joints groups with the XRJoint poses
-						const jointPose = frame.getJointPose(inputjoint, referenceSpace); // The transform of this joint will be updated with the joint pose on each frame
+						const jointPose = frame.getJointPose(inputjoint, referenceSpace);
 
+						// The transform of this joint will be updated with the joint pose on each frame
 						const joint = this._getHandJoint(hand, inputjoint);
-
 						if (jointPose !== null) {
 							joint.matrix.fromArray(jointPose.transform.matrix);
 							joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
 							joint.jointRadius = jointPose.radius;
 						}
-
 						joint.visible = jointPose !== null;
-					} // Custom events
-					// Check pinchz
+					}
 
+					// Custom events
 
+					// Check pinchz
 					const indexTip = hand.joints['index-finger-tip'];
 					const thumbTip = hand.joints['thumb-tip'];
 					const distance = indexTip.position.distanceTo(thumbTip.position);
 					const distanceToPinch = 0.02;
 					const threshold = 0.005;
-
 					if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
 						hand.inputState.pinching = false;
 						this.dispatchEvent({
@@ -18702,18 +16552,15 @@
 				} else {
 					if (grip !== null && inputSource.gripSpace) {
 						gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
-
 						if (gripPose !== null) {
 							grip.matrix.fromArray(gripPose.transform.matrix);
 							grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
-
 							if (gripPose.linearVelocity) {
 								grip.hasLinearVelocity = true;
 								grip.linearVelocity.copy(gripPose.linearVelocity);
 							} else {
 								grip.hasLinearVelocity = false;
 							}
-
 							if (gripPose.angularVelocity) {
 								grip.hasAngularVelocity = true;
 								grip.angularVelocity.copy(gripPose.angularVelocity);
@@ -18723,52 +16570,45 @@
 						}
 					}
 				}
-
 				if (targetRay !== null) {
-					inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace); // Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
+					inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
 
+					// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
 					if (inputPose === null && gripPose !== null) {
 						inputPose = gripPose;
 					}
-
 					if (inputPose !== null) {
 						targetRay.matrix.fromArray(inputPose.transform.matrix);
 						targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
-
 						if (inputPose.linearVelocity) {
 							targetRay.hasLinearVelocity = true;
 							targetRay.linearVelocity.copy(inputPose.linearVelocity);
 						} else {
 							targetRay.hasLinearVelocity = false;
 						}
-
 						if (inputPose.angularVelocity) {
 							targetRay.hasAngularVelocity = true;
 							targetRay.angularVelocity.copy(inputPose.angularVelocity);
 						} else {
 							targetRay.hasAngularVelocity = false;
 						}
-
 						this.dispatchEvent(_moveEvent);
 					}
 				}
 			}
-
 			if (targetRay !== null) {
 				targetRay.visible = inputPose !== null;
 			}
-
 			if (grip !== null) {
 				grip.visible = gripPose !== null;
 			}
-
 			if (hand !== null) {
 				hand.visible = handPose !== null;
 			}
-
 			return this;
-		} // private method
+		}
 
+		// private method
 
 		_getHandJoint(hand, inputjoint) {
 			if (hand.joints[inputjoint.jointName] === undefined) {
@@ -18778,20 +16618,16 @@
 				hand.joints[inputjoint.jointName] = joint;
 				hand.add(joint);
 			}
-
 			return hand.joints[inputjoint.jointName];
 		}
-
 	}
 
 	class DepthTexture extends Texture {
 		constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
 			format = format !== undefined ? format : DepthFormat;
-
 			if (format !== DepthFormat && format !== DepthStencilFormat) {
 				throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
 			}
-
 			if (type === undefined && format === DepthFormat) type = UnsignedIntType;
 			if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;
 			super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
@@ -18805,7 +16641,6 @@
 			this.flipY = false;
 			this.generateMipmaps = false;
 		}
-
 	}
 
 	class WebXRManager extends EventDispatcher {
@@ -18830,7 +16665,9 @@
 			const controllers = [];
 			const controllerInputSources = [];
 			const planes = new Set();
-			const planesLastChangedTimes = new Map(); //
+			const planesLastChangedTimes = new Map();
+
+			//
 
 			const cameraL = new PerspectiveCamera();
 			cameraL.layers.enable(1);
@@ -18843,60 +16680,49 @@
 			cameraVR.layers.enable(1);
 			cameraVR.layers.enable(2);
 			let _currentDepthNear = null;
-			let _currentDepthFar = null; //
+			let _currentDepthFar = null;
 
+			//
 			this.cameraAutoUpdate = true;
 			this.layersEnabled = false;
 			this.enabled = false;
 			this.isPresenting = false;
-
 			this.getCameraPose = function () {
 				return pose;
 			};
-
 			this.getController = function (index) {
 				let controller = controllers[index];
-
 				if (controller === undefined) {
 					controller = new WebXRController();
 					controllers[index] = controller;
 				}
-
 				return controller.getTargetRaySpace();
 			};
-
 			this.getControllerGrip = function (index) {
 				let controller = controllers[index];
-
 				if (controller === undefined) {
 					controller = new WebXRController();
 					controllers[index] = controller;
 				}
-
 				return controller.getGripSpace();
 			};
-
 			this.getHand = function (index) {
 				let controller = controllers[index];
-
 				if (controller === undefined) {
 					controller = new WebXRController();
 					controllers[index] = controller;
 				}
-
 				return controller.getHandSpace();
-			}; //
+			};
 
+			//
 
 			function onSessionEvent(event) {
 				const controllerIndex = controllerInputSources.indexOf(event.inputSource);
-
 				if (controllerIndex === -1) {
 					return;
 				}
-
 				const controller = controllers[controllerIndex];
-
 				if (controller !== undefined) {
 					controller.dispatchEvent({
 						type: event.type,
@@ -18904,7 +16730,6 @@
 					});
 				}
 			}
-
 			function onSessionEnd() {
 				session.removeEventListener('select', onSessionEvent);
 				session.removeEventListener('selectstart', onSessionEvent);
@@ -18914,23 +16739,25 @@
 				session.removeEventListener('squeezeend', onSessionEvent);
 				session.removeEventListener('end', onSessionEnd);
 				session.removeEventListener('inputsourceschange', onInputSourcesChange);
-
 				for (let i = 0; i < controllers.length; i++) {
 					const inputSource = controllerInputSources[i];
 					if (inputSource === null) continue;
 					controllerInputSources[i] = null;
 					controllers[i].disconnect(inputSource);
 				}
-
 				_currentDepthNear = null;
-				_currentDepthFar = null; // restore framebuffer/rendering state
+				_currentDepthFar = null;
+
+				// restore framebuffer/rendering state
 
 				renderer.setRenderTarget(initialRenderTarget);
 				glBaseLayer = null;
 				glProjLayer = null;
 				glBinding = null;
 				session = null;
-				newRenderTarget = null; //
+				newRenderTarget = null;
+
+				//
 
 				animation.stop();
 				scope.isPresenting = false;
@@ -18938,50 +16765,38 @@
 					type: 'sessionend'
 				});
 			}
-
 			this.setFramebufferScaleFactor = function (value) {
 				framebufferScaleFactor = value;
-
 				if (scope.isPresenting === true) {
 					console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
 				}
 			};
-
 			this.setReferenceSpaceType = function (value) {
 				referenceSpaceType = value;
-
 				if (scope.isPresenting === true) {
 					console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
 				}
 			};
-
 			this.getReferenceSpace = function () {
 				return customReferenceSpace || referenceSpace;
 			};
-
 			this.setReferenceSpace = function (space) {
 				customReferenceSpace = space;
 			};
-
 			this.getBaseLayer = function () {
 				return glProjLayer !== null ? glProjLayer : glBaseLayer;
 			};
-
 			this.getBinding = function () {
 				return glBinding;
 			};
-
 			this.getFrame = function () {
 				return xrFrame;
 			};
-
 			this.getSession = function () {
 				return session;
 			};
-
 			this.setSession = async function (value) {
 				session = value;
-
 				if (session !== null) {
 					initialRenderTarget = renderer.getRenderTarget();
 					session.addEventListener('select', onSessionEvent);
@@ -18992,11 +16807,9 @@
 					session.addEventListener('squeezeend', onSessionEvent);
 					session.addEventListener('end', onSessionEnd);
 					session.addEventListener('inputsourceschange', onInputSourcesChange);
-
 					if (attributes.xrCompatible !== true) {
 						await gl.makeXRCompatible();
 					}
-
 					if (session.renderState.layers === undefined || renderer.capabilities.isWebGL2 === false) {
 						const layerInit = {
 							antialias: session.renderState.layers === undefined ? attributes.antialias : true,
@@ -19019,13 +16832,11 @@
 						let depthFormat = null;
 						let depthType = null;
 						let glDepthFormat = null;
-
 						if (attributes.depth) {
 							glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
 							depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
 							depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
 						}
-
 						const projectionlayerInit = {
 							colorFormat: gl.RGBA8,
 							depthFormat: glDepthFormat,
@@ -19047,10 +16858,9 @@
 						const renderTargetProperties = renderer.properties.get(newRenderTarget);
 						renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
 					}
-
 					newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
-					// Set foveation to maximum.
 
+					// Set foveation to maximum.
 					this.setFoveation(1.0);
 					customReferenceSpace = null;
 					referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
@@ -19062,26 +16872,20 @@
 					});
 				}
 			};
-
 			this.addLayer = function (layer) {
 				if (!window.XRWebGLBinding || !this.layersEnabled || !session) {
 					return;
 				}
-
 				layers.push(layer);
 				this.updateLayers();
 			};
-
 			this.removeLayer = function (layer) {
 				layers.splice(layers.indexOf(layer), 1);
-
 				if (!window.XRWebGLBinding || !this.layersEnabled || !session) {
 					return;
 				}
-
 				this.updateLayers();
 			};
-
 			this.updateLayers = function () {
 				var layersCopy = layers.map(function (x) {
 					return x;
@@ -19091,26 +16895,26 @@
 					layers: layersCopy
 				});
 			};
-
 			function onInputSourcesChange(event) {
 				// Notify disconnected
+
 				for (let i = 0; i < event.removed.length; i++) {
 					const inputSource = event.removed[i];
 					const index = controllerInputSources.indexOf(inputSource);
-
 					if (index >= 0) {
 						controllerInputSources[index] = null;
 						controllers[index].disconnect(inputSource);
 					}
-				} // Notify connected
+				}
 
+				// Notify connected
 
 				for (let i = 0; i < event.added.length; i++) {
 					const inputSource = event.added[i];
 					let controllerIndex = controllerInputSources.indexOf(inputSource);
-
 					if (controllerIndex === -1) {
 						// Assign input source a controller that currently has no input source
+
 						for (let i = 0; i < controllers.length; i++) {
 							if (i >= controllerInputSources.length) {
 								controllerInputSources.push(inputSource);
@@ -19121,39 +16925,40 @@
 								controllerIndex = i;
 								break;
 							}
-						} // If all controllers do currently receive input we ignore new ones
+						}
 
+						// If all controllers do currently receive input we ignore new ones
 
 						if (controllerIndex === -1) break;
 					}
-
 					const controller = controllers[controllerIndex];
-
 					if (controller) {
 						controller.connect(inputSource);
 					}
 				}
-			} //
+			}
 
+			//
 
 			const cameraLPos = new Vector3();
 			const cameraRPos = new Vector3();
+
 			/**
 			 * Assumes 2 cameras that are parallel and share an X-axis, and that
 			 * the cameras' projection and world matrices have already been set.
 			 * And that near and far planes are identical for both cameras.
 			 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
 			 */
-
 			function setProjectionFromUnion(camera, cameraL, cameraR) {
 				cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
 				cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
 				const ipd = cameraLPos.distanceTo(cameraRPos);
 				const projL = cameraL.projectionMatrix.elements;
-				const projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and
+				const projR = cameraR.projectionMatrix.elements;
+
+				// VR systems will have identical far and near planes, and
 				// most likely identical top and bottom frustum extents.
 				// Use the left camera for these values.
-
 				const near = projL[14] / (projL[10] - 1);
 				const far = projL[14] / (projL[10] + 1);
 				const topFov = (projL[9] + 1) / projL[5];
@@ -19161,20 +16966,23 @@
 				const leftFov = (projL[8] - 1) / projL[0];
 				const rightFov = (projR[8] + 1) / projR[0];
 				const left = near * leftFov;
-				const right = near * rightFov; // Calculate the new camera's position offset from the
-				// left camera. xOffset should be roughly half `ipd`.
+				const right = near * rightFov;
 
+				// Calculate the new camera's position offset from the
+				// left camera. xOffset should be roughly half `ipd`.
 				const zOffset = ipd / (-leftFov + rightFov);
-				const xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?
+				const xOffset = zOffset * -leftFov;
 
+				// TODO: Better way to apply this offset?
 				cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
 				camera.translateX(xOffset);
 				camera.translateZ(zOffset);
 				camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
-				camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale
+				camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
+
+				// Find the union of the frustum values of the cameras and scale
 				// the values so that the near plane's position does not change in world space,
 				// although must now be relative to the new union camera.
-
 				const near2 = near + zOffset;
 				const far2 = far + zOffset;
 				const left2 = left - xOffset;
@@ -19183,28 +16991,24 @@
 				const bottom2 = bottomFov * far / far2 * near2;
 				camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
 			}
-
 			function updateCamera(camera, parent) {
 				if (parent === null) {
 					camera.matrixWorld.copy(camera.matrix);
 				} else {
 					camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
 				}
-
 				camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
 			}
-
 			this.setPoseTarget = function (object) {
 				if (object !== undefined) poseTarget = object;
 			};
-
 			this.updateCamera = function (camera) {
 				if (session === null) return;
 				cameraVR.near = cameraR.near = cameraL.near = camera.near;
 				cameraVR.far = cameraR.far = cameraL.far = camera.far;
-
 				if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
 					// Note that the new renderState won't apply until the next frame. See #18320
+
 					session.updateRenderState({
 						depthNear: cameraVR.near,
 						depthFar: cameraVR.far
@@ -19212,158 +17016,139 @@
 					_currentDepthNear = cameraVR.near;
 					_currentDepthFar = cameraVR.far;
 				}
-
 				const cameras = cameraVR.cameras;
 				var object = poseTarget || camera;
 				const parent = object.parent;
 				updateCamera(cameraVR, parent);
-
 				for (let i = 0; i < cameras.length; i++) {
 					updateCamera(cameras[i], parent);
 				}
+				cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale);
 
-				cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale); // update user camera and its children
-
+				// update user camera and its children
 				object.matrixWorld.copy(cameraVR.matrixWorld);
 				object.matrix.copy(cameraVR.matrix);
 				object.matrix.decompose(object.position, object.quaternion, object.scale);
 				const children = object.children;
-
 				for (let i = 0, l = children.length; i < l; i++) {
 					children[i].updateMatrixWorld(true);
-				} // update projection matrix for proper view frustum culling
+				}
 
+				// update projection matrix for proper view frustum culling
 
 				if (cameras.length === 2) {
 					setProjectionFromUnion(cameraVR, cameraL, cameraR);
 				} else {
 					// assume single camera setup (AR)
+
 					cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
 				}
 			};
-
 			this.getCamera = function () {
 				return cameraVR;
 			};
-
 			this.getFoveation = function () {
 				if (glProjLayer !== null) {
 					return glProjLayer.fixedFoveation;
 				}
-
 				if (glBaseLayer !== null) {
 					return glBaseLayer.fixedFoveation;
 				}
-
 				return undefined;
 			};
-
 			this.setFoveation = function (foveation) {
 				// 0 = no foveation = full resolution
 				// 1 = maximum foveation = the edges render at lower resolution
+
 				if (glProjLayer !== null) {
 					glProjLayer.fixedFoveation = foveation;
 				}
-
 				if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {
 					glBaseLayer.fixedFoveation = foveation;
 				}
 			};
-
 			this.getPlanes = function () {
 				return planes;
-			}; // Animation Loop
+			};
 
+			// Animation Loop
 
 			let onAnimationFrameCallback = null;
-
 			function onAnimationFrame(time, frame) {
 				pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
 				xrFrame = frame;
-
 				if (pose !== null) {
 					const views = pose.views;
-
 					if (glBaseLayer !== null) {
 						renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
 						renderer.setRenderTarget(newRenderTarget);
 					}
+					let cameraVRNeedsUpdate = false;
 
-					let cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list
+					// check if it's necessary to rebuild cameraVR's camera list
 
 					if (views.length !== cameraVR.cameras.length) {
 						cameraVR.cameras.length = 0;
 						cameraVRNeedsUpdate = true;
 					}
-
 					for (let i = 0; i < views.length; i++) {
 						const view = views[i];
 						let viewport = null;
-
 						if (glBaseLayer !== null) {
 							viewport = glBaseLayer.getViewport(view);
 						} else {
 							const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
-							viewport = glSubImage.viewport; // For side-by-side projection, we only produce a single texture for both eyes.
+							viewport = glSubImage.viewport;
 
+							// For side-by-side projection, we only produce a single texture for both eyes.
 							if (i === 0) {
 								renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);
 								renderer.setRenderTarget(newRenderTarget);
 							}
 						}
-
 						let camera = cameras[i];
-
 						if (camera === undefined) {
 							camera = new PerspectiveCamera();
 							camera.layers.enable(i);
 							camera.viewport = new Vector4();
 							cameras[i] = camera;
 						}
-
 						camera.matrix.fromArray(view.transform.matrix);
 						camera.projectionMatrix.fromArray(view.projectionMatrix);
 						camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
-
 						if (i === 0) {
 							cameraVR.matrix.copy(camera.matrix);
 						}
-
 						if (cameraVRNeedsUpdate === true) {
 							cameraVR.cameras.push(camera);
 						}
 					}
-				} //
+				}
 
+				//
 
 				for (let i = 0; i < controllers.length; i++) {
 					const inputSource = controllerInputSources[i];
 					const controller = controllers[i];
-
 					if (inputSource !== null && controller !== undefined) {
 						controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
 					}
 				}
-
 				if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
-
 				if (frame.detectedPlanes) {
 					scope.dispatchEvent({
 						type: 'planesdetected',
 						data: frame.detectedPlanes
 					});
 					let planesToRemove = null;
-
 					for (const plane of planes) {
 						if (!frame.detectedPlanes.has(plane)) {
 							if (planesToRemove === null) {
 								planesToRemove = [];
 							}
-
 							planesToRemove.push(plane);
 						}
 					}
-
 					if (planesToRemove !== null) {
 						for (const plane of planesToRemove) {
 							planes.delete(plane);
@@ -19374,7 +17159,6 @@
 							});
 						}
 					}
-
 					for (const plane of frame.detectedPlanes) {
 						if (!planes.has(plane)) {
 							planes.add(plane);
@@ -19385,7 +17169,6 @@
 							});
 						} else {
 							const lastKnownTime = planesLastChangedTimes.get(plane);
-
 							if (plane.lastChangedTime > lastKnownTime) {
 								planesLastChangedTimes.set(plane, plane.lastChangedTime);
 								scope.dispatchEvent({
@@ -19396,26 +17179,20 @@
 						}
 					}
 				}
-
 				xrFrame = null;
 			}
-
 			const animation = new WebGLAnimation();
 			animation.setAnimationLoop(onAnimationFrame);
-
 			this.setAnimationLoop = function (callback) {
 				onAnimationFrameCallback = callback;
 			};
-
 			this.dispose = function () {};
 		}
-
 	}
 
 	function WebGLMaterials(renderer, properties) {
 		function refreshFogUniforms(uniforms, fog) {
 			fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));
-
 			if (fog.isFog) {
 				uniforms.fogNear.value = fog.near;
 				uniforms.fogFar.value = fog.far;
@@ -19423,7 +17200,6 @@
 				uniforms.fogDensity.value = fog.density;
 			}
 		}
-
 		function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
 			if (material.isMeshBasicMaterial) {
 				refreshUniformsCommon(uniforms, material);
@@ -19438,7 +17214,6 @@
 			} else if (material.isMeshStandardMaterial) {
 				refreshUniformsCommon(uniforms, material);
 				refreshUniformsStandard(uniforms, material);
-
 				if (material.isMeshPhysicalMaterial) {
 					refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
 				}
@@ -19454,7 +17229,6 @@
 				refreshUniformsCommon(uniforms, material);
 			} else if (material.isLineBasicMaterial) {
 				refreshUniformsLine(uniforms, material);
-
 				if (material.isLineDashedMaterial) {
 					refreshUniformsDash(uniforms, material);
 				}
@@ -19472,55 +17246,43 @@
 
 		function refreshUniformsCommon(uniforms, material) {
 			uniforms.opacity.value = material.opacity;
-
 			if (material.color) {
 				uniforms.diffuse.value.copy(material.color);
 			}
-
 			if (material.emissive) {
 				uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
 			}
-
 			if (material.map) {
 				uniforms.map.value = material.map;
 			}
-
 			if (material.alphaMap) {
 				uniforms.alphaMap.value = material.alphaMap;
 			}
-
 			if (material.bumpMap) {
 				uniforms.bumpMap.value = material.bumpMap;
 				uniforms.bumpScale.value = material.bumpScale;
 				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
 			}
-
 			if (material.displacementMap) {
 				uniforms.displacementMap.value = material.displacementMap;
 				uniforms.displacementScale.value = material.displacementScale;
 				uniforms.displacementBias.value = material.displacementBias;
 			}
-
 			if (material.emissiveMap) {
 				uniforms.emissiveMap.value = material.emissiveMap;
 			}
-
 			if (material.normalMap) {
 				uniforms.normalMap.value = material.normalMap;
 				uniforms.normalScale.value.copy(material.normalScale);
 				if (material.side === BackSide) uniforms.normalScale.value.negate();
 			}
-
 			if (material.specularMap) {
 				uniforms.specularMap.value = material.specularMap;
 			}
-
 			if (material.alphaTest > 0) {
 				uniforms.alphaTest.value = material.alphaTest;
 			}
-
 			const envMap = properties.get(material).envMap;
-
 			if (envMap) {
 				uniforms.envMap.value = envMap;
 				uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
@@ -19528,18 +17290,19 @@
 				uniforms.ior.value = material.ior;
 				uniforms.refractionRatio.value = material.refractionRatio;
 			}
-
 			if (material.lightMap) {
-				uniforms.lightMap.value = material.lightMap; // artist-friendly light intensity scaling factor
+				uniforms.lightMap.value = material.lightMap;
 
+				// artist-friendly light intensity scaling factor
 				const scaleFactor = renderer.physicallyCorrectLights !== true ? Math.PI : 1;
 				uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
 			}
-
 			if (material.aoMap) {
 				uniforms.aoMap.value = material.aoMap;
 				uniforms.aoMapIntensity.value = material.aoMapIntensity;
-			} // uv repeat and offset setting priorities
+			}
+
+			// uv repeat and offset setting priorities
 			// 1. color map
 			// 2. specular map
 			// 3. displacementMap map
@@ -19559,9 +17322,7 @@
 			// 17. transmission map
 			// 18. thickness map
 
-
 			let uvScaleMap;
-
 			if (material.map) {
 				uvScaleMap = material.map;
 			} else if (material.specularMap) {
@@ -19603,131 +17364,110 @@
 			} else if (material.sheenRoughnessMap) {
 				uvScaleMap = material.sheenRoughnessMap;
 			}
-
 			if (uvScaleMap !== undefined) {
 				// backwards compatibility
 				if (uvScaleMap.isWebGLRenderTarget) {
 					uvScaleMap = uvScaleMap.texture;
 				}
-
 				if (uvScaleMap.matrixAutoUpdate === true) {
 					uvScaleMap.updateMatrix();
 				}
-
 				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
-			} // uv repeat and offset setting priorities for uv2
+			}
+
+			// uv repeat and offset setting priorities for uv2
 			// 1. ao map
 			// 2. light map
 
-
 			let uv2ScaleMap;
-
 			if (material.aoMap) {
 				uv2ScaleMap = material.aoMap;
 			} else if (material.lightMap) {
 				uv2ScaleMap = material.lightMap;
 			}
-
 			if (uv2ScaleMap !== undefined) {
 				// backwards compatibility
 				if (uv2ScaleMap.isWebGLRenderTarget) {
 					uv2ScaleMap = uv2ScaleMap.texture;
 				}
-
 				if (uv2ScaleMap.matrixAutoUpdate === true) {
 					uv2ScaleMap.updateMatrix();
 				}
-
 				uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
 			}
 		}
-
 		function refreshUniformsLine(uniforms, material) {
 			uniforms.diffuse.value.copy(material.color);
 			uniforms.opacity.value = material.opacity;
 		}
-
 		function refreshUniformsDash(uniforms, material) {
 			uniforms.dashSize.value = material.dashSize;
 			uniforms.totalSize.value = material.dashSize + material.gapSize;
 			uniforms.scale.value = material.scale;
 		}
-
 		function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
 			uniforms.diffuse.value.copy(material.color);
 			uniforms.opacity.value = material.opacity;
 			uniforms.size.value = material.size * pixelRatio;
 			uniforms.scale.value = height * 0.5;
-
 			if (material.map) {
 				uniforms.map.value = material.map;
 			}
-
 			if (material.alphaMap) {
 				uniforms.alphaMap.value = material.alphaMap;
 			}
-
 			if (material.alphaTest > 0) {
 				uniforms.alphaTest.value = material.alphaTest;
-			} // uv repeat and offset setting priorities
+			}
+
+			// uv repeat and offset setting priorities
 			// 1. color map
 			// 2. alpha map
 
-
 			let uvScaleMap;
-
 			if (material.map) {
 				uvScaleMap = material.map;
 			} else if (material.alphaMap) {
 				uvScaleMap = material.alphaMap;
 			}
-
 			if (uvScaleMap !== undefined) {
 				if (uvScaleMap.matrixAutoUpdate === true) {
 					uvScaleMap.updateMatrix();
 				}
-
 				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
 			}
 		}
-
 		function refreshUniformsSprites(uniforms, material) {
 			uniforms.diffuse.value.copy(material.color);
 			uniforms.opacity.value = material.opacity;
 			uniforms.rotation.value = material.rotation;
-
 			if (material.map) {
 				uniforms.map.value = material.map;
 			}
-
 			if (material.alphaMap) {
 				uniforms.alphaMap.value = material.alphaMap;
 			}
-
 			if (material.alphaTest > 0) {
 				uniforms.alphaTest.value = material.alphaTest;
-			} // uv repeat and offset setting priorities
+			}
+
+			// uv repeat and offset setting priorities
 			// 1. color map
 			// 2. alpha map
 
-
 			let uvScaleMap;
-
 			if (material.map) {
 				uvScaleMap = material.map;
 			} else if (material.alphaMap) {
 				uvScaleMap = material.alphaMap;
 			}
-
 			if (uvScaleMap !== undefined) {
 				if (uvScaleMap.matrixAutoUpdate === true) {
 					uvScaleMap.updateMatrix();
 				}
-
 				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
 			}
 		}
-
 		function refreshUniformsPhong(uniforms, material) {
 			uniforms.specular.value.copy(material.specular);
 			uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )
@@ -19738,123 +17478,96 @@
 				uniforms.gradientMap.value = material.gradientMap;
 			}
 		}
-
 		function refreshUniformsStandard(uniforms, material) {
 			uniforms.roughness.value = material.roughness;
 			uniforms.metalness.value = material.metalness;
-
 			if (material.roughnessMap) {
 				uniforms.roughnessMap.value = material.roughnessMap;
 			}
-
 			if (material.metalnessMap) {
 				uniforms.metalnessMap.value = material.metalnessMap;
 			}
-
 			const envMap = properties.get(material).envMap;
-
 			if (envMap) {
 				//uniforms.envMap.value = material.envMap; // part of uniforms common
 				uniforms.envMapIntensity.value = material.envMapIntensity;
 			}
 		}
-
 		function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
 			uniforms.ior.value = material.ior; // also part of uniforms common
 
 			if (material.sheen > 0) {
 				uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
 				uniforms.sheenRoughness.value = material.sheenRoughness;
-
 				if (material.sheenColorMap) {
 					uniforms.sheenColorMap.value = material.sheenColorMap;
 				}
-
 				if (material.sheenRoughnessMap) {
 					uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
 				}
 			}
-
 			if (material.clearcoat > 0) {
 				uniforms.clearcoat.value = material.clearcoat;
 				uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
-
 				if (material.clearcoatMap) {
 					uniforms.clearcoatMap.value = material.clearcoatMap;
 				}
-
 				if (material.clearcoatRoughnessMap) {
 					uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
 				}
-
 				if (material.clearcoatNormalMap) {
 					uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
 					uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
-
 					if (material.side === BackSide) {
 						uniforms.clearcoatNormalScale.value.negate();
 					}
 				}
 			}
-
 			if (material.iridescence > 0) {
 				uniforms.iridescence.value = material.iridescence;
 				uniforms.iridescenceIOR.value = material.iridescenceIOR;
 				uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
 				uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
-
 				if (material.iridescenceMap) {
 					uniforms.iridescenceMap.value = material.iridescenceMap;
 				}
-
 				if (material.iridescenceThicknessMap) {
 					uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
 				}
 			}
-
 			if (material.transmission > 0) {
 				uniforms.transmission.value = material.transmission;
 				uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
 				uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
-
 				if (material.transmissionMap) {
 					uniforms.transmissionMap.value = material.transmissionMap;
 				}
-
 				uniforms.thickness.value = material.thickness;
-
 				if (material.thicknessMap) {
 					uniforms.thicknessMap.value = material.thicknessMap;
 				}
-
 				uniforms.attenuationDistance.value = material.attenuationDistance;
 				uniforms.attenuationColor.value.copy(material.attenuationColor);
 			}
-
 			uniforms.specularIntensity.value = material.specularIntensity;
 			uniforms.specularColor.value.copy(material.specularColor);
-
 			if (material.specularIntensityMap) {
 				uniforms.specularIntensityMap.value = material.specularIntensityMap;
 			}
-
 			if (material.specularColorMap) {
 				uniforms.specularColorMap.value = material.specularColorMap;
 			}
 		}
-
 		function refreshUniformsMatcap(uniforms, material) {
 			if (material.matcap) {
 				uniforms.matcap.value = material.matcap;
 			}
 		}
-
 		function refreshUniformsDistance(uniforms, material) {
 			uniforms.referencePosition.value.copy(material.referencePosition);
 			uniforms.nearDistance.value = material.nearDistance;
 			uniforms.farDistance.value = material.farDistance;
 		}
-
 		return {
 			refreshFogUniforms: refreshFogUniforms,
 			refreshMaterialUniforms: refreshMaterialUniforms
@@ -19871,31 +17584,31 @@
 			const webglProgram = program.program;
 			state.uniformBlockBinding(uniformsGroup, webglProgram);
 		}
-
 		function update(uniformsGroup, program) {
 			let buffer = buffers[uniformsGroup.id];
-
 			if (buffer === undefined) {
 				prepareUniformsGroup(uniformsGroup);
 				buffer = createBuffer(uniformsGroup);
 				buffers[uniformsGroup.id] = buffer;
 				uniformsGroup.addEventListener('dispose', onUniformsGroupsDispose);
-			} // ensure to update the binding points/block indices mapping for this program
+			}
 
+			// ensure to update the binding points/block indices mapping for this program
 
 			const webglProgram = program.program;
-			state.updateUBOMapping(uniformsGroup, webglProgram); // update UBO once per frame
+			state.updateUBOMapping(uniformsGroup, webglProgram);
 
-			const frame = info.render.frame;
+			// update UBO once per frame
 
+			const frame = info.render.frame;
 			if (updateList[uniformsGroup.id] !== frame) {
 				updateBufferData(uniformsGroup);
 				updateList[uniformsGroup.id] = frame;
 			}
 		}
-
 		function createBuffer(uniformsGroup) {
 			// the setup of an UBO is independent of a particular shader program but global
+
 			const bindingPointIndex = allocateBindingPointIndex();
 			uniformsGroup.__bindingPointIndex = bindingPointIndex;
 			const buffer = gl.createBuffer();
@@ -19907,7 +17620,6 @@
 			gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
 			return buffer;
 		}
-
 		function allocateBindingPointIndex() {
 			for (let i = 0; i < maxBindingPoints; i++) {
 				if (allocatedBindingPoints.indexOf(i) === -1) {
@@ -19915,30 +17627,29 @@
 					return i;
 				}
 			}
-
 			console.error('THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.');
 			return 0;
 		}
-
 		function updateBufferData(uniformsGroup) {
 			const buffer = buffers[uniformsGroup.id];
 			const uniforms = uniformsGroup.uniforms;
 			const cache = uniformsGroup.__cache;
 			gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
-
 			for (let i = 0, il = uniforms.length; i < il; i++) {
-				const uniform = uniforms[i]; // partly update the buffer if necessary
+				const uniform = uniforms[i];
+
+				// partly update the buffer if necessary
 
 				if (hasUniformChanged(uniform, i, cache) === true) {
 					const value = uniform.value;
 					const offset = uniform.__offset;
-
 					if (typeof value === 'number') {
 						uniform.__data[0] = value;
 						gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
 					} else {
 						if (uniform.value.isMatrix3) {
 							// manually converting 3x3 to 3x4
+
 							uniform.__data[0] = uniform.value.elements[0];
 							uniform.__data[1] = uniform.value.elements[1];
 							uniform.__data[2] = uniform.value.elements[2];
@@ -19954,29 +17665,26 @@
 						} else {
 							value.toArray(uniform.__data);
 						}
-
 						gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
 					}
 				}
 			}
-
 			gl.bindBuffer(gl.UNIFORM_BUFFER, null);
 		}
-
 		function hasUniformChanged(uniform, index, cache) {
 			const value = uniform.value;
-
 			if (cache[index] === undefined) {
 				// cache entry does not exist so far
+
 				if (typeof value === 'number') {
 					cache[index] = value;
 				} else {
 					cache[index] = value.clone();
 				}
-
 				return true;
 			} else {
 				// compare current value with cached entry
+
 				if (typeof value === 'number') {
 					if (cache[index] !== value) {
 						cache[index] = value;
@@ -19984,88 +17692,99 @@
 					}
 				} else {
 					const cachedObject = cache[index];
-
 					if (cachedObject.equals(value) === false) {
 						cachedObject.copy(value);
 						return true;
 					}
 				}
 			}
-
 			return false;
 		}
-
 		function prepareUniformsGroup(uniformsGroup) {
 			// determine total buffer size according to the STD140 layout
 			// Hint: STD140 is the only supported layout in WebGL 2
+
 			const uniforms = uniformsGroup.uniforms;
 			let offset = 0; // global buffer offset in bytes
-
 			const chunkSize = 16; // size of a chunk in bytes
-
 			let chunkOffset = 0; // offset within a single chunk in bytes
 
 			for (let i = 0, l = uniforms.length; i < l; i++) {
 				const uniform = uniforms[i];
-				const info = getUniformSize(uniform); // the following two properties will be used for partial buffer updates
+				const info = getUniformSize(uniform);
+
+				// the following two properties will be used for partial buffer updates
 
 				uniform.__data = new Float32Array(info.storage / Float32Array.BYTES_PER_ELEMENT);
-				uniform.__offset = offset; //
+				uniform.__offset = offset;
+
+				//
 
 				if (i > 0) {
 					chunkOffset = offset % chunkSize;
-					const remainingSizeInChunk = chunkSize - chunkOffset; // check for chunk overflow
+					const remainingSizeInChunk = chunkSize - chunkOffset;
+
+					// check for chunk overflow
 
 					if (chunkOffset !== 0 && remainingSizeInChunk - info.boundary < 0) {
 						// add padding and adjust offset
+
 						offset += chunkSize - chunkOffset;
 						uniform.__offset = offset;
 					}
 				}
-
 				offset += info.storage;
-			} // ensure correct final padding
+			}
 
+			// ensure correct final padding
 
 			chunkOffset = offset % chunkSize;
-			if (chunkOffset > 0) offset += chunkSize - chunkOffset; //
+			if (chunkOffset > 0) offset += chunkSize - chunkOffset;
+
+			//
 
 			uniformsGroup.__size = offset;
 			uniformsGroup.__cache = {};
 			return this;
 		}
-
 		function getUniformSize(uniform) {
 			const value = uniform.value;
 			const info = {
 				boundary: 0,
 				// bytes
 				storage: 0 // bytes
+			};
 
-			}; // determine sizes according to STD140
+			// determine sizes according to STD140
 
 			if (typeof value === 'number') {
 				// float/int
+
 				info.boundary = 4;
 				info.storage = 4;
 			} else if (value.isVector2) {
 				// vec2
+
 				info.boundary = 8;
 				info.storage = 8;
 			} else if (value.isVector3 || value.isColor) {
 				// vec3
+
 				info.boundary = 16;
 				info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes
 			} else if (value.isVector4) {
 				// vec4
+
 				info.boundary = 16;
 				info.storage = 16;
 			} else if (value.isMatrix3) {
 				// mat3 (in STD140 a 3x3 matrix is represented as 3x4)
+
 				info.boundary = 48;
 				info.storage = 48;
 			} else if (value.isMatrix4) {
 				// mat4
+
 				info.boundary = 64;
 				info.storage = 64;
 			} else if (value.isTexture) {
@@ -20073,10 +17792,8 @@
 			} else {
 				console.warn('THREE.WebGLRenderer: Unsupported uniform value type.', value);
 			}
-
 			return info;
 		}
-
 		function onUniformsGroupsDispose(event) {
 			const uniformsGroup = event.target;
 			uniformsGroup.removeEventListener('dispose', onUniformsGroupsDispose);
@@ -20086,17 +17803,14 @@
 			delete buffers[uniformsGroup.id];
 			delete updateList[uniformsGroup.id];
 		}
-
 		function dispose() {
 			for (const id in buffers) {
 				gl.deleteBuffer(buffers[id]);
 			}
-
 			allocatedBindingPoints = [];
 			buffers = {};
 			updateList = {};
 		}
-
 		return {
 			bind: bind,
 			update: update,
@@ -20109,106 +17823,119 @@
 		canvas.style.display = 'block';
 		return canvas;
 	}
-
 	function WebGLRenderer(parameters = {}) {
 		this.isWebGLRenderer = true;
-
 		const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
-					_context = parameters.context !== undefined ? parameters.context : null,
-					_depth = parameters.depth !== undefined ? parameters.depth : true,
-					_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
-					_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
-					_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
-					_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
-					_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
-					_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
-
+			_context = parameters.context !== undefined ? parameters.context : null,
+			_depth = parameters.depth !== undefined ? parameters.depth : true,
+			_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
+			_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
+			_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
+			_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
+			_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
+			_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
 		let _alpha;
-
 		if (_context !== null) {
 			_alpha = _context.getContextAttributes().alpha;
 		} else {
 			_alpha = parameters.alpha !== undefined ? parameters.alpha : false;
 		}
-
 		let currentRenderList = null;
-		let currentRenderState = null; // render() can be called from within a callback triggered by another render.
+		let currentRenderState = null;
+
+		// render() can be called from within a callback triggered by another render.
 		// We track this so that the nested render call gets its list and state isolated from the parent render call.
 
 		const renderListStack = [];
-		const renderStateStack = []; // public properties
+		const renderStateStack = [];
 
-		this.domElement = _canvas; // Debug configuration container
+		// public properties
 
+		this.domElement = _canvas;
+
+		// Debug configuration container
 		this.debug = {
 			/**
 			 * Enables error checking and reporting when shader programs are being compiled
 			 * @type {boolean}
 			 */
 			checkShaderErrors: true
-		}; // clearing
+		};
+
+		// clearing
 
 		this.autoClear = true;
 		this.autoClearColor = true;
 		this.autoClearDepth = true;
-		this.autoClearStencil = true; // scene graph
+		this.autoClearStencil = true;
+
+		// scene graph
 
-		this.sortObjects = true; // user-defined clipping
+		this.sortObjects = true;
+
+		// user-defined clipping
 
 		this.clippingPlanes = [];
-		this.localClippingEnabled = false; // physically based shading
+		this.localClippingEnabled = false;
+
+		// physically based shading
+
+		this.outputEncoding = LinearEncoding;
+
+		// physical lights
 
-		this.outputEncoding = LinearEncoding; // physical lights
+		this.physicallyCorrectLights = false;
 
-		this.physicallyCorrectLights = false; // tone mapping
+		// tone mapping
 
 		this.toneMapping = NoToneMapping;
-		this.toneMappingExposure = 1.0; // internal properties
+		this.toneMappingExposure = 1.0;
+
+		// internal properties
 
 		const _this = this;
+		let _isContextLost = false;
 
-		let _isContextLost = false; // internal state cache
+		// internal state cache
 
 		let _currentActiveCubeFace = 0;
 		let _currentActiveMipmapLevel = 0;
 		let _currentRenderTarget = null;
-
 		let _currentMaterialId = -1;
-
 		let _currentCamera = null;
-
 		const _currentViewport = new Vector4();
-
 		const _currentScissor = new Vector4();
+		let _currentScissorTest = null;
 
-		let _currentScissorTest = null; //
+		//
 
 		let _width = _canvas.width;
 		let _height = _canvas.height;
 		let _pixelRatio = 1;
 		let _opaqueSort = null;
 		let _transparentSort = null;
-
 		const _viewport = new Vector4(0, 0, _width, _height);
-
 		const _scissor = new Vector4(0, 0, _width, _height);
+		let _scissorTest = false;
 
-		let _scissorTest = false; // frustum
+		// frustum
 
-		const _frustum = new Frustum(); // clipping
+		const _frustum = new Frustum();
 
+		// clipping
 
 		let _clippingEnabled = false;
-		let _localClippingEnabled = false; // transmission
+		let _localClippingEnabled = false;
 
-		let _transmissionRenderTarget = null; // camera matrices cache
+		// transmission
 
-		const _projScreenMatrix = new Matrix4();
+		let _transmissionRenderTarget = null;
 
-		const _vector2 = new Vector2();
+		// camera matrices cache
 
+		const _projScreenMatrix = new Matrix4();
+		const _vector2 = new Vector2();
 		const _vector3 = new Vector3();
-
 		const _emptyScene = {
 			background: null,
 			fog: null,
@@ -20216,26 +17943,21 @@
 			overrideMaterial: null,
 			isScene: true
 		};
-
 		function getTargetPixelRatio() {
 			return _currentRenderTarget === null ? _pixelRatio : 1;
-		} // initialize
+		}
 
+		// initialize
 
 		let _gl = _context;
-
 		function getContext(contextNames, contextAttributes) {
 			for (let i = 0; i < contextNames.length; i++) {
 				const contextName = contextNames[i];
-
 				const context = _canvas.getContext(contextName, contextAttributes);
-
 				if (context !== null) return context;
 			}
-
 			return null;
 		}
-
 		try {
 			const contextAttributes = {
 				alpha: true,
@@ -20246,25 +17968,21 @@
 				preserveDrawingBuffer: _preserveDrawingBuffer,
 				powerPreference: _powerPreference,
 				failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
-			}; // OffscreenCanvas does not have setAttribute, see #22811
+			};
 
-			if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', `three.js r${REVISION}`); // event listeners must be registered before WebGL context is created, see #12753
+			// OffscreenCanvas does not have setAttribute, see #22811
+			if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', `three.js r${REVISION}`);
 
+			// event listeners must be registered before WebGL context is created, see #12753
 			_canvas.addEventListener('webglcontextlost', onContextLost, false);
-
 			_canvas.addEventListener('webglcontextrestored', onContextRestore, false);
-
 			_canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
-
 			if (_gl === null) {
 				const contextNames = ['webgl2', 'webgl', 'experimental-webgl'];
-
 				if (_this.isWebGL1Renderer === true) {
 					contextNames.shift();
 				}
-
 				_gl = getContext(contextNames, contextAttributes);
-
 				if (_gl === null) {
 					if (getContext(contextNames)) {
 						throw new Error('Error creating WebGL context with your selected attributes.');
@@ -20272,8 +17990,9 @@
 						throw new Error('Error creating WebGL context.');
 					}
 				}
-			} // Some experimental-webgl implementations do not have getShaderPrecisionFormat
+			}
 
+			// Some experimental-webgl implementations do not have getShaderPrecisionFormat
 
 			if (_gl.getShaderPrecisionFormat === undefined) {
 				_gl.getShaderPrecisionFormat = function () {
@@ -20288,13 +18007,11 @@
 			console.error('THREE.WebGLRenderer: ' + error.message);
 			throw error;
 		}
-
 		let extensions, capabilities, state, info;
 		let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
 		let programCache, materials, renderLists, renderStates, clipping, shadowMap;
 		let background, morphtargets, bufferRenderer, indexedBufferRenderer;
 		let utils, bindingStates, uniformsGroups;
-
 		function initGLContext() {
 			extensions = new WebGLExtensions(_gl);
 			capabilities = new WebGLCapabilities(_gl, extensions, parameters);
@@ -20330,66 +18047,55 @@
 			_this.state = state;
 			_this.info = info;
 		}
-
 		initGLContext();
 		const xr = typeof navigator !== 'undefined' && 'xr' in navigator ? new WebXRManager(_this, _gl) : new WebVRManager(_this);
-		this.xr = xr; // API
+		this.xr = xr;
+
+		// API
 
 		this.getContext = function () {
 			return _gl;
 		};
-
 		this.getContextAttributes = function () {
 			return _gl.getContextAttributes();
 		};
-
 		this.forceContextLoss = function () {
 			const extension = extensions.get('WEBGL_lose_context');
 			if (extension) extension.loseContext();
 		};
-
 		this.forceContextRestore = function () {
 			const extension = extensions.get('WEBGL_lose_context');
 			if (extension) extension.restoreContext();
 		};
-
 		this.getPixelRatio = function () {
 			return _pixelRatio;
 		};
-
 		this.setPixelRatio = function (value) {
 			if (value === undefined) return;
 			_pixelRatio = value;
 			this.setSize(_width, _height, false);
 		};
-
 		this.getSize = function (target) {
 			return target.set(_width, _height);
 		};
-
 		this.setSize = function (width, height, updateStyle) {
 			if (xr.isPresenting) {
 				console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
 				return;
 			}
-
 			_width = width;
 			_height = height;
 			_canvas.width = Math.floor(width * _pixelRatio);
 			_canvas.height = Math.floor(height * _pixelRatio);
-
 			if (updateStyle !== false) {
 				_canvas.style.width = width + 'px';
 				_canvas.style.height = height + 'px';
 			}
-
 			this.setViewport(0, 0, width, height);
 		};
-
 		this.getDrawingBufferSize = function (target) {
 			return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
 		};
-
 		this.setDrawingBufferSize = function (width, height, pixelRatio) {
 			_width = width;
 			_height = height;
@@ -20398,101 +18104,81 @@
 			_canvas.height = Math.floor(height * pixelRatio);
 			this.setViewport(0, 0, width, height);
 		};
-
 		this.getCurrentViewport = function (target) {
 			return target.copy(_currentViewport);
 		};
-
 		this.getViewport = function (target) {
 			return target.copy(_viewport);
 		};
-
 		this.setViewport = function (x, y, width, height) {
 			if (x.isVector4) {
 				_viewport.set(x.x, x.y, x.z, x.w);
 			} else {
 				_viewport.set(x, y, width, height);
 			}
-
 			state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
 		};
-
 		this.getScissor = function (target) {
 			return target.copy(_scissor);
 		};
-
 		this.setScissor = function (x, y, width, height) {
 			if (x.isVector4) {
 				_scissor.set(x.x, x.y, x.z, x.w);
 			} else {
 				_scissor.set(x, y, width, height);
 			}
-
 			state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
 		};
-
 		this.getScissorTest = function () {
 			return _scissorTest;
 		};
-
 		this.setScissorTest = function (boolean) {
 			state.setScissorTest(_scissorTest = boolean);
 		};
-
 		this.setOpaqueSort = function (method) {
 			_opaqueSort = method;
 		};
-
 		this.setTransparentSort = function (method) {
 			_transparentSort = method;
-		}; // Clearing
+		};
 
+		// Clearing
 
 		this.getClearColor = function (target) {
 			return target.copy(background.getClearColor());
 		};
-
 		this.setClearColor = function () {
 			background.setClearColor.apply(background, arguments);
 		};
-
 		this.getClearAlpha = function () {
 			return background.getClearAlpha();
 		};
-
 		this.setClearAlpha = function () {
 			background.setClearAlpha.apply(background, arguments);
 		};
-
 		this.clear = function (color = true, depth = true, stencil = true) {
 			let bits = 0;
 			if (color) bits |= _gl.COLOR_BUFFER_BIT;
 			if (depth) bits |= _gl.DEPTH_BUFFER_BIT;
 			if (stencil) bits |= _gl.STENCIL_BUFFER_BIT;
-
 			_gl.clear(bits);
 		};
-
 		this.clearColor = function () {
 			this.clear(true, false, false);
 		};
-
 		this.clearDepth = function () {
 			this.clear(false, true, false);
 		};
-
 		this.clearStencil = function () {
 			this.clear(false, false, true);
-		}; //
+		};
 
+		//
 
 		this.dispose = function () {
 			_canvas.removeEventListener('webglcontextlost', onContextLost, false);
-
 			_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);
-
 			_canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
-
 			renderLists.dispose();
 			renderStates.dispose();
 			properties.dispose();
@@ -20505,25 +18191,21 @@
 			xr.dispose();
 			xr.removeEventListener('sessionstart', onXRSessionStart);
 			xr.removeEventListener('sessionend', onXRSessionEnd);
-
 			if (_transmissionRenderTarget) {
 				_transmissionRenderTarget.dispose();
-
 				_transmissionRenderTarget = null;
 			}
-
 			animation.stop();
-		}; // Events
+		};
 
+		// Events
 
 		function onContextLost(event) {
 			event.preventDefault();
 			console.log('THREE.WebGLRenderer: Context Lost.');
 			_isContextLost = true;
 		}
-
-		function
-			/* event */
+		function /* event */
 		onContextRestore() {
 			console.log('THREE.WebGLRenderer: Context Restored.');
 			_isContextLost = false;
@@ -20539,64 +18221,61 @@
 			shadowMap.needsUpdate = shadowMapNeedsUpdate;
 			shadowMap.type = shadowMapType;
 		}
-
 		function onContextCreationError(event) {
 			console.error('THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage);
 		}
-
 		function onMaterialDispose(event) {
 			const material = event.target;
 			material.removeEventListener('dispose', onMaterialDispose);
 			deallocateMaterial(material);
-		} // Buffer deallocation
+		}
 
+		// Buffer deallocation
 
 		function deallocateMaterial(material) {
 			releaseMaterialProgramReferences(material);
 			properties.remove(material);
 		}
-
 		function releaseMaterialProgramReferences(material) {
 			const programs = properties.get(material).programs;
-
 			if (programs !== undefined) {
 				programs.forEach(function (program) {
 					programCache.releaseProgram(program);
 				});
-
 				if (material.isShaderMaterial) {
 					programCache.releaseShaderCache(material);
 				}
 			}
-		} // Buffer rendering
+		}
 
+		// Buffer rendering
 
 		this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {
 			if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
 
 			const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
 			const program = setProgram(camera, scene, geometry, material, object);
-			state.setMaterial(material, frontFaceCW); //
+			state.setMaterial(material, frontFaceCW);
+
+			//
 
 			let index = geometry.index;
 			let rangeFactor = 1;
-
 			if (material.wireframe === true) {
 				index = geometries.getWireframeAttribute(geometry);
 				rangeFactor = 2;
-			} //
+			}
 
+			//
 
 			const drawRange = geometry.drawRange;
 			const position = geometry.attributes.position;
 			let drawStart = drawRange.start * rangeFactor;
 			let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
-
 			if (group !== null) {
 				drawStart = Math.max(drawStart, group.start * rangeFactor);
 				drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
 			}
-
 			if (index !== null) {
 				drawStart = Math.max(drawStart, 0);
 				drawEnd = Math.min(drawEnd, index.count);
@@ -20604,20 +18283,21 @@
 				drawStart = Math.max(drawStart, 0);
 				drawEnd = Math.min(drawEnd, position.count);
 			}
-
 			const drawCount = drawEnd - drawStart;
-			if (drawCount < 0 || drawCount === Infinity) return; //
+			if (drawCount < 0 || drawCount === Infinity) return;
+
+			//
 
 			bindingStates.setup(object, material, program, geometry, index);
 			let attribute;
 			let renderer = bufferRenderer;
-
 			if (index !== null) {
 				attribute = attributes.get(index);
 				renderer = indexedBufferRenderer;
 				renderer.setIndex(attribute);
-			} //
+			}
 
+			//
 
 			if (object.isMesh) {
 				if (material.wireframe === true) {
@@ -20631,7 +18311,6 @@
 				if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material
 
 				state.setLineWidth(lineWidth * getTargetPixelRatio());
-
 				if (object.isLineSegments) {
 					renderer.setMode(_gl.LINES);
 				} else if (object.isLineLoop) {
@@ -20644,7 +18323,6 @@
 			} else if (object.isSprite) {
 				renderer.setMode(_gl.TRIANGLES);
 			}
-
 			if (object.isInstancedMesh) {
 				renderer.renderInstances(drawStart, drawCount, object.count);
 			} else if (geometry.isInstancedBufferGeometry) {
@@ -20654,8 +18332,9 @@
 			} else {
 				renderer.render(drawStart, drawCount);
 			}
-		}; // Compile
+		};
 
+		// Compile
 
 		this.compile = function (scene, camera) {
 			function prepare(material, scene, object) {
@@ -20671,14 +18350,12 @@
 					getProgram(material, scene, object);
 				}
 			}
-
 			currentRenderState = renderStates.get(scene);
 			currentRenderState.init();
 			renderStateStack.push(currentRenderState);
 			scene.traverseVisible(function (object) {
 				if (object.isLight && object.layers.test(camera.layers)) {
 					currentRenderState.pushLight(object);
-
 					if (object.castShadow) {
 						currentRenderState.pushShadow(object);
 					}
@@ -20687,7 +18364,6 @@
 			currentRenderState.setupLights(_this.physicallyCorrectLights);
 			scene.traverse(function (object) {
 				const material = object.material;
-
 				if (material) {
 					if (Array.isArray(material)) {
 						for (let i = 0; i < material.length; i++) {
@@ -20701,63 +18377,59 @@
 			});
 			renderStateStack.pop();
 			currentRenderState = null;
-		}; // Animation Loop
+		};
 
+		// Animation Loop
 
 		let onAnimationFrameCallback = null;
-
 		function onAnimationFrame(time) {
 			if (onAnimationFrameCallback) onAnimationFrameCallback(time);
 		}
-
 		function onXRSessionStart() {
 			animation.stop();
 		}
-
 		function onXRSessionEnd() {
 			animation.start();
 		}
-
 		const animation = new WebGLAnimation();
 		animation.setAnimationLoop(onAnimationFrame);
 		if (typeof self !== 'undefined') animation.setContext(self);
-
 		this.setAnimationLoop = function (callback) {
 			onAnimationFrameCallback = callback;
 			xr.setAnimationLoop(callback);
 			callback === null ? animation.stop() : animation.start();
 		};
-
 		xr.addEventListener('sessionstart', onXRSessionStart);
-		xr.addEventListener('sessionend', onXRSessionEnd); // Rendering
+		xr.addEventListener('sessionend', onXRSessionEnd);
+
+		// Rendering
 
 		this.render = function (scene, camera) {
 			if (camera !== undefined && camera.isCamera !== true) {
 				console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
 				return;
 			}
+			if (_isContextLost === true) return;
 
-			if (_isContextLost === true) return; // update scene graph
+			// update scene graph
 
-			if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum
+			if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();
 
-			if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
+			// update camera matrices and frustum
 
+			if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
 			if (xr.enabled === true && xr.isPresenting === true) {
 				if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
 				camera = xr.getCamera(); // use XR camera for rendering
-			} //
-
+			}
 
+			//
 			if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
 			currentRenderState = renderStates.get(scene, renderStateStack.length);
 			currentRenderState.init();
 			renderStateStack.push(currentRenderState);
-
 			_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
-
 			_frustum.setFromProjectionMatrix(_projScreenMatrix);
-
 			_localClippingEnabled = this.localClippingEnabled;
 			_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
 			currentRenderList = renderLists.get(scene, renderListStack.length);
@@ -20765,74 +18437,77 @@
 			renderListStack.push(currentRenderList);
 			projectObject(scene, camera, 0, _this.sortObjects);
 			currentRenderList.finish();
-
 			if (_this.sortObjects === true) {
 				currentRenderList.sort(_opaqueSort, _transparentSort);
-			} //
+			}
 
+			//
 
 			if (_clippingEnabled === true) clipping.beginShadows();
 			const shadowsArray = currentRenderState.state.shadowsArray;
 			shadowMap.render(shadowsArray, scene, camera);
-			if (_clippingEnabled === true) clipping.endShadows(); //
+			if (_clippingEnabled === true) clipping.endShadows();
 
-			if (this.info.autoReset === true) this.info.reset(); //
+			//
 
-			background.render(currentRenderList, scene); // render scene
+			if (this.info.autoReset === true) this.info.reset();
 
-			currentRenderState.setupLights(_this.physicallyCorrectLights);
+			//
 
+			background.render(currentRenderList, scene);
+
+			// render scene
+
+			currentRenderState.setupLights(_this.physicallyCorrectLights);
 			if (camera.isArrayCamera) {
 				const cameras = camera.cameras;
-
 				for (let i = 0, l = cameras.length; i < l; i++) {
 					const camera2 = cameras[i];
 					renderScene(currentRenderList, scene, camera2, camera2.viewport);
 				}
 			} else {
 				renderScene(currentRenderList, scene, camera);
-			} //
+			}
 
+			//
 
 			if (_currentRenderTarget !== null) {
 				// resolve multisample renderbuffers to a single-sample texture if necessary
-				textures.updateMultisampleRenderTarget(_currentRenderTarget); // Generate mipmap if we're using any kind of mipmap filtering
+
+				textures.updateMultisampleRenderTarget(_currentRenderTarget);
+
+				// Generate mipmap if we're using any kind of mipmap filtering
 
 				textures.updateRenderTargetMipmap(_currentRenderTarget);
-			} //
+			}
 
+			//
 
 			if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
-
 			if (xr.enabled && xr.submitFrame) {
 				xr.submitFrame();
-			} // _gl.finish();
-
+			}
+			// _gl.finish();
 
 			bindingStates.resetDefaultState();
 			_currentMaterialId = -1;
 			_currentCamera = null;
 			renderStateStack.pop();
-
 			if (renderStateStack.length > 0) {
 				currentRenderState = renderStateStack[renderStateStack.length - 1];
 			} else {
 				currentRenderState = null;
 			}
-
 			renderListStack.pop();
-
 			if (renderListStack.length > 0) {
 				currentRenderList = renderListStack[renderListStack.length - 1];
 			} else {
 				currentRenderList = null;
 			}
 		};
-
 		function projectObject(object, camera, groupOrder, sortObjects) {
 			if (object.visible === false) return;
 			const visible = object.layers.test(camera.layers);
-
 			if (visible) {
 				if (object.isGroup) {
 					groupOrder = object.renderOrder;
@@ -20840,7 +18515,6 @@
 					if (object.autoUpdate === true) object.update(camera);
 				} else if (object.isLight) {
 					currentRenderState.pushLight(object);
-
 					if (object.castShadow) {
 						currentRenderState.pushShadow(object);
 					}
@@ -20849,10 +18523,8 @@
 						if (sortObjects) {
 							_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
 						}
-
 						const geometry = objects.update(object);
 						const material = object.material;
-
 						if (material.visible) {
 							currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
 						}
@@ -20860,27 +18532,23 @@
 				} else if (object.isMesh || object.isLine || object.isPoints) {
 					if (object.isSkinnedMesh) {
 						// update skeleton only once in a frame
+
 						if (object.skeleton.frame !== info.render.frame) {
 							object.skeleton.update();
 							object.skeleton.frame = info.render.frame;
 						}
 					}
-
 					if (!object.frustumCulled || _frustum.intersectsObject(object)) {
 						if (sortObjects) {
 							_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
 						}
-
 						const geometry = objects.update(object);
 						const material = object.material;
-
 						if (Array.isArray(material)) {
 							const groups = geometry.groups;
-
 							for (let i = 0, l = groups.length; i < l; i++) {
 								const group = groups[i];
 								const groupMaterial = material[group.materialIndex];
-
 								if (groupMaterial && groupMaterial.visible) {
 									currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
 								}
@@ -20891,14 +18559,11 @@
 					}
 				}
 			}
-
 			const children = object.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				projectObject(children[i], camera, groupOrder, sortObjects);
 			}
 		}
-
 		function renderScene(currentRenderList, scene, camera, viewport) {
 			const opaqueObjects = currentRenderList.opaque;
 			const transmissiveObjects = currentRenderList.transmissive;
@@ -20908,17 +18573,17 @@
 			if (viewport) state.viewport(_currentViewport.copy(viewport));
 			if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
 			if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
-			if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render
+			if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
+
+			// Ensure depth buffer writing is enabled so it can be cleared on next render
 
 			state.buffers.depth.setTest(true);
 			state.buffers.depth.setMask(true);
 			state.buffers.color.setMask(true);
 			state.setPolygonOffset(false);
 		}
-
 		function renderTransmissionPass(opaqueObjects, scene, camera) {
 			const isWebGL2 = capabilities.isWebGL2;
-
 			if (_transmissionRenderTarget === null) {
 				_transmissionRenderTarget = new WebGLRenderTarget(1, 1, {
 					generateMipmaps: true,
@@ -20927,75 +18592,60 @@
 					samples: isWebGL2 && _antialias === true ? 4 : 0
 				});
 			}
-
 			_this.getDrawingBufferSize(_vector2);
-
 			if (isWebGL2) {
 				_transmissionRenderTarget.setSize(_vector2.x, _vector2.y);
 			} else {
 				_transmissionRenderTarget.setSize(floorPowerOfTwo(_vector2.x), floorPowerOfTwo(_vector2.y));
-			} //
+			}
 
+			//
 
 			const currentRenderTarget = _this.getRenderTarget();
-
 			_this.setRenderTarget(_transmissionRenderTarget);
+			_this.clear();
 
-			_this.clear(); // Turn off the features which can affect the frag color for opaque objects pass.
+			// Turn off the features which can affect the frag color for opaque objects pass.
 			// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
-
-
 			const currentToneMapping = _this.toneMapping;
 			_this.toneMapping = NoToneMapping;
 			renderObjects(opaqueObjects, scene, camera);
 			_this.toneMapping = currentToneMapping;
 			textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
 			textures.updateRenderTargetMipmap(_transmissionRenderTarget);
-
 			_this.setRenderTarget(currentRenderTarget);
 		}
-
 		function renderObjects(renderList, scene, camera) {
 			const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
-
 			for (let i = 0, l = renderList.length; i < l; i++) {
 				const renderItem = renderList[i];
 				const object = renderItem.object;
 				const geometry = renderItem.geometry;
 				const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
 				const group = renderItem.group;
-
 				if (object.layers.test(camera.layers)) {
 					renderObject(object, scene, camera, geometry, material, group);
 				}
 			}
 		}
-
 		function renderObject(object, scene, camera, geometry, material, group) {
 			object.onBeforeRender(_this, scene, camera, geometry, material, group);
 			object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
 			object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
 			material.onBeforeRender(_this, scene, camera, geometry, object, group);
-
 			if (material.transparent === true && material.side === DoubleSide) {
 				material.side = BackSide;
 				material.needsUpdate = true;
-
 				_this.renderBufferDirect(camera, scene, geometry, material, object, group);
-
 				material.side = FrontSide;
 				material.needsUpdate = true;
-
 				_this.renderBufferDirect(camera, scene, geometry, material, object, group);
-
 				material.side = DoubleSide;
 			} else {
 				_this.renderBufferDirect(camera, scene, geometry, material, object, group);
 			}
-
 			object.onAfterRender(_this, scene, camera, geometry, material, group);
 		}
-
 		function getProgram(material, scene, object) {
 			if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
 
@@ -21005,23 +18655,24 @@
 			const lightsStateVersion = lights.state.version;
 			const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
 			const programCacheKey = programCache.getProgramCacheKey(parameters);
-			let programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
+			let programs = materialProperties.programs;
+
+			// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
 
 			materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
 			materialProperties.fog = scene.fog;
 			materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
-
 			if (programs === undefined) {
 				// new material
+
 				material.addEventListener('dispose', onMaterialDispose);
 				programs = new Map();
 				materialProperties.programs = programs;
 			}
-
 			let program = programs.get(programCacheKey);
-
 			if (program !== undefined) {
 				// early out if program and light state is identical
+
 				if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
 					updateCommonMaterialProperties(material, parameters);
 					return program;
@@ -21034,20 +18685,19 @@
 				programs.set(programCacheKey, program);
 				materialProperties.uniforms = parameters.uniforms;
 			}
-
 			const uniforms = materialProperties.uniforms;
-
 			if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
 				uniforms.clippingPlanes = clipping.uniform;
 			}
+			updateCommonMaterialProperties(material, parameters);
 
-			updateCommonMaterialProperties(material, parameters); // store the light setup it was created for
+			// store the light setup it was created for
 
 			materialProperties.needsLights = materialNeedsLights(material);
 			materialProperties.lightsStateVersion = lightsStateVersion;
-
 			if (materialProperties.needsLights) {
 				// wire up the material to this renderer's lighting state
+
 				uniforms.ambientLightColor.value = lights.state.ambient;
 				uniforms.lightProbe.value = lights.state.probe;
 				uniforms.directionalLights.value = lights.state.directional;
@@ -21066,7 +18716,8 @@
 				uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
 				uniforms.spotLightMap.value = lights.state.spotLightMap;
 				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
-				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms
+				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
+				// TODO (abelnation): add area lights shadow info to uniforms
 			}
 
 			const progUniforms = program.getUniforms();
@@ -21075,7 +18726,6 @@
 			materialProperties.uniformsList = uniformsList;
 			return program;
 		}
-
 		function updateCommonMaterialProperties(material, parameters) {
 			const materialProperties = properties.get(material);
 			materialProperties.outputEncoding = parameters.outputEncoding;
@@ -21091,7 +18741,6 @@
 			materialProperties.vertexTangents = parameters.vertexTangents;
 			materialProperties.toneMapping = parameters.toneMapping;
 		}
-
 		function setProgram(camera, scene, geometry, material, object) {
 			if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
 
@@ -21110,20 +18759,20 @@
 			const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
 			const materialProperties = properties.get(material);
 			const lights = currentRenderState.state.lights;
-
 			if (_clippingEnabled === true) {
 				if (_localClippingEnabled === true || camera !== _currentCamera) {
-					const useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup
+					const useCache = camera === _currentCamera && material.id === _currentMaterialId;
+
+					// we might want to call this function with some ClippingGroup
 					// object instead of the material, once it becomes feasible
 					// (#8465, #8379)
-
 					clipping.setState(material, camera, useCache);
 				}
-			} //
+			}
 
+			//
 
 			let needsProgramChange = false;
-
 			if (material.version === materialProperties.__version) {
 				if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
 					needsProgramChange = true;
@@ -21161,76 +18810,69 @@
 			} else {
 				needsProgramChange = true;
 				materialProperties.__version = material.version;
-			} //
+			}
 
+			//
 
 			let program = materialProperties.currentProgram;
-
 			if (needsProgramChange === true) {
 				program = getProgram(material, scene, object);
 			}
-
 			let refreshProgram = false;
 			let refreshMaterial = false;
 			let refreshLights = false;
 			const p_uniforms = program.getUniforms(),
-						m_uniforms = materialProperties.uniforms;
-
+				m_uniforms = materialProperties.uniforms;
 			if (state.useProgram(program.program)) {
 				refreshProgram = true;
 				refreshMaterial = true;
 				refreshLights = true;
 			}
-
 			if (material.id !== _currentMaterialId) {
 				_currentMaterialId = material.id;
 				refreshMaterial = true;
 			}
-
 			if (refreshProgram || _currentCamera !== camera) {
 				p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);
-
 				if (capabilities.logarithmicDepthBuffer) {
 					p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
 				}
-
 				if (_currentCamera !== camera) {
-					_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update
+					_currentCamera = camera;
+
+					// lighting uniforms depend on the camera so enforce an update
 					// now, in case this material supports lights - or later, when
 					// the next material that does gets activated:
 
 					refreshMaterial = true; // set to true on material change
-
 					refreshLights = true; // remains set until update done
-				} // load material specific uniforms
-				// (shader material also gets them for the sake of genericity)
+				}
 
+				// load material specific uniforms
+				// (shader material also gets them for the sake of genericity)
 
 				if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
 					const uCamPos = p_uniforms.map.cameraPosition;
-
 					if (uCamPos !== undefined) {
 						uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
 					}
 				}
-
 				if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
 					p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);
 				}
-
 				if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {
 					p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
 				}
-			} // skinning and morph target uniforms must be set even if material didn't change
+			}
+
+			// skinning and morph target uniforms must be set even if material didn't change
 			// auto-setting of texture unit for bone and morph texture must go before other textures
 			// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
 
-
 			if (object.isSkinnedMesh) {
 				p_uniforms.setOptional(_gl, object, 'bindMatrix');
 				p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
 				const skeleton = object.skeleton;
-
 				if (skeleton) {
 					if (capabilities.floatVertexTextures) {
 						if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
@@ -21241,64 +18883,62 @@
 					}
 				}
 			}
-
 			const morphAttributes = geometry.morphAttributes;
-
 			if (morphAttributes.position !== undefined || morphAttributes.normal !== undefined || morphAttributes.color !== undefined && capabilities.isWebGL2 === true) {
 				morphtargets.update(object, geometry, material, program);
 			}
-
 			if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
 				materialProperties.receiveShadow = object.receiveShadow;
 				p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);
-			} // https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512
+			}
 
+			// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512
 
 			if (material.isMeshGouraudMaterial && material.envMap !== null) {
 				m_uniforms.envMap.value = envMap;
 				m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
 			}
-
 			if (refreshMaterial) {
 				p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);
-
 				if (materialProperties.needsLights) {
 					// the current material requires lighting info
+
 					// note: all lighting uniforms are always set correctly
 					// they simply reference the renderer's state for their
 					// values
 					//
 					// use the current material's .needsUpdate flags to set
 					// the GL state when required
+
 					markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
-				} // refresh uniforms common to several materials
+				}
 
+				// refresh uniforms common to several materials
 
 				if (fog && material.fog === true) {
 					materials.refreshFogUniforms(m_uniforms, fog);
 				}
-
 				materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
 				WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
 			}
-
 			if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
 				WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
 				material.uniformsNeedUpdate = false;
 			}
-
 			if (material.isSpriteMaterial) {
 				p_uniforms.setValue(_gl, 'center', object.center);
-			} // common matrices
+			}
 
+			// common matrices
 
 			p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
 			p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
-			p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld); // UBOs
+			p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);
+
+			// UBOs
 
 			if (material.isShaderMaterial || material.isRawShaderMaterial) {
 				const groups = material.uniformsGroups;
-
 				for (let i = 0, l = groups.length; i < l; i++) {
 					if (capabilities.isWebGL2) {
 						const group = groups[i];
@@ -21309,10 +18949,10 @@
 					}
 				}
 			}
-
 			return program;
-		} // If uniforms are marked as clean, they don't need to be loaded to the GPU.
+		}
 
+		// If uniforms are marked as clean, they don't need to be loaded to the GPU.
 
 		function markUniformsLightsNeedsUpdate(uniforms, value) {
 			uniforms.ambientLightColor.needsUpdate = value;
@@ -21326,49 +18966,40 @@
 			uniforms.rectAreaLights.needsUpdate = value;
 			uniforms.hemisphereLights.needsUpdate = value;
 		}
-
 		function materialNeedsLights(material) {
 			return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
 		}
-
 		this.setTexture2D = function () {
-			var warned = false; // backwards compatibility: peel texture.texture
+			var warned = false;
 
+			// backwards compatibility: peel texture.texture
 			return function setTexture2D(texture, slot) {
 				if (texture && texture.isWebGLRenderTarget) {
 					if (!warned) {
 						console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.");
 						warned = true;
 					}
-
 					texture = texture.texture;
 				}
-
 				textures.setTexture2D(texture, slot);
 			};
 		}();
-
 		this.getActiveCubeFace = function () {
 			return _currentActiveCubeFace;
 		};
-
 		this.getActiveMipmapLevel = function () {
 			return _currentActiveMipmapLevel;
 		};
-
 		this.getRenderTarget = function () {
 			return _currentRenderTarget;
 		};
-
 		this.setRenderTargetTextures = function (renderTarget, colorTexture, depthTexture) {
 			properties.get(renderTarget.texture).__webglTexture = colorTexture;
 			properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
 			const renderTargetProperties = properties.get(renderTarget);
 			renderTargetProperties.__hasExternalTextures = true;
-
 			if (renderTargetProperties.__hasExternalTextures) {
 				renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;
-
 				if (!renderTargetProperties.__autoAllocateDepthBuffer) {
 					// The multisample_render_to_texture extension doesn't work properly if there
 					// are midframe flushes and an external depth buffer. Disable use of the extension.
@@ -21379,13 +19010,11 @@
 				}
 			}
 		};
-
 		this.setRenderTargetFramebuffer = function (renderTarget, defaultFramebuffer) {
 			const renderTargetProperties = properties.get(renderTarget);
 			renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
 			renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
 		};
-
 		this.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
 			_currentRenderTarget = renderTarget;
 			_currentActiveCubeFace = activeCubeFace;
@@ -21394,10 +19023,8 @@
 			let framebuffer = null;
 			let isCube = false;
 			let isRenderTarget3D = false;
-
 			if (renderTarget) {
 				const renderTargetProperties = properties.get(renderTarget);
-
 				if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {
 					// We need to make sure to rebind the framebuffer.
 					state.bindFramebuffer(_gl.FRAMEBUFFER, null);
@@ -21408,15 +19035,11 @@
 					// Color and depth texture must be rebound in order for the swapchain to update.
 					textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
 				}
-
 				const texture = renderTarget.texture;
-
 				if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
 					isRenderTarget3D = true;
 				}
-
 				const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
-
 				if (renderTarget.isWebGLCubeRenderTarget) {
 					framebuffer = __webglFramebuffer[activeCubeFace];
 					isCube = true;
@@ -21425,41 +19048,29 @@
 				} else {
 					framebuffer = __webglFramebuffer;
 				}
-
 				_currentViewport.copy(renderTarget.viewport);
-
 				_currentScissor.copy(renderTarget.scissor);
-
 				_currentScissorTest = renderTarget.scissorTest;
 			} else {
 				_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
-
 				_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
-
 				_currentScissorTest = _scissorTest;
 			}
-
 			const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
-
 			if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
 				state.drawBuffers(renderTarget, framebuffer);
 			}
-
 			state.viewport(_currentViewport);
 			state.scissor(_currentScissor);
 			state.setScissorTest(_currentScissorTest);
-
 			if (isCube) {
 				const textureProperties = properties.get(renderTarget.texture);
-
 				_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
 			} else if (isRenderTarget3D) {
 				const textureProperties = properties.get(renderTarget.texture);
 				const layer = activeCubeFace || 0;
-
 				_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
 			}
-
 			_currentMaterialId = -1; // reset current material to ensure correct uniform bindings
 		};
 
@@ -21468,72 +19079,63 @@
 				console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
 				return;
 			}
-
 			let framebuffer = properties.get(renderTarget).__webglFramebuffer;
-
 			if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {
 				framebuffer = framebuffer[activeCubeFaceIndex];
 			}
-
 			if (framebuffer) {
 				state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
-
 				try {
 					const texture = renderTarget.texture;
 					const textureFormat = texture.format;
 					const textureType = texture.type;
-
 					if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
 						console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
 						return;
 					}
-
 					const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));
-
-					if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
-					!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox
+					if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) &&
+					// Edge and Chrome Mac < 52 (#9513)
+					!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) &&
+					// Chrome Mac >= 52 and Firefox
 					!halfFloatSupportedByExt) {
 						console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
 						return;
-					} // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
+					}
 
+					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
 
 					if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {
 						_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
 					}
 				} finally {
 					// restore framebuffer of current render target if necessary
+
 					const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
 					state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
 				}
 			}
 		};
-
 		this.copyFramebufferToTexture = function (position, texture, level = 0) {
 			const levelScale = Math.pow(2, -level);
 			const width = Math.floor(texture.image.width * levelScale);
 			const height = Math.floor(texture.image.height * levelScale);
 			textures.setTexture2D(texture, 0);
-
 			_gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height);
-
 			state.unbindTexture();
 		};
-
 		this.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {
 			const width = srcTexture.image.width;
 			const height = srcTexture.image.height;
 			const glFormat = utils.convert(dstTexture.format);
 			const glType = utils.convert(dstTexture.type);
-			textures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei
-			// parameters, make sure they are correct for the dstTexture
+			textures.setTexture2D(dstTexture, 0);
 
+			// As another texture upload may have changed pixelStorei
+			// parameters, make sure they are correct for the dstTexture
 			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
-
 			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
-
 			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
-
 			if (srcTexture.isDataTexture) {
 				_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
 			} else {
@@ -21542,26 +19144,23 @@
 				} else {
 					_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);
 				}
-			} // Generate mipmaps only when copying level 0
-
+			}
 
+			// Generate mipmaps only when copying level 0
 			if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);
 			state.unbindTexture();
 		};
-
 		this.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {
 			if (_this.isWebGL1Renderer) {
 				console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
 				return;
 			}
-
 			const width = sourceBox.max.x - sourceBox.min.x + 1;
 			const height = sourceBox.max.y - sourceBox.min.y + 1;
 			const depth = sourceBox.max.z - sourceBox.min.z + 1;
 			const glFormat = utils.convert(dstTexture.format);
 			const glType = utils.convert(dstTexture.type);
 			let glTarget;
-
 			if (dstTexture.isData3DTexture) {
 				textures.setTexture3D(dstTexture, 0);
 				glTarget = _gl.TEXTURE_3D;
@@ -21572,62 +19171,40 @@
 				console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');
 				return;
 			}
-
 			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
-
 			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
-
 			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
-
 			const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
-
 			const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
-
 			const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
-
 			const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
-
 			const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
-
 			const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
-
 			_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
-
 			_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
-
 			_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);
-
 			_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);
-
 			_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);
-
 			if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
 				_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
 			} else {
 				if (srcTexture.isCompressedArrayTexture) {
 					console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');
-
 					_gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
 				} else {
 					_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
 				}
 			}
-
 			_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);
-
 			_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
-
 			_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);
+			_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
+			_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages);
 
-			_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
-
-			_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0
-
-
+			// Generate mipmaps only when copying level 0
 			if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
 			state.unbindTexture();
 		};
-
 		this.initTexture = function (texture) {
 			if (texture.isCubeTexture) {
 				textures.setTextureCube(texture, 0);
@@ -21638,10 +19215,8 @@
 			} else {
 				textures.setTexture2D(texture, 0);
 			}
-
 			state.unbindTexture();
 		};
-
 		this.resetState = function () {
 			_currentActiveCubeFace = 0;
 			_currentActiveMipmapLevel = 0;
@@ -21649,7 +19224,6 @@
 			state.reset();
 			bindingStates.reset();
 		};
-
 		if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
 			__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
 				detail: this
@@ -21658,7 +19232,6 @@
 	}
 
 	class WebGL1Renderer extends WebGLRenderer {}
-
 	WebGL1Renderer.prototype.isWebGL1Renderer = true;
 
 	class FogExp2 {
@@ -21668,11 +19241,9 @@
 			this.color = new Color(color);
 			this.density = density;
 		}
-
 		clone() {
 			return new FogExp2(this.color, this.density);
 		}
-
 		toJSON() {
 			return {
 				type: 'FogExp2',
@@ -21680,7 +19251,6 @@
 				density: this.density
 			};
 		}
-
 	}
 
 	class Fog {
@@ -21691,11 +19261,9 @@
 			this.near = near;
 			this.far = far;
 		}
-
 		clone() {
 			return new Fog(this.color, this.near, this.far);
 		}
-
 		toJSON() {
 			return {
 				type: 'Fog',
@@ -21704,7 +19272,6 @@
 				far: this.far
 			};
 		}
-
 	}
 
 	class Scene extends Object3D {
@@ -21718,14 +19285,12 @@
 			this.backgroundBlurriness = 0;
 			this.backgroundIntensity = 1;
 			this.overrideMaterial = null;
-
 			if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
 				__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
 					detail: this
 				}));
 			}
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			if (source.background !== null) this.background = source.background.clone();
@@ -21737,26 +19302,24 @@
 			this.matrixAutoUpdate = source.matrixAutoUpdate;
 			return this;
 		}
-
 		toJSON(meta) {
 			const data = super.toJSON(meta);
 			if (this.fog !== null) data.object.fog = this.fog.toJSON();
 			if (this.backgroundBlurriness > 0) data.backgroundBlurriness = this.backgroundBlurriness;
 			if (this.backgroundIntensity !== 1) data.backgroundIntensity = this.backgroundIntensity;
 			return data;
-		} // @deprecated
+		}
 
+		// @deprecated
 
 		get autoUpdate() {
 			console.warn('THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.');
 			return this.matrixWorldAutoUpdate;
 		}
-
 		set autoUpdate(value) {
 			console.warn('THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.');
 			this.matrixWorldAutoUpdate = value;
 		}
-
 	}
 
 	class InterleavedBuffer {
@@ -21773,18 +19336,14 @@
 			this.version = 0;
 			this.uuid = generateUUID();
 		}
-
 		onUploadCallback() {}
-
 		set needsUpdate(value) {
 			if (value === true) this.version++;
 		}
-
 		setUsage(value) {
 			this.usage = value;
 			return this;
 		}
-
 		copy(source) {
 			this.array = new source.array.constructor(source.array);
 			this.count = source.count;
@@ -21792,61 +19351,52 @@
 			this.usage = source.usage;
 			return this;
 		}
-
 		copyAt(index1, attribute, index2) {
 			index1 *= this.stride;
 			index2 *= attribute.stride;
-
 			for (let i = 0, l = this.stride; i < l; i++) {
 				this.array[index1 + i] = attribute.array[index2 + i];
 			}
-
 			return this;
 		}
-
 		set(value, offset = 0) {
 			this.array.set(value, offset);
 			return this;
 		}
-
 		clone(data) {
 			if (data.arrayBuffers === undefined) {
 				data.arrayBuffers = {};
 			}
-
 			if (this.array.buffer._uuid === undefined) {
 				this.array.buffer._uuid = generateUUID();
 			}
-
 			if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
 				data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
 			}
-
 			const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
 			const ib = new this.constructor(array, this.stride);
 			ib.setUsage(this.usage);
 			return ib;
 		}
-
 		onUpload(callback) {
 			this.onUploadCallback = callback;
 			return this;
 		}
-
 		toJSON(data) {
 			if (data.arrayBuffers === undefined) {
 				data.arrayBuffers = {};
-			} // generate UUID for array buffer if necessary
+			}
 
+			// generate UUID for array buffer if necessary
 
 			if (this.array.buffer._uuid === undefined) {
 				this.array.buffer._uuid = generateUUID();
 			}
-
 			if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
 				data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
-			} //
+			}
 
+			//
 
 			return {
 				uuid: this.uuid,
@@ -21855,11 +19405,9 @@
 				stride: this.stride
 			};
 		}
-
 	}
 
 	const _vector$6 = /*@__PURE__*/new Vector3();
-
 	class InterleavedBufferAttribute {
 		constructor(interleavedBuffer, itemSize, offset, normalized = false) {
 			this.isInterleavedBufferAttribute = true;
@@ -21869,188 +19417,148 @@
 			this.offset = offset;
 			this.normalized = normalized === true;
 		}
-
 		get count() {
 			return this.data.count;
 		}
-
 		get array() {
 			return this.data.array;
 		}
-
 		set needsUpdate(value) {
 			this.data.needsUpdate = value;
 		}
-
 		applyMatrix4(m) {
 			for (let i = 0, l = this.data.count; i < l; i++) {
 				_vector$6.fromBufferAttribute(this, i);
-
 				_vector$6.applyMatrix4(m);
-
 				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
 			}
-
 			return this;
 		}
-
 		applyNormalMatrix(m) {
 			for (let i = 0, l = this.count; i < l; i++) {
 				_vector$6.fromBufferAttribute(this, i);
-
 				_vector$6.applyNormalMatrix(m);
-
 				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
 			}
-
 			return this;
 		}
-
 		transformDirection(m) {
 			for (let i = 0, l = this.count; i < l; i++) {
 				_vector$6.fromBufferAttribute(this, i);
-
 				_vector$6.transformDirection(m);
-
 				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
 			}
-
 			return this;
 		}
-
 		setX(index, x) {
 			if (this.normalized) x = normalize(x, this.array);
 			this.data.array[index * this.data.stride + this.offset] = x;
 			return this;
 		}
-
 		setY(index, y) {
 			if (this.normalized) y = normalize(y, this.array);
 			this.data.array[index * this.data.stride + this.offset + 1] = y;
 			return this;
 		}
-
 		setZ(index, z) {
 			if (this.normalized) z = normalize(z, this.array);
 			this.data.array[index * this.data.stride + this.offset + 2] = z;
 			return this;
 		}
-
 		setW(index, w) {
 			if (this.normalized) w = normalize(w, this.array);
 			this.data.array[index * this.data.stride + this.offset + 3] = w;
 			return this;
 		}
-
 		getX(index) {
 			let x = this.data.array[index * this.data.stride + this.offset];
 			if (this.normalized) x = denormalize(x, this.array);
 			return x;
 		}
-
 		getY(index) {
 			let y = this.data.array[index * this.data.stride + this.offset + 1];
 			if (this.normalized) y = denormalize(y, this.array);
 			return y;
 		}
-
 		getZ(index) {
 			let z = this.data.array[index * this.data.stride + this.offset + 2];
 			if (this.normalized) z = denormalize(z, this.array);
 			return z;
 		}
-
 		getW(index) {
 			let w = this.data.array[index * this.data.stride + this.offset + 3];
 			if (this.normalized) w = denormalize(w, this.array);
 			return w;
 		}
-
 		setXY(index, x, y) {
 			index = index * this.data.stride + this.offset;
-
 			if (this.normalized) {
 				x = normalize(x, this.array);
 				y = normalize(y, this.array);
 			}
-
 			this.data.array[index + 0] = x;
 			this.data.array[index + 1] = y;
 			return this;
 		}
-
 		setXYZ(index, x, y, z) {
 			index = index * this.data.stride + this.offset;
-
 			if (this.normalized) {
 				x = normalize(x, this.array);
 				y = normalize(y, this.array);
 				z = normalize(z, this.array);
 			}
-
 			this.data.array[index + 0] = x;
 			this.data.array[index + 1] = y;
 			this.data.array[index + 2] = z;
 			return this;
 		}
-
 		setXYZW(index, x, y, z, w) {
 			index = index * this.data.stride + this.offset;
-
 			if (this.normalized) {
 				x = normalize(x, this.array);
 				y = normalize(y, this.array);
 				z = normalize(z, this.array);
 				w = normalize(w, this.array);
 			}
-
 			this.data.array[index + 0] = x;
 			this.data.array[index + 1] = y;
 			this.data.array[index + 2] = z;
 			this.data.array[index + 3] = w;
 			return this;
 		}
-
 		clone(data) {
 			if (data === undefined) {
 				console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.');
 				const array = [];
-
 				for (let i = 0; i < this.count; i++) {
 					const index = i * this.data.stride + this.offset;
-
 					for (let j = 0; j < this.itemSize; j++) {
 						array.push(this.data.array[index + j]);
 					}
 				}
-
 				return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
 			} else {
 				if (data.interleavedBuffers === undefined) {
 					data.interleavedBuffers = {};
 				}
-
 				if (data.interleavedBuffers[this.data.uuid] === undefined) {
 					data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
 				}
-
 				return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
 			}
 		}
-
 		toJSON(data) {
 			if (data === undefined) {
 				console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.');
 				const array = [];
-
 				for (let i = 0; i < this.count; i++) {
 					const index = i * this.data.stride + this.offset;
-
 					for (let j = 0; j < this.itemSize; j++) {
 						array.push(this.data.array[index + j]);
 					}
-				} // de-interleave data and save it as an ordinary buffer attribute for now
+				}
 
+				// de-interleave data and save it as an ordinary buffer attribute for now
 
 				return {
 					itemSize: this.itemSize,
@@ -22060,14 +19568,13 @@
 				};
 			} else {
 				// save as true interleaved attribute
+
 				if (data.interleavedBuffers === undefined) {
 					data.interleavedBuffers = {};
 				}
-
 				if (data.interleavedBuffers[this.data.uuid] === undefined) {
 					data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
 				}
-
 				return {
 					isInterleavedBufferAttribute: true,
 					itemSize: this.itemSize,
@@ -22077,7 +19584,6 @@
 				};
 			}
 		}
-
 	}
 
 	class SpriteMaterial extends Material {
@@ -22094,7 +19600,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.color.copy(source.color);
@@ -22105,110 +19610,74 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	let _geometry;
-
 	const _intersectPoint = /*@__PURE__*/new Vector3();
-
 	const _worldScale = /*@__PURE__*/new Vector3();
-
 	const _mvPosition = /*@__PURE__*/new Vector3();
-
 	const _alignedPosition = /*@__PURE__*/new Vector2();
-
 	const _rotatedPosition = /*@__PURE__*/new Vector2();
-
 	const _viewWorldMatrix = /*@__PURE__*/new Matrix4();
-
 	const _vA = /*@__PURE__*/new Vector3();
-
 	const _vB = /*@__PURE__*/new Vector3();
-
 	const _vC = /*@__PURE__*/new Vector3();
-
 	const _uvA = /*@__PURE__*/new Vector2();
-
 	const _uvB = /*@__PURE__*/new Vector2();
-
 	const _uvC = /*@__PURE__*/new Vector2();
-
 	class Sprite extends Object3D {
 		constructor(material) {
 			super();
 			this.isSprite = true;
 			this.type = 'Sprite';
-
 			if (_geometry === undefined) {
 				_geometry = new BufferGeometry();
 				const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);
 				const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
-
 				_geometry.setIndex([0, 1, 2, 0, 2, 3]);
-
 				_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
-
 				_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
 			}
-
 			this.geometry = _geometry;
 			this.material = material !== undefined ? material : new SpriteMaterial();
 			this.center = new Vector2(0.5, 0.5);
 		}
-
 		raycast(raycaster, intersects) {
 			if (raycaster.camera === null) {
 				console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
 			}
-
 			_worldScale.setFromMatrixScale(this.matrixWorld);
-
 			_viewWorldMatrix.copy(raycaster.camera.matrixWorld);
-
 			this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
-
 			_mvPosition.setFromMatrixPosition(this.modelViewMatrix);
-
 			if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
 				_worldScale.multiplyScalar(-_mvPosition.z);
 			}
-
 			const rotation = this.material.rotation;
 			let sin, cos;
-
 			if (rotation !== 0) {
 				cos = Math.cos(rotation);
 				sin = Math.sin(rotation);
 			}
-
 			const center = this.center;
 			transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
 			transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
 			transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
-
 			_uvA.set(0, 0);
-
 			_uvB.set(1, 0);
+			_uvC.set(1, 1);
 
-			_uvC.set(1, 1); // check first triangle
-
-
+			// check first triangle
 			let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);
-
 			if (intersect === null) {
 				// check second triangle
 				transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
-
 				_uvB.set(0, 1);
-
 				intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);
-
 				if (intersect === null) {
 					return;
 				}
 			}
-
 			const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
 			if (distance < raycaster.near || distance > raycaster.far) return;
 			intersects.push({
@@ -22219,39 +19688,34 @@
 				object: this
 			});
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			if (source.center !== undefined) this.center.copy(source.center);
 			this.material = source.material;
 			return this;
 		}
-
 	}
-
 	function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
 		// compute position in camera space
-		_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero
-
+		_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
 
+		// to check if rotation is not zero
 		if (sin !== undefined) {
 			_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
 			_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
 		} else {
 			_rotatedPosition.copy(_alignedPosition);
 		}
-
 		vertexPosition.copy(mvPosition);
 		vertexPosition.x += _rotatedPosition.x;
-		vertexPosition.y += _rotatedPosition.y; // transform to world space
+		vertexPosition.y += _rotatedPosition.y;
 
+		// transform to world space
 		vertexPosition.applyMatrix4(_viewWorldMatrix);
 	}
 
 	const _v1$2 = /*@__PURE__*/new Vector3();
-
 	const _v2$1 = /*@__PURE__*/new Vector3();
-
 	class LOD extends Object3D {
 		constructor() {
 			super();
@@ -22268,31 +19732,25 @@
 			});
 			this.autoUpdate = true;
 		}
-
 		copy(source) {
 			super.copy(source, false);
 			const levels = source.levels;
-
 			for (let i = 0, l = levels.length; i < l; i++) {
 				const level = levels[i];
 				this.addLevel(level.object.clone(), level.distance, level.hysteresis);
 			}
-
 			this.autoUpdate = source.autoUpdate;
 			return this;
 		}
-
 		addLevel(object, distance = 0, hysteresis = 0) {
 			distance = Math.abs(distance);
 			const levels = this.levels;
 			let l;
-
 			for (l = 0; l < levels.length; l++) {
 				if (distance < levels[l].distance) {
 					break;
 				}
 			}
-
 			levels.splice(l, 0, {
 				distance: distance,
 				hysteresis: hysteresis,
@@ -22301,65 +19759,47 @@
 			this.add(object);
 			return this;
 		}
-
 		getCurrentLevel() {
 			return this._currentLevel;
 		}
-
 		getObjectForDistance(distance) {
 			const levels = this.levels;
-
 			if (levels.length > 0) {
 				let i, l;
-
 				for (i = 1, l = levels.length; i < l; i++) {
 					let levelDistance = levels[i].distance;
-
 					if (levels[i].object.visible) {
 						levelDistance -= levelDistance * levels[i].hysteresis;
 					}
-
 					if (distance < levelDistance) {
 						break;
 					}
 				}
-
 				return levels[i - 1].object;
 			}
-
 			return null;
 		}
-
 		raycast(raycaster, intersects) {
 			const levels = this.levels;
-
 			if (levels.length > 0) {
 				_v1$2.setFromMatrixPosition(this.matrixWorld);
-
 				const distance = raycaster.ray.origin.distanceTo(_v1$2);
 				this.getObjectForDistance(distance).raycast(raycaster, intersects);
 			}
 		}
-
 		update(camera) {
 			const levels = this.levels;
-
 			if (levels.length > 1) {
 				_v1$2.setFromMatrixPosition(camera.matrixWorld);
-
 				_v2$1.setFromMatrixPosition(this.matrixWorld);
-
 				const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;
 				levels[0].object.visible = true;
 				let i, l;
-
 				for (i = 1, l = levels.length; i < l; i++) {
 					let levelDistance = levels[i].distance;
-
 					if (levels[i].object.visible) {
 						levelDistance -= levelDistance * levels[i].hysteresis;
 					}
-
 					if (distance >= levelDistance) {
 						levels[i - 1].object.visible = false;
 						levels[i].object.visible = true;
@@ -22367,21 +19807,17 @@
 						break;
 					}
 				}
-
 				this._currentLevel = i - 1;
-
 				for (; i < l; i++) {
 					levels[i].object.visible = false;
 				}
 			}
 		}
-
 		toJSON(meta) {
 			const data = super.toJSON(meta);
 			if (this.autoUpdate === false) data.object.autoUpdate = false;
 			data.object.levels = [];
 			const levels = this.levels;
-
 			for (let i = 0, l = levels.length; i < l; i++) {
 				const level = levels[i];
 				data.object.levels.push({
@@ -22390,22 +19826,15 @@
 					hysteresis: level.hysteresis
 				});
 			}
-
 			return data;
 		}
-
 	}
 
 	const _basePosition = /*@__PURE__*/new Vector3();
-
 	const _skinIndex = /*@__PURE__*/new Vector4();
-
 	const _skinWeight = /*@__PURE__*/new Vector4();
-
 	const _vector$5 = /*@__PURE__*/new Vector3();
-
 	const _matrix = /*@__PURE__*/new Matrix4();
-
 	class SkinnedMesh extends Mesh {
 		constructor(geometry, material) {
 			super(geometry, material);
@@ -22415,7 +19844,6 @@
 			this.bindMatrix = new Matrix4();
 			this.bindMatrixInverse = new Matrix4();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.bindMode = source.bindMode;
@@ -22424,32 +19852,25 @@
 			this.skeleton = source.skeleton;
 			return this;
 		}
-
 		bind(skeleton, bindMatrix) {
 			this.skeleton = skeleton;
-
 			if (bindMatrix === undefined) {
 				this.updateMatrixWorld(true);
 				this.skeleton.calculateInverses();
 				bindMatrix = this.matrixWorld;
 			}
-
 			this.bindMatrix.copy(bindMatrix);
 			this.bindMatrixInverse.copy(bindMatrix).invert();
 		}
-
 		pose() {
 			this.skeleton.pose();
 		}
-
 		normalizeSkinWeights() {
 			const vector = new Vector4();
 			const skinWeight = this.geometry.attributes.skinWeight;
-
 			for (let i = 0, l = skinWeight.count; i < l; i++) {
 				vector.fromBufferAttribute(skinWeight, i);
 				const scale = 1.0 / vector.manhattanLength();
-
 				if (scale !== Infinity) {
 					vector.multiplyScalar(scale);
 				} else {
@@ -22459,10 +19880,8 @@
 				skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
 			}
 		}
-
 		updateMatrixWorld(force) {
 			super.updateMatrixWorld(force);
-
 			if (this.bindMode === 'attached') {
 				this.bindMatrixInverse.copy(this.matrixWorld).invert();
 			} else if (this.bindMode === 'detached') {
@@ -22471,34 +19890,23 @@
 				console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
 			}
 		}
-
 		boneTransform(index, target) {
 			const skeleton = this.skeleton;
 			const geometry = this.geometry;
-
 			_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
-
 			_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
-
 			_basePosition.copy(target).applyMatrix4(this.bindMatrix);
-
 			target.set(0, 0, 0);
-
 			for (let i = 0; i < 4; i++) {
 				const weight = _skinWeight.getComponent(i);
-
 				if (weight !== 0) {
 					const boneIndex = _skinIndex.getComponent(i);
-
 					_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
-
 					target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);
 				}
 			}
-
 			return target.applyMatrix4(this.bindMatrixInverse);
 		}
-
 	}
 
 	class Bone extends Object3D {
@@ -22507,7 +19915,6 @@
 			this.isBone = true;
 			this.type = 'Bone';
 		}
-
 	}
 
 	class DataTexture extends Texture {
@@ -22523,13 +19930,10 @@
 			this.flipY = false;
 			this.unpackAlignment = 1;
 		}
-
 	}
 
 	const _offsetMatrix = /*@__PURE__*/new Matrix4();
-
 	const _identityMatrix = /*@__PURE__*/new Matrix4();
-
 	class Skeleton {
 		constructor(bones = [], boneInverses = []) {
 			this.uuid = generateUUID();
@@ -22541,55 +19945,51 @@
 			this.frame = -1;
 			this.init();
 		}
-
 		init() {
 			const bones = this.bones;
 			const boneInverses = this.boneInverses;
-			this.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary
+			this.boneMatrices = new Float32Array(bones.length * 16);
+
+			// calculate inverse bone matrices if necessary
 
 			if (boneInverses.length === 0) {
 				this.calculateInverses();
 			} else {
 				// handle special case
+
 				if (bones.length !== boneInverses.length) {
 					console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');
 					this.boneInverses = [];
-
 					for (let i = 0, il = this.bones.length; i < il; i++) {
 						this.boneInverses.push(new Matrix4());
 					}
 				}
 			}
 		}
-
 		calculateInverses() {
 			this.boneInverses.length = 0;
-
 			for (let i = 0, il = this.bones.length; i < il; i++) {
 				const inverse = new Matrix4();
-
 				if (this.bones[i]) {
 					inverse.copy(this.bones[i].matrixWorld).invert();
 				}
-
 				this.boneInverses.push(inverse);
 			}
 		}
-
 		pose() {
 			// recover the bind-time world matrices
+
 			for (let i = 0, il = this.bones.length; i < il; i++) {
 				const bone = this.bones[i];
-
 				if (bone) {
 					bone.matrixWorld.copy(this.boneInverses[i]).invert();
 				}
-			} // compute the local matrices, positions, rotations and scales
+			}
 
+			// compute the local matrices, positions, rotations and scales
 
 			for (let i = 0, il = this.bones.length; i < il; i++) {
 				const bone = this.bones[i];
-
 				if (bone) {
 					if (bone.parent && bone.parent.isBone) {
 						bone.matrix.copy(bone.parent.matrixWorld).invert();
@@ -22597,36 +19997,32 @@
 					} else {
 						bone.matrix.copy(bone.matrixWorld);
 					}
-
 					bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
 				}
 			}
 		}
-
 		update() {
 			const bones = this.bones;
 			const boneInverses = this.boneInverses;
 			const boneMatrices = this.boneMatrices;
-			const boneTexture = this.boneTexture; // flatten bone matrices to array
+			const boneTexture = this.boneTexture;
+
+			// flatten bone matrices to array
 
 			for (let i = 0, il = bones.length; i < il; i++) {
 				// compute the offset between the current and the original transform
-				const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
 
+				const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
 				_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
-
 				_offsetMatrix.toArray(boneMatrices, i * 16);
 			}
-
 			if (boneTexture !== null) {
 				boneTexture.needsUpdate = true;
 			}
 		}
-
 		clone() {
 			return new Skeleton(this.bones, this.boneInverses);
 		}
-
 		computeBoneTexture() {
 			// layout (1 matrix = 4 pixels)
 			//			RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
@@ -22634,12 +20030,11 @@
 			//			 16x16 pixel texture max	 64 bones * 4 pixels = (16 * 16)
 			//			 32x32 pixel texture max	256 bones * 4 pixels = (32 * 32)
 			//			 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
-			let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
 
+			let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
 			size = ceilPowerOfTwo(size);
 			size = Math.max(size, 4);
 			const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel
-
 			boneMatrices.set(this.boneMatrices); // copy current values
 
 			const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
@@ -22649,46 +20044,36 @@
 			this.boneTextureSize = size;
 			return this;
 		}
-
 		getBoneByName(name) {
 			for (let i = 0, il = this.bones.length; i < il; i++) {
 				const bone = this.bones[i];
-
 				if (bone.name === name) {
 					return bone;
 				}
 			}
-
 			return undefined;
 		}
-
 		dispose() {
 			if (this.boneTexture !== null) {
 				this.boneTexture.dispose();
 				this.boneTexture = null;
 			}
 		}
-
 		fromJSON(json, bones) {
 			this.uuid = json.uuid;
-
 			for (let i = 0, l = json.bones.length; i < l; i++) {
 				const uuid = json.bones[i];
 				let bone = bones[uuid];
-
 				if (bone === undefined) {
 					console.warn('THREE.Skeleton: No bone found with UUID:', uuid);
 					bone = new Bone();
 				}
-
 				this.bones.push(bone);
 				this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
 			}
-
 			this.init();
 			return this;
 		}
-
 		toJSON() {
 			const data = {
 				metadata: {
@@ -22702,17 +20087,14 @@
 			data.uuid = this.uuid;
 			const bones = this.bones;
 			const boneInverses = this.boneInverses;
-
 			for (let i = 0, l = bones.length; i < l; i++) {
 				const bone = bones[i];
 				data.bones.push(bone.uuid);
 				const boneInverse = boneInverses[i];
 				data.boneInverses.push(boneInverse.toArray());
 			}
-
 			return data;
 		}
-
 	}
 
 	class InstancedBufferAttribute extends BufferAttribute {
@@ -22721,32 +20103,24 @@
 			this.isInstancedBufferAttribute = true;
 			this.meshPerAttribute = meshPerAttribute;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.meshPerAttribute = source.meshPerAttribute;
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.meshPerAttribute = this.meshPerAttribute;
 			data.isInstancedBufferAttribute = true;
 			return data;
 		}
-
 	}
 
 	const _instanceLocalMatrix = /*@__PURE__*/new Matrix4();
-
 	const _instanceWorldMatrix = /*@__PURE__*/new Matrix4();
-
 	const _instanceIntersects = [];
-
 	const _identity = /*@__PURE__*/new Matrix4();
-
 	const _mesh = /*@__PURE__*/new Mesh();
-
 	class InstancedMesh extends Mesh {
 		constructor(geometry, material, count) {
 			super(geometry, material);
@@ -22755,12 +20129,10 @@
 			this.instanceColor = null;
 			this.count = count;
 			this.frustumCulled = false;
-
 			for (let i = 0; i < count; i++) {
 				this.setMatrixAt(i, _identity);
 			}
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.instanceMatrix.copy(source.instanceMatrix);
@@ -22768,33 +20140,30 @@
 			this.count = source.count;
 			return this;
 		}
-
 		getColorAt(index, color) {
 			color.fromArray(this.instanceColor.array, index * 3);
 		}
-
 		getMatrixAt(index, matrix) {
 			matrix.fromArray(this.instanceMatrix.array, index * 16);
 		}
-
 		raycast(raycaster, intersects) {
 			const matrixWorld = this.matrixWorld;
 			const raycastTimes = this.count;
 			_mesh.geometry = this.geometry;
 			_mesh.material = this.material;
 			if (_mesh.material === undefined) return;
-
 			for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
 				// calculate the world matrix for each instance
-				this.getMatrixAt(instanceId, _instanceLocalMatrix);
 
-				_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance
+				this.getMatrixAt(instanceId, _instanceLocalMatrix);
+				_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
 
+				// the mesh represents this single instance
 
 				_mesh.matrixWorld = _instanceWorldMatrix;
+				_mesh.raycast(raycaster, _instanceIntersects);
 
-				_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast
-
+				// process the result of raycast
 
 				for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
 					const intersect = _instanceIntersects[i];
@@ -22802,31 +20171,24 @@
 					intersect.object = this;
 					intersects.push(intersect);
 				}
-
 				_instanceIntersects.length = 0;
 			}
 		}
-
 		setColorAt(index, color) {
 			if (this.instanceColor === null) {
 				this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
 			}
-
 			color.toArray(this.instanceColor.array, index * 3);
 		}
-
 		setMatrixAt(index, matrix) {
 			matrix.toArray(this.instanceMatrix.array, index * 16);
 		}
-
 		updateMorphTargets() {}
-
 		dispose() {
 			this.dispatchEvent({
 				type: 'dispose'
 			});
 		}
-
 	}
 
 	class LineBasicMaterial extends Material {
@@ -22841,7 +20203,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.color.copy(source.color);
@@ -22851,19 +20212,13 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	const _start$1 = /*@__PURE__*/new Vector3();
-
 	const _end$1 = /*@__PURE__*/new Vector3();
-
 	const _inverseMatrix$1 = /*@__PURE__*/new Matrix4();
-
 	const _ray$1 = /*@__PURE__*/new Ray();
-
 	const _sphere$1 = /*@__PURE__*/new Sphere();
-
 	class Line extends Object3D {
 		constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
 			super();
@@ -22873,57 +20228,50 @@
 			this.material = material;
 			this.updateMorphTargets();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.material = source.material;
 			this.geometry = source.geometry;
 			return this;
 		}
-
 		computeLineDistances() {
-			const geometry = this.geometry; // we assume non-indexed geometry
+			const geometry = this.geometry;
+
+			// we assume non-indexed geometry
 
 			if (geometry.index === null) {
 				const positionAttribute = geometry.attributes.position;
 				const lineDistances = [0];
-
 				for (let i = 1, l = positionAttribute.count; i < l; i++) {
 					_start$1.fromBufferAttribute(positionAttribute, i - 1);
-
 					_end$1.fromBufferAttribute(positionAttribute, i);
-
 					lineDistances[i] = lineDistances[i - 1];
 					lineDistances[i] += _start$1.distanceTo(_end$1);
 				}
-
 				geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
 			} else {
 				console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
 			}
-
 			return this;
 		}
-
 		raycast(raycaster, intersects) {
 			const geometry = this.geometry;
 			const matrixWorld = this.matrixWorld;
 			const threshold = raycaster.params.Line.threshold;
-			const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray
+			const drawRange = geometry.drawRange;
 
-			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
+			// Checking boundingSphere distance to ray
 
+			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
 			_sphere$1.copy(geometry.boundingSphere);
-
 			_sphere$1.applyMatrix4(matrixWorld);
-
 			_sphere$1.radius += threshold;
-			if (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //
+			if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;
 
-			_inverseMatrix$1.copy(matrixWorld).invert();
+			//
 
+			_inverseMatrix$1.copy(matrixWorld).invert();
 			_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
-
 			const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
 			const localThresholdSq = localThreshold * localThreshold;
 			const vStart = new Vector3();
@@ -22934,19 +20282,15 @@
 			const index = geometry.index;
 			const attributes = geometry.attributes;
 			const positionAttribute = attributes.position;
-
 			if (index !== null) {
 				const start = Math.max(0, drawRange.start);
 				const end = Math.min(index.count, drawRange.start + drawRange.count);
-
 				for (let i = start, l = end - 1; i < l; i += step) {
 					const a = index.getX(i);
 					const b = index.getX(i + 1);
 					vStart.fromBufferAttribute(positionAttribute, a);
 					vEnd.fromBufferAttribute(positionAttribute, b);
-
 					const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
-
 					if (distSq > localThresholdSq) continue;
 					interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
 
@@ -22966,13 +20310,10 @@
 			} else {
 				const start = Math.max(0, drawRange.start);
 				const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
-
 				for (let i = start, l = end - 1; i < l; i += step) {
 					vStart.fromBufferAttribute(positionAttribute, i);
 					vEnd.fromBufferAttribute(positionAttribute, i + 1);
-
 					const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
-
 					if (distSq > localThresholdSq) continue;
 					interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
 
@@ -22991,19 +20332,15 @@
 				}
 			}
 		}
-
 		updateMorphTargets() {
 			const geometry = this.geometry;
 			const morphAttributes = geometry.morphAttributes;
 			const keys = Object.keys(morphAttributes);
-
 			if (keys.length > 0) {
 				const morphAttribute = morphAttributes[keys[0]];
-
 				if (morphAttribute !== undefined) {
 					this.morphTargetInfluences = [];
 					this.morphTargetDictionary = {};
-
 					for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
 						const name = morphAttribute[m].name || String(m);
 						this.morphTargetInfluences.push(0);
@@ -23012,44 +20349,36 @@
 				}
 			}
 		}
-
 	}
 
 	const _start = /*@__PURE__*/new Vector3();
-
 	const _end = /*@__PURE__*/new Vector3();
-
 	class LineSegments extends Line {
 		constructor(geometry, material) {
 			super(geometry, material);
 			this.isLineSegments = true;
 			this.type = 'LineSegments';
 		}
-
 		computeLineDistances() {
-			const geometry = this.geometry; // we assume non-indexed geometry
+			const geometry = this.geometry;
+
+			// we assume non-indexed geometry
 
 			if (geometry.index === null) {
 				const positionAttribute = geometry.attributes.position;
 				const lineDistances = [];
-
 				for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
 					_start.fromBufferAttribute(positionAttribute, i);
-
 					_end.fromBufferAttribute(positionAttribute, i + 1);
-
 					lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
 					lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);
 				}
-
 				geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
 			} else {
 				console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
 			}
-
 			return this;
 		}
-
 	}
 
 	class LineLoop extends Line {
@@ -23058,7 +20387,6 @@
 			this.isLineLoop = true;
 			this.type = 'LineLoop';
 		}
-
 	}
 
 	class PointsMaterial extends Material {
@@ -23074,7 +20402,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.color.copy(source.color);
@@ -23085,17 +20412,12 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	const _inverseMatrix = /*@__PURE__*/new Matrix4();
-
 	const _ray = /*@__PURE__*/new Ray();
-
 	const _sphere = /*@__PURE__*/new Sphere();
-
 	const _position$2 = /*@__PURE__*/new Vector3();
-
 	class Points extends Object3D {
 		constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {
 			super();
@@ -23105,74 +20427,61 @@
 			this.material = material;
 			this.updateMorphTargets();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.material = source.material;
 			this.geometry = source.geometry;
 			return this;
 		}
-
 		raycast(raycaster, intersects) {
 			const geometry = this.geometry;
 			const matrixWorld = this.matrixWorld;
 			const threshold = raycaster.params.Points.threshold;
-			const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray
+			const drawRange = geometry.drawRange;
 
-			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
+			// Checking boundingSphere distance to ray
 
+			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
 			_sphere.copy(geometry.boundingSphere);
-
 			_sphere.applyMatrix4(matrixWorld);
-
 			_sphere.radius += threshold;
-			if (raycaster.ray.intersectsSphere(_sphere) === false) return; //
+			if (raycaster.ray.intersectsSphere(_sphere) === false) return;
 
-			_inverseMatrix.copy(matrixWorld).invert();
+			//
 
+			_inverseMatrix.copy(matrixWorld).invert();
 			_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
-
 			const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
 			const localThresholdSq = localThreshold * localThreshold;
 			const index = geometry.index;
 			const attributes = geometry.attributes;
 			const positionAttribute = attributes.position;
-
 			if (index !== null) {
 				const start = Math.max(0, drawRange.start);
 				const end = Math.min(index.count, drawRange.start + drawRange.count);
-
 				for (let i = start, il = end; i < il; i++) {
 					const a = index.getX(i);
-
 					_position$2.fromBufferAttribute(positionAttribute, a);
-
 					testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
 				}
 			} else {
 				const start = Math.max(0, drawRange.start);
 				const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
-
 				for (let i = start, l = end; i < l; i++) {
 					_position$2.fromBufferAttribute(positionAttribute, i);
-
 					testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);
 				}
 			}
 		}
-
 		updateMorphTargets() {
 			const geometry = this.geometry;
 			const morphAttributes = geometry.morphAttributes;
 			const keys = Object.keys(morphAttributes);
-
 			if (keys.length > 0) {
 				const morphAttribute = morphAttributes[keys[0]];
-
 				if (morphAttribute !== undefined) {
 					this.morphTargetInfluences = [];
 					this.morphTargetDictionary = {};
-
 					for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
 						const name = morphAttribute[m].name || String(m);
 						this.morphTargetInfluences.push(0);
@@ -23181,17 +20490,12 @@
 				}
 			}
 		}
-
 	}
-
 	function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
 		const rayPointDistanceSq = _ray.distanceSqToPoint(point);
-
 		if (rayPointDistanceSq < localThresholdSq) {
 			const intersectPoint = new Vector3();
-
 			_ray.closestPointToPoint(point, intersectPoint);
-
 			intersectPoint.applyMatrix4(matrixWorld);
 			const distance = raycaster.ray.origin.distanceTo(intersectPoint);
 			if (distance < raycaster.near || distance > raycaster.far) return;
@@ -23214,30 +20518,24 @@
 			this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
 			this.generateMipmaps = false;
 			const scope = this;
-
 			function updateVideo() {
 				scope.needsUpdate = true;
 				video.requestVideoFrameCallback(updateVideo);
 			}
-
 			if ('requestVideoFrameCallback' in video) {
 				video.requestVideoFrameCallback(updateVideo);
 			}
 		}
-
 		clone() {
 			return new this.constructor(this.image).copy(this);
 		}
-
 		update() {
 			const video = this.image;
 			const hasVideoFrameCallback = ('requestVideoFrameCallback' in video);
-
 			if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
 				this.needsUpdate = true;
 			}
 		}
-
 	}
 
 	class FramebufferTexture extends Texture {
@@ -23253,7 +20551,6 @@
 			this.generateMipmaps = false;
 			this.needsUpdate = true;
 		}
-
 	}
 
 	class CompressedTexture extends Texture {
@@ -23264,15 +20561,18 @@
 				width: width,
 				height: height
 			};
-			this.mipmaps = mipmaps; // no flipping for cube textures
+			this.mipmaps = mipmaps;
+
+			// no flipping for cube textures
 			// (also flipping doesn't work for compressed textures )
 
-			this.flipY = false; // can't generate mipmaps for compressed textures
+			this.flipY = false;
+
+			// can't generate mipmaps for compressed textures
 			// mips must be embedded in DDS files
 
 			this.generateMipmaps = false;
 		}
-
 	}
 
 	class CompressedArrayTexture extends CompressedTexture {
@@ -23282,7 +20582,6 @@
 			this.image.depth = depth;
 			this.wrapR = ClampToEdgeWrapping;
 		}
-
 	}
 
 	class CanvasTexture extends Texture {
@@ -23291,7 +20590,6 @@
 			this.isCanvasTexture = true;
 			this.needsUpdate = true;
 		}
-
 	}
 
 	/**
@@ -23328,70 +20626,69 @@
 		constructor() {
 			this.type = 'Curve';
 			this.arcLengthDivisions = 200;
-		} // Virtual base class method to overwrite and implement in subclasses
-		//	- t [0 .. 1]
+		}
 
+		// Virtual base class method to overwrite and implement in subclasses
+		//	- t [0 .. 1]
 
 		getPoint() {
 			console.warn('THREE.Curve: .getPoint() not implemented.');
 			return null;
-		} // Get point at relative position in curve according to arc length
-		// - u [0 .. 1]
+		}
 
+		// Get point at relative position in curve according to arc length
+		// - u [0 .. 1]
 
 		getPointAt(u, optionalTarget) {
 			const t = this.getUtoTmapping(u);
 			return this.getPoint(t, optionalTarget);
-		} // Get sequence of points using getPoint( t )
+		}
 
+		// Get sequence of points using getPoint( t )
 
 		getPoints(divisions = 5) {
 			const points = [];
-
 			for (let d = 0; d <= divisions; d++) {
 				points.push(this.getPoint(d / divisions));
 			}
-
 			return points;
-		} // Get sequence of points using getPointAt( u )
+		}
 
+		// Get sequence of points using getPointAt( u )
 
 		getSpacedPoints(divisions = 5) {
 			const points = [];
-
 			for (let d = 0; d <= divisions; d++) {
 				points.push(this.getPointAt(d / divisions));
 			}
-
 			return points;
-		} // Get total curve arc length
+		}
 
+		// Get total curve arc length
 
 		getLength() {
 			const lengths = this.getLengths();
 			return lengths[lengths.length - 1];
-		} // Get list of cumulative segment lengths
+		}
 
+		// Get list of cumulative segment lengths
 
 		getLengths(divisions = this.arcLengthDivisions) {
 			if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
 				return this.cacheArcLengths;
 			}
-
 			this.needsUpdate = false;
 			const cache = [];
 			let current,
-					last = this.getPoint(0);
+				last = this.getPoint(0);
 			let sum = 0;
 			cache.push(0);
-
 			for (let p = 1; p <= divisions; p++) {
 				current = this.getPoint(p / divisions);
 				sum += current.distanceTo(last);
 				cache.push(sum);
 				last = current;
 			}
-
 			this.cacheArcLengths = cache;
 			return cache; // { sums: cache, sum: sum }; Sum is in the last element.
 		}
@@ -23399,8 +20696,9 @@
 		updateArcLengths() {
 			this.needsUpdate = true;
 			this.getLengths();
-		} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
+		}
 
+		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
 
 		getUtoTmapping(u, distance) {
 			const arcLengths = this.getLengths();
@@ -23412,53 +20710,61 @@
 				targetArcLength = distance;
 			} else {
 				targetArcLength = u * arcLengths[il - 1];
-			} // binary search for the index with largest value smaller than target u distance
+			}
 
+			// binary search for the index with largest value smaller than target u distance
 
 			let low = 0,
-					high = il - 1,
-					comparison;
-
+				high = il - 1,
+				comparison;
 			while (low <= high) {
 				i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
 
 				comparison = arcLengths[i] - targetArcLength;
-
 				if (comparison < 0) {
 					low = i + 1;
 				} else if (comparison > 0) {
 					high = i - 1;
 				} else {
 					high = i;
-					break; // DONE
+					break;
+
+					// DONE
 				}
 			}
 
 			i = high;
-
 			if (arcLengths[i] === targetArcLength) {
 				return i / (il - 1);
-			} // we could get finer grain at lengths, or use simple interpolation between two points
+			}
 
+			// we could get finer grain at lengths, or use simple interpolation between two points
 
 			const lengthBefore = arcLengths[i];
 			const lengthAfter = arcLengths[i + 1];
-			const segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points
+			const segmentLength = lengthAfter - lengthBefore;
+
+			// determine where we are between the 'before' and 'after' points
 
-			const segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t
+			const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
+
+			// add that fractional amount to t
 
 			const t = (i + segmentFraction) / (il - 1);
 			return t;
-		} // Returns a unit vector tangent at t
+		}
+
+		// Returns a unit vector tangent at t
 		// In case any sub curve does not implement its tangent derivation,
 		// 2 points a small delta apart will be used to find its gradient
 		// which seems to give a reasonable approximation
 
-
 		getTangent(t, optionalTarget) {
 			const delta = 0.0001;
 			let t1 = t - delta;
-			let t2 = t + delta; // Capping in case of danger
+			let t2 = t + delta;
+
+			// Capping in case of danger
 
 			if (t1 < 0) t1 = 0;
 			if (t2 > 1) t2 = 1;
@@ -23468,27 +20774,29 @@
 			tangent.copy(pt2).sub(pt1).normalize();
 			return tangent;
 		}
-
 		getTangentAt(u, optionalTarget) {
 			const t = this.getUtoTmapping(u);
 			return this.getTangent(t, optionalTarget);
 		}
-
 		computeFrenetFrames(segments, closed) {
 			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
+
 			const normal = new Vector3();
 			const tangents = [];
 			const normals = [];
 			const binormals = [];
 			const vec = new Vector3();
-			const mat = new Matrix4(); // compute the tangent vectors for each segment on the curve
+			const mat = new Matrix4();
+
+			// compute the tangent vectors for each segment on the curve
 
 			for (let i = 0; i <= segments; i++) {
 				const u = i / segments;
 				tangents[i] = this.getTangentAt(u, new Vector3());
-			} // select an initial normal vector perpendicular to the first tangent vector,
-			// and in the direction of the minimum tangent xyz component
+			}
 
+			// select an initial normal vector perpendicular to the first tangent vector,
+			// and in the direction of the minimum tangent xyz component
 
 			normals[0] = new Vector3();
 			binormals[0] = new Vector3();
@@ -23496,72 +20804,63 @@
 			const tx = Math.abs(tangents[0].x);
 			const ty = Math.abs(tangents[0].y);
 			const tz = Math.abs(tangents[0].z);
-
 			if (tx <= min) {
 				min = tx;
 				normal.set(1, 0, 0);
 			}
-
 			if (ty <= min) {
 				min = ty;
 				normal.set(0, 1, 0);
 			}
-
 			if (tz <= min) {
 				normal.set(0, 0, 1);
 			}
-
 			vec.crossVectors(tangents[0], normal).normalize();
 			normals[0].crossVectors(tangents[0], vec);
-			binormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve
+			binormals[0].crossVectors(tangents[0], normals[0]);
+
+			// compute the slowly-varying normal and binormal vectors for each segment on the curve
 
 			for (let i = 1; i <= segments; i++) {
 				normals[i] = normals[i - 1].clone();
 				binormals[i] = binormals[i - 1].clone();
 				vec.crossVectors(tangents[i - 1], tangents[i]);
-
 				if (vec.length() > Number.EPSILON) {
 					vec.normalize();
 					const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors
 
 					normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
 				}
-
 				binormals[i].crossVectors(tangents[i], normals[i]);
-			} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
+			}
 
+			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
 
 			if (closed === true) {
 				let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
 				theta /= segments;
-
 				if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
 					theta = -theta;
 				}
-
 				for (let i = 1; i <= segments; i++) {
 					// twist a little...
 					normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
 					binormals[i].crossVectors(tangents[i], normals[i]);
 				}
 			}
-
 			return {
 				tangents: tangents,
 				normals: normals,
 				binormals: binormals
 			};
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		copy(source) {
 			this.arcLengthDivisions = source.arcLengthDivisions;
 			return this;
 		}
-
 		toJSON() {
 			const data = {
 				metadata: {
@@ -23574,12 +20873,10 @@
 			data.type = this.type;
 			return data;
 		}
-
 		fromJSON(json) {
 			this.arcLengthDivisions = json.arcLengthDivisions;
 			return this;
 		}
-
 	}
 
 	class EllipseCurve extends Curve {
@@ -23596,17 +20893,15 @@
 			this.aClockwise = aClockwise;
 			this.aRotation = aRotation;
 		}
-
 		getPoint(t, optionalTarget) {
 			const point = optionalTarget || new Vector2();
 			const twoPi = Math.PI * 2;
 			let deltaAngle = this.aEndAngle - this.aStartAngle;
-			const samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI
+			const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
 
+			// ensures that deltaAngle is 0 .. 2 PI
 			while (deltaAngle < 0) deltaAngle += twoPi;
-
 			while (deltaAngle > twoPi) deltaAngle -= twoPi;
-
 			if (deltaAngle < Number.EPSILON) {
 				if (samePoints) {
 					deltaAngle = 0;
@@ -23614,7 +20909,6 @@
 					deltaAngle = twoPi;
 				}
 			}
-
 			if (this.aClockwise === true && !samePoints) {
 				if (deltaAngle === twoPi) {
 					deltaAngle = -twoPi;
@@ -23622,24 +20916,21 @@
 					deltaAngle = deltaAngle - twoPi;
 				}
 			}
-
 			const angle = this.aStartAngle + t * deltaAngle;
 			let x = this.aX + this.xRadius * Math.cos(angle);
 			let y = this.aY + this.yRadius * Math.sin(angle);
-
 			if (this.aRotation !== 0) {
 				const cos = Math.cos(this.aRotation);
 				const sin = Math.sin(this.aRotation);
 				const tx = x - this.aX;
-				const ty = y - this.aY; // Rotate the point about the center of the ellipse.
+				const ty = y - this.aY;
 
+				// Rotate the point about the center of the ellipse.
 				x = tx * cos - ty * sin + this.aX;
 				y = tx * sin + ty * cos + this.aY;
 			}
-
 			return point.set(x, y);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.aX = source.aX;
@@ -23652,7 +20943,6 @@
 			this.aRotation = source.aRotation;
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.aX = this.aX;
@@ -23665,7 +20955,6 @@
 			data.aRotation = this.aRotation;
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.aX = json.aX;
@@ -23678,7 +20967,6 @@
 			this.aRotation = json.aRotation;
 			return this;
 		}
-
 	}
 
 	class ArcCurve extends EllipseCurve {
@@ -23687,7 +20975,6 @@
 			this.isArcCurve = true;
 			this.type = 'ArcCurve';
 		}
-
 	}
 
 	/**
@@ -23711,9 +20998,10 @@
 
 	function CubicPoly() {
 		let c0 = 0,
-				c1 = 0,
-				c2 = 0,
-				c3 = 0;
+			c1 = 0,
+			c2 = 0,
+			c3 = 0;
+
 		/*
 		 * Compute coefficients for a cubic polynomial
 		 *	 p(s) = c0 + c1*s + c2*s^2 + c3*s^3
@@ -23722,14 +21010,12 @@
 		 *	and
 		 *	 p'(0) = t0, p'(1) = t1.
 		 */
-
 		function init(x0, x1, t0, t1) {
 			c0 = x0;
 			c1 = t0;
 			c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
 			c3 = 2 * x0 - 2 * x1 + t0 + t1;
 		}
-
 		return {
 			initCatmullRom: function (x0, x1, x2, x3, tension) {
 				init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
@@ -23737,8 +21023,9 @@
 			initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {
 				// compute tangents when parameterized in [t1,t2]
 				let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
-				let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]
+				let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
 
+				// rescale tangents for parametrization in [0,1]
 				t1 *= dt1;
 				t2 *= dt1;
 				init(x1, x2, t1, t2);
@@ -23749,14 +21036,14 @@
 				return c0 + c1 * t + c2 * t2 + c3 * t3;
 			}
 		};
-	} //
+	}
 
+	//
 
 	const tmp = /*@__PURE__*/new Vector3();
 	const px = /*@__PURE__*/new CubicPoly();
 	const py = /*@__PURE__*/new CubicPoly();
 	const pz = /*@__PURE__*/new CubicPoly();
-
 	class CatmullRomCurve3 extends Curve {
 		constructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {
 			super();
@@ -23767,7 +21054,6 @@
 			this.curveType = curveType;
 			this.tension = tension;
 		}
-
 		getPoint(t, optionalTarget = new Vector3()) {
 			const point = optionalTarget;
 			const points = this.points;
@@ -23775,14 +21061,12 @@
 			const p = (l - (this.closed ? 0 : 1)) * t;
 			let intPoint = Math.floor(p);
 			let weight = p - intPoint;
-
 			if (this.closed) {
 				intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
 			} else if (weight === 0 && intPoint === l - 1) {
 				intPoint = l - 2;
 				weight = 1;
 			}
-
 			let p0, p3; // 4 points (p1 & p2 defined below)
 
 			if (this.closed || intPoint > 0) {
@@ -23792,10 +21076,8 @@
 				tmp.subVectors(points[0], points[1]).add(points[0]);
 				p0 = tmp;
 			}
-
 			const p1 = points[intPoint % l];
 			const p2 = points[(intPoint + 1) % l];
-
 			if (this.closed || intPoint + 2 < l) {
 				p3 = points[(intPoint + 2) % l];
 			} else {
@@ -23803,14 +21085,14 @@
 				tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
 				p3 = tmp;
 			}
-
 			if (this.curveType === 'centripetal' || this.curveType === 'chordal') {
 				// init Centripetal / Chordal Catmull-Rom
 				const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
 				let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
 				let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
-				let dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points
+				let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
 
+				// safety check for repeated points
 				if (dt1 < 1e-4) dt1 = 1.0;
 				if (dt0 < 1e-4) dt0 = dt1;
 				if (dt2 < 1e-4) dt2 = dt1;
@@ -23822,107 +21104,92 @@
 				py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
 				pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
 			}
-
 			point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
 			return point;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.points = [];
-
 			for (let i = 0, l = source.points.length; i < l; i++) {
 				const point = source.points[i];
 				this.points.push(point.clone());
 			}
-
 			this.closed = source.closed;
 			this.curveType = source.curveType;
 			this.tension = source.tension;
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.points = [];
-
 			for (let i = 0, l = this.points.length; i < l; i++) {
 				const point = this.points[i];
 				data.points.push(point.toArray());
 			}
-
 			data.closed = this.closed;
 			data.curveType = this.curveType;
 			data.tension = this.tension;
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.points = [];
-
 			for (let i = 0, l = json.points.length; i < l; i++) {
 				const point = json.points[i];
 				this.points.push(new Vector3().fromArray(point));
 			}
-
 			this.closed = json.closed;
 			this.curveType = json.curveType;
 			this.tension = json.tension;
 			return this;
 		}
-
 	}
 
 	/**
 	 * Bezier Curves formulas obtained from
 	 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 	 */
+
 	function CatmullRom(t, p0, p1, p2, p3) {
 		const v0 = (p2 - p0) * 0.5;
 		const v1 = (p3 - p1) * 0.5;
 		const t2 = t * t;
 		const t3 = t * t2;
 		return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
-	} //
+	}
 
+	//
 
 	function QuadraticBezierP0(t, p) {
 		const k = 1 - t;
 		return k * k * p;
 	}
-
 	function QuadraticBezierP1(t, p) {
 		return 2 * (1 - t) * t * p;
 	}
-
 	function QuadraticBezierP2(t, p) {
 		return t * t * p;
 	}
-
 	function QuadraticBezier(t, p0, p1, p2) {
 		return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
-	} //
+	}
 
+	//
 
 	function CubicBezierP0(t, p) {
 		const k = 1 - t;
 		return k * k * k * p;
 	}
-
 	function CubicBezierP1(t, p) {
 		const k = 1 - t;
 		return 3 * k * k * t * p;
 	}
-
 	function CubicBezierP2(t, p) {
 		return 3 * (1 - t) * t * t * p;
 	}
-
 	function CubicBezierP3(t, p) {
 		return t * t * t * p;
 	}
-
 	function CubicBezier(t, p0, p1, p2, p3) {
 		return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
 	}
@@ -23937,17 +21204,15 @@
 			this.v2 = v2;
 			this.v3 = v3;
 		}
-
 		getPoint(t, optionalTarget = new Vector2()) {
 			const point = optionalTarget;
 			const v0 = this.v0,
-						v1 = this.v1,
-						v2 = this.v2,
-						v3 = this.v3;
+				v1 = this.v1,
+				v2 = this.v2,
+				v3 = this.v3;
 			point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
 			return point;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.v0.copy(source.v0);
@@ -23956,7 +21221,6 @@
 			this.v3.copy(source.v3);
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.v0 = this.v0.toArray();
@@ -23965,7 +21229,6 @@
 			data.v3 = this.v3.toArray();
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.v0.fromArray(json.v0);
@@ -23974,7 +21237,6 @@
 			this.v3.fromArray(json.v3);
 			return this;
 		}
-
 	}
 
 	class CubicBezierCurve3 extends Curve {
@@ -23987,17 +21249,15 @@
 			this.v2 = v2;
 			this.v3 = v3;
 		}
-
 		getPoint(t, optionalTarget = new Vector3()) {
 			const point = optionalTarget;
 			const v0 = this.v0,
-						v1 = this.v1,
-						v2 = this.v2,
-						v3 = this.v3;
+				v1 = this.v1,
+				v2 = this.v2,
+				v3 = this.v3;
 			point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
 			return point;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.v0.copy(source.v0);
@@ -24006,7 +21266,6 @@
 			this.v3.copy(source.v3);
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.v0 = this.v0.toArray();
@@ -24015,7 +21274,6 @@
 			data.v3 = this.v3.toArray();
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.v0.fromArray(json.v0);
@@ -24024,7 +21282,6 @@
 			this.v3.fromArray(json.v3);
 			return this;
 		}
-
 	}
 
 	class LineCurve extends Curve {
@@ -24035,52 +21292,44 @@
 			this.v1 = v1;
 			this.v2 = v2;
 		}
-
 		getPoint(t, optionalTarget = new Vector2()) {
 			const point = optionalTarget;
-
 			if (t === 1) {
 				point.copy(this.v2);
 			} else {
 				point.copy(this.v2).sub(this.v1);
 				point.multiplyScalar(t).add(this.v1);
 			}
-
 			return point;
-		} // Line curve is linear, so we can overwrite default getPointAt
-
+		}
 
+		// Line curve is linear, so we can overwrite default getPointAt
 		getPointAt(u, optionalTarget) {
 			return this.getPoint(u, optionalTarget);
 		}
-
 		getTangent(t, optionalTarget) {
 			const tangent = optionalTarget || new Vector2();
 			tangent.copy(this.v2).sub(this.v1).normalize();
 			return tangent;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.v1.copy(source.v1);
 			this.v2.copy(source.v2);
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.v1 = this.v1.toArray();
 			data.v2 = this.v2.toArray();
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.v1.fromArray(json.v1);
 			this.v2.fromArray(json.v2);
 			return this;
 		}
-
 	}
 
 	class LineCurve3 extends Curve {
@@ -24091,46 +21340,38 @@
 			this.v1 = v1;
 			this.v2 = v2;
 		}
-
 		getPoint(t, optionalTarget = new Vector3()) {
 			const point = optionalTarget;
-
 			if (t === 1) {
 				point.copy(this.v2);
 			} else {
 				point.copy(this.v2).sub(this.v1);
 				point.multiplyScalar(t).add(this.v1);
 			}
-
 			return point;
-		} // Line curve is linear, so we can overwrite default getPointAt
-
-
+		}
+		// Line curve is linear, so we can overwrite default getPointAt
 		getPointAt(u, optionalTarget) {
 			return this.getPoint(u, optionalTarget);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.v1.copy(source.v1);
 			this.v2.copy(source.v2);
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.v1 = this.v1.toArray();
 			data.v2 = this.v2.toArray();
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.v1.fromArray(json.v1);
 			this.v2.fromArray(json.v2);
 			return this;
 		}
-
 	}
 
 	class QuadraticBezierCurve extends Curve {
@@ -24142,16 +21383,14 @@
 			this.v1 = v1;
 			this.v2 = v2;
 		}
-
 		getPoint(t, optionalTarget = new Vector2()) {
 			const point = optionalTarget;
 			const v0 = this.v0,
-						v1 = this.v1,
-						v2 = this.v2;
+				v1 = this.v1,
+				v2 = this.v2;
 			point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
 			return point;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.v0.copy(source.v0);
@@ -24159,7 +21398,6 @@
 			this.v2.copy(source.v2);
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.v0 = this.v0.toArray();
@@ -24167,7 +21405,6 @@
 			data.v2 = this.v2.toArray();
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.v0.fromArray(json.v0);
@@ -24175,7 +21412,6 @@
 			this.v2.fromArray(json.v2);
 			return this;
 		}
-
 	}
 
 	class QuadraticBezierCurve3 extends Curve {
@@ -24187,16 +21423,14 @@
 			this.v1 = v1;
 			this.v2 = v2;
 		}
-
 		getPoint(t, optionalTarget = new Vector3()) {
 			const point = optionalTarget;
 			const v0 = this.v0,
-						v1 = this.v1,
-						v2 = this.v2;
+				v1 = this.v1,
+				v2 = this.v2;
 			point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
 			return point;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.v0.copy(source.v0);
@@ -24204,7 +21438,6 @@
 			this.v2.copy(source.v2);
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.v0 = this.v0.toArray();
@@ -24212,7 +21445,6 @@
 			data.v2 = this.v2.toArray();
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.v0.fromArray(json.v0);
@@ -24220,7 +21452,6 @@
 			this.v2.fromArray(json.v2);
 			return this;
 		}
-
 	}
 
 	class SplineCurve extends Curve {
@@ -24230,7 +21461,6 @@
 			this.type = 'SplineCurve';
 			this.points = points;
 		}
-
 		getPoint(t, optionalTarget = new Vector2()) {
 			const point = optionalTarget;
 			const points = this.points;
@@ -24244,43 +21474,33 @@
 			point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
 			return point;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.points = [];
-
 			for (let i = 0, l = source.points.length; i < l; i++) {
 				const point = source.points[i];
 				this.points.push(point.clone());
 			}
-
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.points = [];
-
 			for (let i = 0, l = this.points.length; i < l; i++) {
 				const point = this.points[i];
 				data.points.push(point.toArray());
 			}
-
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.points = [];
-
 			for (let i = 0, l = json.points.length; i < l; i++) {
 				const point = json.points[i];
 				this.points.push(new Vector2().fromArray(point));
 			}
-
 			return this;
 		}
-
 	}
 
 	var Curves = /*#__PURE__*/Object.freeze({
@@ -24313,28 +21533,30 @@
 		add(curve) {
 			this.curves.push(curve);
 		}
-
 		closePath() {
 			// Add a line curve if start and end of lines are not connected
 			const startPoint = this.curves[0].getPoint(0);
 			const endPoint = this.curves[this.curves.length - 1].getPoint(1);
-
 			if (!startPoint.equals(endPoint)) {
 				this.curves.push(new LineCurve(endPoint, startPoint));
 			}
-		} // To get accurate point with reference to
+		}
+
+		// To get accurate point with reference to
 		// entire path distance at time t,
 		// following has to be done:
+
 		// 1. Length of each sub path have to be known
 		// 2. Locate and identify type of curve
 		// 3. Get t for the curve
 		// 4. Return curve.getPointAt(t')
 
-
 		getPoint(t, optionalTarget) {
 			const d = t * this.getLength();
 			const curveLengths = this.getCurveLengths();
-			let i = 0; // To think about boundaries points.
+			let i = 0;
+
+			// To think about boundaries points.
 
 			while (i < curveLengths.length) {
 				if (curveLengths[i] >= d) {
@@ -24344,73 +21566,68 @@
 					const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
 					return curve.getPointAt(u, optionalTarget);
 				}
-
 				i++;
 			}
+			return null;
 
-			return null; // loop where sum != 0, sum > d , sum+1 <d
-		} // We cannot use the default THREE.Curve getPoint() with getLength() because in
+			// loop where sum != 0, sum > d , sum+1 <d
+		}
+
+		// We cannot use the default THREE.Curve getPoint() with getLength() because in
 		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
 		// getPoint() depends on getLength
 
-
 		getLength() {
 			const lens = this.getCurveLengths();
 			return lens[lens.length - 1];
-		} // cacheLengths must be recalculated.
-
+		}
 
+		// cacheLengths must be recalculated.
 		updateArcLengths() {
 			this.needsUpdate = true;
 			this.cacheLengths = null;
 			this.getCurveLengths();
-		} // Compute lengths and cache them
-		// We cannot overwrite getLengths() because UtoT mapping uses it.
+		}
 
+		// Compute lengths and cache them
+		// We cannot overwrite getLengths() because UtoT mapping uses it.
 
 		getCurveLengths() {
 			// We use cache values if curves and cache array are same length
+
 			if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
 				return this.cacheLengths;
-			} // Get length of sub-curve
-			// Push sums into cached array
+			}
 
+			// Get length of sub-curve
+			// Push sums into cached array
 
 			const lengths = [];
 			let sums = 0;
-
 			for (let i = 0, l = this.curves.length; i < l; i++) {
 				sums += this.curves[i].getLength();
 				lengths.push(sums);
 			}
-
 			this.cacheLengths = lengths;
 			return lengths;
 		}
-
 		getSpacedPoints(divisions = 40) {
 			const points = [];
-
 			for (let i = 0; i <= divisions; i++) {
 				points.push(this.getPoint(i / divisions));
 			}
-
 			if (this.autoClose) {
 				points.push(points[0]);
 			}
-
 			return points;
 		}
-
 		getPoints(divisions = 12) {
 			const points = [];
 			let last;
-
 			for (let i = 0, curves = this.curves; i < curves.length; i++) {
 				const curve = curves[i];
 				const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
 				const pts = curve.getPoints(resolution);
-
 				for (let j = 0; j < pts.length; j++) {
 					const point = pts[j];
 					if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates
@@ -24419,53 +21636,41 @@
 					last = point;
 				}
 			}
-
 			if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
 				points.push(points[0]);
 			}
-
 			return points;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.curves = [];
-
 			for (let i = 0, l = source.curves.length; i < l; i++) {
 				const curve = source.curves[i];
 				this.curves.push(curve.clone());
 			}
-
 			this.autoClose = source.autoClose;
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.autoClose = this.autoClose;
 			data.curves = [];
-
 			for (let i = 0, l = this.curves.length; i < l; i++) {
 				const curve = this.curves[i];
 				data.curves.push(curve.toJSON());
 			}
-
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.autoClose = json.autoClose;
 			this.curves = [];
-
 			for (let i = 0, l = json.curves.length; i < l; i++) {
 				const curve = json.curves[i];
 				this.curves.push(new Curves[curve.type]().fromJSON(curve));
 			}
-
 			return this;
 		}
-
 	}
 
 	class Path extends CurvePath {
@@ -24473,114 +21678,92 @@
 			super();
 			this.type = 'Path';
 			this.currentPoint = new Vector2();
-
 			if (points) {
 				this.setFromPoints(points);
 			}
 		}
-
 		setFromPoints(points) {
 			this.moveTo(points[0].x, points[0].y);
-
 			for (let i = 1, l = points.length; i < l; i++) {
 				this.lineTo(points[i].x, points[i].y);
 			}
-
 			return this;
 		}
-
 		moveTo(x, y) {
 			this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?
 
 			return this;
 		}
-
 		lineTo(x, y) {
 			const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
 			this.curves.push(curve);
 			this.currentPoint.set(x, y);
 			return this;
 		}
-
 		quadraticCurveTo(aCPx, aCPy, aX, aY) {
 			const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
 			this.curves.push(curve);
 			this.currentPoint.set(aX, aY);
 			return this;
 		}
-
 		bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
 			const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
 			this.curves.push(curve);
 			this.currentPoint.set(aX, aY);
 			return this;
 		}
-
-		splineThru(pts
-		/*Array of Vector*/
-		) {
+		splineThru(pts /*Array of Vector*/) {
 			const npts = [this.currentPoint.clone()].concat(pts);
 			const curve = new SplineCurve(npts);
 			this.curves.push(curve);
 			this.currentPoint.copy(pts[pts.length - 1]);
 			return this;
 		}
-
 		arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
 			const x0 = this.currentPoint.x;
 			const y0 = this.currentPoint.y;
 			this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
 			return this;
 		}
-
 		absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
 			this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
 			return this;
 		}
-
 		ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
 			const x0 = this.currentPoint.x;
 			const y0 = this.currentPoint.y;
 			this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
 			return this;
 		}
-
 		absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
 			const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
-
 			if (this.curves.length > 0) {
 				// if a previous curve is present, attempt to join
 				const firstPoint = curve.getPoint(0);
-
 				if (!firstPoint.equals(this.currentPoint)) {
 					this.lineTo(firstPoint.x, firstPoint.y);
 				}
 			}
-
 			this.curves.push(curve);
 			const lastPoint = curve.getPoint(1);
 			this.currentPoint.copy(lastPoint);
 			return this;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.currentPoint.copy(source.currentPoint);
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.currentPoint = this.currentPoint.toArray();
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.currentPoint.fromArray(json.currentPoint);
 			return this;
 		}
-
 	}
 
 	class LatheGeometry extends BufferGeometry {
@@ -24593,15 +21776,21 @@
 				phiStart: phiStart,
 				phiLength: phiLength
 			};
-			segments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]
+			segments = Math.floor(segments);
+
+			// clamp phiLength so it's in range of [ 0, 2PI ]
 
-			phiLength = clamp(phiLength, 0, Math.PI * 2); // buffers
+			phiLength = clamp(phiLength, 0, Math.PI * 2);
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const uvs = [];
 			const initNormals = [];
-			const normals = []; // helper variables
+			const normals = [];
+
+			// helper variables
 
 			const inverseSegments = 1.0 / segments;
 			const vertex = new Vector3();
@@ -24610,12 +21799,15 @@
 			const curNormal = new Vector3();
 			const prevNormal = new Vector3();
 			let dx = 0;
-			let dy = 0; // pre-compute normals for initial "meridian"
+			let dy = 0;
+
+			// pre-compute normals for initial "meridian"
 
 			for (let j = 0; j <= points.length - 1; j++) {
 				switch (j) {
 					case 0:
 						// special handling for 1st vertex on path
+
 						dx = points[j + 1].x - points[j].x;
 						dy = points[j + 1].y - points[j].y;
 						normal.x = dy * 1.0;
@@ -24625,14 +21817,14 @@
 						normal.normalize();
 						initNormals.push(normal.x, normal.y, normal.z);
 						break;
-
 					case points.length - 1:
 						// special handling for last Vertex on path
+
 						initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
 						break;
-
 					default:
 						// default handling for all vertices in between
+
 						dx = points[j + 1].x - points[j].x;
 						dy = points[j + 1].y - points[j].y;
 						normal.x = dy * 1.0;
@@ -24646,32 +21838,38 @@
 						initNormals.push(normal.x, normal.y, normal.z);
 						prevNormal.copy(curNormal);
 				}
-			} // generate vertices, uvs and normals
+			}
 
+			// generate vertices, uvs and normals
 
 			for (let i = 0; i <= segments; i++) {
 				const phi = phiStart + i * inverseSegments * phiLength;
 				const sin = Math.sin(phi);
 				const cos = Math.cos(phi);
-
 				for (let j = 0; j <= points.length - 1; j++) {
 					// vertex
+
 					vertex.x = points[j].x * sin;
 					vertex.y = points[j].y;
 					vertex.z = points[j].x * cos;
-					vertices.push(vertex.x, vertex.y, vertex.z); // uv
+					vertices.push(vertex.x, vertex.y, vertex.z);
+
+					// uv
 
 					uv.x = i / segments;
 					uv.y = j / (points.length - 1);
-					uvs.push(uv.x, uv.y); // normal
+					uvs.push(uv.x, uv.y);
+
+					// normal
 
 					const x = initNormals[3 * j + 0] * sin;
 					const y = initNormals[3 * j + 1];
 					const z = initNormals[3 * j + 0] * cos;
 					normals.push(x, y, z);
 				}
-			} // indices
+			}
 
+			// indices
 
 			for (let i = 0; i < segments; i++) {
 				for (let j = 0; j < points.length - 1; j++) {
@@ -24679,24 +21877,25 @@
 					const a = base;
 					const b = base + points.length;
 					const c = base + points.length + 1;
-					const d = base + 1; // faces
+					const d = base + 1;
+
+					// faces
 
 					indices.push(a, b, d);
 					indices.push(c, d, b);
 				}
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 		}
-
 		static fromJSON(data) {
 			return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
 		}
-
 	}
 
 	class CapsuleGeometry extends LatheGeometry {
@@ -24713,11 +21912,9 @@
 				radialSegments: radialSegments
 			};
 		}
-
 		static fromJSON(data) {
 			return new CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
 		}
-
 	}
 
 	class CircleGeometry extends BufferGeometry {
@@ -24730,50 +21927,61 @@
 				thetaStart: thetaStart,
 				thetaLength: thetaLength
 			};
-			segments = Math.max(3, segments); // buffers
+			segments = Math.max(3, segments);
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
-			const uvs = []; // helper variables
+			const uvs = [];
+
+			// helper variables
 
 			const vertex = new Vector3();
-			const uv = new Vector2(); // center point
+			const uv = new Vector2();
+
+			// center point
 
 			vertices.push(0, 0, 0);
 			normals.push(0, 0, 1);
 			uvs.push(0.5, 0.5);
-
 			for (let s = 0, i = 3; s <= segments; s++, i += 3) {
-				const segment = thetaStart + s / segments * thetaLength; // vertex
+				const segment = thetaStart + s / segments * thetaLength;
+
+				// vertex
 
 				vertex.x = radius * Math.cos(segment);
 				vertex.y = radius * Math.sin(segment);
-				vertices.push(vertex.x, vertex.y, vertex.z); // normal
+				vertices.push(vertex.x, vertex.y, vertex.z);
+
+				// normal
 
-				normals.push(0, 0, 1); // uvs
+				normals.push(0, 0, 1);
+
+				// uvs
 
 				uv.x = (vertices[i] / radius + 1) / 2;
 				uv.y = (vertices[i + 1] / radius + 1) / 2;
 				uvs.push(uv.x, uv.y);
-			} // indices
+			}
 
+			// indices
 
 			for (let i = 1; i <= segments; i++) {
 				indices.push(i, i + 1, 0);
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 		}
-
 		static fromJSON(data) {
 			return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
 		}
-
 	}
 
 	class CylinderGeometry extends BufferGeometry {
@@ -24792,89 +22000,115 @@
 			};
 			const scope = this;
 			radialSegments = Math.floor(radialSegments);
-			heightSegments = Math.floor(heightSegments); // buffers
+			heightSegments = Math.floor(heightSegments);
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
-			const uvs = []; // helper variables
+			const uvs = [];
+
+			// helper variables
 
 			let index = 0;
 			const indexArray = [];
 			const halfHeight = height / 2;
-			let groupStart = 0; // generate geometry
+			let groupStart = 0;
 
-			generateTorso();
+			// generate geometry
 
+			generateTorso();
 			if (openEnded === false) {
 				if (radiusTop > 0) generateCap(true);
 				if (radiusBottom > 0) generateCap(false);
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
-
 			function generateTorso() {
 				const normal = new Vector3();
 				const vertex = new Vector3();
-				let groupCount = 0; // this will be used to calculate the normal
+				let groupCount = 0;
+
+				// this will be used to calculate the normal
+				const slope = (radiusBottom - radiusTop) / height;
 
-				const slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs
+				// generate vertices, normals and uvs
 
 				for (let y = 0; y <= heightSegments; y++) {
 					const indexRow = [];
-					const v = y / heightSegments; // calculate the radius of the current row
+					const v = y / heightSegments;
 
-					const radius = v * (radiusBottom - radiusTop) + radiusTop;
+					// calculate the radius of the current row
 
+					const radius = v * (radiusBottom - radiusTop) + radiusTop;
 					for (let x = 0; x <= radialSegments; x++) {
 						const u = x / radialSegments;
 						const theta = u * thetaLength + thetaStart;
 						const sinTheta = Math.sin(theta);
-						const cosTheta = Math.cos(theta); // vertex
+						const cosTheta = Math.cos(theta);
+
+						// vertex
 
 						vertex.x = radius * sinTheta;
 						vertex.y = -v * height + halfHeight;
 						vertex.z = radius * cosTheta;
-						vertices.push(vertex.x, vertex.y, vertex.z); // normal
+						vertices.push(vertex.x, vertex.y, vertex.z);
+
+						// normal
 
 						normal.set(sinTheta, slope, cosTheta).normalize();
-						normals.push(normal.x, normal.y, normal.z); // uv
+						normals.push(normal.x, normal.y, normal.z);
 
-						uvs.push(u, 1 - v); // save index of vertex in respective row
+						// uv
+
+						uvs.push(u, 1 - v);
+
+						// save index of vertex in respective row
 
 						indexRow.push(index++);
-					} // now save vertices of the row in our index array
+					}
 
+					// now save vertices of the row in our index array
 
 					indexArray.push(indexRow);
-				} // generate indices
+				}
 
+				// generate indices
 
 				for (let x = 0; x < radialSegments; x++) {
 					for (let y = 0; y < heightSegments; y++) {
 						// we use the index array to access the correct indices
+
 						const a = indexArray[y][x];
 						const b = indexArray[y + 1][x];
 						const c = indexArray[y + 1][x + 1];
-						const d = indexArray[y][x + 1]; // faces
+						const d = indexArray[y][x + 1];
+
+						// faces
 
 						indices.push(a, b, d);
-						indices.push(b, c, d); // update group counter
+						indices.push(b, c, d);
+
+						// update group counter
 
 						groupCount += 6;
 					}
-				} // add a group to the geometry. this will ensure multi material support
+				}
+
+				// add a group to the geometry. this will ensure multi material support
 
+				scope.addGroup(groupStart, groupCount, 0);
 
-				scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups
+				// calculate new start value for groups
 
 				groupStart += groupCount;
 			}
-
 			function generateCap(top) {
 				// save the index of the first center vertex
 				const centerIndexStart = index;
@@ -24882,71 +22116,92 @@
 				const vertex = new Vector3();
 				let groupCount = 0;
 				const radius = top === true ? radiusTop : radiusBottom;
-				const sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.
+				const sign = top === true ? 1 : -1;
+
+				// first we generate the center vertex data of the cap.
 				// because the geometry needs one set of uvs per face,
 				// we must generate a center vertex per face/segment
 
 				for (let x = 1; x <= radialSegments; x++) {
 					// vertex
-					vertices.push(0, halfHeight * sign, 0); // normal
 
-					normals.push(0, sign, 0); // uv
+					vertices.push(0, halfHeight * sign, 0);
+
+					// normal
+
+					normals.push(0, sign, 0);
+
+					// uv
+
+					uvs.push(0.5, 0.5);
 
-					uvs.push(0.5, 0.5); // increase index
+					// increase index
 
 					index++;
-				} // save the index of the last center vertex
+				}
 
+				// save the index of the last center vertex
+				const centerIndexEnd = index;
 
-				const centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs
+				// now we generate the surrounding vertices, normals and uvs
 
 				for (let x = 0; x <= radialSegments; x++) {
 					const u = x / radialSegments;
 					const theta = u * thetaLength + thetaStart;
 					const cosTheta = Math.cos(theta);
-					const sinTheta = Math.sin(theta); // vertex
+					const sinTheta = Math.sin(theta);
+
+					// vertex
 
 					vertex.x = radius * sinTheta;
 					vertex.y = halfHeight * sign;
 					vertex.z = radius * cosTheta;
-					vertices.push(vertex.x, vertex.y, vertex.z); // normal
+					vertices.push(vertex.x, vertex.y, vertex.z);
 
-					normals.push(0, sign, 0); // uv
+					// normal
+
+					normals.push(0, sign, 0);
+
+					// uv
 
 					uv.x = cosTheta * 0.5 + 0.5;
 					uv.y = sinTheta * 0.5 * sign + 0.5;
-					uvs.push(uv.x, uv.y); // increase index
+					uvs.push(uv.x, uv.y);
+
+					// increase index
 
 					index++;
-				} // generate indices
+				}
 
+				// generate indices
 
 				for (let x = 0; x < radialSegments; x++) {
 					const c = centerIndexStart + x;
 					const i = centerIndexEnd + x;
-
 					if (top === true) {
 						// face top
+
 						indices.push(i, i + 1, c);
 					} else {
 						// face bottom
+
 						indices.push(i + 1, i, c);
 					}
-
 					groupCount += 3;
-				} // add a group to the geometry. this will ensure multi material support
+				}
 
+				// add a group to the geometry. this will ensure multi material support
 
-				scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups
+				scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
+
+				// calculate new start value for groups
 
 				groupStart += groupCount;
 			}
 		}
-
 		static fromJSON(data) {
 			return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
 		}
-
 	}
 
 	class ConeGeometry extends CylinderGeometry {
@@ -24963,11 +22218,9 @@
 				thetaLength: thetaLength
 			};
 		}
-
 		static fromJSON(data) {
 			return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
 		}
-
 	}
 
 	class PolyhedronGeometry extends BufferGeometry {
@@ -24979,54 +22232,71 @@
 				indices: indices,
 				radius: radius,
 				detail: detail
-			}; // default buffer data
+			};
+
+			// default buffer data
 
 			const vertexBuffer = [];
-			const uvBuffer = []; // the subdivision creates the vertex buffer data
+			const uvBuffer = [];
+
+			// the subdivision creates the vertex buffer data
+
+			subdivide(detail);
+
+			// all vertices should lie on a conceptual sphere with a given radius
 
-			subdivide(detail); // all vertices should lie on a conceptual sphere with a given radius
+			applyRadius(radius);
 
-			applyRadius(radius); // finally, create the uv data
+			// finally, create the uv data
 
-			generateUVs(); // build non-indexed geometry
+			generateUVs();
+
+			// build non-indexed geometry
 
 			this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));
-
 			if (detail === 0) {
 				this.computeVertexNormals(); // flat normals
 			} else {
 				this.normalizeNormals(); // smooth normals
-			} // helper functions
+			}
 
+			// helper functions
 
 			function subdivide(detail) {
 				const a = new Vector3();
 				const b = new Vector3();
-				const c = new Vector3(); // iterate over all faces and apply a subdivision with the given detail value
+				const c = new Vector3();
+
+				// iterate over all faces and apply a subdivision with the given detail value
 
 				for (let i = 0; i < indices.length; i += 3) {
 					// get the vertices of the face
+
 					getVertexByIndex(indices[i + 0], a);
 					getVertexByIndex(indices[i + 1], b);
-					getVertexByIndex(indices[i + 2], c); // perform subdivision
+					getVertexByIndex(indices[i + 2], c);
+
+					// perform subdivision
 
 					subdivideFace(a, b, c, detail);
 				}
 			}
-
 			function subdivideFace(a, b, c, detail) {
-				const cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision
+				const cols = detail + 1;
 
-				const v = []; // construct all of the vertices for this subdivision
+				// we use this multidimensional array as a data structure for creating the subdivision
+
+				const v = [];
+
+				// construct all of the vertices for this subdivision
 
 				for (let i = 0; i <= cols; i++) {
 					v[i] = [];
 					const aj = a.clone().lerp(c, i / cols);
 					const bj = b.clone().lerp(c, i / cols);
 					const rows = cols - i;
-
 					for (let j = 0; j <= rows; j++) {
 						if (j === 0 && i === cols) {
 							v[i][j] = aj;
@@ -25034,13 +22304,13 @@
 							v[i][j] = aj.clone().lerp(bj, j / rows);
 						}
 					}
-				} // construct all of the faces
+				}
 
+				// construct all of the faces
 
 				for (let i = 0; i < cols; i++) {
 					for (let j = 0; j < 2 * (cols - i) - 1; j++) {
 						const k = Math.floor(j / 2);
-
 						if (j % 2 === 0) {
 							pushVertex(v[i][k + 1]);
 							pushVertex(v[i + 1][k]);
@@ -25053,9 +22323,10 @@
 					}
 				}
 			}
-
 			function applyRadius(radius) {
-				const vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex
+				const vertex = new Vector3();
+
+				// iterate over the entire buffer and apply the radius to each vertex
 
 				for (let i = 0; i < vertexBuffer.length; i += 3) {
 					vertex.x = vertexBuffer[i + 0];
@@ -25067,10 +22338,8 @@
 					vertexBuffer[i + 2] = vertex.z;
 				}
 			}
-
 			function generateUVs() {
 				const vertex = new Vector3();
-
 				for (let i = 0; i < vertexBuffer.length; i += 3) {
 					vertex.x = vertexBuffer[i + 0];
 					vertex.y = vertexBuffer[i + 1];
@@ -25079,20 +22348,22 @@
 					const v = inclination(vertex) / Math.PI + 0.5;
 					uvBuffer.push(u, 1 - v);
 				}
-
 				correctUVs();
 				correctSeam();
 			}
-
 			function correctSeam() {
 				// handle case when face straddles the seam, see #3269
+
 				for (let i = 0; i < uvBuffer.length; i += 6) {
 					// uv data of a single face
+
 					const x0 = uvBuffer[i + 0];
 					const x1 = uvBuffer[i + 2];
 					const x2 = uvBuffer[i + 4];
 					const max = Math.max(x0, x1, x2);
-					const min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary
+					const min = Math.min(x0, x1, x2);
+
+					// 0.9 is somewhat arbitrary
 
 					if (max > 0.9 && min < 0.1) {
 						if (x0 < 0.2) uvBuffer[i + 0] += 1;
@@ -25101,18 +22372,15 @@
 					}
 				}
 			}
-
 			function pushVertex(vertex) {
 				vertexBuffer.push(vertex.x, vertex.y, vertex.z);
 			}
-
 			function getVertexByIndex(index, vertex) {
 				const stride = index * 3;
 				vertex.x = vertices[stride + 0];
 				vertex.y = vertices[stride + 1];
 				vertex.z = vertices[stride + 2];
 			}
-
 			function correctUVs() {
 				const a = new Vector3();
 				const b = new Vector3();
@@ -25121,7 +22389,6 @@
 				const uvA = new Vector2();
 				const uvB = new Vector2();
 				const uvC = new Vector2();
-
 				for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
 					a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
 					b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
@@ -25136,42 +22403,44 @@
 					correctUV(uvC, j + 4, c, azi);
 				}
 			}
-
 			function correctUV(uv, stride, vector, azimuth) {
 				if (azimuth < 0 && uv.x === 1) {
 					uvBuffer[stride] = uv.x - 1;
 				}
-
 				if (vector.x === 0 && vector.z === 0) {
 					uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
 				}
-			} // Angle around the Y axis, counter-clockwise when looking from above.
+			}
 
+			// Angle around the Y axis, counter-clockwise when looking from above.
 
 			function azimuth(vector) {
 				return Math.atan2(vector.z, -vector.x);
-			} // Angle above the XZ plane.
+			}
 
+			// Angle above the XZ plane.
 
 			function inclination(vector) {
 				return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
 			}
 		}
-
 		static fromJSON(data) {
 			return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
 		}
-
 	}
 
 	class DodecahedronGeometry extends PolyhedronGeometry {
 		constructor(radius = 1, detail = 0) {
 			const t = (1 + Math.sqrt(5)) / 2;
 			const r = 1 / t;
-			const vertices = [// (±1, ±1, ±1)
-			-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)
-			0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)
-			-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)
+			const vertices = [
+			// (±1, ±1, ±1)
+			-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1,
+			// (0, ±1/φ, ±φ)
+			0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t,
+			// (±1/φ, ±φ, 0)
+			-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0,
+			// (±φ, 0, ±1/φ)
 			-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];
 			const indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
 			super(vertices, indices, radius, detail);
@@ -25181,21 +22450,15 @@
 				detail: detail
 			};
 		}
-
 		static fromJSON(data) {
 			return new DodecahedronGeometry(data.radius, data.detail);
 		}
-
 	}
 
 	const _v0 = /*@__PURE__*/new Vector3();
-
 	const _v1$1 = /*@__PURE__*/new Vector3();
-
 	const _normal = /*@__PURE__*/new Vector3();
-
 	const _triangle = /*@__PURE__*/new Triangle();
-
 	class EdgesGeometry extends BufferGeometry {
 		constructor(geometry = null, thresholdAngle = 1) {
 			super();
@@ -25204,7 +22467,6 @@
 				geometry: geometry,
 				thresholdAngle: thresholdAngle
 			};
-
 			if (geometry !== null) {
 				const precisionPoints = 4;
 				const precision = Math.pow(10, precisionPoints);
@@ -25217,7 +22479,6 @@
 				const hashes = new Array(3);
 				const edgeData = {};
 				const vertices = [];
-
 				for (let i = 0; i < indexCount; i += 3) {
 					if (indexAttr) {
 						indexArr[0] = indexAttr.getX(i);
@@ -25228,7 +22489,6 @@
 						indexArr[1] = i + 1;
 						indexArr[2] = i + 2;
 					}
-
 					const {
 						a,
 						b,
@@ -25237,19 +22497,19 @@
 					a.fromBufferAttribute(positionAttr, indexArr[0]);
 					b.fromBufferAttribute(positionAttr, indexArr[1]);
 					c.fromBufferAttribute(positionAttr, indexArr[2]);
+					_triangle.getNormal(_normal);
 
-					_triangle.getNormal(_normal); // create hashes for the edge from the vertices
-
-
+					// create hashes for the edge from the vertices
 					hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
 					hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
-					hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles
+					hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
 
+					// skip degenerate triangles
 					if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
 						continue;
-					} // iterate over every edge
-
+					}
 
+					// iterate over every edge
 					for (let j = 0; j < 3; j++) {
 						// get the first and next vertex making up the edge
 						const jNext = (j + 1) % 3;
@@ -25259,7 +22519,6 @@
 						const v1 = _triangle[vertKeys[jNext]];
 						const hash = `${vecHash0}_${vecHash1}`;
 						const reverseHash = `${vecHash1}_${vecHash0}`;
-
 						if (reverseHash in edgeData && edgeData[reverseHash]) {
 							// if we found a sibling edge add it into the vertex array if
 							// it meets the angle threshold and delete the edge from the map.
@@ -25267,7 +22526,6 @@
 								vertices.push(v0.x, v0.y, v0.z);
 								vertices.push(v1.x, v1.y, v1.z);
 							}
-
 							edgeData[reverseHash] = null;
 						} else if (!(hash in edgeData)) {
 							// if we've already got an edge here then skip adding a new one
@@ -25278,29 +22536,24 @@
 							};
 						}
 					}
-				} // iterate over all remaining, unmatched edges and add them to the vertex array
-
+				}
 
+				// iterate over all remaining, unmatched edges and add them to the vertex array
 				for (const key in edgeData) {
 					if (edgeData[key]) {
 						const {
 							index0,
 							index1
 						} = edgeData[key];
-
 						_v0.fromBufferAttribute(positionAttr, index0);
-
 						_v1$1.fromBufferAttribute(positionAttr, index1);
-
 						vertices.push(_v0.x, _v0.y, _v0.z);
 						vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
 					}
 				}
-
 				this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			}
 		}
-
 	}
 
 	class Shape extends Path {
@@ -25310,17 +22563,15 @@
 			this.type = 'Shape';
 			this.holes = [];
 		}
-
 		getPointsHoles(divisions) {
 			const holesPts = [];
-
 			for (let i = 0, l = this.holes.length; i < l; i++) {
 				holesPts[i] = this.holes[i].getPoints(divisions);
 			}
-
 			return holesPts;
-		} // get points of shape and holes (keypoints based on segments parameter)
+		}
 
+		// get points of shape and holes (keypoints based on segments parameter)
 
 		extractPoints(divisions) {
 			return {
@@ -25328,50 +22579,41 @@
 				holes: this.getPointsHoles(divisions)
 			};
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.holes = [];
-
 			for (let i = 0, l = source.holes.length; i < l; i++) {
 				const hole = source.holes[i];
 				this.holes.push(hole.clone());
 			}
-
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.uuid = this.uuid;
 			data.holes = [];
-
 			for (let i = 0, l = this.holes.length; i < l; i++) {
 				const hole = this.holes[i];
 				data.holes.push(hole.toJSON());
 			}
-
 			return data;
 		}
-
 		fromJSON(json) {
 			super.fromJSON(json);
 			this.uuid = json.uuid;
 			this.holes = [];
-
 			for (let i = 0, l = json.holes.length; i < l; i++) {
 				const hole = json.holes[i];
 				this.holes.push(new Path().fromJSON(hole));
 			}
-
 			return this;
 		}
-
 	}
 
 	/**
 	 * Port from https://github.com/mapbox/earcut (v2.2.4)
 	 */
+
 	const Earcut = {
 		triangulate: function (data, holeIndices, dim = 2) {
 			const hasHoles = holeIndices && holeIndices.length;
@@ -25380,12 +22622,12 @@
 			const triangles = [];
 			if (!outerNode || outerNode.next === outerNode.prev) return triangles;
 			let minX, minY, maxX, maxY, x, y, invSize;
-			if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
+			if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
 
+			// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
 			if (data.length > 80 * dim) {
 				minX = maxX = data[0];
 				minY = maxY = data[1];
-
 				for (let i = dim; i < outerLen; i += dim) {
 					x = data[i];
 					y = data[i + 1];
@@ -25393,45 +22635,40 @@
 					if (y < minY) minY = y;
 					if (x > maxX) maxX = x;
 					if (y > maxY) maxY = y;
-				} // minX, minY and invSize are later used to transform coords into integers for z-order calculation
-
+				}
 
+				// minX, minY and invSize are later used to transform coords into integers for z-order calculation
 				invSize = Math.max(maxX - minX, maxY - minY);
 				invSize = invSize !== 0 ? 32767 / invSize : 0;
 			}
-
 			earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
 			return triangles;
 		}
-	}; // create a circular doubly linked list from polygon points in the specified winding order
+	};
 
+	// create a circular doubly linked list from polygon points in the specified winding order
 	function linkedList(data, start, end, dim, clockwise) {
 		let i, last;
-
 		if (clockwise === signedArea(data, start, end, dim) > 0) {
 			for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
 		} else {
 			for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
 		}
-
 		if (last && equals(last, last.next)) {
 			removeNode(last);
 			last = last.next;
 		}
-
 		return last;
-	} // eliminate colinear or duplicate points
-
+	}
 
+	// eliminate colinear or duplicate points
 	function filterPoints(start, end) {
 		if (!start) return start;
 		if (!end) end = start;
 		let p = start,
-				again;
-
+			again;
 		do {
 			again = false;
-
 			if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
 				removeNode(p);
 				p = end = p.prev;
@@ -25441,184 +22678,182 @@
 				p = p.next;
 			}
 		} while (again || p !== end);
-
 		return end;
-	} // main ear slicing loop which triangulates a polygon (given as a linked list)
-
+	}
 
+	// main ear slicing loop which triangulates a polygon (given as a linked list)
 	function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
-		if (!ear) return; // interlink polygon nodes in z-order
+		if (!ear) return;
 
+		// interlink polygon nodes in z-order
 		if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
 		let stop = ear,
-				prev,
-				next; // iterate through ears, slicing them one by one
+			prev,
+			next;
 
+		// iterate through ears, slicing them one by one
 		while (ear.prev !== ear.next) {
 			prev = ear.prev;
 			next = ear.next;
-
 			if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
 				// cut off the triangle
 				triangles.push(prev.i / dim | 0);
 				triangles.push(ear.i / dim | 0);
 				triangles.push(next.i / dim | 0);
-				removeNode(ear); // skipping the next vertex leads to less sliver triangles
+				removeNode(ear);
 
+				// skipping the next vertex leads to less sliver triangles
 				ear = next.next;
 				stop = next.next;
 				continue;
 			}
+			ear = next;
 
-			ear = next; // if we looped through the whole remaining polygon and can't find any more ears
-
+			// if we looped through the whole remaining polygon and can't find any more ears
 			if (ear === stop) {
 				// try filtering points and slicing again
 				if (!pass) {
-					earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
+					earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
+
+					// if this didn't work, try curing all small self-intersections locally
 				} else if (pass === 1) {
 					ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
-					earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
+					earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
+
+					// as a last resort, try splitting the remaining polygon into two
 				} else if (pass === 2) {
 					splitEarcut(ear, triangles, dim, minX, minY, invSize);
 				}
-
 				break;
 			}
 		}
-	} // check whether a polygon node forms a valid ear with adjacent nodes
-
+	}
 
+	// check whether a polygon node forms a valid ear with adjacent nodes
 	function isEar(ear) {
 		const a = ear.prev,
-					b = ear,
-					c = ear.next;
+			b = ear,
+			c = ear.next;
 		if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
-		// now make sure we don't have other points inside the potential ear
 
+		// now make sure we don't have other points inside the potential ear
 		const ax = a.x,
-					bx = b.x,
-					cx = c.x,
-					ay = a.y,
-					by = b.y,
-					cy = c.y; // triangle bbox; min & max are calculated like this for speed
+			bx = b.x,
+			cx = c.x,
+			ay = a.y,
+			by = b.y,
+			cy = c.y;
 
+		// triangle bbox; min & max are calculated like this for speed
 		const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx,
-					y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,
-					x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,
-					y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
+			y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,
+			x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,
+			y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
 		let p = c.next;
-
 		while (p !== a) {
 			if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
 			p = p.next;
 		}
-
 		return true;
 	}
-
 	function isEarHashed(ear, minX, minY, invSize) {
 		const a = ear.prev,
-					b = ear,
-					c = ear.next;
+			b = ear,
+			c = ear.next;
 		if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
 
 		const ax = a.x,
-					bx = b.x,
-					cx = c.x,
-					ay = a.y,
-					by = b.y,
-					cy = c.y; // triangle bbox; min & max are calculated like this for speed
+			bx = b.x,
+			cx = c.x,
+			ay = a.y,
+			by = b.y,
+			cy = c.y;
 
+		// triangle bbox; min & max are calculated like this for speed
 		const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx,
-					y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,
-					x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,
-					y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy; // z-order range for the current triangle bbox;
+			y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,
+			x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,
+			y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
 
+		// z-order range for the current triangle bbox;
 		const minZ = zOrder(x0, y0, minX, minY, invSize),
-					maxZ = zOrder(x1, y1, minX, minY, invSize);
+			maxZ = zOrder(x1, y1, minX, minY, invSize);
 		let p = ear.prevZ,
-				n = ear.nextZ; // look for points inside the triangle in both directions
+			n = ear.nextZ;
 
+		// look for points inside the triangle in both directions
 		while (p && p.z >= minZ && n && n.z <= maxZ) {
 			if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
 			p = p.prevZ;
 			if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
 			n = n.nextZ;
-		} // look for remaining points in decreasing z-order
-
+		}
 
+		// look for remaining points in decreasing z-order
 		while (p && p.z >= minZ) {
 			if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
 			p = p.prevZ;
-		} // look for remaining points in increasing z-order
-
+		}
 
+		// look for remaining points in increasing z-order
 		while (n && n.z <= maxZ) {
 			if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
 			n = n.nextZ;
 		}
-
 		return true;
-	} // go through all polygon nodes and cure small local self-intersections
-
+	}
 
+	// go through all polygon nodes and cure small local self-intersections
 	function cureLocalIntersections(start, triangles, dim) {
 		let p = start;
-
 		do {
 			const a = p.prev,
-						b = p.next.next;
-
+				b = p.next.next;
 			if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
 				triangles.push(a.i / dim | 0);
 				triangles.push(p.i / dim | 0);
-				triangles.push(b.i / dim | 0); // remove two nodes involved
+				triangles.push(b.i / dim | 0);
 
+				// remove two nodes involved
 				removeNode(p);
 				removeNode(p.next);
 				p = start = b;
 			}
-
 			p = p.next;
 		} while (p !== start);
-
 		return filterPoints(p);
-	} // try splitting polygon into two and triangulate them independently
-
+	}
 
+	// try splitting polygon into two and triangulate them independently
 	function splitEarcut(start, triangles, dim, minX, minY, invSize) {
 		// look for a valid diagonal that divides the polygon into two
 		let a = start;
-
 		do {
 			let b = a.next.next;
-
 			while (b !== a.prev) {
 				if (a.i !== b.i && isValidDiagonal(a, b)) {
 					// split the polygon in two by the diagonal
-					let c = splitPolygon(a, b); // filter colinear points around the cuts
+					let c = splitPolygon(a, b);
 
+					// filter colinear points around the cuts
 					a = filterPoints(a, a.next);
-					c = filterPoints(c, c.next); // run earcut on each half
+					c = filterPoints(c, c.next);
 
+					// run earcut on each half
 					earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
 					earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
 					return;
 				}
-
 				b = b.next;
 			}
-
 			a = a.next;
 		} while (a !== start);
-	} // link every hole into the outer loop, producing a single-ring polygon without holes
-
+	}
 
+	// link every hole into the outer loop, producing a single-ring polygon without holes
 	function eliminateHoles(data, holeIndices, outerNode, dim) {
 		const queue = [];
 		let i, len, start, end, list;
-
 		for (i = 0, len = holeIndices.length; i < len; i++) {
 			start = holeIndices[i] * dim;
 			end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
@@ -25626,47 +22861,44 @@
 			if (list === list.next) list.steiner = true;
 			queue.push(getLeftmost(list));
 		}
+		queue.sort(compareX);
 
-		queue.sort(compareX); // process holes from left to right
-
+		// process holes from left to right
 		for (i = 0; i < queue.length; i++) {
 			outerNode = eliminateHole(queue[i], outerNode);
 		}
-
 		return outerNode;
 	}
-
 	function compareX(a, b) {
 		return a.x - b.x;
-	} // find a bridge between vertices that connects hole with an outer ring and link it
-
+	}
 
+	// find a bridge between vertices that connects hole with an outer ring and link it
 	function eliminateHole(hole, outerNode) {
 		const bridge = findHoleBridge(hole, outerNode);
-
 		if (!bridge) {
 			return outerNode;
 		}
+		const bridgeReverse = splitPolygon(bridge, hole);
 
-		const bridgeReverse = splitPolygon(bridge, hole); // filter collinear points around the cuts
-
+		// filter collinear points around the cuts
 		filterPoints(bridgeReverse, bridgeReverse.next);
 		return filterPoints(bridge, bridge.next);
-	} // David Eberly's algorithm for finding a bridge between hole and outer polygon
-
+	}
 
+	// David Eberly's algorithm for finding a bridge between hole and outer polygon
 	function findHoleBridge(hole, outerNode) {
 		let p = outerNode,
-				qx = -Infinity,
-				m;
+			qx = -Infinity,
+			m;
 		const hx = hole.x,
-					hy = hole.y; // find a segment intersected by a ray from the hole's leftmost point to the left;
-		// segment's endpoint with lesser x will be potential connection point
+			hy = hole.y;
 
+		// find a segment intersected by a ray from the hole's leftmost point to the left;
+		// segment's endpoint with lesser x will be potential connection point
 		do {
 			if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
 				const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
-
 				if (x <= hx && x > qx) {
 					qx = x;
 					m = p.x < p.next.x ? p : p.next;
@@ -25676,18 +22908,18 @@
 
 			p = p.next;
 		} while (p !== outerNode);
+		if (!m) return null;
 
-		if (!m) return null; // look for points inside the triangle of hole point, segment intersection and endpoint;
+		// look for points inside the triangle of hole point, segment intersection and endpoint;
 		// if there are no points found, we have a valid connection;
 		// otherwise choose the point of the minimum angle with the ray as connection point
 
 		const stop = m,
-					mx = m.x,
-					my = m.y;
+			mx = m.x,
+			my = m.y;
 		let tanMin = Infinity,
-				tan;
+			tan;
 		p = m;
-
 		do {
 			if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
 				tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
@@ -25697,66 +22929,57 @@
 					tanMin = tan;
 				}
 			}
-
 			p = p.next;
 		} while (p !== stop);
-
 		return m;
-	} // whether sector in vertex m contains sector in vertex p in the same coordinates
-
+	}
 
+	// whether sector in vertex m contains sector in vertex p in the same coordinates
 	function sectorContainsSector(m, p) {
 		return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
-	} // interlink polygon nodes in z-order
-
+	}
 
+	// interlink polygon nodes in z-order
 	function indexCurve(start, minX, minY, invSize) {
 		let p = start;
-
 		do {
 			if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
 			p.prevZ = p.prev;
 			p.nextZ = p.next;
 			p = p.next;
 		} while (p !== start);
-
 		p.prevZ.nextZ = null;
 		p.prevZ = null;
 		sortLinked(p);
-	} // Simon Tatham's linked list merge sort algorithm
-	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
-
+	}
 
+	// Simon Tatham's linked list merge sort algorithm
+	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
 	function sortLinked(list) {
 		let i,
-				p,
-				q,
-				e,
-				tail,
-				numMerges,
-				pSize,
-				qSize,
-				inSize = 1;
-
+			p,
+			q,
+			e,
+			tail,
+			numMerges,
+			pSize,
+			qSize,
+			inSize = 1;
 		do {
 			p = list;
 			list = null;
 			tail = null;
 			numMerges = 0;
-
 			while (p) {
 				numMerges++;
 				q = p;
 				pSize = 0;
-
 				for (i = 0; i < inSize; i++) {
 					pSize++;
 					q = q.nextZ;
 					if (!q) break;
 				}
-
 				qSize = inSize;
-
 				while (pSize > 0 || qSize > 0 && q) {
 					if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
 						e = p;
@@ -25767,23 +22990,19 @@
 						q = q.nextZ;
 						qSize--;
 					}
-
 					if (tail) tail.nextZ = e;else list = e;
 					e.prevZ = tail;
 					tail = e;
 				}
-
 				p = q;
 			}
-
 			tail.nextZ = null;
 			inSize *= 2;
 		} while (numMerges > 1);
-
 		return list;
-	} // z-order of a point given coords and inverse of the longer side of data bbox
-
+	}
 
+	// z-order of a point given coords and inverse of the longer side of data bbox
 	function zOrder(x, y, minX, minY, invSize) {
 		// coords are transformed into non-negative 15-bit integer range
 		x = (x - minX) * invSize | 0;
@@ -25797,45 +23016,46 @@
 		y = (y | y << 2) & 0x33333333;
 		y = (y | y << 1) & 0x55555555;
 		return x | y << 1;
-	} // find the leftmost node of a polygon ring
-
+	}
 
+	// find the leftmost node of a polygon ring
 	function getLeftmost(start) {
 		let p = start,
-				leftmost = start;
-
+			leftmost = start;
 		do {
 			if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
 			p = p.next;
 		} while (p !== start);
-
 		return leftmost;
-	} // check if a point lies within a convex triangle
-
+	}
 
+	// check if a point lies within a convex triangle
 	function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
 		return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
-	} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
-
+	}
 
+	// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
 	function isValidDiagonal(a, b) {
-		return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges
-		locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible
-		area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
+		return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (
+		// dones't intersect other edges
+		locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (
+		// locally visible
+		area(a.prev, a, b.prev) || area(a, b.prev, b)) ||
+		// does not create opposite-facing sectors
 		equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
-	} // signed area of a triangle
-
+	}
 
+	// signed area of a triangle
 	function area(p, q, r) {
 		return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
-	} // check if two points are equal
-
+	}
 
+	// check if two points are equal
 	function equals(p1, p2) {
 		return p1.x === p2.x && p1.y === p2.y;
-	} // check if two segments intersect
-
+	}
 
+	// check if two segments intersect
 	function intersects(p1, q1, p2, q2) {
 		const o1 = sign(area(p1, q1, p2));
 		const o2 = sign(area(p1, q1, q2));
@@ -25844,64 +23064,56 @@
 		if (o1 !== o2 && o3 !== o4) return true; // general case
 
 		if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
-
 		if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
-
 		if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
-
 		if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
 
 		return false;
-	} // for collinear points p, q, r, check if point q lies on segment pr
-
+	}
 
+	// for collinear points p, q, r, check if point q lies on segment pr
 	function onSegment(p, q, r) {
 		return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
 	}
-
 	function sign(num) {
 		return num > 0 ? 1 : num < 0 ? -1 : 0;
-	} // check if a polygon diagonal intersects any polygon segments
-
+	}
 
+	// check if a polygon diagonal intersects any polygon segments
 	function intersectsPolygon(a, b) {
 		let p = a;
-
 		do {
 			if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
 			p = p.next;
 		} while (p !== a);
-
 		return false;
-	} // check if a polygon diagonal is locally inside the polygon
-
+	}
 
+	// check if a polygon diagonal is locally inside the polygon
 	function locallyInside(a, b) {
 		return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
-	} // check if the middle point of a polygon diagonal is inside the polygon
-
+	}
 
+	// check if the middle point of a polygon diagonal is inside the polygon
 	function middleInside(a, b) {
 		let p = a,
-				inside = false;
+			inside = false;
 		const px = (a.x + b.x) / 2,
-					py = (a.y + b.y) / 2;
-
+			py = (a.y + b.y) / 2;
 		do {
 			if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
 			p = p.next;
 		} while (p !== a);
-
 		return inside;
-	} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
-	// if one belongs to the outer ring and another to a hole, it merges it into a single ring
-
+	}
 
+	// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
+	// if one belongs to the outer ring and another to a hole, it merges it into a single ring
 	function splitPolygon(a, b) {
 		const a2 = new Node(a.i, a.x, a.y),
-					b2 = new Node(b.i, b.x, b.y),
-					an = a.next,
-					bp = b.prev;
+			b2 = new Node(b.i, b.x, b.y),
+			an = a.next,
+			bp = b.prev;
 		a.next = b;
 		b.prev = a;
 		a2.next = an;
@@ -25911,12 +23123,11 @@
 		bp.next = b2;
 		b2.prev = bp;
 		return b2;
-	} // create a node and optionally link it with previous one (in a circular doubly linked list)
-
+	}
 
+	// create a node and optionally link it with previous one (in a circular doubly linked list)
 	function insertNode(i, x, y, last) {
 		const p = new Node(i, x, y);
-
 		if (!last) {
 			p.prev = p;
 			p.next = p;
@@ -25926,102 +23137,95 @@
 			last.next.prev = p;
 			last.next = p;
 		}
-
 		return p;
 	}
-
 	function removeNode(p) {
 		p.next.prev = p.prev;
 		p.prev.next = p.next;
 		if (p.prevZ) p.prevZ.nextZ = p.nextZ;
 		if (p.nextZ) p.nextZ.prevZ = p.prevZ;
 	}
-
 	function Node(i, x, y) {
 		// vertex index in coordinates array
-		this.i = i; // vertex coordinates
+		this.i = i;
 
+		// vertex coordinates
 		this.x = x;
-		this.y = y; // previous and next vertex nodes in a polygon ring
+		this.y = y;
 
+		// previous and next vertex nodes in a polygon ring
 		this.prev = null;
-		this.next = null; // z-order curve value
+		this.next = null;
 
-		this.z = 0; // previous and next nodes in z-order
+		// z-order curve value
+		this.z = 0;
 
+		// previous and next nodes in z-order
 		this.prevZ = null;
-		this.nextZ = null; // indicates whether this is a steiner point
+		this.nextZ = null;
 
+		// indicates whether this is a steiner point
 		this.steiner = false;
 	}
-
 	function signedArea(data, start, end, dim) {
 		let sum = 0;
-
 		for (let i = start, j = end - dim; i < end; i += dim) {
 			sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
 			j = i;
 		}
-
 		return sum;
 	}
 
 	class ShapeUtils {
 		// calculate area of the contour polygon
+
 		static area(contour) {
 			const n = contour.length;
 			let a = 0.0;
-
 			for (let p = n - 1, q = 0; q < n; p = q++) {
 				a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
 			}
-
 			return a * 0.5;
 		}
-
 		static isClockWise(pts) {
 			return ShapeUtils.area(pts) < 0;
 		}
-
 		static triangulateShape(contour, holes) {
 			const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
-
 			const holeIndices = []; // array of hole indices
-
 			const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
 
 			removeDupEndPts(contour);
-			addContour(vertices, contour); //
+			addContour(vertices, contour);
+
+			//
 
 			let holeIndex = contour.length;
 			holes.forEach(removeDupEndPts);
-
 			for (let i = 0; i < holes.length; i++) {
 				holeIndices.push(holeIndex);
 				holeIndex += holes[i].length;
 				addContour(vertices, holes[i]);
-			} //
+			}
+
+			//
 
+			const triangles = Earcut.triangulate(vertices, holeIndices);
 
-			const triangles = Earcut.triangulate(vertices, holeIndices); //
+			//
 
 			for (let i = 0; i < triangles.length; i += 3) {
 				faces.push(triangles.slice(i, i + 3));
 			}
-
 			return faces;
 		}
-
 	}
-
 	function removeDupEndPts(points) {
 		const l = points.length;
-
 		if (l > 2 && points[l - 1].equals(points[0])) {
 			points.pop();
 		}
 	}
-
 	function addContour(vertices, contour) {
 		for (let i = 0; i < contour.length; i++) {
 			vertices.push(contour[i].x);
@@ -26050,7 +23254,6 @@
 	 *
 	 * }
 	 */
-
 	class ExtrudeGeometry extends BufferGeometry {
 		constructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
 			super();
@@ -26063,19 +23266,23 @@
 			const scope = this;
 			const verticesArray = [];
 			const uvArray = [];
-
 			for (let i = 0, l = shapes.length; i < l; i++) {
 				const shape = shapes[i];
 				addShape(shape);
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));
-			this.computeVertexNormals(); // functions
+			this.computeVertexNormals();
+
+			// functions
 
 			function addShape(shape) {
-				const placeholder = []; // options
+				const placeholder = [];
+
+				// options
 
 				const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
 				const steps = options.steps !== undefined ? options.steps : 1;
@@ -26086,53 +23293,60 @@
 				let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
 				let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
 				const extrudePath = options.extrudePath;
-				const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; //
+				const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
+
+				//
 
 				let extrudePts,
-						extrudeByPath = false;
+					extrudeByPath = false;
 				let splineTube, binormal, normal, position2;
-
 				if (extrudePath) {
 					extrudePts = extrudePath.getSpacedPoints(steps);
 					extrudeByPath = true;
 					bevelEnabled = false; // bevels not supported for path extrusion
+
 					// SETUP TNB variables
+
 					// TODO1 - have a .isClosed in spline?
 
-					splineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
+					splineTube = extrudePath.computeFrenetFrames(steps, false);
+
+					// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
 
 					binormal = new Vector3();
 					normal = new Vector3();
 					position2 = new Vector3();
-				} // Safeguards if bevels are not enabled
+				}
 
+				// Safeguards if bevels are not enabled
 
 				if (!bevelEnabled) {
 					bevelSegments = 0;
 					bevelThickness = 0;
 					bevelSize = 0;
 					bevelOffset = 0;
-				} // Variables initialization
+				}
 
+				// Variables initialization
 
 				const shapePoints = shape.extractPoints(curveSegments);
 				let vertices = shapePoints.shape;
 				const holes = shapePoints.holes;
 				const reverse = !ShapeUtils.isClockWise(vertices);
-
 				if (reverse) {
-					vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...
+					vertices = vertices.reverse();
+
+					// Maybe we should also check if holes are in the opposite direction, just to be safe ...
 
 					for (let h = 0, hl = holes.length; h < hl; h++) {
 						const ahole = holes[h];
-
 						if (ShapeUtils.isClockWise(ahole)) {
 							holes[h] = ahole.reverse();
 						}
 					}
 				}
-
 				const faces = ShapeUtils.triangulateShape(vertices, holes);
+
 				/* Vertices */
 
 				const contour = vertices; // vertices has all points but contour has only points of circumference
@@ -26141,14 +23355,14 @@
 					const ahole = holes[h];
 					vertices = vertices.concat(ahole);
 				}
-
 				function scalePt2(pt, vec, size) {
 					if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');
 					return vec.clone().multiplyScalar(size).add(pt);
 				}
-
 				const vlen = vertices.length,
-							flen = faces.length; // Find directions for point movement
+					flen = faces.length;
+
+				// Find directions for point movement
 
 				function getBevelVec(inPt, inPrev, inNext) {
 					// computes for inPt the corresponding point inPt' on a new contour
@@ -26157,37 +23371,47 @@
 					//
 					// inPt' is the intersection of the two lines parallel to the two
 					//	adjacent edges of inPt at a distance of 1 unit on the left side.
+
 					let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
+
 					// good reading for geometry algorithms (here: line-line intersection)
 					// http://geomalgorithms.com/a05-_intersect-1.html
 
 					const v_prev_x = inPt.x - inPrev.x,
-								v_prev_y = inPt.y - inPrev.y;
+						v_prev_y = inPt.y - inPrev.y;
 					const v_next_x = inNext.x - inPt.x,
-								v_next_y = inNext.y - inPt.y;
-					const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges
+						v_next_y = inNext.y - inPt.y;
+					const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
 
+					// check for collinear edges
 					const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
-
 					if (Math.abs(collinear0) > Number.EPSILON) {
 						// not collinear
+
 						// length of vectors for normalizing
+
 						const v_prev_len = Math.sqrt(v_prev_lensq);
-						const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left
+						const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
+
+						// shift adjacent points by unit vectors to the left
 
 						const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
 						const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
 						const ptNextShift_x = inNext.x - v_next_y / v_next_len;
-						const ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point
+						const ptNextShift_y = inNext.y + v_next_x / v_next_len;
+
+						// scaling factor for v_prev to intersection point
 
-						const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point
+						const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
+
+						// vector from inPt to intersection point
 
 						v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
-						v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly
-						//	but prevent crazy spikes
+						v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
 
+						// Don't normalize!, otherwise sharp corners become ugly
+						//	but prevent crazy spikes
 						const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
-
 						if (v_trans_lensq <= 2) {
 							return new Vector2(v_trans_x, v_trans_y);
 						} else {
@@ -26195,6 +23419,7 @@
 						}
 					} else {
 						// handle special case of collinear edges
+
 						let direction_eq = false; // assumes: opposite
 
 						if (v_prev_x > Number.EPSILON) {
@@ -26212,7 +23437,6 @@
 								}
 							}
 						}
-
 						if (direction_eq) {
 							// console.log("Warning: lines are a straight sequence");
 							v_trans_x = -v_prev_y;
@@ -26225,117 +23449,121 @@
 							shrink_by = Math.sqrt(v_prev_lensq / 2);
 						}
 					}
-
 					return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
 				}
-
 				const contourMovements = [];
-
 				for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
 					if (j === il) j = 0;
-					if (k === il) k = 0; //	(j)---(i)---(k)
+					if (k === il) k = 0;
+
+					//	(j)---(i)---(k)
 					// console.log('i,j,k', i, j , k)
 
 					contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
 				}
-
 				const holesMovements = [];
 				let oneHoleMovements,
-						verticesMovements = contourMovements.concat();
-
+					verticesMovements = contourMovements.concat();
 				for (let h = 0, hl = holes.length; h < hl; h++) {
 					const ahole = holes[h];
 					oneHoleMovements = [];
-
 					for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
 						if (j === il) j = 0;
-						if (k === il) k = 0; //	(j)---(i)---(k)
+						if (k === il) k = 0;
 
+						//	(j)---(i)---(k)
 						oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
 					}
-
 					holesMovements.push(oneHoleMovements);
 					verticesMovements = verticesMovements.concat(oneHoleMovements);
-				} // Loop bevelSegments, 1 for the front, 1 for the back
+				}
 
+				// Loop bevelSegments, 1 for the front, 1 for the back
 
 				for (let b = 0; b < bevelSegments; b++) {
 					//for ( b = bevelSegments; b > 0; b -- ) {
+
 					const t = b / bevelSegments;
 					const z = bevelThickness * Math.cos(t * Math.PI / 2);
-					const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape
+					const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
+
+					// contract shape
 
 					for (let i = 0, il = contour.length; i < il; i++) {
 						const vert = scalePt2(contour[i], contourMovements[i], bs);
 						v(vert.x, vert.y, -z);
-					} // expand holes
+					}
 
+					// expand holes
 
 					for (let h = 0, hl = holes.length; h < hl; h++) {
 						const ahole = holes[h];
 						oneHoleMovements = holesMovements[h];
-
 						for (let i = 0, il = ahole.length; i < il; i++) {
 							const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
 							v(vert.x, vert.y, -z);
 						}
 					}
 				}
+				const bs = bevelSize + bevelOffset;
 
-				const bs = bevelSize + bevelOffset; // Back facing vertices
+				// Back facing vertices
 
 				for (let i = 0; i < vlen; i++) {
 					const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
-
 					if (!extrudeByPath) {
 						v(vert.x, vert.y, 0);
 					} else {
 						// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
+
 						normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
 						binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
 						position2.copy(extrudePts[0]).add(normal).add(binormal);
 						v(position2.x, position2.y, position2.z);
 					}
-				} // Add stepped vertices...
-				// Including front facing vertices
+				}
 
+				// Add stepped vertices...
+				// Including front facing vertices
 
 				for (let s = 1; s <= steps; s++) {
 					for (let i = 0; i < vlen; i++) {
 						const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
-
 						if (!extrudeByPath) {
 							v(vert.x, vert.y, depth / steps * s);
 						} else {
 							// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
+
 							normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
 							binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
 							position2.copy(extrudePts[s]).add(normal).add(binormal);
 							v(position2.x, position2.y, position2.z);
 						}
 					}
-				} // Add bevel segments planes
-				//for ( b = 1; b <= bevelSegments; b ++ ) {
+				}
 
+				// Add bevel segments planes
 
+				//for ( b = 1; b <= bevelSegments; b ++ ) {
 				for (let b = bevelSegments - 1; b >= 0; b--) {
 					const t = b / bevelSegments;
 					const z = bevelThickness * Math.cos(t * Math.PI / 2);
-					const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape
+					const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
+
+					// contract shape
 
 					for (let i = 0, il = contour.length; i < il; i++) {
 						const vert = scalePt2(contour[i], contourMovements[i], bs);
 						v(vert.x, vert.y, depth + z);
-					} // expand holes
+					}
 
+					// expand holes
 
 					for (let h = 0, hl = holes.length; h < hl; h++) {
 						const ahole = holes[h];
 						oneHoleMovements = holesMovements[h];
-
 						for (let i = 0, il = ahole.length; i < il; i++) {
 							const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
-
 							if (!extrudeByPath) {
 								v(vert.x, vert.y, depth + z);
 							} else {
@@ -26344,29 +23572,35 @@
 						}
 					}
 				}
+
 				/* Faces */
+
 				// Top and bottom faces
 
+				buildLidFaces();
+
+				// Sides faces
 
-				buildLidFaces(); // Sides faces
+				buildSideFaces();
 
-				buildSideFaces(); /////	Internal functions
+				/////	Internal functions
 
 				function buildLidFaces() {
 					const start = verticesArray.length / 3;
-
 					if (bevelEnabled) {
 						let layer = 0; // steps + 1
+						let offset = vlen * layer;
 
-						let offset = vlen * layer; // Bottom faces
+						// Bottom faces
 
 						for (let i = 0; i < flen; i++) {
 							const face = faces[i];
 							f3(face[2] + offset, face[1] + offset, face[0] + offset);
 						}
-
 						layer = steps + bevelSegments * 2;
-						offset = vlen * layer; // Top faces
+						offset = vlen * layer;
+
+						// Top faces
 
 						for (let i = 0; i < flen; i++) {
 							const face = faces[i];
@@ -26374,64 +23608,63 @@
 						}
 					} else {
 						// Bottom faces
+
 						for (let i = 0; i < flen; i++) {
 							const face = faces[i];
 							f3(face[2], face[1], face[0]);
-						} // Top faces
+						}
 
+						// Top faces
 
 						for (let i = 0; i < flen; i++) {
 							const face = faces[i];
 							f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
 						}
 					}
-
 					scope.addGroup(start, verticesArray.length / 3 - start, 0);
-				} // Create faces for the z-sides of the shape
+				}
 
+				// Create faces for the z-sides of the shape
 
 				function buildSideFaces() {
 					const start = verticesArray.length / 3;
 					let layeroffset = 0;
 					sidewalls(contour, layeroffset);
 					layeroffset += contour.length;
-
 					for (let h = 0, hl = holes.length; h < hl; h++) {
 						const ahole = holes[h];
-						sidewalls(ahole, layeroffset); //, true
+						sidewalls(ahole, layeroffset);
 
+						//, true
 						layeroffset += ahole.length;
 					}
-
 					scope.addGroup(start, verticesArray.length / 3 - start, 1);
 				}
-
 				function sidewalls(contour, layeroffset) {
 					let i = contour.length;
-
 					while (--i >= 0) {
 						const j = i;
 						let k = i - 1;
-						if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);
+						if (k < 0) k = contour.length - 1;
+
+						//console.log('b', i,j, i-1, k,vertices.length);
 
 						for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
 							const slen1 = vlen * s;
 							const slen2 = vlen * (s + 1);
 							const a = layeroffset + j + slen1,
-										b = layeroffset + k + slen1,
-										c = layeroffset + k + slen2,
-										d = layeroffset + j + slen2;
+								b = layeroffset + k + slen1,
+								c = layeroffset + k + slen2,
+								d = layeroffset + j + slen2;
 							f4(a, b, c, d);
 						}
 					}
 				}
-
 				function v(x, y, z) {
 					placeholder.push(x);
 					placeholder.push(y);
 					placeholder.push(z);
 				}
-
 				function f3(a, b, c) {
 					addVertex(a);
 					addVertex(b);
@@ -26442,7 +23675,6 @@
 					addUV(uvs[1]);
 					addUV(uvs[2]);
 				}
-
 				function f4(a, b, c, d) {
 					addVertex(a);
 					addVertex(b);
@@ -26459,46 +23691,36 @@
 					addUV(uvs[2]);
 					addUV(uvs[3]);
 				}
-
 				function addVertex(index) {
 					verticesArray.push(placeholder[index * 3 + 0]);
 					verticesArray.push(placeholder[index * 3 + 1]);
 					verticesArray.push(placeholder[index * 3 + 2]);
 				}
-
 				function addUV(vector2) {
 					uvArray.push(vector2.x);
 					uvArray.push(vector2.y);
 				}
 			}
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			const shapes = this.parameters.shapes;
 			const options = this.parameters.options;
 			return toJSON$1(shapes, options, data);
 		}
-
 		static fromJSON(data, shapes) {
 			const geometryShapes = [];
-
 			for (let j = 0, jl = data.shapes.length; j < jl; j++) {
 				const shape = shapes[data.shapes[j]];
 				geometryShapes.push(shape);
 			}
-
 			const extrudePath = data.options.extrudePath;
-
 			if (extrudePath !== undefined) {
 				data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
 			}
-
 			return new ExtrudeGeometry(geometryShapes, data.options);
 		}
-
 	}
-
 	const WorldUVGenerator = {
 		generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {
 			const a_x = vertices[indexA * 3];
@@ -26522,7 +23744,6 @@
 			const d_x = vertices[indexD * 3];
 			const d_y = vertices[indexD * 3 + 1];
 			const d_z = vertices[indexD * 3 + 2];
-
 			if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
 				return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];
 			} else {
@@ -26530,10 +23751,8 @@
 			}
 		}
 	};
-
 	function toJSON$1(shapes, options, data) {
 		data.shapes = [];
-
 		if (Array.isArray(shapes)) {
 			for (let i = 0, l = shapes.length; i < l; i++) {
 				const shape = shapes[i];
@@ -26542,7 +23761,6 @@
 		} else {
 			data.shapes.push(shapes.uuid);
 		}
-
 		data.options = Object.assign({}, options);
 		if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
 		return data;
@@ -26560,11 +23778,9 @@
 				detail: detail
 			};
 		}
-
 		static fromJSON(data) {
 			return new IcosahedronGeometry(data.radius, data.detail);
 		}
-
 	}
 
 	class OctahedronGeometry extends PolyhedronGeometry {
@@ -26578,11 +23794,9 @@
 				detail: detail
 			};
 		}
-
 		static fromJSON(data) {
 			return new OctahedronGeometry(data.radius, data.detail);
 		}
-
 	}
 
 	class RingGeometry extends BufferGeometry {
@@ -26598,65 +23812,80 @@
 				thetaLength: thetaLength
 			};
 			thetaSegments = Math.max(3, thetaSegments);
-			phiSegments = Math.max(1, phiSegments); // buffers
+			phiSegments = Math.max(1, phiSegments);
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
-			const uvs = []; // some helper variables
+			const uvs = [];
+
+			// some helper variables
 
 			let radius = innerRadius;
 			const radiusStep = (outerRadius - innerRadius) / phiSegments;
 			const vertex = new Vector3();
-			const uv = new Vector2(); // generate vertices, normals and uvs
+			const uv = new Vector2();
+
+			// generate vertices, normals and uvs
 
 			for (let j = 0; j <= phiSegments; j++) {
 				for (let i = 0; i <= thetaSegments; i++) {
 					// values are generate from the inside of the ring to the outside
-					const segment = thetaStart + i / thetaSegments * thetaLength; // vertex
+
+					const segment = thetaStart + i / thetaSegments * thetaLength;
+
+					// vertex
 
 					vertex.x = radius * Math.cos(segment);
 					vertex.y = radius * Math.sin(segment);
-					vertices.push(vertex.x, vertex.y, vertex.z); // normal
+					vertices.push(vertex.x, vertex.y, vertex.z);
+
+					// normal
 
-					normals.push(0, 0, 1); // uv
+					normals.push(0, 0, 1);
+
+					// uv
 
 					uv.x = (vertex.x / outerRadius + 1) / 2;
 					uv.y = (vertex.y / outerRadius + 1) / 2;
 					uvs.push(uv.x, uv.y);
-				} // increase the radius for next row of vertices
+				}
 
+				// increase the radius for next row of vertices
 
 				radius += radiusStep;
-			} // indices
+			}
 
+			// indices
 
 			for (let j = 0; j < phiSegments; j++) {
 				const thetaSegmentLevel = j * (thetaSegments + 1);
-
 				for (let i = 0; i < thetaSegments; i++) {
 					const segment = i + thetaSegmentLevel;
 					const a = segment;
 					const b = segment + thetaSegments + 1;
 					const c = segment + thetaSegments + 2;
-					const d = segment + 1; // faces
+					const d = segment + 1;
+
+					// faces
 
 					indices.push(a, b, d);
 					indices.push(b, c, d);
 				}
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 		}
-
 		static fromJSON(data) {
 			return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
 		}
-
 	}
 
 	class ShapeGeometry extends BufferGeometry {
@@ -26666,15 +23895,21 @@
 			this.parameters = {
 				shapes: shapes,
 				curveSegments: curveSegments
-			}; // buffers
+			};
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
-			const uvs = []; // helper variables
+			const uvs = [];
+
+			// helper variables
 
 			let groupStart = 0;
-			let groupCount = 0; // allow single and array values for "shapes" parameter
+			let groupCount = 0;
+
+			// allow single and array values for "shapes" parameter
 
 			if (Array.isArray(shapes) === false) {
 				addShape(shapes);
@@ -26686,47 +23921,53 @@
 					groupStart += groupCount;
 					groupCount = 0;
 				}
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
-			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions
+			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
+
+			// helper functions
 
 			function addShape(shape) {
 				const indexOffset = vertices.length / 3;
 				const points = shape.extractPoints(curveSegments);
 				let shapeVertices = points.shape;
-				const shapeHoles = points.holes; // check direction of vertices
+				const shapeHoles = points.holes;
+
+				// check direction of vertices
 
 				if (ShapeUtils.isClockWise(shapeVertices) === false) {
 					shapeVertices = shapeVertices.reverse();
 				}
-
 				for (let i = 0, l = shapeHoles.length; i < l; i++) {
 					const shapeHole = shapeHoles[i];
-
 					if (ShapeUtils.isClockWise(shapeHole) === true) {
 						shapeHoles[i] = shapeHole.reverse();
 					}
 				}
+				const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
 
-				const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array
+				// join vertices of inner and outer paths to a single array
 
 				for (let i = 0, l = shapeHoles.length; i < l; i++) {
 					const shapeHole = shapeHoles[i];
 					shapeVertices = shapeVertices.concat(shapeHole);
-				} // vertices, normals, uvs
+				}
 
+				// vertices, normals, uvs
 
 				for (let i = 0, l = shapeVertices.length; i < l; i++) {
 					const vertex = shapeVertices[i];
 					vertices.push(vertex.x, vertex.y, 0);
 					normals.push(0, 0, 1);
 					uvs.push(vertex.x, vertex.y); // world uvs
-				} // indices
+				}
 
+				// indices
 
 				for (let i = 0, l = faces.length; i < l; i++) {
 					const face = faces[i];
@@ -26738,29 +23979,22 @@
 				}
 			}
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			const shapes = this.parameters.shapes;
 			return toJSON(shapes, data);
 		}
-
 		static fromJSON(data, shapes) {
 			const geometryShapes = [];
-
 			for (let j = 0, jl = data.shapes.length; j < jl; j++) {
 				const shape = shapes[data.shapes[j]];
 				geometryShapes.push(shape);
 			}
-
 			return new ShapeGeometry(geometryShapes, data.curveSegments);
 		}
-
 	}
-
 	function toJSON(shapes, data) {
 		data.shapes = [];
-
 		if (Array.isArray(shapes)) {
 			for (let i = 0, l = shapes.length; i < l; i++) {
 				const shape = shapes[i];
@@ -26769,7 +24003,6 @@
 		} else {
 			data.shapes.push(shapes.uuid);
 		}
-
 		return data;
 	}
 
@@ -26792,43 +24025,53 @@
 			let index = 0;
 			const grid = [];
 			const vertex = new Vector3();
-			const normal = new Vector3(); // buffers
+			const normal = new Vector3();
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
-			const uvs = []; // generate vertices, normals and uvs
+			const uvs = [];
+
+			// generate vertices, normals and uvs
 
 			for (let iy = 0; iy <= heightSegments; iy++) {
 				const verticesRow = [];
-				const v = iy / heightSegments; // special case for the poles
+				const v = iy / heightSegments;
 
-				let uOffset = 0;
+				// special case for the poles
 
+				let uOffset = 0;
 				if (iy == 0 && thetaStart == 0) {
 					uOffset = 0.5 / widthSegments;
 				} else if (iy == heightSegments && thetaEnd == Math.PI) {
 					uOffset = -0.5 / widthSegments;
 				}
-
 				for (let ix = 0; ix <= widthSegments; ix++) {
-					const u = ix / widthSegments; // vertex
+					const u = ix / widthSegments;
+
+					// vertex
 
 					vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
 					vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
 					vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
-					vertices.push(vertex.x, vertex.y, vertex.z); // normal
+					vertices.push(vertex.x, vertex.y, vertex.z);
+
+					// normal
 
 					normal.copy(vertex).normalize();
-					normals.push(normal.x, normal.y, normal.z); // uv
+					normals.push(normal.x, normal.y, normal.z);
+
+					// uv
 
 					uvs.push(u + uOffset, 1 - v);
 					verticesRow.push(index++);
 				}
-
 				grid.push(verticesRow);
-			} // indices
+			}
 
+			// indices
 
 			for (let iy = 0; iy < heightSegments; iy++) {
 				for (let ix = 0; ix < widthSegments; ix++) {
@@ -26839,19 +24082,18 @@
 					if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
 					if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
 				}
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 		}
-
 		static fromJSON(data) {
 			return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
 		}
-
 	}
 
 	class TetrahedronGeometry extends PolyhedronGeometry {
@@ -26865,11 +24107,9 @@
 				detail: detail
 			};
 		}
-
 		static fromJSON(data) {
 			return new TetrahedronGeometry(data.radius, data.detail);
 		}
-
 	}
 
 	class TorusGeometry extends BufferGeometry {
@@ -26884,62 +24124,77 @@
 				arc: arc
 			};
 			radialSegments = Math.floor(radialSegments);
-			tubularSegments = Math.floor(tubularSegments); // buffers
+			tubularSegments = Math.floor(tubularSegments);
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
-			const uvs = []; // helper variables
+			const uvs = [];
+
+			// helper variables
 
 			const center = new Vector3();
 			const vertex = new Vector3();
-			const normal = new Vector3(); // generate vertices, normals and uvs
+			const normal = new Vector3();
+
+			// generate vertices, normals and uvs
 
 			for (let j = 0; j <= radialSegments; j++) {
 				for (let i = 0; i <= tubularSegments; i++) {
 					const u = i / tubularSegments * arc;
-					const v = j / radialSegments * Math.PI * 2; // vertex
+					const v = j / radialSegments * Math.PI * 2;
+
+					// vertex
 
 					vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
 					vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
 					vertex.z = tube * Math.sin(v);
-					vertices.push(vertex.x, vertex.y, vertex.z); // normal
+					vertices.push(vertex.x, vertex.y, vertex.z);
+
+					// normal
 
 					center.x = radius * Math.cos(u);
 					center.y = radius * Math.sin(u);
 					normal.subVectors(vertex, center).normalize();
-					normals.push(normal.x, normal.y, normal.z); // uv
+					normals.push(normal.x, normal.y, normal.z);
+
+					// uv
 
 					uvs.push(i / tubularSegments);
 					uvs.push(j / radialSegments);
 				}
-			} // generate indices
+			}
 
+			// generate indices
 
 			for (let j = 1; j <= radialSegments; j++) {
 				for (let i = 1; i <= tubularSegments; i++) {
 					// indices
+
 					const a = (tubularSegments + 1) * j + i - 1;
 					const b = (tubularSegments + 1) * (j - 1) + i - 1;
 					const c = (tubularSegments + 1) * (j - 1) + i;
-					const d = (tubularSegments + 1) * j + i; // faces
+					const d = (tubularSegments + 1) * j + i;
+
+					// faces
 
 					indices.push(a, b, d);
 					indices.push(b, c, d);
 				}
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
 			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
 		}
-
 		static fromJSON(data) {
 			return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
 		}
-
 	}
 
 	class TorusKnotGeometry extends BufferGeometry {
@@ -26955,12 +24210,16 @@
 				q: q
 			};
 			tubularSegments = Math.floor(tubularSegments);
-			radialSegments = Math.floor(radialSegments); // buffers
+			radialSegments = Math.floor(radialSegments);
+
+			// buffers
 
 			const indices = [];
 			const vertices = [];
 			const normals = [];
-			const uvs = []; // helper variables
+			const uvs = [];
+
+			// helper variables
 
 			const vertex = new Vector3();
 			const normal = new Vector3();
@@ -26968,64 +24227,86 @@
 			const P2 = new Vector3();
 			const B = new Vector3();
 			const T = new Vector3();
-			const N = new Vector3(); // generate vertices, normals and uvs
+			const N = new Vector3();
+
+			// generate vertices, normals and uvs
 
 			for (let i = 0; i <= tubularSegments; ++i) {
 				// the radian "u" is used to calculate the position on the torus curve of the current tubular segment
-				const u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
+
+				const u = i / tubularSegments * p * Math.PI * 2;
+
+				// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
 				// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
 
 				calculatePositionOnCurve(u, p, q, radius, P1);
-				calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis
+				calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
+
+				// calculate orthonormal basis
 
 				T.subVectors(P2, P1);
 				N.addVectors(P2, P1);
 				B.crossVectors(T, N);
-				N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it
+				N.crossVectors(B, T);
+
+				// normalize B, N. T can be ignored, we don't use it
 
 				B.normalize();
 				N.normalize();
-
 				for (let j = 0; j <= radialSegments; ++j) {
 					// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
 					// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
+
 					const v = j / radialSegments * Math.PI * 2;
 					const cx = -tube * Math.cos(v);
-					const cy = tube * Math.sin(v); // now calculate the final vertex position.
+					const cy = tube * Math.sin(v);
+
+					// now calculate the final vertex position.
 					// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
 
 					vertex.x = P1.x + (cx * N.x + cy * B.x);
 					vertex.y = P1.y + (cx * N.y + cy * B.y);
 					vertex.z = P1.z + (cx * N.z + cy * B.z);
-					vertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
+					vertices.push(vertex.x, vertex.y, vertex.z);
+
+					// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
 
 					normal.subVectors(vertex, P1).normalize();
-					normals.push(normal.x, normal.y, normal.z); // uv
+					normals.push(normal.x, normal.y, normal.z);
+
+					// uv
 
 					uvs.push(i / tubularSegments);
 					uvs.push(j / radialSegments);
 				}
-			} // generate indices
+			}
 
+			// generate indices
 
 			for (let j = 1; j <= tubularSegments; j++) {
 				for (let i = 1; i <= radialSegments; i++) {
 					// indices
+
 					const a = (radialSegments + 1) * (j - 1) + (i - 1);
 					const b = (radialSegments + 1) * j + (i - 1);
 					const c = (radialSegments + 1) * j + i;
-					const d = (radialSegments + 1) * (j - 1) + i; // faces
+					const d = (radialSegments + 1) * (j - 1) + i;
+
+					// faces
 
 					indices.push(a, b, d);
 					indices.push(b, c, d);
 				}
-			} // build geometry
+			}
 
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
-			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve
+			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
+
+			// this function calculates the current position on the torus curve
 
 			function calculatePositionOnCurve(u, p, q, radius, position) {
 				const cu = Math.cos(u);
@@ -27037,11 +24318,9 @@
 				position.z = radius * Math.sin(quOverP) * 0.5;
 			}
 		}
-
 		static fromJSON(data) {
 			return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
 		}
-
 	}
 
 	class TubeGeometry extends BufferGeometry {
@@ -27055,63 +24334,88 @@
 				radialSegments: radialSegments,
 				closed: closed
 			};
-			const frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals
+			const frames = path.computeFrenetFrames(tubularSegments, closed);
+
+			// expose internals
 
 			this.tangents = frames.tangents;
 			this.normals = frames.normals;
-			this.binormals = frames.binormals; // helper variables
+			this.binormals = frames.binormals;
+
+			// helper variables
 
 			const vertex = new Vector3();
 			const normal = new Vector3();
 			const uv = new Vector2();
-			let P = new Vector3(); // buffer
+			let P = new Vector3();
+
+			// buffer
 
 			const vertices = [];
 			const normals = [];
 			const uvs = [];
-			const indices = []; // create buffer data
+			const indices = [];
+
+			// create buffer data
 
-			generateBufferData(); // build geometry
+			generateBufferData();
+
+			// build geometry
 
 			this.setIndex(indices);
 			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
-			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions
+			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
+
+			// functions
 
 			function generateBufferData() {
 				for (let i = 0; i < tubularSegments; i++) {
 					generateSegment(i);
-				} // if the geometry is not closed, generate the last row of vertices and normals
+				}
+
+				// if the geometry is not closed, generate the last row of vertices and normals
 				// at the regular position on the given path
 				//
 				// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
 
+				generateSegment(closed === false ? tubularSegments : 0);
 
-				generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.
+				// uvs are generated in a separate function.
 				// this makes it easy compute correct values for closed geometries
 
-				generateUVs(); // finally create faces
+				generateUVs();
+
+				// finally create faces
 
 				generateIndices();
 			}
-
 			function generateSegment(i) {
 				// we use getPointAt to sample evenly distributed points from the given path
-				P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal
+
+				P = path.getPointAt(i / tubularSegments, P);
+
+				// retrieve corresponding normal and binormal
 
 				const N = frames.normals[i];
-				const B = frames.binormals[i]; // generate normals and vertices for the current segment
+				const B = frames.binormals[i];
+
+				// generate normals and vertices for the current segment
 
 				for (let j = 0; j <= radialSegments; j++) {
 					const v = j / radialSegments * Math.PI * 2;
 					const sin = Math.sin(v);
-					const cos = -Math.cos(v); // normal
+					const cos = -Math.cos(v);
+
+					// normal
 
 					normal.x = cos * N.x + sin * B.x;
 					normal.y = cos * N.y + sin * B.y;
 					normal.z = cos * N.z + sin * B.z;
 					normal.normalize();
-					normals.push(normal.x, normal.y, normal.z); // vertex
+					normals.push(normal.x, normal.y, normal.z);
+
+					// vertex
 
 					vertex.x = P.x + radius * normal.x;
 					vertex.y = P.y + radius * normal.y;
@@ -27119,21 +24423,21 @@
 					vertices.push(vertex.x, vertex.y, vertex.z);
 				}
 			}
-
 			function generateIndices() {
 				for (let j = 1; j <= tubularSegments; j++) {
 					for (let i = 1; i <= radialSegments; i++) {
 						const a = (radialSegments + 1) * (j - 1) + (i - 1);
 						const b = (radialSegments + 1) * j + (i - 1);
 						const c = (radialSegments + 1) * j + i;
-						const d = (radialSegments + 1) * (j - 1) + i; // faces
+						const d = (radialSegments + 1) * (j - 1) + i;
+
+						// faces
 
 						indices.push(a, b, d);
 						indices.push(b, c, d);
 					}
 				}
 			}
-
 			function generateUVs() {
 				for (let i = 0; i <= tubularSegments; i++) {
 					for (let j = 0; j <= radialSegments; j++) {
@@ -27144,19 +24448,16 @@
 				}
 			}
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.path = this.parameters.path.toJSON();
 			return data;
 		}
-
 		static fromJSON(data) {
 			// This only works for built-in curves (e.g. CatmullRomCurve3).
 			// User defined curves or instances of CurvePath will not be deserialized.
 			return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
 		}
-
 	}
 
 	class WireframeGeometry extends BufferGeometry {
@@ -27166,42 +24467,42 @@
 			this.parameters = {
 				geometry: geometry
 			};
-
 			if (geometry !== null) {
 				// buffer
+
 				const vertices = [];
-				const edges = new Set(); // helper variables
+				const edges = new Set();
+
+				// helper variables
 
 				const start = new Vector3();
 				const end = new Vector3();
-
 				if (geometry.index !== null) {
 					// indexed BufferGeometry
+
 					const position = geometry.attributes.position;
 					const indices = geometry.index;
 					let groups = geometry.groups;
-
 					if (groups.length === 0) {
 						groups = [{
 							start: 0,
 							count: indices.count,
 							materialIndex: 0
 						}];
-					} // create a data structure that contains all edges without duplicates
+					}
 
+					// create a data structure that contains all edges without duplicates
 
 					for (let o = 0, ol = groups.length; o < ol; ++o) {
 						const group = groups[o];
 						const groupStart = group.start;
 						const groupCount = group.count;
-
 						for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {
 							for (let j = 0; j < 3; j++) {
 								const index1 = indices.getX(i + j);
 								const index2 = indices.getX(i + (j + 1) % 3);
 								start.fromBufferAttribute(position, index1);
 								end.fromBufferAttribute(position, index2);
-
 								if (isUniqueEdge(start, end, edges) === true) {
 									vertices.push(start.x, start.y, start.z);
 									vertices.push(end.x, end.y, end.z);
@@ -27211,32 +24512,31 @@
 					}
 				} else {
 					// non-indexed BufferGeometry
-					const position = geometry.attributes.position;
 
+					const position = geometry.attributes.position;
 					for (let i = 0, l = position.count / 3; i < l; i++) {
 						for (let j = 0; j < 3; j++) {
 							// three edges per triangle, an edge is represented as (index1, index2)
 							// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
+
 							const index1 = 3 * i + j;
 							const index2 = 3 * i + (j + 1) % 3;
 							start.fromBufferAttribute(position, index1);
 							end.fromBufferAttribute(position, index2);
-
 							if (isUniqueEdge(start, end, edges) === true) {
 								vertices.push(start.x, start.y, start.z);
 								vertices.push(end.x, end.y, end.z);
 							}
 						}
 					}
-				} // build geometry
+				}
 
+				// build geometry
 
 				this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			}
 		}
-
 	}
-
 	function isUniqueEdge(start, end, edges) {
 		const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
 		const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge
@@ -27285,14 +24585,12 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.color.copy(source.color);
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	class RawShaderMaterial extends ShaderMaterial {
@@ -27301,7 +24599,6 @@
 			this.isRawShaderMaterial = true;
 			this.type = 'RawShaderMaterial';
 		}
-
 	}
 
 	class MeshStandardMaterial extends Material {
@@ -27313,7 +24610,6 @@
 			};
 			this.type = 'MeshStandardMaterial';
 			this.color = new Color(0xffffff); // diffuse
-
 			this.roughness = 1.0;
 			this.metalness = 0.0;
 			this.map = null;
@@ -27345,7 +24641,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.defines = {
@@ -27383,7 +24678,6 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	class MeshPhysicalMaterial extends MeshStandardMaterial {
@@ -27432,55 +24726,42 @@
 			this._transmission = 0;
 			this.setValues(parameters);
 		}
-
 		get sheen() {
 			return this._sheen;
 		}
-
 		set sheen(value) {
 			if (this._sheen > 0 !== value > 0) {
 				this.version++;
 			}
-
 			this._sheen = value;
 		}
-
 		get clearcoat() {
 			return this._clearcoat;
 		}
-
 		set clearcoat(value) {
 			if (this._clearcoat > 0 !== value > 0) {
 				this.version++;
 			}
-
 			this._clearcoat = value;
 		}
-
 		get iridescence() {
 			return this._iridescence;
 		}
-
 		set iridescence(value) {
 			if (this._iridescence > 0 !== value > 0) {
 				this.version++;
 			}
-
 			this._iridescence = value;
 		}
-
 		get transmission() {
 			return this._transmission;
 		}
-
 		set transmission(value) {
 			if (this._transmission > 0 !== value > 0) {
 				this.version++;
 			}
-
 			this._transmission = value;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.defines = {
@@ -27516,7 +24797,6 @@
 			this.specularColorMap = source.specularColorMap;
 			return this;
 		}
-
 	}
 
 	class MeshPhongMaterial extends Material {
@@ -27525,7 +24805,6 @@
 			this.isMeshPhongMaterial = true;
 			this.type = 'MeshPhongMaterial';
 			this.color = new Color(0xffffff); // diffuse
-
 			this.specular = new Color(0x111111);
 			this.shininess = 30;
 			this.map = null;
@@ -27558,7 +24837,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.color.copy(source.color);
@@ -27594,7 +24872,6 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	class MeshToonMaterial extends Material {
@@ -27631,7 +24908,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.color.copy(source.color);
@@ -27660,7 +24936,6 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	class MeshNormalMaterial extends Material {
@@ -27681,7 +24956,6 @@
 			this.flatShading = false;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.bumpMap = source.bumpMap;
@@ -27697,7 +24971,6 @@
 			this.flatShading = source.flatShading;
 			return this;
 		}
-
 	}
 
 	class MeshLambertMaterial extends Material {
@@ -27737,7 +25010,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.color.copy(source.color);
@@ -27771,7 +25043,6 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	class MeshMatcapMaterial extends Material {
@@ -27799,7 +25070,6 @@
 			this.fog = true;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.defines = {
@@ -27821,7 +25091,6 @@
 			this.fog = source.fog;
 			return this;
 		}
-
 	}
 
 	class LineDashedMaterial extends LineBasicMaterial {
@@ -27834,7 +25103,6 @@
 			this.gapSize = 1;
 			this.setValues(parameters);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.scale = source.scale;
@@ -27842,24 +25110,23 @@
 			this.gapSize = source.gapSize;
 			return this;
 		}
-
 	}
 
+	// same as Array.prototype.slice, but also works on typed arrays
 	function arraySlice(array, from, to) {
 		if (isTypedArray(array)) {
 			// in ios9 array.subarray(from, undefined) will return empty array
 			// but array.subarray(from) or array.subarray(from, len) is correct
 			return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
 		}
-
 		return array.slice(from, to);
-	} // converts an array to a specific type
-
+	}
 
+	// converts an array to a specific type
 	function convertArray(array, type, forceClone) {
-		if (!array || // let 'undefined' and 'null' pass
+		if (!array ||
+		// let 'undefined' and 'null' pass
 		!forceClone && array.constructor === type) return array;
-
 		if (typeof type.BYTES_PER_ELEMENT === 'number') {
 			return new type(array); // create typed array
 		}
@@ -27869,48 +25136,40 @@
 
 	function isTypedArray(object) {
 		return ArrayBuffer.isView(object) && !(object instanceof DataView);
-	} // returns an array by which times and values can be sorted
-
+	}
 
+	// returns an array by which times and values can be sorted
 	function getKeyframeOrder(times) {
 		function compareTime(i, j) {
 			return times[i] - times[j];
 		}
-
 		const n = times.length;
 		const result = new Array(n);
-
 		for (let i = 0; i !== n; ++i) result[i] = i;
-
 		result.sort(compareTime);
 		return result;
-	} // uses the array previously returned by 'getKeyframeOrder' to sort data
-
+	}
 
+	// uses the array previously returned by 'getKeyframeOrder' to sort data
 	function sortedArray(values, stride, order) {
 		const nValues = values.length;
 		const result = new values.constructor(nValues);
-
 		for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
 			const srcOffset = order[i] * stride;
-
 			for (let j = 0; j !== stride; ++j) {
 				result[dstOffset++] = values[srcOffset + j];
 			}
 		}
-
 		return result;
-	} // function for parsing AOS keyframe formats
-
+	}
 
+	// function for parsing AOS keyframe formats
 	function flattenJSON(jsonKeys, times, values, valuePropertyName) {
 		let i = 1,
-				key = jsonKeys[0];
-
+			key = jsonKeys[0];
 		while (key !== undefined && key[valuePropertyName] === undefined) {
 			key = jsonKeys[i++];
 		}
-
 		if (key === undefined) return; // no data
 
 		let value = key[valuePropertyName];
@@ -27919,7 +25178,6 @@
 		if (Array.isArray(value)) {
 			do {
 				value = key[valuePropertyName];
-
 				if (value !== undefined) {
 					times.push(key.time);
 					values.push.apply(values, value); // push all elements
@@ -27929,109 +25187,101 @@
 			} while (key !== undefined);
 		} else if (value.toArray !== undefined) {
 			// ...assume THREE.Math-ish
+
 			do {
 				value = key[valuePropertyName];
-
 				if (value !== undefined) {
 					times.push(key.time);
 					value.toArray(values, values.length);
 				}
-
 				key = jsonKeys[i++];
 			} while (key !== undefined);
 		} else {
 			// otherwise push as-is
+
 			do {
 				value = key[valuePropertyName];
-
 				if (value !== undefined) {
 					times.push(key.time);
 					values.push(value);
 				}
-
 				key = jsonKeys[i++];
 			} while (key !== undefined);
 		}
 	}
-
 	function subclip(sourceClip, name, startFrame, endFrame, fps = 30) {
 		const clip = sourceClip.clone();
 		clip.name = name;
 		const tracks = [];
-
 		for (let i = 0; i < clip.tracks.length; ++i) {
 			const track = clip.tracks[i];
 			const valueSize = track.getValueSize();
 			const times = [];
 			const values = [];
-
 			for (let j = 0; j < track.times.length; ++j) {
 				const frame = track.times[j] * fps;
 				if (frame < startFrame || frame >= endFrame) continue;
 				times.push(track.times[j]);
-
 				for (let k = 0; k < valueSize; ++k) {
 					values.push(track.values[j * valueSize + k]);
 				}
 			}
-
 			if (times.length === 0) continue;
 			track.times = convertArray(times, track.times.constructor);
 			track.values = convertArray(values, track.values.constructor);
 			tracks.push(track);
 		}
+		clip.tracks = tracks;
 
-		clip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip
+		// find minimum .times value across all tracks in the trimmed clip
 
 		let minStartTime = Infinity;
-
 		for (let i = 0; i < clip.tracks.length; ++i) {
 			if (minStartTime > clip.tracks[i].times[0]) {
 				minStartTime = clip.tracks[i].times[0];
 			}
-		} // shift all tracks such that clip begins at t=0
+		}
 
+		// shift all tracks such that clip begins at t=0
 
 		for (let i = 0; i < clip.tracks.length; ++i) {
 			clip.tracks[i].shift(-1 * minStartTime);
 		}
-
 		clip.resetDuration();
 		return clip;
 	}
-
 	function makeClipAdditive(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
 		if (fps <= 0) fps = 30;
 		const numTracks = referenceClip.tracks.length;
-		const referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame
+		const referenceTime = referenceFrame / fps;
 
+		// Make each track's values relative to the values at the reference frame
 		for (let i = 0; i < numTracks; ++i) {
 			const referenceTrack = referenceClip.tracks[i];
-			const referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric
+			const referenceTrackType = referenceTrack.ValueTypeName;
 
-			if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track
+			// Skip this track if it's non-numeric
+			if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue;
 
+			// Find the track in the target clip whose name and type matches the reference track
 			const targetTrack = targetClip.tracks.find(function (track) {
 				return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
 			});
 			if (targetTrack === undefined) continue;
 			let referenceOffset = 0;
 			const referenceValueSize = referenceTrack.getValueSize();
-
 			if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
 				referenceOffset = referenceValueSize / 3;
 			}
-
 			let targetOffset = 0;
 			const targetValueSize = targetTrack.getValueSize();
-
 			if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
 				targetOffset = targetValueSize / 3;
 			}
-
 			const lastIndex = referenceTrack.times.length - 1;
-			let referenceValue; // Find the value to subtract out of the track
+			let referenceValue;
 
+			// Find the value to subtract out of the track
 			if (referenceTime <= referenceTrack.times[0]) {
 				// Reference frame is earlier than the first keyframe, so just use the first keyframe
 				const startIndex = referenceOffset;
@@ -28049,33 +25299,32 @@
 				const endIndex = referenceValueSize - referenceOffset;
 				interpolant.evaluate(referenceTime);
 				referenceValue = arraySlice(interpolant.resultBuffer, startIndex, endIndex);
-			} // Conjugate the quaternion
-
+			}
 
+			// Conjugate the quaternion
 			if (referenceTrackType === 'quaternion') {
 				const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
 				referenceQuat.toArray(referenceValue);
-			} // Subtract the reference value from all of the track values
+			}
 
+			// Subtract the reference value from all of the track values
 
 			const numTimes = targetTrack.times.length;
-
 			for (let j = 0; j < numTimes; ++j) {
 				const valueStart = j * targetValueSize + targetOffset;
-
 				if (referenceTrackType === 'quaternion') {
 					// Multiply the conjugate for quaternion track types
 					Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
 				} else {
-					const valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types
+					const valueEnd = targetValueSize - targetOffset * 2;
 
+					// Subtract each value for all other numeric track types
 					for (let k = 0; k < valueEnd; ++k) {
 						targetTrack.values[valueStart + k] -= referenceValue[k];
 					}
 				}
 			}
 		}
-
 		targetClip.blendMode = AdditiveAnimationBlendMode;
 		return targetClip;
 	}
@@ -28112,6 +25361,7 @@
 	 * 		http://www.oodesign.com/template-method-pattern.html
 	 *
 	 */
+
 	class Interpolant {
 		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
 			this.parameterPositions = parameterPositions;
@@ -28122,17 +25372,14 @@
 			this.settings = null;
 			this.DefaultSettings_ = {};
 		}
-
 		evaluate(t) {
 			const pp = this.parameterPositions;
 			let i1 = this._cachedIndex,
-					t1 = pp[i1],
-					t0 = pp[i1 - 1];
-
+				t1 = pp[i1],
+				t0 = pp[i1 - 1];
 			validate_interval: {
 				seek: {
 					let right;
-
 					linear_scan: {
 						//- See http://jsperf.com/comparison-to-undefined/3
 						//- slower code:
@@ -28141,90 +25388,89 @@
 						forward_scan: if (!(t < t1)) {
 							for (let giveUpAt = i1 + 2;;) {
 								if (t1 === undefined) {
-									if (t < t0) break forward_scan; // after end
+									if (t < t0) break forward_scan;
+
+									// after end
 
 									i1 = pp.length;
 									this._cachedIndex = i1;
 									return this.copySampleValue_(i1 - 1);
 								}
-
 								if (i1 === giveUpAt) break; // this loop
 
 								t0 = t1;
 								t1 = pp[++i1];
-
 								if (t < t1) {
 									// we have arrived at the sought interval
 									break seek;
 								}
-							} // prepare binary search on the right side of the index
-
+							}
 
+							// prepare binary search on the right side of the index
 							right = pp.length;
 							break linear_scan;
-						} //- slower code:
-						//-					if ( t < t0 || t0 === undefined ) {
-
+						}
 
+						//- slower code:
+						//-					if ( t < t0 || t0 === undefined ) {
 						if (!(t >= t0)) {
 							// looping?
-							const t1global = pp[1];
 
+							const t1global = pp[1];
 							if (t < t1global) {
 								i1 = 2; // + 1, using the scan for the details
-
 								t0 = t1global;
-							} // linear reverse scan
+							}
 
+							// linear reverse scan
 
 							for (let giveUpAt = i1 - 2;;) {
 								if (t0 === undefined) {
 									// before start
+
 									this._cachedIndex = 0;
 									return this.copySampleValue_(0);
 								}
-
 								if (i1 === giveUpAt) break; // this loop
 
 								t1 = t0;
 								t0 = pp[--i1 - 1];
-
 								if (t >= t0) {
 									// we have arrived at the sought interval
 									break seek;
 								}
-							} // prepare binary search on the left side of the index
-
+							}
 
+							// prepare binary search on the left side of the index
 							right = i1;
 							i1 = 0;
 							break linear_scan;
-						} // the interval is valid
+						}
 
+						// the interval is valid
 
 						break validate_interval;
 					} // linear scan
-					// binary search
 
+					// binary search
 
 					while (i1 < right) {
 						const mid = i1 + right >>> 1;
-
 						if (t < pp[mid]) {
 							right = mid;
 						} else {
 							i1 = mid + 1;
 						}
 					}
-
 					t1 = pp[i1];
-					t0 = pp[i1 - 1]; // check boundary cases, again
+					t0 = pp[i1 - 1];
+
+					// check boundary cases, again
 
 					if (t0 === undefined) {
 						this._cachedIndex = 0;
 						return this.copySampleValue_(0);
 					}
-
 					if (t1 === undefined) {
 						i1 = pp.length;
 						this._cachedIndex = i1;
@@ -28232,41 +25478,39 @@
 					}
 				} // seek
 
-
 				this._cachedIndex = i1;
 				this.intervalChanged_(i1, t0, t1);
 			} // validate_interval
 
-
 			return this.interpolate_(i1, t0, t, t1);
 		}
-
 		getSettings_() {
 			return this.settings || this.DefaultSettings_;
 		}
-
 		copySampleValue_(index) {
 			// copies a sample value to the result buffer
-			const result = this.resultBuffer,
-						values = this.sampleValues,
-						stride = this.valueSize,
-						offset = index * stride;
 
+			const result = this.resultBuffer,
+				values = this.sampleValues,
+				stride = this.valueSize,
+				offset = index * stride;
 			for (let i = 0; i !== stride; ++i) {
 				result[i] = values[offset + i];
 			}
-
 			return result;
-		} // Template methods for derived classes:
+		}
 
+		// Template methods for derived classes:
 
 		interpolate_() {
-			throw new Error('call to abstract method'); // implementations shall return this.resultBuffer
+			throw new Error('call to abstract method');
+			// implementations shall return this.resultBuffer
 		}
 
-		intervalChanged_() {// empty
-		}
+		intervalChanged_() {
 
+			// empty
+		}
 	}
 
 	/**
@@ -28289,14 +25533,12 @@
 				endingEnd: ZeroCurvatureEnding
 			};
 		}
-
 		intervalChanged_(i1, t0, t1) {
 			const pp = this.parameterPositions;
 			let iPrev = i1 - 2,
-					iNext = i1 + 1,
-					tPrev = pp[iPrev],
-					tNext = pp[iNext];
-
+				iNext = i1 + 1,
+				tPrev = pp[iPrev],
+				tNext = pp[iNext];
 			if (tPrev === undefined) {
 				switch (this.getSettings_().endingStart) {
 					case ZeroSlopeEnding:
@@ -28304,21 +25546,19 @@
 						iPrev = i1;
 						tPrev = 2 * t0 - t1;
 						break;
-
 					case WrapAroundEnding:
 						// use the other end of the curve
 						iPrev = pp.length - 2;
 						tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
 						break;
-
 					default:
 						// ZeroCurvatureEnding
+
 						// f''(t0) = 0 a.k.a. Natural Spline
 						iPrev = i1;
 						tPrev = t1;
 				}
 			}
-
 			if (tNext === undefined) {
 				switch (this.getSettings_().endingEnd) {
 					case ZeroSlopeEnding:
@@ -28326,78 +25566,73 @@
 						iNext = i1;
 						tNext = 2 * t1 - t0;
 						break;
-
 					case WrapAroundEnding:
 						// use the other end of the curve
 						iNext = 1;
 						tNext = t1 + pp[1] - pp[0];
 						break;
-
 					default:
 						// ZeroCurvatureEnding
+
 						// f''(tN) = 0, a.k.a. Natural Spline
 						iNext = i1 - 1;
 						tNext = t0;
 				}
 			}
-
 			const halfDt = (t1 - t0) * 0.5,
-						stride = this.valueSize;
+				stride = this.valueSize;
 			this._weightPrev = halfDt / (t0 - tPrev);
 			this._weightNext = halfDt / (tNext - t1);
 			this._offsetPrev = iPrev * stride;
 			this._offsetNext = iNext * stride;
 		}
-
 		interpolate_(i1, t0, t, t1) {
 			const result = this.resultBuffer,
-						values = this.sampleValues,
-						stride = this.valueSize,
-						o1 = i1 * stride,
-						o0 = o1 - stride,
-						oP = this._offsetPrev,
-						oN = this._offsetNext,
-						wP = this._weightPrev,
-						wN = this._weightNext,
-						p = (t - t0) / (t1 - t0),
-						pp = p * p,
-						ppp = pp * p; // evaluate polynomials
+				values = this.sampleValues,
+				stride = this.valueSize,
+				o1 = i1 * stride,
+				o0 = o1 - stride,
+				oP = this._offsetPrev,
+				oN = this._offsetNext,
+				wP = this._weightPrev,
+				wN = this._weightNext,
+				p = (t - t0) / (t1 - t0),
+				pp = p * p,
+				ppp = pp * p;
+
+			// evaluate polynomials
 
 			const sP = -wP * ppp + 2 * wP * pp - wP * p;
 			const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
 			const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
-			const sN = wN * ppp - wN * pp; // combine data linearly
+			const sN = wN * ppp - wN * pp;
+
+			// combine data linearly
 
 			for (let i = 0; i !== stride; ++i) {
 				result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
 			}
-
 			return result;
 		}
-
 	}
 
 	class LinearInterpolant extends Interpolant {
 		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
 			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
 		}
-
 		interpolate_(i1, t0, t, t1) {
 			const result = this.resultBuffer,
-						values = this.sampleValues,
-						stride = this.valueSize,
-						offset1 = i1 * stride,
-						offset0 = offset1 - stride,
-						weight1 = (t - t0) / (t1 - t0),
-						weight0 = 1 - weight1;
-
+				values = this.sampleValues,
+				stride = this.valueSize,
+				offset1 = i1 * stride,
+				offset0 = offset1 - stride,
+				weight1 = (t - t0) / (t1 - t0),
+				weight0 = 1 - weight1;
 			for (let i = 0; i !== stride; ++i) {
 				result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
 			}
-
 			return result;
 		}
-
 	}
 
 	/**
@@ -28410,13 +25645,9 @@
 		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
 			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
 		}
-
-		interpolate_(i1
-		/*, t0, t, t1 */
-		) {
+		interpolate_(i1 /*, t0, t, t1 */) {
 			return this.copySampleValue_(i1 - 1);
 		}
-
 	}
 
 	class KeyframeTrack {
@@ -28427,14 +25658,16 @@
 			this.times = convertArray(times, this.TimeBufferType);
 			this.values = convertArray(values, this.ValueBufferType);
 			this.setInterpolation(interpolation || this.DefaultInterpolation);
-		} // Serialization (in static context, because of constructor invocation
-		// and automatic invocation of .toJSON):
+		}
 
+		// Serialization (in static context, because of constructor invocation
+		// and automatic invocation of .toJSON):
 
 		static toJSON(track) {
 			const trackType = track.constructor;
-			let json; // derived classes can define a static toJSON method
+			let json;
 
+			// derived classes can define a static toJSON method
 			if (trackType.toJSON !== this.toJSON) {
 				json = trackType.toJSON(track);
 			} else {
@@ -28445,49 +25678,38 @@
 					'values': convertArray(track.values, Array)
 				};
 				const interpolation = track.getInterpolation();
-
 				if (interpolation !== track.DefaultInterpolation) {
 					json.interpolation = interpolation;
 				}
 			}
-
 			json.type = track.ValueTypeName; // mandatory
 
 			return json;
 		}
-
 		InterpolantFactoryMethodDiscrete(result) {
 			return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
 		}
-
 		InterpolantFactoryMethodLinear(result) {
 			return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
 		}
-
 		InterpolantFactoryMethodSmooth(result) {
 			return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
 		}
-
 		setInterpolation(interpolation) {
 			let factoryMethod;
-
 			switch (interpolation) {
 				case InterpolateDiscrete:
 					factoryMethod = this.InterpolantFactoryMethodDiscrete;
 					break;
-
 				case InterpolateLinear:
 					factoryMethod = this.InterpolantFactoryMethodLinear;
 					break;
-
 				case InterpolateSmooth:
 					factoryMethod = this.InterpolantFactoryMethodSmooth;
 					break;
 			}
-
 			if (factoryMethod === undefined) {
 				const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;
-
 				if (this.createInterpolant === undefined) {
 					// fall back to default, unless the default itself is messed up
 					if (interpolation !== this.DefaultInterpolation) {
@@ -28500,70 +25722,58 @@
 				console.warn('THREE.KeyframeTrack:', message);
 				return this;
 			}
-
 			this.createInterpolant = factoryMethod;
 			return this;
 		}
-
 		getInterpolation() {
 			switch (this.createInterpolant) {
 				case this.InterpolantFactoryMethodDiscrete:
 					return InterpolateDiscrete;
-
 				case this.InterpolantFactoryMethodLinear:
 					return InterpolateLinear;
-
 				case this.InterpolantFactoryMethodSmooth:
 					return InterpolateSmooth;
 			}
 		}
-
 		getValueSize() {
 			return this.values.length / this.times.length;
-		} // move all keyframes either forwards or backwards in time
-
+		}
 
+		// move all keyframes either forwards or backwards in time
 		shift(timeOffset) {
 			if (timeOffset !== 0.0) {
 				const times = this.times;
-
 				for (let i = 0, n = times.length; i !== n; ++i) {
 					times[i] += timeOffset;
 				}
 			}
-
 			return this;
-		} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
-
+		}
 
+		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
 		scale(timeScale) {
 			if (timeScale !== 1.0) {
 				const times = this.times;
-
 				for (let i = 0, n = times.length; i !== n; ++i) {
 					times[i] *= timeScale;
 				}
 			}
-
 			return this;
-		} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
-		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
-
+		}
 
+		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
+		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
 		trim(startTime, endTime) {
 			const times = this.times,
-						nKeys = times.length;
+				nKeys = times.length;
 			let from = 0,
-					to = nKeys - 1;
-
+				to = nKeys - 1;
 			while (from !== nKeys && times[from] < startTime) {
 				++from;
 			}
-
 			while (to !== -1 && times[to] > endTime) {
 				--to;
 			}
-
 			++to; // inclusive -> exclusive bound
 
 			if (from !== 0 || to !== nKeys) {
@@ -28572,59 +25782,47 @@
 					to = Math.max(to, 1);
 					from = to - 1;
 				}
-
 				const stride = this.getValueSize();
 				this.times = arraySlice(times, from, to);
 				this.values = arraySlice(this.values, from * stride, to * stride);
 			}
-
 			return this;
-		} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
-
+		}
 
+		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
 		validate() {
 			let valid = true;
 			const valueSize = this.getValueSize();
-
 			if (valueSize - Math.floor(valueSize) !== 0) {
 				console.error('THREE.KeyframeTrack: Invalid value size in track.', this);
 				valid = false;
 			}
-
 			const times = this.times,
-						values = this.values,
-						nKeys = times.length;
-
+				values = this.values,
+				nKeys = times.length;
 			if (nKeys === 0) {
 				console.error('THREE.KeyframeTrack: Track is empty.', this);
 				valid = false;
 			}
-
 			let prevTime = null;
-
 			for (let i = 0; i !== nKeys; i++) {
 				const currTime = times[i];
-
 				if (typeof currTime === 'number' && isNaN(currTime)) {
 					console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);
 					valid = false;
 					break;
 				}
-
 				if (prevTime !== null && prevTime > currTime) {
 					console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);
 					valid = false;
 					break;
 				}
-
 				prevTime = currTime;
 			}
-
 			if (values !== undefined) {
 				if (isTypedArray(values)) {
 					for (let i = 0, n = values.length; i !== n; ++i) {
 						const value = values[i];
-
 						if (isNaN(value)) {
 							console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);
 							valid = false;
@@ -28633,36 +25831,35 @@
 					}
 				}
 			}
-
 			return valid;
-		} // removes equivalent sequential keys as common in morph target sequences
-		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
-
+		}
 
+		// removes equivalent sequential keys as common in morph target sequences
+		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
 		optimize() {
 			// times or values may be shared with other tracks, so overwriting is unsafe
 			const times = arraySlice(this.times),
-						values = arraySlice(this.values),
-						stride = this.getValueSize(),
-						smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
-						lastIndex = times.length - 1;
+				values = arraySlice(this.values),
+				stride = this.getValueSize(),
+				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
+				lastIndex = times.length - 1;
 			let writeIndex = 1;
-
 			for (let i = 1; i < lastIndex; ++i) {
 				let keep = false;
 				const time = times[i];
-				const timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time
+				const timeNext = times[i + 1];
+
+				// remove adjacent keyframes scheduled at the same time
 
 				if (time !== timeNext && (i !== 1 || time !== times[0])) {
 					if (!smoothInterpolation) {
 						// remove unnecessary keyframes same as their neighbors
-						const offset = i * stride,
-									offsetP = offset - stride,
-									offsetN = offset + stride;
 
+						const offset = i * stride,
+							offsetP = offset - stride,
+							offsetN = offset + stride;
 						for (let j = 0; j !== stride; ++j) {
 							const value = values[offset + j];
-
 							if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
 								keep = true;
 								break;
@@ -28671,35 +25868,32 @@
 					} else {
 						keep = true;
 					}
-				} // in-place compaction
+				}
 
+				// in-place compaction
 
 				if (keep) {
 					if (i !== writeIndex) {
 						times[writeIndex] = times[i];
 						const readOffset = i * stride,
-									writeOffset = writeIndex * stride;
-
+							writeOffset = writeIndex * stride;
 						for (let j = 0; j !== stride; ++j) {
 							values[writeOffset + j] = values[readOffset + j];
 						}
 					}
-
 					++writeIndex;
 				}
-			} // flush last keyframe (compaction looks ahead)
+			}
 
+			// flush last keyframe (compaction looks ahead)
 
 			if (lastIndex > 0) {
 				times[writeIndex] = times[lastIndex];
-
 				for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
 					values[writeOffset + j] = values[readOffset + j];
 				}
-
 				++writeIndex;
 			}
-
 			if (writeIndex !== times.length) {
 				this.times = arraySlice(times, 0, writeIndex);
 				this.values = arraySlice(values, 0, writeIndex * stride);
@@ -28707,22 +25901,19 @@
 				this.times = times;
 				this.values = values;
 			}
-
 			return this;
 		}
-
 		clone() {
 			const times = arraySlice(this.times, 0);
 			const values = arraySlice(this.values, 0);
 			const TypedKeyframeTrack = this.constructor;
-			const track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.
+			const track = new TypedKeyframeTrack(this.name, times, values);
 
+			// Interpolant argument to constructor is not saved, so copy the factory method directly.
 			track.createInterpolant = this.createInterpolant;
 			return track;
 		}
-
 	}
-
 	KeyframeTrack.prototype.TimeBufferType = Float32Array;
 	KeyframeTrack.prototype.ValueBufferType = Float32Array;
 	KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
@@ -28730,30 +25921,24 @@
 	/**
 	 * A Track of Boolean keyframe values.
 	 */
-
 	class BooleanKeyframeTrack extends KeyframeTrack {}
-
 	BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
 	BooleanKeyframeTrack.prototype.ValueBufferType = Array;
 	BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
 	BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
-	BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed
+	BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
 
 	/**
 	 * A Track of keyframe values that represent color.
 	 */
-
 	class ColorKeyframeTrack extends KeyframeTrack {}
-
-	ColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited
+	ColorKeyframeTrack.prototype.ValueTypeName = 'color';
 
 	/**
 	 * A Track of numeric keyframe values.
 	 */
-
 	class NumberKeyframeTrack extends KeyframeTrack {}
-
-	NumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited
+	NumberKeyframeTrack.prototype.ValueTypeName = 'number';
 
 	/**
 	 * Spherical linear unit quaternion interpolant.
@@ -28763,45 +25948,36 @@
 		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
 			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
 		}
-
 		interpolate_(i1, t0, t, t1) {
 			const result = this.resultBuffer,
-						values = this.sampleValues,
-						stride = this.valueSize,
-						alpha = (t - t0) / (t1 - t0);
+				values = this.sampleValues,
+				stride = this.valueSize,
+				alpha = (t - t0) / (t1 - t0);
 			let offset = i1 * stride;
-
 			for (let end = offset + stride; offset !== end; offset += 4) {
 				Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
 			}
-
 			return result;
 		}
-
 	}
 
 	/**
 	 * A Track of quaternion keyframe values.
 	 */
-
 	class QuaternionKeyframeTrack extends KeyframeTrack {
 		InterpolantFactoryMethodLinear(result) {
 			return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
 		}
-
 	}
-
-	QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited
-
+	QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';
+	// ValueBufferType is inherited
 	QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
 	QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
 
 	/**
 	 * A Track that interpolates Strings
 	 */
-
 	class StringKeyframeTrack extends KeyframeTrack {}
-
 	StringKeyframeTrack.prototype.ValueTypeName = 'string';
 	StringKeyframeTrack.prototype.ValueBufferType = Array;
 	StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
@@ -28811,10 +25987,8 @@
 	/**
 	 * A Track of vectored keyframe values.
 	 */
-
 	class VectorKeyframeTrack extends KeyframeTrack {}
-
-	VectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited
+	VectorKeyframeTrack.prototype.ValueTypeName = 'vector';
 
 	class AnimationClip {
 		constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {
@@ -28822,30 +25996,27 @@
 			this.tracks = tracks;
 			this.duration = duration;
 			this.blendMode = blendMode;
-			this.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks
+			this.uuid = generateUUID();
 
+			// this means it should figure out its duration by scanning the tracks
 			if (this.duration < 0) {
 				this.resetDuration();
 			}
 		}
-
 		static parse(json) {
 			const tracks = [],
-						jsonTracks = json.tracks,
-						frameTime = 1.0 / (json.fps || 1.0);
-
+				jsonTracks = json.tracks,
+				frameTime = 1.0 / (json.fps || 1.0);
 			for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
 				tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
 			}
-
 			const clip = new this(json.name, json.duration, tracks, json.blendMode);
 			clip.uuid = json.uuid;
 			return clip;
 		}
-
 		static toJSON(clip) {
 			const tracks = [],
-						clipTracks = clip.tracks;
+				clipTracks = clip.tracks;
 			const json = {
 				'name': clip.name,
 				'duration': clip.duration,
@@ -28853,18 +26024,14 @@
 				'uuid': clip.uuid,
 				'blendMode': clip.blendMode
 			};
-
 			for (let i = 0, n = clipTracks.length; i !== n; ++i) {
 				tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
 			}
-
 			return json;
 		}
-
 		static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
 			const numMorphTargets = morphTargetSequence.length;
 			const tracks = [];
-
 			for (let i = 0; i < numMorphTargets; i++) {
 				let times = [];
 				let values = [];
@@ -28872,204 +26039,174 @@
 				values.push(0, 1, 0);
 				const order = getKeyframeOrder(times);
 				times = sortedArray(times, 1, order);
-				values = sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the
-				// last frame as well for perfect loop.
+				values = sortedArray(values, 1, order);
 
+				// if there is a key at the first frame, duplicate it as the
+				// last frame as well for perfect loop.
 				if (!noLoop && times[0] === 0) {
 					times.push(numMorphTargets);
 					values.push(values[0]);
 				}
-
 				tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));
 			}
-
 			return new this(name, -1, tracks);
 		}
-
 		static findByName(objectOrClipArray, name) {
 			let clipArray = objectOrClipArray;
-
 			if (!Array.isArray(objectOrClipArray)) {
 				const o = objectOrClipArray;
 				clipArray = o.geometry && o.geometry.animations || o.animations;
 			}
-
 			for (let i = 0; i < clipArray.length; i++) {
 				if (clipArray[i].name === name) {
 					return clipArray[i];
 				}
 			}
-
 			return null;
 		}
-
 		static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
-			const animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences
+			const animationToMorphTargets = {};
+
+			// tested with https://regex101.com/ on trick sequences
 			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
+			const pattern = /^([\w-]*?)([\d]+)$/;
 
-			const pattern = /^([\w-]*?)([\d]+)$/; // sort morph target names into animation groups based
+			// sort morph target names into animation groups based
 			// patterns like Walk_001, Walk_002, Run_001, Run_002
-
 			for (let i = 0, il = morphTargets.length; i < il; i++) {
 				const morphTarget = morphTargets[i];
 				const parts = morphTarget.name.match(pattern);
-
 				if (parts && parts.length > 1) {
 					const name = parts[1];
 					let animationMorphTargets = animationToMorphTargets[name];
-
 					if (!animationMorphTargets) {
 						animationToMorphTargets[name] = animationMorphTargets = [];
 					}
-
 					animationMorphTargets.push(morphTarget);
 				}
 			}
-
 			const clips = [];
-
 			for (const name in animationToMorphTargets) {
 				clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
 			}
-
 			return clips;
-		} // parse the animation.hierarchy format
-
+		}
 
+		// parse the animation.hierarchy format
 		static parseAnimation(animation, bones) {
 			if (!animation) {
 				console.error('THREE.AnimationClip: No animation in JSONLoader data.');
 				return null;
 			}
-
 			const addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {
 				// only return track if there are actually keys.
 				if (animationKeys.length !== 0) {
 					const times = [];
 					const values = [];
-					flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again
+					flattenJSON(animationKeys, times, values, propertyName);
 
+					// empty keys are filtered out, so check again
 					if (times.length !== 0) {
 						destTracks.push(new trackType(trackName, times, values));
 					}
 				}
 			};
-
 			const tracks = [];
 			const clipName = animation.name || 'default';
 			const fps = animation.fps || 30;
-			const blendMode = animation.blendMode; // automatic length determination in AnimationClip.
+			const blendMode = animation.blendMode;
 
+			// automatic length determination in AnimationClip.
 			let duration = animation.length || -1;
 			const hierarchyTracks = animation.hierarchy || [];
-
 			for (let h = 0; h < hierarchyTracks.length; h++) {
-				const animationKeys = hierarchyTracks[h].keys; // skip empty tracks
+				const animationKeys = hierarchyTracks[h].keys;
 
-				if (!animationKeys || animationKeys.length === 0) continue; // process morph targets
+				// skip empty tracks
+				if (!animationKeys || animationKeys.length === 0) continue;
 
+				// process morph targets
 				if (animationKeys[0].morphTargets) {
 					// figure out all morph targets used in this track
 					const morphTargetNames = {};
 					let k;
-
 					for (k = 0; k < animationKeys.length; k++) {
 						if (animationKeys[k].morphTargets) {
 							for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
 								morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
 							}
 						}
-					} // create a track for each morph target with all zero
+					}
+
+					// create a track for each morph target with all zero
 					// morphTargetInfluences except for the keys in which
 					// the morphTarget is named.
-
-
 					for (const morphTargetName in morphTargetNames) {
 						const times = [];
 						const values = [];
-
 						for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
 							const animationKey = animationKeys[k];
 							times.push(animationKey.time);
 							values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
 						}
-
 						tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));
 					}
-
 					duration = morphTargetNames.length * fps;
 				} else {
 					// ...assume skeletal animation
+
 					const boneName = '.bones[' + bones[h].name + ']';
 					addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);
 					addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);
 					addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);
 				}
 			}
-
 			if (tracks.length === 0) {
 				return null;
 			}
-
 			const clip = new this(clipName, duration, tracks, blendMode);
 			return clip;
 		}
-
 		resetDuration() {
 			const tracks = this.tracks;
 			let duration = 0;
-
 			for (let i = 0, n = tracks.length; i !== n; ++i) {
 				const track = this.tracks[i];
 				duration = Math.max(duration, track.times[track.times.length - 1]);
 			}
-
 			this.duration = duration;
 			return this;
 		}
-
 		trim() {
 			for (let i = 0; i < this.tracks.length; i++) {
 				this.tracks[i].trim(0, this.duration);
 			}
-
 			return this;
 		}
-
 		validate() {
 			let valid = true;
-
 			for (let i = 0; i < this.tracks.length; i++) {
 				valid = valid && this.tracks[i].validate();
 			}
-
 			return valid;
 		}
-
 		optimize() {
 			for (let i = 0; i < this.tracks.length; i++) {
 				this.tracks[i].optimize();
 			}
-
 			return this;
 		}
-
 		clone() {
 			const tracks = [];
-
 			for (let i = 0; i < this.tracks.length; i++) {
 				tracks.push(this.tracks[i].clone());
 			}
-
 			return new this.constructor(this.name, this.duration, tracks, this.blendMode);
 		}
-
 		toJSON() {
 			return this.constructor.toJSON(this);
 		}
-
 	}
-
 	function getTrackTypeForValueTypeName(typeName) {
 		switch (typeName.toLowerCase()) {
 			case 'scalar':
@@ -29078,46 +26215,37 @@
 			case 'number':
 			case 'integer':
 				return NumberKeyframeTrack;
-
 			case 'vector':
 			case 'vector2':
 			case 'vector3':
 			case 'vector4':
 				return VectorKeyframeTrack;
-
 			case 'color':
 				return ColorKeyframeTrack;
-
 			case 'quaternion':
 				return QuaternionKeyframeTrack;
-
 			case 'bool':
 			case 'boolean':
 				return BooleanKeyframeTrack;
-
 			case 'string':
 				return StringKeyframeTrack;
 		}
-
 		throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
 	}
-
 	function parseKeyframeTrack(json) {
 		if (json.type === undefined) {
 			throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');
 		}
-
 		const trackType = getTrackTypeForValueTypeName(json.type);
-
 		if (json.times === undefined) {
 			const times = [],
-						values = [];
+				values = [];
 			flattenJSON(json.keys, times, values, 'value');
 			json.times = times;
 			json.values = values;
-		} // derived classes can define a static parse method
-
+		}
 
+		// derived classes can define a static parse method
 		if (trackType.parse !== undefined) {
 			return trackType.parse(json);
 		} else {
@@ -29130,12 +26258,16 @@
 		enabled: false,
 		files: {},
 		add: function (key, file) {
-			if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );
+			if (this.enabled === false) return;
+
+			// console.log( 'THREE.Cache', 'Adding key:', key );
 
 			this.files[key] = file;
 		},
 		get: function (key) {
-			if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );
+			if (this.enabled === false) return;
+
+			// console.log( 'THREE.Cache', 'Checking key:', key );
 
 			return this.files[key];
 		},
@@ -29154,76 +26286,62 @@
 			let itemsLoaded = 0;
 			let itemsTotal = 0;
 			let urlModifier = undefined;
-			const handlers = []; // Refer to #5689 for the reason why we don't set .onStart
+			const handlers = [];
+
+			// Refer to #5689 for the reason why we don't set .onStart
 			// in the constructor
 
 			this.onStart = undefined;
 			this.onLoad = onLoad;
 			this.onProgress = onProgress;
 			this.onError = onError;
-
 			this.itemStart = function (url) {
 				itemsTotal++;
-
 				if (isLoading === false) {
 					if (scope.onStart !== undefined) {
 						scope.onStart(url, itemsLoaded, itemsTotal);
 					}
 				}
-
 				isLoading = true;
 			};
-
 			this.itemEnd = function (url) {
 				itemsLoaded++;
-
 				if (scope.onProgress !== undefined) {
 					scope.onProgress(url, itemsLoaded, itemsTotal);
 				}
-
 				if (itemsLoaded === itemsTotal) {
 					isLoading = false;
-
 					if (scope.onLoad !== undefined) {
 						scope.onLoad();
 					}
 				}
 			};
-
 			this.itemError = function (url) {
 				if (scope.onError !== undefined) {
 					scope.onError(url);
 				}
 			};
-
 			this.resolveURL = function (url) {
 				if (urlModifier) {
 					return urlModifier(url);
 				}
-
 				return url;
 			};
-
 			this.setURLModifier = function (transform) {
 				urlModifier = transform;
 				return this;
 			};
-
 			this.addHandler = function (regex, loader) {
 				handlers.push(regex, loader);
 				return this;
 			};
-
 			this.removeHandler = function (regex) {
 				const index = handlers.indexOf(regex);
-
 				if (index !== -1) {
 					handlers.splice(index, 2);
 				}
-
 				return this;
 			};
-
 			this.getHandler = function (file) {
 				for (let i = 0, l = handlers.length; i < l; i += 2) {
 					const regex = handlers[i];
@@ -29234,13 +26352,10 @@
 						return loader;
 					}
 				}
-
 				return null;
 			};
 		}
-
 	}
-
 	const DefaultLoadingManager = /*@__PURE__*/new LoadingManager();
 
 	class Loader {
@@ -29252,66 +26367,52 @@
 			this.resourcePath = '';
 			this.requestHeader = {};
 		}
-
 		load() {}
-
 		loadAsync(url, onProgress) {
 			const scope = this;
 			return new Promise(function (resolve, reject) {
 				scope.load(url, resolve, onProgress, reject);
 			});
 		}
-
 		parse() {}
-
 		setCrossOrigin(crossOrigin) {
 			this.crossOrigin = crossOrigin;
 			return this;
 		}
-
 		setWithCredentials(value) {
 			this.withCredentials = value;
 			return this;
 		}
-
 		setPath(path) {
 			this.path = path;
 			return this;
 		}
-
 		setResourcePath(resourcePath) {
 			this.resourcePath = resourcePath;
 			return this;
 		}
-
 		setRequestHeader(requestHeader) {
 			this.requestHeader = requestHeader;
 			return this;
 		}
-
 	}
 
 	const loading = {};
-
 	class HttpError extends Error {
 		constructor(message, response) {
 			super(message);
 			this.response = response;
 		}
-
 	}
-
 	class FileLoader extends Loader {
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			if (url === undefined) url = '';
 			if (this.path !== undefined) url = this.path + url;
 			url = this.manager.resolveURL(url);
 			const cached = Cache.get(url);
-
 			if (cached !== undefined) {
 				this.manager.itemStart(url);
 				setTimeout(() => {
@@ -29319,8 +26420,9 @@
 					this.manager.itemEnd(url);
 				}, 0);
 				return cached;
-			} // Check if request is duplicate
+			}
 
+			// Check if request is duplicate
 
 			if (loading[url] !== undefined) {
 				loading[url].push({
@@ -29329,51 +26431,56 @@
 					onError: onError
 				});
 				return;
-			} // Initialise array for duplicate requests
-
+			}
 
+			// Initialise array for duplicate requests
 			loading[url] = [];
 			loading[url].push({
 				onLoad: onLoad,
 				onProgress: onProgress,
 				onError: onError
-			}); // create request
+			});
 
+			// create request
 			const req = new Request(url, {
 				headers: new Headers(this.requestHeader),
-				credentials: this.withCredentials ? 'include' : 'same-origin' // An abort controller could be added within a future PR
-
-			}); // record states ( avoid data race )
+				credentials: this.withCredentials ? 'include' : 'same-origin'
+				// An abort controller could be added within a future PR
+			});
 
+			// record states ( avoid data race )
 			const mimeType = this.mimeType;
-			const responseType = this.responseType; // start the fetch
+			const responseType = this.responseType;
 
+			// start the fetch
 			fetch(req).then(response => {
 				if (response.status === 200 || response.status === 0) {
 					// Some browsers return HTTP Status 0 when using non-http protocol
 					// e.g. 'file://' or 'data://'. Handle as success.
+
 					if (response.status === 0) {
 						console.warn('THREE.FileLoader: HTTP Status 0 received.');
-					} // Workaround: Checking if response.body === undefined for Alipay browser #23548
+					}
 
+					// Workaround: Checking if response.body === undefined for Alipay browser #23548
 
 					if (typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined) {
 						return response;
 					}
-
 					const callbacks = loading[url];
-					const reader = response.body.getReader(); // Nginx needs X-File-Size check
-					// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content
+					const reader = response.body.getReader();
 
+					// Nginx needs X-File-Size check
+					// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content
 					const contentLength = response.headers.get('Content-Length') || response.headers.get('X-File-Size');
 					const total = contentLength ? parseInt(contentLength) : 0;
 					const lengthComputable = total !== 0;
-					let loaded = 0; // periodically read data into the new stream tracking while download progress
+					let loaded = 0;
 
+					// periodically read data into the new stream tracking while download progress
 					const stream = new ReadableStream({
 						start(controller) {
 							readData();
-
 							function readData() {
 								reader.read().then(({
 									done,
@@ -29388,19 +26495,16 @@
 											loaded,
 											total
 										});
-
 										for (let i = 0, il = callbacks.length; i < il; i++) {
 											const callback = callbacks[i];
 											if (callback.onProgress) callback.onProgress(event);
 										}
-
 										controller.enqueue(value);
 										readData();
 									}
 								});
 							}
 						}
-
 					});
 					return new Response(stream);
 				} else {
@@ -29410,19 +26514,15 @@
 				switch (responseType) {
 					case 'arraybuffer':
 						return response.arrayBuffer();
-
 					case 'blob':
 						return response.blob();
-
 					case 'document':
 						return response.text().then(text => {
 							const parser = new DOMParser();
 							return parser.parseFromString(text, mimeType);
 						});
-
 					case 'json':
 						return response.json();
-
 					default:
 						if (mimeType === undefined) {
 							return response.text();
@@ -29434,7 +26534,6 @@
 							const decoder = new TextDecoder(label);
 							return response.arrayBuffer().then(ab => decoder.decode(ab));
 						}
-
 				}
 			}).then(data => {
 				// Add to cache only on HTTP success, so that we do not cache
@@ -29442,52 +26541,44 @@
 				Cache.add(url, data);
 				const callbacks = loading[url];
 				delete loading[url];
-
 				for (let i = 0, il = callbacks.length; i < il; i++) {
 					const callback = callbacks[i];
 					if (callback.onLoad) callback.onLoad(data);
 				}
 			}).catch(err => {
 				// Abort errors and other errors are handled the same
-				const callbacks = loading[url];
 
+				const callbacks = loading[url];
 				if (callbacks === undefined) {
 					// When onLoad was called and url was deleted in `loading`
 					this.manager.itemError(url);
 					throw err;
 				}
-
 				delete loading[url];
-
 				for (let i = 0, il = callbacks.length; i < il; i++) {
 					const callback = callbacks[i];
 					if (callback.onError) callback.onError(err);
 				}
-
 				this.manager.itemError(url);
 			}).finally(() => {
 				this.manager.itemEnd(url);
 			});
 			this.manager.itemStart(url);
 		}
-
 		setResponseType(value) {
 			this.responseType = value;
 			return this;
 		}
-
 		setMimeType(value) {
 			this.mimeType = value;
 			return this;
 		}
-
 	}
 
 	class AnimationLoader extends Loader {
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			const scope = this;
 			const loader = new FileLoader(this.manager);
@@ -29503,23 +26594,18 @@
 					} else {
 						console.error(e);
 					}
-
 					scope.manager.itemError(url);
 				}
 			}, onProgress, onError);
 		}
-
 		parse(json) {
 			const animations = [];
-
 			for (let i = 0; i < json.length; i++) {
 				const clip = AnimationClip.parse(json[i]);
 				animations.push(clip);
 			}
-
 			return animations;
 		}
-
 	}
 
 	/**
@@ -29532,7 +26618,6 @@
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			const scope = this;
 			const images = [];
@@ -29543,7 +26628,6 @@
 			loader.setRequestHeader(this.requestHeader);
 			loader.setWithCredentials(scope.withCredentials);
 			let loaded = 0;
-
 			function loadTexture(i) {
 				loader.load(url[i], function (buffer) {
 					const texDatas = scope.parse(buffer, true);
@@ -29554,7 +26638,6 @@
 						mipmaps: texDatas.mipmaps
 					};
 					loaded += 1;
-
 					if (loaded === 6) {
 						if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
 						texture.image = images;
@@ -29564,24 +26647,21 @@
 					}
 				}, onProgress, onError);
 			}
-
 			if (Array.isArray(url)) {
 				for (let i = 0, il = url.length; i < il; ++i) {
 					loadTexture(i);
 				}
 			} else {
 				// compressed cubemap texture stored in a single DDS file
+
 				loader.load(url, function (buffer) {
 					const texDatas = scope.parse(buffer, true);
-
 					if (texDatas.isCubemap) {
 						const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
-
 						for (let f = 0; f < faces; f++) {
 							images[f] = {
 								mipmaps: []
 							};
-
 							for (let i = 0; i < texDatas.mipmapCount; i++) {
 								images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
 								images[f].format = texDatas.format;
@@ -29589,40 +26669,33 @@
 								images[f].height = texDatas.height;
 							}
 						}
-
 						texture.image = images;
 					} else {
 						texture.image.width = texDatas.width;
 						texture.image.height = texDatas.height;
 						texture.mipmaps = texDatas.mipmaps;
 					}
-
 					if (texDatas.mipmapCount === 1) {
 						texture.minFilter = LinearFilter;
 					}
-
 					texture.format = texDatas.format;
 					texture.needsUpdate = true;
 					if (onLoad) onLoad(texture);
 				}, onProgress, onError);
 			}
-
 			return texture;
 		}
-
 	}
 
 	class ImageLoader extends Loader {
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			if (this.path !== undefined) url = this.path + url;
 			url = this.manager.resolveURL(url);
 			const scope = this;
 			const cached = Cache.get(url);
-
 			if (cached !== undefined) {
 				scope.manager.itemStart(url);
 				setTimeout(function () {
@@ -29631,73 +26704,59 @@
 				}, 0);
 				return cached;
 			}
-
 			const image = createElementNS('img');
-
 			function onImageLoad() {
 				removeEventListeners();
 				Cache.add(url, this);
 				if (onLoad) onLoad(this);
 				scope.manager.itemEnd(url);
 			}
-
 			function onImageError(event) {
 				removeEventListeners();
 				if (onError) onError(event);
 				scope.manager.itemError(url);
 				scope.manager.itemEnd(url);
 			}
-
 			function removeEventListeners() {
 				image.removeEventListener('load', onImageLoad, false);
 				image.removeEventListener('error', onImageError, false);
 			}
-
 			image.addEventListener('load', onImageLoad, false);
 			image.addEventListener('error', onImageError, false);
-
 			if (url.slice(0, 5) !== 'data:') {
 				if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
 			}
-
 			scope.manager.itemStart(url);
 			image.src = url;
 			return image;
 		}
-
 	}
 
 	class CubeTextureLoader extends Loader {
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(urls, onLoad, onProgress, onError) {
 			const texture = new CubeTexture();
 			const loader = new ImageLoader(this.manager);
 			loader.setCrossOrigin(this.crossOrigin);
 			loader.setPath(this.path);
 			let loaded = 0;
-
 			function loadTexture(i) {
 				loader.load(urls[i], function (image) {
 					texture.images[i] = image;
 					loaded++;
-
 					if (loaded === 6) {
 						texture.needsUpdate = true;
 						if (onLoad) onLoad(texture);
 					}
 				}, undefined, onError);
 			}
-
 			for (let i = 0; i < urls.length; ++i) {
 				loadTexture(i);
 			}
-
 			return texture;
 		}
-
 	}
 
 	/**
@@ -29710,7 +26769,6 @@
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			const scope = this;
 			const texture = new DataTexture();
@@ -29722,7 +26780,6 @@
 			loader.load(url, function (buffer) {
 				const texData = scope.parse(buffer);
 				if (!texData) return;
-
 				if (texData.image !== undefined) {
 					texture.image = texData.image;
 				} else if (texData.data !== undefined) {
@@ -29730,29 +26787,23 @@
 					texture.image.height = texData.height;
 					texture.image.data = texData.data;
 				}
-
 				texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
 				texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
 				texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
 				texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
 				texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
-
 				if (texData.encoding !== undefined) {
 					texture.encoding = texData.encoding;
 				}
-
 				if (texData.flipY !== undefined) {
 					texture.flipY = texData.flipY;
 				}
-
 				if (texData.format !== undefined) {
 					texture.format = texData.format;
 				}
-
 				if (texData.type !== undefined) {
 					texture.type = texData.type;
 				}
-
 				if (texData.mipmaps !== undefined) {
 					texture.mipmaps = texData.mipmaps;
 					texture.minFilter = LinearMipmapLinearFilter; // presumably...
@@ -29761,24 +26812,20 @@
 				if (texData.mipmapCount === 1) {
 					texture.minFilter = LinearFilter;
 				}
-
 				if (texData.generateMipmaps !== undefined) {
 					texture.generateMipmaps = texData.generateMipmaps;
 				}
-
 				texture.needsUpdate = true;
 				if (onLoad) onLoad(texture, texData);
 			}, onProgress, onError);
 			return texture;
 		}
-
 	}
 
 	class TextureLoader extends Loader {
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			const texture = new Texture();
 			const loader = new ImageLoader(this.manager);
@@ -29787,14 +26834,12 @@
 			loader.load(url, function (image) {
 				texture.image = image;
 				texture.needsUpdate = true;
-
 				if (onLoad !== undefined) {
 					onLoad(texture);
 				}
 			}, onProgress, onError);
 			return texture;
 		}
-
 	}
 
 	class Light extends Object3D {
@@ -29805,17 +26850,16 @@
 			this.color = new Color(color);
 			this.intensity = intensity;
 		}
+		dispose() {
 
-		dispose() {// Empty here in base class; some subclasses override.
+			// Empty here in base class; some subclasses override.
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.color.copy(source.color);
 			this.intensity = source.intensity;
 			return this;
 		}
-
 		toJSON(meta) {
 			const data = super.toJSON(meta);
 			data.object.color = this.color.getHex();
@@ -29828,7 +26872,6 @@
 			if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
 			return data;
 		}
-
 	}
 
 	class HemisphereLight extends Light {
@@ -29840,21 +26883,16 @@
 			this.updateMatrix();
 			this.groundColor = new Color(groundColor);
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.groundColor.copy(source.groundColor);
 			return this;
 		}
-
 	}
 
 	const _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();
-
 	const _lightPositionWorld$1 = /*@__PURE__*/new Vector3();
-
 	const _lookTarget$1 = /*@__PURE__*/new Vector3();
-
 	class LightShadow {
 		constructor(camera) {
 			this.camera = camera;
@@ -29873,54 +26911,39 @@
 			this._viewportCount = 1;
 			this._viewports = [new Vector4(0, 0, 1, 1)];
 		}
-
 		getViewportCount() {
 			return this._viewportCount;
 		}
-
 		getFrustum() {
 			return this._frustum;
 		}
-
 		updateMatrices(light) {
 			const shadowCamera = this.camera;
 			const shadowMatrix = this.matrix;
-
 			_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
-
 			shadowCamera.position.copy(_lightPositionWorld$1);
-
 			_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
-
 			shadowCamera.lookAt(_lookTarget$1);
 			shadowCamera.updateMatrixWorld();
-
 			_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
-
 			this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
-
 			shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
 			shadowMatrix.multiply(_projScreenMatrix$1);
 		}
-
 		getViewport(viewportIndex) {
 			return this._viewports[viewportIndex];
 		}
-
 		getFrameExtents() {
 			return this._frameExtents;
 		}
-
 		dispose() {
 			if (this.map) {
 				this.map.dispose();
 			}
-
 			if (this.mapPass) {
 				this.mapPass.dispose();
 			}
 		}
-
 		copy(source) {
 			this.camera = source.camera.clone();
 			this.bias = source.bias;
@@ -29928,11 +26951,9 @@
 			this.mapSize.copy(source.mapSize);
 			return this;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		toJSON() {
 			const object = {};
 			if (this.bias !== 0) object.bias = this.bias;
@@ -29943,7 +26964,6 @@
 			delete object.camera.matrix;
 			return object;
 		}
-
 	}
 
 	class SpotLightShadow extends LightShadow {
@@ -29952,29 +26972,24 @@
 			this.isSpotLightShadow = true;
 			this.focus = 1;
 		}
-
 		updateMatrices(light) {
 			const camera = this.camera;
 			const fov = RAD2DEG * 2 * light.angle * this.focus;
 			const aspect = this.mapSize.width / this.mapSize.height;
 			const far = light.distance || camera.far;
-
 			if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
 				camera.fov = fov;
 				camera.aspect = aspect;
 				camera.far = far;
 				camera.updateProjectionMatrix();
 			}
-
 			super.updateMatrices(light);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.focus = source.focus;
 			return this;
 		}
-
 	}
 
 	class SpotLight extends Light {
@@ -29992,22 +27007,18 @@
 			this.map = null;
 			this.shadow = new SpotLightShadow();
 		}
-
 		get power() {
 			// compute the light's luminous power (in lumens) from its intensity (in candela)
 			// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
 			return this.intensity * Math.PI;
 		}
-
 		set power(power) {
 			// set the light's intensity (in candela) from the desired luminous power (in lumens)
 			this.intensity = power / Math.PI;
 		}
-
 		dispose() {
 			this.shadow.dispose();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.distance = source.distance;
@@ -30018,22 +27029,19 @@
 			this.shadow = source.shadow.clone();
 			return this;
 		}
-
 	}
 
 	const _projScreenMatrix = /*@__PURE__*/new Matrix4();
-
 	const _lightPositionWorld = /*@__PURE__*/new Vector3();
-
 	const _lookTarget = /*@__PURE__*/new Vector3();
-
 	class PointLightShadow extends LightShadow {
 		constructor() {
 			super(new PerspectiveCamera(90, 1, 0.5, 500));
 			this.isPointLightShadow = true;
 			this._frameExtents = new Vector2(4, 2);
 			this._viewportCount = 6;
-			this._viewports = [// These viewports map a cube-map onto a 2D texture with the
+			this._viewports = [
+			// These viewports map a cube-map onto a 2D texture with the
 			// following orientation:
 			//
 			//	xzXZ
@@ -30045,45 +27053,41 @@
 			// y - Negative y direction
 			// Z - Positive z direction
 			// z - Negative z direction
+
 			// positive X
-			new Vector4(2, 1, 1, 1), // negative X
-			new Vector4(0, 1, 1, 1), // positive Z
-			new Vector4(3, 1, 1, 1), // negative Z
-			new Vector4(1, 1, 1, 1), // positive Y
-			new Vector4(3, 0, 1, 1), // negative Y
+			new Vector4(2, 1, 1, 1),
+			// negative X
+			new Vector4(0, 1, 1, 1),
+			// positive Z
+			new Vector4(3, 1, 1, 1),
+			// negative Z
+			new Vector4(1, 1, 1, 1),
+			// positive Y
+			new Vector4(3, 0, 1, 1),
+			// negative Y
 			new Vector4(1, 0, 1, 1)];
 			this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];
 			this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];
 		}
-
 		updateMatrices(light, viewportIndex = 0) {
 			const camera = this.camera;
 			const shadowMatrix = this.matrix;
 			const far = light.distance || camera.far;
-
 			if (far !== camera.far) {
 				camera.far = far;
 				camera.updateProjectionMatrix();
 			}
-
 			_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
-
 			camera.position.copy(_lightPositionWorld);
-
 			_lookTarget.copy(camera.position);
-
 			_lookTarget.add(this._cubeDirections[viewportIndex]);
-
 			camera.up.copy(this._cubeUps[viewportIndex]);
 			camera.lookAt(_lookTarget);
 			camera.updateMatrixWorld();
 			shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
-
 			_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
-
 			this._frustum.setFromProjectionMatrix(_projScreenMatrix);
 		}
-
 	}
 
 	class PointLight extends Light {
@@ -30095,22 +27099,18 @@
 			this.decay = decay;
 			this.shadow = new PointLightShadow();
 		}
-
 		get power() {
 			// compute the light's luminous power (in lumens) from its intensity (in candela)
 			// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
 			return this.intensity * 4 * Math.PI;
 		}
-
 		set power(power) {
 			// set the light's intensity (in candela) from the desired luminous power (in lumens)
 			this.intensity = power / (4 * Math.PI);
 		}
-
 		dispose() {
 			this.shadow.dispose();
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.distance = source.distance;
@@ -30118,7 +27118,6 @@
 			this.shadow = source.shadow.clone();
 			return this;
 		}
-
 	}
 
 	class DirectionalLightShadow extends LightShadow {
@@ -30126,7 +27125,6 @@
 			super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
 			this.isDirectionalLightShadow = true;
 		}
-
 	}
 
 	class DirectionalLight extends Light {
@@ -30139,18 +27137,15 @@
 			this.target = new Object3D();
 			this.shadow = new DirectionalLightShadow();
 		}
-
 		dispose() {
 			this.shadow.dispose();
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.target = source.target.clone();
 			this.shadow = source.shadow.clone();
 			return this;
 		}
-
 	}
 
 	class AmbientLight extends Light {
@@ -30159,7 +27154,6 @@
 			this.isAmbientLight = true;
 			this.type = 'AmbientLight';
 		}
-
 	}
 
 	class RectAreaLight extends Light {
@@ -30170,31 +27164,26 @@
 			this.width = width;
 			this.height = height;
 		}
-
 		get power() {
 			// compute the light's luminous power (in lumens) from its intensity (in nits)
 			return this.intensity * this.width * this.height * Math.PI;
 		}
-
 		set power(power) {
 			// set the light's intensity (in nits) from the desired luminous power (in lumens)
 			this.intensity = power / (this.width * this.height * Math.PI);
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.width = source.width;
 			this.height = source.height;
 			return this;
 		}
-
 		toJSON(meta) {
 			const data = super.toJSON(meta);
 			data.object.width = this.width;
 			data.object.height = this.height;
 			return data;
 		}
-
 	}
 
 	/**
@@ -30204,177 +27193,162 @@
 	 * Secondary reference:
 	 *	 https://www.ppsloan.org/publications/StupidSH36.pdf
 	 */
+
 	// 3-band SH defined by 9 coefficients
 
 	class SphericalHarmonics3 {
 		constructor() {
 			this.isSphericalHarmonics3 = true;
 			this.coefficients = [];
-
 			for (let i = 0; i < 9; i++) {
 				this.coefficients.push(new Vector3());
 			}
 		}
-
 		set(coefficients) {
 			for (let i = 0; i < 9; i++) {
 				this.coefficients[i].copy(coefficients[i]);
 			}
-
 			return this;
 		}
-
 		zero() {
 			for (let i = 0; i < 9; i++) {
 				this.coefficients[i].set(0, 0, 0);
 			}
-
 			return this;
-		} // get the radiance in the direction of the normal
-		// target is a Vector3
-
+		}
 
+		// get the radiance in the direction of the normal
+		// target is a Vector3
 		getAt(normal, target) {
 			// normal is assumed to be unit length
+
 			const x = normal.x,
-						y = normal.y,
-						z = normal.z;
-			const coeff = this.coefficients; // band 0
+				y = normal.y,
+				z = normal.z;
+			const coeff = this.coefficients;
 
-			target.copy(coeff[0]).multiplyScalar(0.282095); // band 1
+			// band 0
+			target.copy(coeff[0]).multiplyScalar(0.282095);
 
+			// band 1
 			target.addScaledVector(coeff[1], 0.488603 * y);
 			target.addScaledVector(coeff[2], 0.488603 * z);
-			target.addScaledVector(coeff[3], 0.488603 * x); // band 2
+			target.addScaledVector(coeff[3], 0.488603 * x);
 
+			// band 2
 			target.addScaledVector(coeff[4], 1.092548 * (x * y));
 			target.addScaledVector(coeff[5], 1.092548 * (y * z));
 			target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));
 			target.addScaledVector(coeff[7], 1.092548 * (x * z));
 			target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
 			return target;
-		} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
+		}
+
+		// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
 		// target is a Vector3
 		// https://graphics.stanford.edu/papers/envmap/envmap.pdf
-
-
 		getIrradianceAt(normal, target) {
 			// normal is assumed to be unit length
+
 			const x = normal.x,
-						y = normal.y,
-						z = normal.z;
-			const coeff = this.coefficients; // band 0
+				y = normal.y,
+				z = normal.z;
+			const coeff = this.coefficients;
 
+			// band 0
 			target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
-			// band 1
 
+			// band 1
 			target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603
-
 			target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);
-			target.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2
+			target.addScaledVector(coeff[3], 2.0 * 0.511664 * x);
 
+			// band 2
 			target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548
-
 			target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);
 			target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3
-
 			target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);
 			target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274
 
 			return target;
 		}
-
 		add(sh) {
 			for (let i = 0; i < 9; i++) {
 				this.coefficients[i].add(sh.coefficients[i]);
 			}
-
 			return this;
 		}
-
 		addScaledSH(sh, s) {
 			for (let i = 0; i < 9; i++) {
 				this.coefficients[i].addScaledVector(sh.coefficients[i], s);
 			}
-
 			return this;
 		}
-
 		scale(s) {
 			for (let i = 0; i < 9; i++) {
 				this.coefficients[i].multiplyScalar(s);
 			}
-
 			return this;
 		}
-
 		lerp(sh, alpha) {
 			for (let i = 0; i < 9; i++) {
 				this.coefficients[i].lerp(sh.coefficients[i], alpha);
 			}
-
 			return this;
 		}
-
 		equals(sh) {
 			for (let i = 0; i < 9; i++) {
 				if (!this.coefficients[i].equals(sh.coefficients[i])) {
 					return false;
 				}
 			}
-
 			return true;
 		}
-
 		copy(sh) {
 			return this.set(sh.coefficients);
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		fromArray(array, offset = 0) {
 			const coefficients = this.coefficients;
-
 			for (let i = 0; i < 9; i++) {
 				coefficients[i].fromArray(array, offset + i * 3);
 			}
-
 			return this;
 		}
-
 		toArray(array = [], offset = 0) {
 			const coefficients = this.coefficients;
-
 			for (let i = 0; i < 9; i++) {
 				coefficients[i].toArray(array, offset + i * 3);
 			}
-
 			return array;
-		} // evaluate the basis functions
-		// shBasis is an Array[ 9 ]
-
+		}
 
+		// evaluate the basis functions
+		// shBasis is an Array[ 9 ]
 		static getBasisAt(normal, shBasis) {
 			// normal is assumed to be unit length
+
 			const x = normal.x,
-						y = normal.y,
-						z = normal.z; // band 0
+				y = normal.y,
+				z = normal.z;
 
-			shBasis[0] = 0.282095; // band 1
+			// band 0
+			shBasis[0] = 0.282095;
 
+			// band 1
 			shBasis[1] = 0.488603 * y;
 			shBasis[2] = 0.488603 * z;
-			shBasis[3] = 0.488603 * x; // band 2
+			shBasis[3] = 0.488603 * x;
 
+			// band 2
 			shBasis[4] = 1.092548 * x * y;
 			shBasis[5] = 1.092548 * y * z;
 			shBasis[6] = 0.315392 * (3 * z * z - 1);
 			shBasis[7] = 1.092548 * x * z;
 			shBasis[8] = 0.546274 * (x * x - y * y);
 		}
-
 	}
 
 	class LightProbe extends Light {
@@ -30383,26 +27357,21 @@
 			this.isLightProbe = true;
 			this.sh = sh;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.sh.copy(source.sh);
 			return this;
 		}
-
 		fromJSON(json) {
 			this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
-
 			this.sh.fromArray(json.sh);
 			return this;
 		}
-
 		toJSON(meta) {
 			const data = super.toJSON(meta);
 			data.object.sh = this.sh.toArray();
 			return data;
 		}
-
 	}
 
 	class MaterialLoader extends Loader {
@@ -30410,7 +27379,6 @@
 			super(manager);
 			this.textures = {};
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			const scope = this;
 			const loader = new FileLoader(scope.manager);
@@ -30426,23 +27394,18 @@
 					} else {
 						console.error(e);
 					}
-
 					scope.manager.itemError(url);
 				}
 			}, onProgress, onError);
 		}
-
 		parse(json) {
 			const textures = this.textures;
-
 			function getTexture(name) {
 				if (textures[name] === undefined) {
 					console.warn('THREE.MaterialLoader: Undefined texture', name);
 				}
-
 				return textures[name];
 			}
-
 			const material = MaterialLoader.createMaterialFromType(json.type);
 			if (json.uuid !== undefined) material.uuid = json.uuid;
 			if (json.name !== undefined) material.name = json.name;
@@ -30504,70 +27467,63 @@
 			if (json.visible !== undefined) material.visible = json.visible;
 			if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
 			if (json.userData !== undefined) material.userData = json.userData;
-
 			if (json.vertexColors !== undefined) {
 				if (typeof json.vertexColors === 'number') {
 					material.vertexColors = json.vertexColors > 0 ? true : false;
 				} else {
 					material.vertexColors = json.vertexColors;
 				}
-			} // Shader Material
+			}
 
+			// Shader Material
 
 			if (json.uniforms !== undefined) {
 				for (const name in json.uniforms) {
 					const uniform = json.uniforms[name];
 					material.uniforms[name] = {};
-
 					switch (uniform.type) {
 						case 't':
 							material.uniforms[name].value = getTexture(uniform.value);
 							break;
-
 						case 'c':
 							material.uniforms[name].value = new Color().setHex(uniform.value);
 							break;
-
 						case 'v2':
 							material.uniforms[name].value = new Vector2().fromArray(uniform.value);
 							break;
-
 						case 'v3':
 							material.uniforms[name].value = new Vector3().fromArray(uniform.value);
 							break;
-
 						case 'v4':
 							material.uniforms[name].value = new Vector4().fromArray(uniform.value);
 							break;
-
 						case 'm3':
 							material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
 							break;
-
 						case 'm4':
 							material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
 							break;
-
 						default:
 							material.uniforms[name].value = uniform.value;
 					}
 				}
 			}
-
 			if (json.defines !== undefined) material.defines = json.defines;
 			if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
 			if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;
 			if (json.glslVersion !== undefined) material.glslVersion = json.glslVersion;
-
 			if (json.extensions !== undefined) {
 				for (const key in json.extensions) {
 					material.extensions[key] = json.extensions[key];
 				}
-			} // for PointsMaterial
+			}
 
+			// for PointsMaterial
 
 			if (json.size !== undefined) material.size = json.size;
-			if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps
+			if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;
+
+			// maps
 
 			if (json.map !== undefined) material.map = getTexture(json.map);
 			if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
@@ -30576,18 +27532,15 @@
 			if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
 			if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
 			if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;
-
 			if (json.normalScale !== undefined) {
 				let normalScale = json.normalScale;
-
 				if (Array.isArray(normalScale) === false) {
 					// Blender exporter used to export a scalar. See #7459
+
 					normalScale = [normalScale, normalScale];
 				}
-
 				material.normalScale = new Vector2().fromArray(normalScale);
 			}
-
 			if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
 			if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
 			if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
@@ -30619,12 +27572,10 @@
 			if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
 			return material;
 		}
-
 		setTextures(value) {
 			this.textures = value;
 			return this;
 		}
-
 		static createMaterialFromType(type) {
 			const materialLib = {
 				ShadowMaterial,
@@ -30648,57 +27599,58 @@
 			};
 			return new materialLib[type]();
 		}
-
 	}
 
 	class LoaderUtils {
 		static decodeText(array) {
 			if (typeof TextDecoder !== 'undefined') {
 				return new TextDecoder().decode(array);
-			} // Avoid the String.fromCharCode.apply(null, array) shortcut, which
-			// throws a "maximum call stack size exceeded" error for large arrays.
+			}
 
+			// Avoid the String.fromCharCode.apply(null, array) shortcut, which
+			// throws a "maximum call stack size exceeded" error for large arrays.
 
 			let s = '';
-
 			for (let i = 0, il = array.length; i < il; i++) {
 				// Implicitly assumes little-endian.
 				s += String.fromCharCode(array[i]);
 			}
-
 			try {
 				// merges multi-byte utf-8 characters.
+
 				return decodeURIComponent(escape(s));
 			} catch (e) {
 				// see #16358
+
 				return s;
 			}
 		}
-
 		static extractUrlBase(url) {
 			const index = url.lastIndexOf('/');
 			if (index === -1) return './';
 			return url.slice(0, index + 1);
 		}
-
 		static resolveURL(url, path) {
 			// Invalid URL
-			if (typeof url !== 'string' || url === '') return ''; // Host Relative URL
+			if (typeof url !== 'string' || url === '') return '';
 
+			// Host Relative URL
 			if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
 				path = path.replace(/(^https?:\/\/[^\/]+).*/i, '$1');
-			} // Absolute URL http://,https://,//
-
+			}
 
-			if (/^(https?:)?\/\//i.test(url)) return url; // Data URI
+			// Absolute URL http://,https://,//
+			if (/^(https?:)?\/\//i.test(url)) return url;
 
-			if (/^data:.*,.*$/i.test(url)) return url; // Blob URL
+			// Data URI
+			if (/^data:.*,.*$/i.test(url)) return url;
 
-			if (/^blob:.*$/i.test(url)) return url; // Relative URL
+			// Blob URL
+			if (/^blob:.*$/i.test(url)) return url;
 
+			// Relative URL
 			return path + url;
 		}
-
 	}
 
 	class InstancedBufferGeometry extends BufferGeometry {
@@ -30708,27 +27660,23 @@
 			this.type = 'InstancedBufferGeometry';
 			this.instanceCount = Infinity;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.instanceCount = source.instanceCount;
 			return this;
 		}
-
 		toJSON() {
 			const data = super.toJSON();
 			data.instanceCount = this.instanceCount;
 			data.isInstancedBufferGeometry = true;
 			return data;
 		}
-
 	}
 
 	class BufferGeometryLoader extends Loader {
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			const scope = this;
 			const loader = new FileLoader(scope.manager);
@@ -30744,16 +27692,13 @@
 					} else {
 						console.error(e);
 					}
-
 					scope.manager.itemError(url);
 				}
 			}, onProgress, onError);
 		}
-
 		parse(json) {
 			const interleavedBufferMap = {};
 			const arrayBufferMap = {};
-
 			function getInterleavedBuffer(json, uuid) {
 				if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
 				const interleavedBuffers = json.interleavedBuffers;
@@ -30765,7 +27710,6 @@
 				interleavedBufferMap[uuid] = ib;
 				return ib;
 			}
-
 			function getArrayBuffer(json, uuid) {
 				if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
 				const arrayBuffers = json.arrayBuffers;
@@ -30774,21 +27718,16 @@
 				arrayBufferMap[uuid] = ab;
 				return ab;
 			}
-
 			const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
 			const index = json.data.index;
-
 			if (index !== undefined) {
 				const typedArray = getTypedArray(index.type, index.array);
 				geometry.setIndex(new BufferAttribute(typedArray, 1));
 			}
-
 			const attributes = json.data.attributes;
-
 			for (const key in attributes) {
 				const attribute = attributes[key];
 				let bufferAttribute;
-
 				if (attribute.isInterleavedBufferAttribute) {
 					const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
 					bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
@@ -30797,29 +27736,22 @@
 					const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
 					bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
 				}
-
 				if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
 				if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);
-
 				if (attribute.updateRange !== undefined) {
 					bufferAttribute.updateRange.offset = attribute.updateRange.offset;
 					bufferAttribute.updateRange.count = attribute.updateRange.count;
 				}
-
 				geometry.setAttribute(key, bufferAttribute);
 			}
-
 			const morphAttributes = json.data.morphAttributes;
-
 			if (morphAttributes) {
 				for (const key in morphAttributes) {
 					const attributeArray = morphAttributes[key];
 					const array = [];
-
 					for (let i = 0, il = attributeArray.length; i < il; i++) {
 						const attribute = attributeArray[i];
 						let bufferAttribute;
-
 						if (attribute.isInterleavedBufferAttribute) {
 							const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
 							bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
@@ -30827,54 +27759,41 @@
 							const typedArray = getTypedArray(attribute.type, attribute.array);
 							bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
 						}
-
 						if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
 						array.push(bufferAttribute);
 					}
-
 					geometry.morphAttributes[key] = array;
 				}
 			}
-
 			const morphTargetsRelative = json.data.morphTargetsRelative;
-
 			if (morphTargetsRelative) {
 				geometry.morphTargetsRelative = true;
 			}
-
 			const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
-
 			if (groups !== undefined) {
 				for (let i = 0, n = groups.length; i !== n; ++i) {
 					const group = groups[i];
 					geometry.addGroup(group.start, group.count, group.materialIndex);
 				}
 			}
-
 			const boundingSphere = json.data.boundingSphere;
-
 			if (boundingSphere !== undefined) {
 				const center = new Vector3();
-
 				if (boundingSphere.center !== undefined) {
 					center.fromArray(boundingSphere.center);
 				}
-
 				geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
 			}
-
 			if (json.name) geometry.name = json.name;
 			if (json.userData) geometry.userData = json.userData;
 			return geometry;
 		}
-
 	}
 
 	class ObjectLoader extends Loader {
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			const scope = this;
 			const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
@@ -30885,7 +27804,6 @@
 			loader.setWithCredentials(this.withCredentials);
 			loader.load(url, function (text) {
 				let json = null;
-
 				try {
 					json = JSON.parse(text);
 				} catch (error) {
@@ -30893,19 +27811,15 @@
 					console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);
 					return;
 				}
-
 				const metadata = json.metadata;
-
 				if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
 					if (onError !== undefined) onError(new Error('THREE.ObjectLoader: Can\'t load ' + url));
 					console.error('THREE.ObjectLoader: Can\'t load ' + url);
 					return;
 				}
-
 				scope.parse(json, onLoad);
 			}, onProgress, onError);
 		}
-
 		async loadAsync(url, onProgress) {
 			const scope = this;
 			const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
@@ -30917,14 +27831,11 @@
 			const text = await loader.loadAsync(url, onProgress);
 			const json = JSON.parse(text);
 			const metadata = json.metadata;
-
 			if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
 				throw new Error('THREE.ObjectLoader: Can\'t load ' + url);
 			}
-
 			return await scope.parseAsync(json);
 		}
-
 		parse(json, onLoad) {
 			const animations = this.parseAnimations(json.animations);
 			const shapes = this.parseShapes(json.shapes);
@@ -30936,24 +27847,22 @@
 			const materials = this.parseMaterials(json.materials, textures);
 			const object = this.parseObject(json.object, geometries, materials, textures, animations);
 			const skeletons = this.parseSkeletons(json.skeletons, object);
-			this.bindSkeletons(object, skeletons); //
+			this.bindSkeletons(object, skeletons);
+
+			//
 
 			if (onLoad !== undefined) {
 				let hasImages = false;
-
 				for (const uuid in images) {
 					if (images[uuid].data instanceof HTMLImageElement) {
 						hasImages = true;
 						break;
 					}
 				}
-
 				if (hasImages === false) onLoad(object);
 			}
-
 			return object;
 		}
-
 		async parseAsync(json) {
 			const animations = this.parseAnimations(json.animations);
 			const shapes = this.parseShapes(json.shapes);
@@ -30966,27 +27875,27 @@
 			this.bindSkeletons(object, skeletons);
 			return object;
 		}
-
 		parseShapes(json) {
 			const shapes = {};
-
 			if (json !== undefined) {
 				for (let i = 0, l = json.length; i < l; i++) {
 					const shape = new Shape().fromJSON(json[i]);
 					shapes[shape.uuid] = shape;
 				}
 			}
-
 			return shapes;
 		}
-
 		parseSkeletons(json, object) {
 			const skeletons = {};
-			const bones = {}; // generate bone lookup table
+			const bones = {};
+
+			// generate bone lookup table
 
 			object.traverse(function (child) {
 				if (child.isBone) bones[child.uuid] = child;
-			}); // create skeletons
+			});
+
+			// create skeletons
 
 			if (json !== undefined) {
 				for (let i = 0, l = json.length; i < l; i++) {
@@ -30994,26 +27903,20 @@
 					skeletons[skeleton.uuid] = skeleton;
 				}
 			}
-
 			return skeletons;
 		}
-
 		parseGeometries(json, shapes) {
 			const geometries = {};
-
 			if (json !== undefined) {
 				const bufferGeometryLoader = new BufferGeometryLoader();
-
 				for (let i = 0, l = json.length; i < l; i++) {
 					let geometry;
 					const data = json[i];
-
 					switch (data.type) {
 						case 'BufferGeometry':
 						case 'InstancedBufferGeometry':
 							geometry = bufferGeometryLoader.parse(data);
 							break;
-
 						case 'Geometry':
 							if ('THREE' in window && 'LegacyJSONLoader' in THREE) {
 								var geometryLoader = new THREE.LegacyJSONLoader();
@@ -31021,54 +27924,40 @@
 							} else {
 								console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');
 							}
-
 							break;
-
 						default:
 							if (data.type in Geometries) {
 								geometry = Geometries[data.type].fromJSON(data, shapes);
 							} else {
 								console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
 							}
-
 					}
-
 					geometry.uuid = data.uuid;
 					if (data.name !== undefined) geometry.name = data.name;
 					if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
 					geometries[data.uuid] = geometry;
 				}
 			}
-
 			return geometries;
 		}
-
 		parseMaterials(json, textures) {
 			const cache = {}; // MultiMaterial
-
 			const materials = {};
-
 			if (json !== undefined) {
 				const loader = new MaterialLoader();
 				loader.setTextures(textures);
-
 				for (let i = 0, l = json.length; i < l; i++) {
 					const data = json[i];
-
 					if (cache[data.uuid] === undefined) {
 						cache[data.uuid] = loader.parse(data);
 					}
-
 					materials[data.uuid] = cache[data.uuid];
 				}
 			}
-
 			return materials;
 		}
-
 		parseAnimations(json) {
 			const animations = {};
-
 			if (json !== undefined) {
 				for (let i = 0; i < json.length; i++) {
 					const data = json[i];
@@ -31076,15 +27965,12 @@
 					animations[clip.uuid] = clip;
 				}
 			}
-
 			return animations;
 		}
-
 		parseImages(json, onLoad) {
 			const scope = this;
 			const images = {};
 			let loader;
-
 			function loadImage(url) {
 				scope.manager.itemStart(url);
 				return loader.load(url, function () {
@@ -31094,7 +27980,6 @@
 					scope.manager.itemEnd(url);
 				});
 			}
-
 			function deserializeImage(image) {
 				if (typeof image === 'string') {
 					const url = image;
@@ -31112,51 +27997,45 @@
 					}
 				}
 			}
-
 			if (json !== undefined && json.length > 0) {
 				const manager = new LoadingManager(onLoad);
 				loader = new ImageLoader(manager);
 				loader.setCrossOrigin(this.crossOrigin);
-
 				for (let i = 0, il = json.length; i < il; i++) {
 					const image = json[i];
 					const url = image.url;
-
 					if (Array.isArray(url)) {
 						// load array of images e.g CubeTexture
-						const imageArray = [];
 
+						const imageArray = [];
 						for (let j = 0, jl = url.length; j < jl; j++) {
 							const currentUrl = url[j];
 							const deserializedImage = deserializeImage(currentUrl);
-
 							if (deserializedImage !== null) {
 								if (deserializedImage instanceof HTMLImageElement) {
 									imageArray.push(deserializedImage);
 								} else {
 									// special case: handle array of data textures for cube textures
+
 									imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
 								}
 							}
 						}
-
 						images[image.uuid] = new Source(imageArray);
 					} else {
 						// load single image
+
 						const deserializedImage = deserializeImage(image.url);
 						images[image.uuid] = new Source(deserializedImage);
 					}
 				}
 			}
-
 			return images;
 		}
-
 		async parseImagesAsync(json) {
 			const scope = this;
 			const images = {};
 			let loader;
-
 			async function deserializeImage(image) {
 				if (typeof image === 'string') {
 					const url = image;
@@ -31174,70 +28053,59 @@
 					}
 				}
 			}
-
 			if (json !== undefined && json.length > 0) {
 				loader = new ImageLoader(this.manager);
 				loader.setCrossOrigin(this.crossOrigin);
-
 				for (let i = 0, il = json.length; i < il; i++) {
 					const image = json[i];
 					const url = image.url;
-
 					if (Array.isArray(url)) {
 						// load array of images e.g CubeTexture
-						const imageArray = [];
 
+						const imageArray = [];
 						for (let j = 0, jl = url.length; j < jl; j++) {
 							const currentUrl = url[j];
 							const deserializedImage = await deserializeImage(currentUrl);
-
 							if (deserializedImage !== null) {
 								if (deserializedImage instanceof HTMLImageElement) {
 									imageArray.push(deserializedImage);
 								} else {
 									// special case: handle array of data textures for cube textures
+
 									imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
 								}
 							}
 						}
-
 						images[image.uuid] = new Source(imageArray);
 					} else {
 						// load single image
+
 						const deserializedImage = await deserializeImage(image.url);
 						images[image.uuid] = new Source(deserializedImage);
 					}
 				}
 			}
-
 			return images;
 		}
-
 		parseTextures(json, images) {
 			function parseConstant(value, type) {
 				if (typeof value === 'number') return value;
 				console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);
 				return type[value];
 			}
-
 			const textures = {};
-
 			if (json !== undefined) {
 				for (let i = 0, l = json.length; i < l; i++) {
 					const data = json[i];
-
 					if (data.image === undefined) {
 						console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
 					}
-
 					if (images[data.image] === undefined) {
 						console.warn('THREE.ObjectLoader: Undefined image', data.image);
 					}
-
 					const source = images[data.image];
 					const image = source.data;
 					let texture;
-
 					if (Array.isArray(image)) {
 						texture = new CubeTexture();
 						if (image.length === 6) texture.needsUpdate = true;
@@ -31247,7 +28115,6 @@
 						} else {
 							texture = new Texture();
 						}
-
 						if (image) texture.needsUpdate = true; // textures can have undefined image data
 					}
 
@@ -31259,12 +28126,10 @@
 					if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
 					if (data.center !== undefined) texture.center.fromArray(data.center);
 					if (data.rotation !== undefined) texture.rotation = data.rotation;
-
 					if (data.wrap !== undefined) {
 						texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
 						texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
 					}
-
 					if (data.format !== undefined) texture.format = data.format;
 					if (data.type !== undefined) texture.type = data.type;
 					if (data.encoding !== undefined) texture.encoding = data.encoding;
@@ -31278,61 +28143,44 @@
 					textures[data.uuid] = texture;
 				}
 			}
-
 			return textures;
 		}
-
 		parseObject(data, geometries, materials, textures, animations) {
 			let object;
-
 			function getGeometry(name) {
 				if (geometries[name] === undefined) {
 					console.warn('THREE.ObjectLoader: Undefined geometry', name);
 				}
-
 				return geometries[name];
 			}
-
 			function getMaterial(name) {
 				if (name === undefined) return undefined;
-
 				if (Array.isArray(name)) {
 					const array = [];
-
 					for (let i = 0, l = name.length; i < l; i++) {
 						const uuid = name[i];
-
 						if (materials[uuid] === undefined) {
 							console.warn('THREE.ObjectLoader: Undefined material', uuid);
 						}
-
 						array.push(materials[uuid]);
 					}
-
 					return array;
 				}
-
 				if (materials[name] === undefined) {
 					console.warn('THREE.ObjectLoader: Undefined material', name);
 				}
-
 				return materials[name];
 			}
-
 			function getTexture(uuid) {
 				if (textures[uuid] === undefined) {
 					console.warn('THREE.ObjectLoader: Undefined texture', uuid);
 				}
-
 				return textures[uuid];
 			}
-
 			let geometry, material;
-
 			switch (data.type) {
 				case 'Scene':
 					object = new Scene();
-
 					if (data.background !== undefined) {
 						if (Number.isInteger(data.background)) {
 							object.background = new Color(data.background);
@@ -31340,11 +28188,9 @@
 							object.background = getTexture(data.background);
 						}
 					}
-
 					if (data.environment !== undefined) {
 						object.environment = getTexture(data.environment);
 					}
-
 					if (data.fog !== undefined) {
 						if (data.fog.type === 'Fog') {
 							object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
@@ -31352,10 +28198,8 @@
 							object.fog = new FogExp2(data.fog.color, data.fog.density);
 						}
 					}
-
 					if (data.backgroundBlurriness !== undefined) object.backgroundBlurriness = data.backgroundBlurriness;
 					break;
-
 				case 'PerspectiveCamera':
 					object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
 					if (data.focus !== undefined) object.focus = data.focus;
@@ -31364,41 +28208,32 @@
 					if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
 					if (data.view !== undefined) object.view = Object.assign({}, data.view);
 					break;
-
 				case 'OrthographicCamera':
 					object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
 					if (data.zoom !== undefined) object.zoom = data.zoom;
 					if (data.view !== undefined) object.view = Object.assign({}, data.view);
 					break;
-
 				case 'AmbientLight':
 					object = new AmbientLight(data.color, data.intensity);
 					break;
-
 				case 'DirectionalLight':
 					object = new DirectionalLight(data.color, data.intensity);
 					break;
-
 				case 'PointLight':
 					object = new PointLight(data.color, data.intensity, data.distance, data.decay);
 					break;
-
 				case 'RectAreaLight':
 					object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
 					break;
-
 				case 'SpotLight':
 					object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
 					break;
-
 				case 'HemisphereLight':
 					object = new HemisphereLight(data.color, data.groundColor, data.intensity);
 					break;
-
 				case 'LightProbe':
 					object = new LightProbe().fromJSON(data);
 					break;
-
 				case 'SkinnedMesh':
 					geometry = getGeometry(data.geometry);
 					material = getMaterial(data.material);
@@ -31407,13 +28242,11 @@
 					if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
 					if (data.skeleton !== undefined) object.skeleton = data.skeleton;
 					break;
-
 				case 'Mesh':
 					geometry = getGeometry(data.geometry);
 					material = getMaterial(data.material);
 					object = new Mesh(geometry, material);
 					break;
-
 				case 'InstancedMesh':
 					geometry = getGeometry(data.geometry);
 					material = getMaterial(data.material);
@@ -31424,47 +28257,36 @@
 					object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);
 					if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
 					break;
-
 				case 'LOD':
 					object = new LOD();
 					break;
-
 				case 'Line':
 					object = new Line(getGeometry(data.geometry), getMaterial(data.material));
 					break;
-
 				case 'LineLoop':
 					object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
 					break;
-
 				case 'LineSegments':
 					object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
 					break;
-
 				case 'PointCloud':
 				case 'Points':
 					object = new Points(getGeometry(data.geometry), getMaterial(data.material));
 					break;
-
 				case 'Sprite':
 					object = new Sprite(getMaterial(data.material));
 					break;
-
 				case 'Group':
 					object = new Group();
 					break;
-
 				case 'Bone':
 					object = new Bone();
 					break;
-
 				default:
 					object = new Object3D();
 			}
-
 			object.uuid = data.uuid;
 			if (data.name !== undefined) object.name = data.name;
-
 			if (data.matrix !== undefined) {
 				object.matrix.fromArray(data.matrix);
 				if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
@@ -31475,10 +28297,8 @@
 				if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
 				if (data.scale !== undefined) object.scale.fromArray(data.scale);
 			}
-
 			if (data.castShadow !== undefined) object.castShadow = data.castShadow;
 			if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;
-
 			if (data.shadow) {
 				if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
 				if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
@@ -31486,53 +28306,42 @@
 				if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
 				if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
 			}
-
 			if (data.visible !== undefined) object.visible = data.visible;
 			if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
 			if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
 			if (data.userData !== undefined) object.userData = data.userData;
 			if (data.layers !== undefined) object.layers.mask = data.layers;
-
 			if (data.children !== undefined) {
 				const children = data.children;
-
 				for (let i = 0; i < children.length; i++) {
 					object.add(this.parseObject(children[i], geometries, materials, textures, animations));
 				}
 			}
-
 			if (data.animations !== undefined) {
 				const objectAnimations = data.animations;
-
 				for (let i = 0; i < objectAnimations.length; i++) {
 					const uuid = objectAnimations[i];
 					object.animations.push(animations[uuid]);
 				}
 			}
-
 			if (data.type === 'LOD') {
 				if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
 				const levels = data.levels;
-
 				for (let l = 0; l < levels.length; l++) {
 					const level = levels[l];
 					const child = object.getObjectByProperty('uuid', level.object);
-
 					if (child !== undefined) {
 						object.addLevel(child, level.distance, level.hysteresis);
 					}
 				}
 			}
-
 			return object;
 		}
-
 		bindSkeletons(object, skeletons) {
 			if (Object.keys(skeletons).length === 0) return;
 			object.traverse(function (child) {
 				if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
 					const skeleton = skeletons[child.skeleton];
-
 					if (skeleton === undefined) {
 						console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);
 					} else {
@@ -31541,9 +28350,7 @@
 				}
 			});
 		}
-
 	}
-
 	const TEXTURE_MAPPING = {
 		UVMapping: UVMapping,
 		CubeReflectionMapping: CubeReflectionMapping,
@@ -31570,32 +28377,26 @@
 		constructor(manager) {
 			super(manager);
 			this.isImageBitmapLoader = true;
-
 			if (typeof createImageBitmap === 'undefined') {
 				console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
 			}
-
 			if (typeof fetch === 'undefined') {
 				console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
 			}
-
 			this.options = {
 				premultiplyAlpha: 'none'
 			};
 		}
-
 		setOptions(options) {
 			this.options = options;
 			return this;
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			if (url === undefined) url = '';
 			if (this.path !== undefined) url = this.path + url;
 			url = this.manager.resolveURL(url);
 			const scope = this;
 			const cached = Cache.get(url);
-
 			if (cached !== undefined) {
 				scope.manager.itemStart(url);
 				setTimeout(function () {
@@ -31604,7 +28405,6 @@
 				}, 0);
 				return cached;
 			}
-
 			const fetchOptions = {};
 			fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';
 			fetchOptions.headers = this.requestHeader;
@@ -31625,31 +28425,25 @@
 			});
 			scope.manager.itemStart(url);
 		}
-
 	}
 
 	let _context;
-
 	class AudioContext {
 		static getContext() {
 			if (_context === undefined) {
 				_context = new (window.AudioContext || window.webkitAudioContext)();
 			}
-
 			return _context;
 		}
-
 		static setContext(value) {
 			_context = value;
 		}
-
 	}
 
 	class AudioLoader extends Loader {
 		constructor(manager) {
 			super(manager);
 		}
-
 		load(url, onLoad, onProgress, onError) {
 			const scope = this;
 			const loader = new FileLoader(this.manager);
@@ -31672,12 +28466,10 @@
 					} else {
 						console.error(e);
 					}
-
 					scope.manager.itemError(url);
 				}
 			}, onProgress, onError);
 		}
-
 	}
 
 	class HemisphereLightProbe extends LightProbe {
@@ -31687,33 +28479,30 @@
 			const color1 = new Color().set(skyColor);
 			const color2 = new Color().set(groundColor);
 			const sky = new Vector3(color1.r, color1.g, color1.b);
-			const ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
+			const ground = new Vector3(color2.r, color2.g, color2.b);
 
+			// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
 			const c0 = Math.sqrt(Math.PI);
 			const c1 = c0 * Math.sqrt(0.75);
 			this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
 			this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
 		}
-
 	}
 
 	class AmbientLightProbe extends LightProbe {
 		constructor(color, intensity = 1) {
 			super(undefined, intensity);
 			this.isAmbientLightProbe = true;
-			const color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
+			const color1 = new Color().set(color);
 
+			// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
 			this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
 		}
-
 	}
 
 	const _eyeRight = /*@__PURE__*/new Matrix4();
-
 	const _eyeLeft = /*@__PURE__*/new Matrix4();
-
 	const _projectionMatrix = /*@__PURE__*/new Matrix4();
-
 	class StereoCamera {
 		constructor() {
 			this.type = 'StereoCamera';
@@ -31735,11 +28524,9 @@
 				eyeSep: null
 			};
 		}
-
 		update(camera) {
 			const cache = this._cache;
 			const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
-
 			if (needsUpdate) {
 				cache.focus = camera.focus;
 				cache.fov = camera.fov;
@@ -31747,24 +28534,31 @@
 				cache.near = camera.near;
 				cache.far = camera.far;
 				cache.zoom = camera.zoom;
-				cache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on
+				cache.eyeSep = this.eyeSep;
+
+				// Off-axis stereoscopic effect based on
 				// http://paulbourke.net/stereographics/stereorender/
 
 				_projectionMatrix.copy(camera.projectionMatrix);
-
 				const eyeSepHalf = cache.eyeSep / 2;
 				const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
 				const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;
-				let xmin, xmax; // translate xOffset
+				let xmin, xmax;
+
+				// translate xOffset
 
 				_eyeLeft.elements[12] = -eyeSepHalf;
-				_eyeRight.elements[12] = eyeSepHalf; // for left eye
+				_eyeRight.elements[12] = eyeSepHalf;
+
+				// for left eye
 
 				xmin = -ymax * cache.aspect + eyeSepOnProjection;
 				xmax = ymax * cache.aspect + eyeSepOnProjection;
 				_projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
 				_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
-				this.cameraL.projectionMatrix.copy(_projectionMatrix); // for right eye
+				this.cameraL.projectionMatrix.copy(_projectionMatrix);
+
+				// for right eye
 
 				xmin = -ymax * cache.aspect - eyeSepOnProjection;
 				xmax = ymax * cache.aspect - eyeSepOnProjection;
@@ -31772,11 +28566,9 @@
 				_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
 				this.cameraR.projectionMatrix.copy(_projectionMatrix);
 			}
-
 			this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
 			this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
 		}
-
 	}
 
 	class Clock {
@@ -31787,57 +28579,44 @@
 			this.elapsedTime = 0;
 			this.running = false;
 		}
-
 		start() {
 			this.startTime = now();
 			this.oldTime = this.startTime;
 			this.elapsedTime = 0;
 			this.running = true;
 		}
-
 		stop() {
 			this.getElapsedTime();
 			this.running = false;
 			this.autoStart = false;
 		}
-
 		getElapsedTime() {
 			this.getDelta();
 			return this.elapsedTime;
 		}
-
 		getDelta() {
 			let diff = 0;
-
 			if (this.autoStart && !this.running) {
 				this.start();
 				return 0;
 			}
-
 			if (this.running) {
 				const newTime = now();
 				diff = (newTime - this.oldTime) / 1000;
 				this.oldTime = newTime;
 				this.elapsedTime += diff;
 			}
-
 			return diff;
 		}
-
 	}
-
 	function now() {
 		return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732
 	}
 
 	const _position$1 = /*@__PURE__*/new Vector3();
-
 	const _quaternion$1 = /*@__PURE__*/new Quaternion();
-
 	const _scale$1 = /*@__PURE__*/new Vector3();
-
 	const _orientation$1 = /*@__PURE__*/new Vector3();
-
 	class AudioListener extends Object3D {
 		constructor() {
 			super();
@@ -31846,15 +28625,15 @@
 			this.gain = this.context.createGain();
 			this.gain.connect(this.context.destination);
 			this.filter = null;
-			this.timeDelta = 0; // private
+			this.timeDelta = 0;
+
+			// private
 
 			this._clock = new Clock();
 		}
-
 		getInput() {
 			return this.gain;
 		}
-
 		removeFilter() {
 			if (this.filter !== null) {
 				this.gain.disconnect(this.filter);
@@ -31862,14 +28641,11 @@
 				this.gain.connect(this.context.destination);
 				this.filter = null;
 			}
-
 			return this;
 		}
-
 		getFilter() {
 			return this.filter;
 		}
-
 		setFilter(value) {
 			if (this.filter !== null) {
 				this.gain.disconnect(this.filter);
@@ -31877,33 +28653,28 @@
 			} else {
 				this.gain.disconnect(this.context.destination);
 			}
-
 			this.filter = value;
 			this.gain.connect(this.filter);
 			this.filter.connect(this.context.destination);
 			return this;
 		}
-
 		getMasterVolume() {
 			return this.gain.gain.value;
 		}
-
 		setMasterVolume(value) {
 			this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
 			return this;
 		}
-
 		updateMatrixWorld(force) {
 			super.updateMatrixWorld(force);
 			const listener = this.context.listener;
 			const up = this.up;
 			this.timeDelta = this._clock.getDelta();
 			this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);
-
 			_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);
-
 			if (listener.positionX) {
 				// code path for Chrome (see #14393)
+
 				const endTime = this.context.currentTime + this.timeDelta;
 				listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
 				listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
@@ -31919,7 +28690,6 @@
 				listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
 			}
 		}
-
 	}
 
 	class Audio extends Object3D {
@@ -31948,11 +28718,9 @@
 			this._connected = false;
 			this.filters = [];
 		}
-
 		getOutput() {
 			return this.gain;
 		}
-
 		setNodeSource(audioNode) {
 			this.hasPlaybackControl = false;
 			this.sourceType = 'audioNode';
@@ -31960,7 +28728,6 @@
 			this.connect();
 			return this;
 		}
-
 		setMediaElementSource(mediaElement) {
 			this.hasPlaybackControl = false;
 			this.sourceType = 'mediaNode';
@@ -31968,7 +28735,6 @@
 			this.connect();
 			return this;
 		}
-
 		setMediaStreamSource(mediaStream) {
 			this.hasPlaybackControl = false;
 			this.sourceType = 'mediaStreamNode';
@@ -31976,25 +28742,21 @@
 			this.connect();
 			return this;
 		}
-
 		setBuffer(audioBuffer) {
 			this.buffer = audioBuffer;
 			this.sourceType = 'buffer';
 			if (this.autoplay) this.play();
 			return this;
 		}
-
 		play(delay = 0) {
 			if (this.isPlaying === true) {
 				console.warn('THREE.Audio: Audio is already playing.');
 				return;
 			}
-
 			if (this.hasPlaybackControl === false) {
 				console.warn('THREE.Audio: this Audio has no playback control.');
 				return;
 			}
-
 			this._startedAt = this.context.currentTime + delay;
 			const source = this.context.createBufferSource();
 			source.buffer = this.buffer;
@@ -32009,84 +28771,68 @@
 			this.setPlaybackRate(this.playbackRate);
 			return this.connect();
 		}
-
 		pause() {
 			if (this.hasPlaybackControl === false) {
 				console.warn('THREE.Audio: this Audio has no playback control.');
 				return;
 			}
-
 			if (this.isPlaying === true) {
 				// update current progress
-				this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
 
+				this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
 				if (this.loop === true) {
 					// ensure _progress does not exceed duration with looped audios
+
 					this._progress = this._progress % (this.duration || this.buffer.duration);
 				}
-
 				this.source.stop();
 				this.source.onended = null;
 				this.isPlaying = false;
 			}
-
 			return this;
 		}
-
 		stop() {
 			if (this.hasPlaybackControl === false) {
 				console.warn('THREE.Audio: this Audio has no playback control.');
 				return;
 			}
-
 			this._progress = 0;
 			this.source.stop();
 			this.source.onended = null;
 			this.isPlaying = false;
 			return this;
 		}
-
 		connect() {
 			if (this.filters.length > 0) {
 				this.source.connect(this.filters[0]);
-
 				for (let i = 1, l = this.filters.length; i < l; i++) {
 					this.filters[i - 1].connect(this.filters[i]);
 				}
-
 				this.filters[this.filters.length - 1].connect(this.getOutput());
 			} else {
 				this.source.connect(this.getOutput());
 			}
-
 			this._connected = true;
 			return this;
 		}
-
 		disconnect() {
 			if (this.filters.length > 0) {
 				this.source.disconnect(this.filters[0]);
-
 				for (let i = 1, l = this.filters.length; i < l; i++) {
 					this.filters[i - 1].disconnect(this.filters[i]);
 				}
-
 				this.filters[this.filters.length - 1].disconnect(this.getOutput());
 			} else {
 				this.source.disconnect(this.getOutput());
 			}
-
 			this._connected = false;
 			return this;
 		}
-
 		getFilters() {
 			return this.filters;
 		}
-
 		setFilters(value) {
 			if (!value) value = [];
-
 			if (this._connected === true) {
 				this.disconnect();
 				this.filters = value.slice();
@@ -32094,10 +28840,8 @@
 			} else {
 				this.filters = value.slice();
 			}
-
 			return this;
 		}
-
 		setDetune(value) {
 			this.detune = value;
 			if (this.source.detune === undefined) return; // only set detune when available
@@ -32105,98 +28849,73 @@
 			if (this.isPlaying === true) {
 				this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
 			}
-
 			return this;
 		}
-
 		getDetune() {
 			return this.detune;
 		}
-
 		getFilter() {
 			return this.getFilters()[0];
 		}
-
 		setFilter(filter) {
 			return this.setFilters(filter ? [filter] : []);
 		}
-
 		setPlaybackRate(value) {
 			if (this.hasPlaybackControl === false) {
 				console.warn('THREE.Audio: this Audio has no playback control.');
 				return;
 			}
-
 			this.playbackRate = value;
-
 			if (this.isPlaying === true) {
 				this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
 			}
-
 			return this;
 		}
-
 		getPlaybackRate() {
 			return this.playbackRate;
 		}
-
 		onEnded() {
 			this.isPlaying = false;
 		}
-
 		getLoop() {
 			if (this.hasPlaybackControl === false) {
 				console.warn('THREE.Audio: this Audio has no playback control.');
 				return false;
 			}
-
 			return this.loop;
 		}
-
 		setLoop(value) {
 			if (this.hasPlaybackControl === false) {
 				console.warn('THREE.Audio: this Audio has no playback control.');
 				return;
 			}
-
 			this.loop = value;
-
 			if (this.isPlaying === true) {
 				this.source.loop = this.loop;
 			}
-
 			return this;
 		}
-
 		setLoopStart(value) {
 			this.loopStart = value;
 			return this;
 		}
-
 		setLoopEnd(value) {
 			this.loopEnd = value;
 			return this;
 		}
-
 		getVolume() {
 			return this.gain.gain.value;
 		}
-
 		setVolume(value) {
 			this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
 			return this;
 		}
-
 	}
 
 	const _position = /*@__PURE__*/new Vector3();
-
 	const _quaternion = /*@__PURE__*/new Quaternion();
-
 	const _scale = /*@__PURE__*/new Vector3();
-
 	const _orientation = /*@__PURE__*/new Vector3();
-
 	class PositionalAudio extends Audio {
 		constructor(listener) {
 			super(listener);
@@ -32204,70 +28923,56 @@
 			this.panner.panningModel = 'HRTF';
 			this.panner.connect(this.gain);
 		}
-
 		disconnect() {
 			super.disconnect();
 			this.panner.disconnect(this.gain);
 		}
-
 		getOutput() {
 			return this.panner;
 		}
-
 		getRefDistance() {
 			return this.panner.refDistance;
 		}
-
 		setRefDistance(value) {
 			this.panner.refDistance = value;
 			return this;
 		}
-
 		getRolloffFactor() {
 			return this.panner.rolloffFactor;
 		}
-
 		setRolloffFactor(value) {
 			this.panner.rolloffFactor = value;
 			return this;
 		}
-
 		getDistanceModel() {
 			return this.panner.distanceModel;
 		}
-
 		setDistanceModel(value) {
 			this.panner.distanceModel = value;
 			return this;
 		}
-
 		getMaxDistance() {
 			return this.panner.maxDistance;
 		}
-
 		setMaxDistance(value) {
 			this.panner.maxDistance = value;
 			return this;
 		}
-
 		setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
 			this.panner.coneInnerAngle = coneInnerAngle;
 			this.panner.coneOuterAngle = coneOuterAngle;
 			this.panner.coneOuterGain = coneOuterGain;
 			return this;
 		}
-
 		updateMatrixWorld(force) {
 			super.updateMatrixWorld(force);
 			if (this.hasPlaybackControl === true && this.isPlaying === false) return;
 			this.matrixWorld.decompose(_position, _quaternion, _scale);
-
 			_orientation.set(0, 0, 1).applyQuaternion(_quaternion);
-
 			const panner = this.panner;
-
 			if (panner.positionX) {
 				// code path for Chrome and Firefox (see #14393)
+
 				const endTime = this.context.currentTime + this.listener.timeDelta;
 				panner.positionX.linearRampToValueAtTime(_position.x, endTime);
 				panner.positionY.linearRampToValueAtTime(_position.y, endTime);
@@ -32280,7 +28985,6 @@
 				panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
 			}
 		}
-
 	}
 
 	class AudioAnalyser {
@@ -32290,30 +28994,27 @@
 			this.data = new Uint8Array(this.analyser.frequencyBinCount);
 			audio.getOutput().connect(this.analyser);
 		}
-
 		getFrequencyData() {
 			this.analyser.getByteFrequencyData(this.data);
 			return this.data;
 		}
-
 		getAverageFrequency() {
 			let value = 0;
 			const data = this.getFrequencyData();
-
 			for (let i = 0; i < data.length; i++) {
 				value += data[i];
 			}
-
 			return value / data.length;
 		}
-
 	}
 
 	class PropertyMixer {
 		constructor(binding, typeName, valueSize) {
 			this.binding = binding;
 			this.valueSize = valueSize;
-			let mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
+			let mixFunction, mixFunctionAdditive, setIdentity;
+
+			// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
 			//
 			// interpolators can use .buffer as their .result
 			// the data then goes to 'incoming'
@@ -32337,24 +29038,22 @@
 					this.buffer = new Float64Array(valueSize * 6);
 					this._workIndex = 5;
 					break;
-
 				case 'string':
 				case 'bool':
-					mixFunction = this._select; // Use the regular mix function and for additive on these types,
-					// additive is not relevant for non-numeric types
+					mixFunction = this._select;
 
+					// Use the regular mix function and for additive on these types,
+					// additive is not relevant for non-numeric types
 					mixFunctionAdditive = this._select;
 					setIdentity = this._setAdditiveIdentityOther;
 					this.buffer = new Array(valueSize * 5);
 					break;
-
 				default:
 					mixFunction = this._lerp;
 					mixFunctionAdditive = this._lerpAdditive;
 					setIdentity = this._setAdditiveIdentityNumeric;
 					this.buffer = new Float64Array(valueSize * 5);
 			}
-
 			this._mixBufferRegion = mixFunction;
 			this._mixBufferRegionAdditive = mixFunctionAdditive;
 			this._setIdentity = setIdentity;
@@ -32364,133 +29063,126 @@
 			this.cumulativeWeightAdditive = 0;
 			this.useCount = 0;
 			this.referenceCount = 0;
-		} // accumulate data in the 'incoming' region into 'accu<i>'
-
+		}
 
+		// accumulate data in the 'incoming' region into 'accu<i>'
 		accumulate(accuIndex, weight) {
 			// note: happily accumulating nothing when weight = 0, the caller knows
 			// the weight and shouldn't have made the call in the first place
+
 			const buffer = this.buffer,
-						stride = this.valueSize,
-						offset = accuIndex * stride + stride;
+				stride = this.valueSize,
+				offset = accuIndex * stride + stride;
 			let currentWeight = this.cumulativeWeight;
-
 			if (currentWeight === 0) {
 				// accuN := incoming * weight
+
 				for (let i = 0; i !== stride; ++i) {
 					buffer[offset + i] = buffer[i];
 				}
-
 				currentWeight = weight;
 			} else {
 				// accuN := accuN + incoming * weight
+
 				currentWeight += weight;
 				const mix = weight / currentWeight;
-
 				this._mixBufferRegion(buffer, offset, 0, mix, stride);
 			}
-
 			this.cumulativeWeight = currentWeight;
-		} // accumulate data in the 'incoming' region into 'add'
-
+		}
 
+		// accumulate data in the 'incoming' region into 'add'
 		accumulateAdditive(weight) {
 			const buffer = this.buffer,
-						stride = this.valueSize,
-						offset = stride * this._addIndex;
-
+				stride = this.valueSize,
+				offset = stride * this._addIndex;
 			if (this.cumulativeWeightAdditive === 0) {
 				// add = identity
+
 				this._setIdentity();
-			} // add := add + incoming * weight
+			}
 
+			// add := add + incoming * weight
 
 			this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
-
 			this.cumulativeWeightAdditive += weight;
-		} // apply the state of 'accu<i>' to the binding when accus differ
-
+		}
 
+		// apply the state of 'accu<i>' to the binding when accus differ
 		apply(accuIndex) {
 			const stride = this.valueSize,
-						buffer = this.buffer,
-						offset = accuIndex * stride + stride,
-						weight = this.cumulativeWeight,
-						weightAdditive = this.cumulativeWeightAdditive,
-						binding = this.binding;
+				buffer = this.buffer,
+				offset = accuIndex * stride + stride,
+				weight = this.cumulativeWeight,
+				weightAdditive = this.cumulativeWeightAdditive,
+				binding = this.binding;
 			this.cumulativeWeight = 0;
 			this.cumulativeWeightAdditive = 0;
-
 			if (weight < 1) {
 				// accuN := accuN + original * ( 1 - cumulativeWeight )
-				const originalValueOffset = stride * this._origIndex;
 
+				const originalValueOffset = stride * this._origIndex;
 				this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
 			}
-
 			if (weightAdditive > 0) {
 				// accuN := accuN + additive accuN
+
 				this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
 			}
-
 			for (let i = stride, e = stride + stride; i !== e; ++i) {
 				if (buffer[i] !== buffer[i + stride]) {
 					// value has changed -> update scene graph
+
 					binding.setValue(buffer, offset);
 					break;
 				}
 			}
-		} // remember the state of the bound property and copy it to both accus
-
+		}
 
+		// remember the state of the bound property and copy it to both accus
 		saveOriginalState() {
 			const binding = this.binding;
 			const buffer = this.buffer,
-						stride = this.valueSize,
-						originalValueOffset = stride * this._origIndex;
-			binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original
+				stride = this.valueSize,
+				originalValueOffset = stride * this._origIndex;
+			binding.getValue(buffer, originalValueOffset);
 
+			// accu[0..1] := orig -- initially detect changes against the original
 			for (let i = stride, e = originalValueOffset; i !== e; ++i) {
 				buffer[i] = buffer[originalValueOffset + i % stride];
-			} // Add to identity for additive
-
+			}
 
+			// Add to identity for additive
 			this._setIdentity();
-
 			this.cumulativeWeight = 0;
 			this.cumulativeWeightAdditive = 0;
-		} // apply the state previously taken via 'saveOriginalState' to the binding
-
+		}
 
+		// apply the state previously taken via 'saveOriginalState' to the binding
 		restoreOriginalState() {
 			const originalValueOffset = this.valueSize * 3;
 			this.binding.setValue(this.buffer, originalValueOffset);
 		}
-
 		_setAdditiveIdentityNumeric() {
 			const startIndex = this._addIndex * this.valueSize;
 			const endIndex = startIndex + this.valueSize;
-
 			for (let i = startIndex; i < endIndex; i++) {
 				this.buffer[i] = 0;
 			}
 		}
-
 		_setAdditiveIdentityQuaternion() {
 			this._setAdditiveIdentityNumeric();
-
 			this.buffer[this._addIndex * this.valueSize + 3] = 1;
 		}
-
 		_setAdditiveIdentityOther() {
 			const startIndex = this._origIndex * this.valueSize;
 			const targetIndex = this._addIndex * this.valueSize;
-
 			for (let i = 0; i < this.valueSize; i++) {
 				this.buffer[targetIndex + i] = this.buffer[startIndex + i];
 			}
-		} // mix functions
+		}
 
+		// mix functions
 
 		_select(buffer, dstOffset, srcOffset, t, stride) {
 			if (t >= 0.5) {
@@ -32499,126 +29191,110 @@
 				}
 			}
 		}
-
 		_slerp(buffer, dstOffset, srcOffset, t) {
 			Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
 		}
-
 		_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
-			const workOffset = this._workIndex * stride; // Store result in intermediate buffer offset
+			const workOffset = this._workIndex * stride;
 
-			Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result
+			// Store result in intermediate buffer offset
+			Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
 
+			// Slerp to the intermediate result
 			Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
 		}
-
 		_lerp(buffer, dstOffset, srcOffset, t, stride) {
 			const s = 1 - t;
-
 			for (let i = 0; i !== stride; ++i) {
 				const j = dstOffset + i;
 				buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
 			}
 		}
-
 		_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
 			for (let i = 0; i !== stride; ++i) {
 				const j = dstOffset + i;
 				buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
 			}
 		}
-
 	}
 
 	// Characters [].:/ are reserved for track binding syntax.
 	const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
+	const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g');
 
-	const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\w` regexp matches
+	// Attempts to allow node names from any language. ES5's `\w` regexp matches
 	// only latin characters, and the unicode \p{L} is not yet supported. So
 	// instead, we exclude reserved characters and match everything else.
-
-
 	const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
+	const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']';
 
-	const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must
+	// Parent directories, delimited by '/' or ':'. Currently unused, but must
 	// be matched to parse the rest of the track name.
+	const _directoryRe = /*@__PURE__*/ /((?:WC+[\/:])*)/.source.replace('WC', _wordChar);
 
+	// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
+	const _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot);
 
-	const _directoryRe = /*@__PURE__*/ /((?:WC+[\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
-
-
-	const _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved
+	// Object on target node, and accessor. May not contain reserved
 	// characters. Accessor may contain any character except closing bracket.
+	const _objectRe = /*@__PURE__*/ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar);
 
-
-	const _objectRe = /*@__PURE__*/ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may
+	// Property and accessor. May not contain reserved characters. Accessor may
 	// contain any non-bracket characters.
-
-
 	const _propertyRe = /*@__PURE__*/ /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', _wordChar);
-
 	const _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');
-
 	const _supportedObjectNames = ['material', 'materials', 'bones', 'map'];
-
 	class Composite {
 		constructor(targetGroup, path, optionalParsedPath) {
 			const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
 			this._targetGroup = targetGroup;
 			this._bindings = targetGroup.subscribe_(path, parsedPath);
 		}
-
 		getValue(array, offset) {
 			this.bind(); // bind all binding
 
 			const firstValidIndex = this._targetGroup.nCachedObjects_,
-						binding = this._bindings[firstValidIndex]; // and only call .getValue on the first
+				binding = this._bindings[firstValidIndex];
 
+			// and only call .getValue on the first
 			if (binding !== undefined) binding.getValue(array, offset);
 		}
-
 		setValue(array, offset) {
 			const bindings = this._bindings;
-
 			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
 				bindings[i].setValue(array, offset);
 			}
 		}
-
 		bind() {
 			const bindings = this._bindings;
-
 			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
 				bindings[i].bind();
 			}
 		}
-
 		unbind() {
 			const bindings = this._bindings;
-
 			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
 				bindings[i].unbind();
 			}
 		}
+	}
 
-	} // Note: This class uses a State pattern on a per-method basis:
+	// Note: This class uses a State pattern on a per-method basis:
 	// 'bind' sets 'this.getValue' / 'setValue' and shadows the
 	// prototype version of these methods with one that represents
 	// the bound state. When the property is not found, the methods
 	// become no-ops.
-
-
 	class PropertyBinding {
 		constructor(rootNode, path, parsedPath) {
 			this.path = path;
 			this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
 			this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
-			this.rootNode = rootNode; // initial state of these methods that calls 'bind'
+			this.rootNode = rootNode;
 
+			// initial state of these methods that calls 'bind'
 			this.getValue = this._getValue_unbound;
 			this.setValue = this._setValue_unbound;
 		}
-
 		static create(root, path, parsedPath) {
 			if (!(root && root.isAnimationObjectGroup)) {
 				return new PropertyBinding(root, path, parsedPath);
@@ -32626,6 +29302,7 @@
 				return new PropertyBinding.Composite(root, path, parsedPath);
 			}
 		}
+
 		/**
 		 * Replaces spaces with underscores and removes unsupported characters from
 		 * node names, to ensure compatibility with parseTrackName().
@@ -32633,19 +29310,14 @@
 		 * @param {string} name Node name to be sanitized.
 		 * @return {string}
 		 */
-
-
 		static sanitizeNodeName(name) {
 			return name.replace(/\s/g, '_').replace(_reservedRe, '');
 		}
-
 		static parseTrackName(trackName) {
 			const matches = _trackRe.exec(trackName);
-
 			if (matches === null) {
 				throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);
 			}
-
 			const results = {
 				// directoryName: matches[ 1 ], // (tschw) currently unused
 				nodeName: matches[2],
@@ -32656,323 +29328,287 @@
 				propertyIndex: matches[6]
 			};
 			const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');
-
 			if (lastDot !== undefined && lastDot !== -1) {
-				const objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there
+				const objectName = results.nodeName.substring(lastDot + 1);
+
+				// Object names must be checked against an allowlist. Otherwise, there
 				// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
 				// 'bar' could be the objectName, or part of a nodeName (which can
 				// include '.' characters).
-
 				if (_supportedObjectNames.indexOf(objectName) !== -1) {
 					results.nodeName = results.nodeName.substring(0, lastDot);
 					results.objectName = objectName;
 				}
 			}
-
 			if (results.propertyName === null || results.propertyName.length === 0) {
 				throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
 			}
-
 			return results;
 		}
-
 		static findNode(root, nodeName) {
 			if (nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
 				return root;
-			} // search into skeleton bones.
-
+			}
 
+			// search into skeleton bones.
 			if (root.skeleton) {
 				const bone = root.skeleton.getBoneByName(nodeName);
-
 				if (bone !== undefined) {
 					return bone;
 				}
-			} // search into node subtree.
-
+			}
 
+			// search into node subtree.
 			if (root.children) {
 				const searchNodeSubtree = function (children) {
 					for (let i = 0; i < children.length; i++) {
 						const childNode = children[i];
-
 						if (childNode.name === nodeName || childNode.uuid === nodeName) {
 							return childNode;
 						}
-
 						const result = searchNodeSubtree(childNode.children);
 						if (result) return result;
 					}
-
 					return null;
 				};
-
 				const subTreeNode = searchNodeSubtree(root.children);
-
 				if (subTreeNode) {
 					return subTreeNode;
 				}
 			}
-
 			return null;
-		} // these are used to "bind" a nonexistent property
-
+		}
 
+		// these are used to "bind" a nonexistent property
 		_getValue_unavailable() {}
+		_setValue_unavailable() {}
 
-		_setValue_unavailable() {} // Getters
-
+		// Getters
 
 		_getValue_direct(buffer, offset) {
 			buffer[offset] = this.targetObject[this.propertyName];
 		}
-
 		_getValue_array(buffer, offset) {
 			const source = this.resolvedProperty;
-
 			for (let i = 0, n = source.length; i !== n; ++i) {
 				buffer[offset++] = source[i];
 			}
 		}
-
 		_getValue_arrayElement(buffer, offset) {
 			buffer[offset] = this.resolvedProperty[this.propertyIndex];
 		}
-
 		_getValue_toArray(buffer, offset) {
 			this.resolvedProperty.toArray(buffer, offset);
-		} // Direct
+		}
 
+		// Direct
 
 		_setValue_direct(buffer, offset) {
 			this.targetObject[this.propertyName] = buffer[offset];
 		}
-
 		_setValue_direct_setNeedsUpdate(buffer, offset) {
 			this.targetObject[this.propertyName] = buffer[offset];
 			this.targetObject.needsUpdate = true;
 		}
-
 		_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
 			this.targetObject[this.propertyName] = buffer[offset];
 			this.targetObject.matrixWorldNeedsUpdate = true;
-		} // EntireArray
+		}
 
+		// EntireArray
 
 		_setValue_array(buffer, offset) {
 			const dest = this.resolvedProperty;
-
 			for (let i = 0, n = dest.length; i !== n; ++i) {
 				dest[i] = buffer[offset++];
 			}
 		}
-
 		_setValue_array_setNeedsUpdate(buffer, offset) {
 			const dest = this.resolvedProperty;
-
 			for (let i = 0, n = dest.length; i !== n; ++i) {
 				dest[i] = buffer[offset++];
 			}
-
 			this.targetObject.needsUpdate = true;
 		}
-
 		_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
 			const dest = this.resolvedProperty;
-
 			for (let i = 0, n = dest.length; i !== n; ++i) {
 				dest[i] = buffer[offset++];
 			}
-
 			this.targetObject.matrixWorldNeedsUpdate = true;
-		} // ArrayElement
+		}
 
+		// ArrayElement
 
 		_setValue_arrayElement(buffer, offset) {
 			this.resolvedProperty[this.propertyIndex] = buffer[offset];
 		}
-
 		_setValue_arrayElement_setNeedsUpdate(buffer, offset) {
 			this.resolvedProperty[this.propertyIndex] = buffer[offset];
 			this.targetObject.needsUpdate = true;
 		}
-
 		_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
 			this.resolvedProperty[this.propertyIndex] = buffer[offset];
 			this.targetObject.matrixWorldNeedsUpdate = true;
-		} // HasToFromArray
+		}
 
+		// HasToFromArray
 
 		_setValue_fromArray(buffer, offset) {
 			this.resolvedProperty.fromArray(buffer, offset);
 		}
-
 		_setValue_fromArray_setNeedsUpdate(buffer, offset) {
 			this.resolvedProperty.fromArray(buffer, offset);
 			this.targetObject.needsUpdate = true;
 		}
-
 		_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
 			this.resolvedProperty.fromArray(buffer, offset);
 			this.targetObject.matrixWorldNeedsUpdate = true;
 		}
-
 		_getValue_unbound(targetArray, offset) {
 			this.bind();
 			this.getValue(targetArray, offset);
 		}
-
 		_setValue_unbound(sourceArray, offset) {
 			this.bind();
 			this.setValue(sourceArray, offset);
-		} // create getter / setter pair for a property in the scene graph
-
+		}
 
+		// create getter / setter pair for a property in the scene graph
 		bind() {
 			let targetObject = this.node;
 			const parsedPath = this.parsedPath;
 			const objectName = parsedPath.objectName;
 			const propertyName = parsedPath.propertyName;
 			let propertyIndex = parsedPath.propertyIndex;
-
 			if (!targetObject) {
 				targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
 				this.node = targetObject;
-			} // set fail state so we can just 'return' on error
-
+			}
 
+			// set fail state so we can just 'return' on error
 			this.getValue = this._getValue_unavailable;
-			this.setValue = this._setValue_unavailable; // ensure there is a value node
+			this.setValue = this._setValue_unavailable;
 
+			// ensure there is a value node
 			if (!targetObject) {
 				console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
 				return;
 			}
-
 			if (objectName) {
-				let objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....
+				let objectIndex = parsedPath.objectIndex;
 
+				// special cases were we need to reach deeper into the hierarchy to get the face materials....
 				switch (objectName) {
 					case 'materials':
 						if (!targetObject.material) {
 							console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
 							return;
 						}
-
 						if (!targetObject.material.materials) {
 							console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
 							return;
 						}
-
 						targetObject = targetObject.material.materials;
 						break;
-
 					case 'bones':
 						if (!targetObject.skeleton) {
 							console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
 							return;
-						} // potential future optimization: skip this if propertyIndex is already an integer
-						// and convert the integer string to a true integer.
+						}
 
+						// potential future optimization: skip this if propertyIndex is already an integer
+						// and convert the integer string to a true integer.
 
-						targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.
+						targetObject = targetObject.skeleton.bones;
 
+						// support resolving morphTarget names into indices.
 						for (let i = 0; i < targetObject.length; i++) {
 							if (targetObject[i].name === objectIndex) {
 								objectIndex = i;
 								break;
 							}
 						}
-
 						break;
-
 					case 'map':
 						if ('map' in targetObject) {
 							targetObject = targetObject.map;
 							break;
 						}
-
 						if (!targetObject.material) {
 							console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
 							return;
 						}
-
 						if (!targetObject.material.map) {
 							console.error('THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this);
 							return;
 						}
-
 						targetObject = targetObject.material.map;
 						break;
-
 					default:
 						if (targetObject[objectName] === undefined) {
 							console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
 							return;
 						}
-
 						targetObject = targetObject[objectName];
 				}
-
 				if (objectIndex !== undefined) {
 					if (targetObject[objectIndex] === undefined) {
 						console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
 						return;
 					}
-
 					targetObject = targetObject[objectIndex];
 				}
-			} // resolve property
-
+			}
 
+			// resolve property
 			const nodeProperty = targetObject[propertyName];
-
 			if (nodeProperty === undefined) {
 				const nodeName = parsedPath.nodeName;
 				console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
 				return;
-			} // determine versioning scheme
-
+			}
 
+			// determine versioning scheme
 			let versioning = this.Versioning.None;
 			this.targetObject = targetObject;
-
 			if (targetObject.needsUpdate !== undefined) {
 				// material
+
 				versioning = this.Versioning.NeedsUpdate;
 			} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {
 				// node transform
-				versioning = this.Versioning.MatrixWorldNeedsUpdate;
-			} // determine how the property gets bound
 
+				versioning = this.Versioning.MatrixWorldNeedsUpdate;
+			}
 
+			// determine how the property gets bound
 			let bindingType = this.BindingType.Direct;
-
 			if (propertyIndex !== undefined) {
 				// access a sub element of the property array (only primitives are supported right now)
+
 				if (propertyName === 'morphTargetInfluences') {
 					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
+
 					// support resolving morphTarget names into indices.
 					if (!targetObject.geometry) {
 						console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
 						return;
 					}
-
 					if (!targetObject.geometry.morphAttributes) {
 						console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
 						return;
 					}
-
 					if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {
 						propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
 					}
 				}
-
 				bindingType = this.BindingType.ArrayElement;
 				this.resolvedProperty = nodeProperty;
 				this.propertyIndex = propertyIndex;
 			} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
 				// must use copy for Object3D.Euler/Quaternion
+
 				bindingType = this.BindingType.HasFromToArray;
 				this.resolvedProperty = nodeProperty;
 			} else if (Array.isArray(nodeProperty)) {
@@ -32980,23 +29616,21 @@
 				this.resolvedProperty = nodeProperty;
 			} else {
 				this.propertyName = propertyName;
-			} // select getter / setter
-
+			}
 
+			// select getter / setter
 			this.getValue = this.GetterByBindingType[bindingType];
 			this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
 		}
-
 		unbind() {
-			this.node = null; // back to the prototype version of getValue / setValue
-			// note: avoiding to mutate the shape of 'this' via 'delete'
+			this.node = null;
 
+			// back to the prototype version of getValue / setValue
+			// note: avoiding to mutate the shape of 'this' via 'delete'
 			this.getValue = this._getValue_unbound;
 			this.setValue = this._setValue_unbound;
 		}
-
 	}
-
 	PropertyBinding.Composite = Composite;
 	PropertyBinding.prototype.BindingType = {
 		Direct: 0,
@@ -33010,10 +29644,15 @@
 		MatrixWorldNeedsUpdate: 2
 	};
 	PropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];
-	PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct
-	PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray
-	PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement
-	PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray
+	PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[
+	// Direct
+	PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [
+	// EntireArray
+
+	PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [
+	// ArrayElement
+	PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [
+	// HasToFromArray
 	PropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];
 
 	/**
@@ -33048,8 +29687,9 @@
 	class AnimationObjectGroup {
 		constructor() {
 			this.isAnimationObjectGroup = true;
-			this.uuid = generateUUID(); // cached objects followed by the active ones
+			this.uuid = generateUUID();
 
+			// cached objects followed by the active ones
 			this._objects = Array.prototype.slice.call(arguments);
 			this.nCachedObjects_ = 0; // threshold
 			// note: read by PropertyBinding.Composite
@@ -33060,13 +29700,9 @@
 			for (let i = 0, n = arguments.length; i !== n; ++i) {
 				indices[arguments[i].uuid] = i;
 			}
-
 			this._paths = []; // inside: string
-
 			this._parsedPaths = []; // inside: { we don't care, here }
-
 			this._bindings = []; // inside: Array< PropertyBinding >
-
 			this._bindingsIndicesByPath = {}; // inside: indices in these arrays
 
 			const scope = this;
@@ -33075,165 +29711,164 @@
 					get total() {
 						return scope._objects.length;
 					},
-
 					get inUse() {
 						return this.total - scope.nCachedObjects_;
 					}
-
 				},
-
 				get bindingsPerObject() {
 					return scope._bindings.length;
 				}
-
 			};
 		}
-
 		add() {
 			const objects = this._objects,
-						indicesByUUID = this._indicesByUUID,
-						paths = this._paths,
-						parsedPaths = this._parsedPaths,
-						bindings = this._bindings,
-						nBindings = bindings.length;
+				indicesByUUID = this._indicesByUUID,
+				paths = this._paths,
+				parsedPaths = this._parsedPaths,
+				bindings = this._bindings,
+				nBindings = bindings.length;
 			let knownObject = undefined,
-					nObjects = objects.length,
-					nCachedObjects = this.nCachedObjects_;
-
+				nObjects = objects.length,
+				nCachedObjects = this.nCachedObjects_;
 			for (let i = 0, n = arguments.length; i !== n; ++i) {
 				const object = arguments[i],
-							uuid = object.uuid;
+					uuid = object.uuid;
 				let index = indicesByUUID[uuid];
-
 				if (index === undefined) {
 					// unknown object -> add it to the ACTIVE region
+
 					index = nObjects++;
 					indicesByUUID[uuid] = index;
-					objects.push(object); // accounting is done, now do the same for all bindings
+					objects.push(object);
+
+					// accounting is done, now do the same for all bindings
 
 					for (let j = 0, m = nBindings; j !== m; ++j) {
 						bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
 					}
 				} else if (index < nCachedObjects) {
-					knownObject = objects[index]; // move existing object to the ACTIVE region
+					knownObject = objects[index];
+
+					// move existing object to the ACTIVE region
 
 					const firstActiveIndex = --nCachedObjects,
-								lastCachedObject = objects[firstActiveIndex];
+						lastCachedObject = objects[firstActiveIndex];
 					indicesByUUID[lastCachedObject.uuid] = index;
 					objects[index] = lastCachedObject;
 					indicesByUUID[uuid] = firstActiveIndex;
-					objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings
+					objects[firstActiveIndex] = object;
+
+					// accounting is done, now do the same for all bindings
 
 					for (let j = 0, m = nBindings; j !== m; ++j) {
 						const bindingsForPath = bindings[j],
-									lastCached = bindingsForPath[firstActiveIndex];
+							lastCached = bindingsForPath[firstActiveIndex];
 						let binding = bindingsForPath[index];
 						bindingsForPath[index] = lastCached;
-
 						if (binding === undefined) {
 							// since we do not bother to create new bindings
 							// for objects that are cached, the binding may
 							// or may not exist
+
 							binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
 						}
-
 						bindingsForPath[firstActiveIndex] = binding;
 					}
 				} else if (objects[index] !== knownObject) {
 					console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');
 				} // else the object is already where we want it to be
-
 			} // for arguments
 
-
 			this.nCachedObjects_ = nCachedObjects;
 		}
-
 		remove() {
 			const objects = this._objects,
-						indicesByUUID = this._indicesByUUID,
-						bindings = this._bindings,
-						nBindings = bindings.length;
+				indicesByUUID = this._indicesByUUID,
+				bindings = this._bindings,
+				nBindings = bindings.length;
 			let nCachedObjects = this.nCachedObjects_;
-
 			for (let i = 0, n = arguments.length; i !== n; ++i) {
 				const object = arguments[i],
-							uuid = object.uuid,
-							index = indicesByUUID[uuid];
-
+					uuid = object.uuid,
+					index = indicesByUUID[uuid];
 				if (index !== undefined && index >= nCachedObjects) {
 					// move existing object into the CACHED region
+
 					const lastCachedIndex = nCachedObjects++,
-								firstActiveObject = objects[lastCachedIndex];
+						firstActiveObject = objects[lastCachedIndex];
 					indicesByUUID[firstActiveObject.uuid] = index;
 					objects[index] = firstActiveObject;
 					indicesByUUID[uuid] = lastCachedIndex;
-					objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings
+					objects[lastCachedIndex] = object;
+
+					// accounting is done, now do the same for all bindings
 
 					for (let j = 0, m = nBindings; j !== m; ++j) {
 						const bindingsForPath = bindings[j],
-									firstActive = bindingsForPath[lastCachedIndex],
-									binding = bindingsForPath[index];
+							firstActive = bindingsForPath[lastCachedIndex],
+							binding = bindingsForPath[index];
 						bindingsForPath[index] = firstActive;
 						bindingsForPath[lastCachedIndex] = binding;
 					}
 				}
 			} // for arguments
 
-
 			this.nCachedObjects_ = nCachedObjects;
-		} // remove & forget
-
+		}
 
+		// remove & forget
 		uncache() {
 			const objects = this._objects,
-						indicesByUUID = this._indicesByUUID,
-						bindings = this._bindings,
-						nBindings = bindings.length;
+				indicesByUUID = this._indicesByUUID,
+				bindings = this._bindings,
+				nBindings = bindings.length;
 			let nCachedObjects = this.nCachedObjects_,
-					nObjects = objects.length;
-
+				nObjects = objects.length;
 			for (let i = 0, n = arguments.length; i !== n; ++i) {
 				const object = arguments[i],
-							uuid = object.uuid,
-							index = indicesByUUID[uuid];
-
+					uuid = object.uuid,
+					index = indicesByUUID[uuid];
 				if (index !== undefined) {
 					delete indicesByUUID[uuid];
-
 					if (index < nCachedObjects) {
 						// object is cached, shrink the CACHED region
+
 						const firstActiveIndex = --nCachedObjects,
-									lastCachedObject = objects[firstActiveIndex],
-									lastIndex = --nObjects,
-									lastObject = objects[lastIndex]; // last cached object takes this object's place
+							lastCachedObject = objects[firstActiveIndex],
+							lastIndex = --nObjects,
+							lastObject = objects[lastIndex];
 
+						// last cached object takes this object's place
 						indicesByUUID[lastCachedObject.uuid] = index;
-						objects[index] = lastCachedObject; // last object goes to the activated slot and pop
+						objects[index] = lastCachedObject;
 
+						// last object goes to the activated slot and pop
 						indicesByUUID[lastObject.uuid] = firstActiveIndex;
 						objects[firstActiveIndex] = lastObject;
-						objects.pop(); // accounting is done, now do the same for all bindings
+						objects.pop();
+
+						// accounting is done, now do the same for all bindings
 
 						for (let j = 0, m = nBindings; j !== m; ++j) {
 							const bindingsForPath = bindings[j],
-										lastCached = bindingsForPath[firstActiveIndex],
-										last = bindingsForPath[lastIndex];
+								lastCached = bindingsForPath[firstActiveIndex],
+								last = bindingsForPath[lastIndex];
 							bindingsForPath[index] = lastCached;
 							bindingsForPath[firstActiveIndex] = last;
 							bindingsForPath.pop();
 						}
 					} else {
 						// object is active, just swap with the last and pop
-						const lastIndex = --nObjects,
-									lastObject = objects[lastIndex];
 
+						const lastIndex = --nObjects,
+							lastObject = objects[lastIndex];
 						if (lastIndex > 0) {
 							indicesByUUID[lastObject.uuid] = index;
 						}
-
 						objects[index] = lastObject;
-						objects.pop(); // accounting is done, now do the same for all bindings
+						objects.pop();
+
+						// accounting is done, now do the same for all bindings
 
 						for (let j = 0, m = nBindings; j !== m; ++j) {
 							const bindingsForPath = bindings[j];
@@ -33241,56 +29876,52 @@
 							bindingsForPath.pop();
 						}
 					} // cached or active
-
 				} // if object is known
-
 			} // for arguments
 
-
 			this.nCachedObjects_ = nCachedObjects;
-		} // Internal interface used by befriended PropertyBinding.Composite:
+		}
 
+		// Internal interface used by befriended PropertyBinding.Composite:
 
 		subscribe_(path, parsedPath) {
 			// returns an array of bindings for the given path that is changed
 			// according to the contained objects in the group
+
 			const indicesByPath = this._bindingsIndicesByPath;
 			let index = indicesByPath[path];
 			const bindings = this._bindings;
 			if (index !== undefined) return bindings[index];
 			const paths = this._paths,
-						parsedPaths = this._parsedPaths,
-						objects = this._objects,
-						nObjects = objects.length,
-						nCachedObjects = this.nCachedObjects_,
-						bindingsForPath = new Array(nObjects);
+				parsedPaths = this._parsedPaths,
+				objects = this._objects,
+				nObjects = objects.length,
+				nCachedObjects = this.nCachedObjects_,
+				bindingsForPath = new Array(nObjects);
 			index = bindings.length;
 			indicesByPath[path] = index;
 			paths.push(path);
 			parsedPaths.push(parsedPath);
 			bindings.push(bindingsForPath);
-
 			for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
 				const object = objects[i];
 				bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
 			}
-
 			return bindingsForPath;
 		}
-
 		unsubscribe_(path) {
 			// tells the group to forget about a property path and no longer
 			// update the array previously obtained with 'subscribe_'
-			const indicesByPath = this._bindingsIndicesByPath,
-						index = indicesByPath[path];
 
+			const indicesByPath = this._bindingsIndicesByPath,
+				index = indicesByPath[path];
 			if (index !== undefined) {
 				const paths = this._paths,
-							parsedPaths = this._parsedPaths,
-							bindings = this._bindings,
-							lastBindingsIndex = bindings.length - 1,
-							lastBindings = bindings[lastBindingsIndex],
-							lastBindingsPath = path[lastBindingsIndex];
+					parsedPaths = this._parsedPaths,
+					bindings = this._bindings,
+					lastBindingsIndex = bindings.length - 1,
+					lastBindings = bindings[lastBindingsIndex],
+					lastBindingsPath = path[lastBindingsIndex];
 				indicesByPath[lastBindingsPath] = index;
 				bindings[index] = lastBindings;
 				bindings.pop();
@@ -33300,7 +29931,6 @@
 				paths.pop();
 			}
 		}
-
 	}
 
 	class AnimationAction {
@@ -33310,37 +29940,36 @@
 			this._localRoot = localRoot;
 			this.blendMode = blendMode;
 			const tracks = clip.tracks,
-						nTracks = tracks.length,
-						interpolants = new Array(nTracks);
+				nTracks = tracks.length,
+				interpolants = new Array(nTracks);
 			const interpolantSettings = {
 				endingStart: ZeroCurvatureEnding,
 				endingEnd: ZeroCurvatureEnding
 			};
-
 			for (let i = 0; i !== nTracks; ++i) {
 				const interpolant = tracks[i].createInterpolant(null);
 				interpolants[i] = interpolant;
 				interpolant.settings = interpolantSettings;
 			}
-
 			this._interpolantSettings = interpolantSettings;
 			this._interpolants = interpolants; // bound by the mixer
-			// inside: PropertyMixer (managed by the mixer)
 
+			// inside: PropertyMixer (managed by the mixer)
 			this._propertyBindings = new Array(nTracks);
 			this._cacheIndex = null; // for the memory manager
-
 			this._byClipCacheIndex = null; // for the memory manager
 
 			this._timeScaleInterpolant = null;
 			this._weightInterpolant = null;
 			this.loop = LoopRepeat;
-			this._loopCount = -1; // global mixer time when the action is to be started
+			this._loopCount = -1;
+
+			// global mixer time when the action is to be started
 			// it's set back to 'null' upon start of the action
+			this._startTime = null;
 
-			this._startTime = null; // scaled local time of the action
+			// scaled local time of the action
 			// gets clamped or wrapped to 0..clip.duration according to loop
-
 			this.time = 0;
 			this.timeScale = 1;
 			this._effectiveTimeScale = 1;
@@ -33349,264 +29978,226 @@
 			this.repetitions = Infinity; // no. of repetitions when looping
 
 			this.paused = false; // true -> zero effective time scale
-
 			this.enabled = true; // false -> zero effective weight
 
 			this.clampWhenFinished = false; // keep feeding the last frame?
 
 			this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
-
 			this.zeroSlopeAtEnd = true; // clips for start, loop and end
-		} // State & Scheduling
+		}
 
+		// State & Scheduling
 
 		play() {
 			this._mixer._activateAction(this);
-
 			return this;
 		}
-
 		stop() {
 			this._mixer._deactivateAction(this);
-
 			return this.reset();
 		}
-
 		reset() {
 			this.paused = false;
 			this.enabled = true;
 			this.time = 0; // restart clip
-
 			this._loopCount = -1; // forget previous loops
-
 			this._startTime = null; // forget scheduling
 
 			return this.stopFading().stopWarping();
 		}
-
 		isRunning() {
 			return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
-		} // return true when play has been called
-
+		}
 
+		// return true when play has been called
 		isScheduled() {
 			return this._mixer._isActiveAction(this);
 		}
-
 		startAt(time) {
 			this._startTime = time;
 			return this;
 		}
-
 		setLoop(mode, repetitions) {
 			this.loop = mode;
 			this.repetitions = repetitions;
 			return this;
-		} // Weight
+		}
+
+		// Weight
+
 		// set the weight stopping any scheduled fading
 		// although .enabled = false yields an effective weight of zero, this
 		// method does *not* change .enabled, because it would be confusing
-
-
 		setEffectiveWeight(weight) {
-			this.weight = weight; // note: same logic as when updated at runtime
+			this.weight = weight;
 
+			// note: same logic as when updated at runtime
 			this._effectiveWeight = this.enabled ? weight : 0;
 			return this.stopFading();
-		} // return the weight considering fading and .enabled
-
+		}
 
+		// return the weight considering fading and .enabled
 		getEffectiveWeight() {
 			return this._effectiveWeight;
 		}
-
 		fadeIn(duration) {
 			return this._scheduleFading(duration, 0, 1);
 		}
-
 		fadeOut(duration) {
 			return this._scheduleFading(duration, 1, 0);
 		}
-
 		crossFadeFrom(fadeOutAction, duration, warp) {
 			fadeOutAction.fadeOut(duration);
 			this.fadeIn(duration);
-
 			if (warp) {
 				const fadeInDuration = this._clip.duration,
-							fadeOutDuration = fadeOutAction._clip.duration,
-							startEndRatio = fadeOutDuration / fadeInDuration,
-							endStartRatio = fadeInDuration / fadeOutDuration;
+					fadeOutDuration = fadeOutAction._clip.duration,
+					startEndRatio = fadeOutDuration / fadeInDuration,
+					endStartRatio = fadeInDuration / fadeOutDuration;
 				fadeOutAction.warp(1.0, startEndRatio, duration);
 				this.warp(endStartRatio, 1.0, duration);
 			}
-
 			return this;
 		}
-
 		crossFadeTo(fadeInAction, duration, warp) {
 			return fadeInAction.crossFadeFrom(this, duration, warp);
 		}
-
 		stopFading() {
 			const weightInterpolant = this._weightInterpolant;
-
 			if (weightInterpolant !== null) {
 				this._weightInterpolant = null;
-
 				this._mixer._takeBackControlInterpolant(weightInterpolant);
 			}
-
 			return this;
-		} // Time Scale Control
+		}
+
+		// Time Scale Control
+
 		// set the time scale stopping any scheduled warping
 		// although .paused = true yields an effective time scale of zero, this
 		// method does *not* change .paused, because it would be confusing
-
-
 		setEffectiveTimeScale(timeScale) {
 			this.timeScale = timeScale;
 			this._effectiveTimeScale = this.paused ? 0 : timeScale;
 			return this.stopWarping();
-		} // return the time scale considering warping and .paused
-
+		}
 
+		// return the time scale considering warping and .paused
 		getEffectiveTimeScale() {
 			return this._effectiveTimeScale;
 		}
-
 		setDuration(duration) {
 			this.timeScale = this._clip.duration / duration;
 			return this.stopWarping();
 		}
-
 		syncWith(action) {
 			this.time = action.time;
 			this.timeScale = action.timeScale;
 			return this.stopWarping();
 		}
-
 		halt(duration) {
 			return this.warp(this._effectiveTimeScale, 0, duration);
 		}
-
 		warp(startTimeScale, endTimeScale, duration) {
 			const mixer = this._mixer,
-						now = mixer.time,
-						timeScale = this.timeScale;
+				now = mixer.time,
+				timeScale = this.timeScale;
 			let interpolant = this._timeScaleInterpolant;
-
 			if (interpolant === null) {
 				interpolant = mixer._lendControlInterpolant();
 				this._timeScaleInterpolant = interpolant;
 			}
-
 			const times = interpolant.parameterPositions,
-						values = interpolant.sampleValues;
+				values = interpolant.sampleValues;
 			times[0] = now;
 			times[1] = now + duration;
 			values[0] = startTimeScale / timeScale;
 			values[1] = endTimeScale / timeScale;
 			return this;
 		}
-
 		stopWarping() {
 			const timeScaleInterpolant = this._timeScaleInterpolant;
-
 			if (timeScaleInterpolant !== null) {
 				this._timeScaleInterpolant = null;
-
 				this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
 			}
-
 			return this;
-		} // Object Accessors
+		}
 
+		// Object Accessors
 
 		getMixer() {
 			return this._mixer;
 		}
-
 		getClip() {
 			return this._clip;
 		}
-
 		getRoot() {
 			return this._localRoot || this._mixer._root;
-		} // Interna
+		}
 
+		// Interna
 
 		_update(time, deltaTime, timeDirection, accuIndex) {
 			// called by the mixer
+
 			if (!this.enabled) {
 				// call ._updateWeight() to update ._effectiveWeight
-				this._updateWeight(time);
 
+				this._updateWeight(time);
 				return;
 			}
-
 			const startTime = this._startTime;
-
 			if (startTime !== null) {
 				// check for scheduled start of action
-				const timeRunning = (time - startTime) * timeDirection;
 
+				const timeRunning = (time - startTime) * timeDirection;
 				if (timeRunning < 0 || timeDirection === 0) {
 					deltaTime = 0;
 				} else {
 					this._startTime = null; // unschedule
-
 					deltaTime = timeDirection * timeRunning;
 				}
-			} // apply time scale and advance time
+			}
 
+			// apply time scale and advance time
 
 			deltaTime *= this._updateTimeScale(time);
+			const clipTime = this._updateTime(deltaTime);
 
-			const clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in
+			// note: _updateTime may disable the action resulting in
 			// an effective weight of 0
 
-
 			const weight = this._updateWeight(time);
-
 			if (weight > 0) {
 				const interpolants = this._interpolants;
 				const propertyMixers = this._propertyBindings;
-
 				switch (this.blendMode) {
 					case AdditiveAnimationBlendMode:
 						for (let j = 0, m = interpolants.length; j !== m; ++j) {
 							interpolants[j].evaluate(clipTime);
 							propertyMixers[j].accumulateAdditive(weight);
 						}
-
 						break;
-
 					case NormalAnimationBlendMode:
 					default:
 						for (let j = 0, m = interpolants.length; j !== m; ++j) {
 							interpolants[j].evaluate(clipTime);
 							propertyMixers[j].accumulate(accuIndex, weight);
 						}
-
 				}
 			}
 		}
-
 		_updateWeight(time) {
 			let weight = 0;
-
 			if (this.enabled) {
 				weight = this.weight;
 				const interpolant = this._weightInterpolant;
-
 				if (interpolant !== null) {
 					const interpolantValue = interpolant.evaluate(time)[0];
 					weight *= interpolantValue;
-
 					if (time > interpolant.parameterPositions[1]) {
 						this.stopFading();
-
 						if (interpolantValue === 0) {
 							// faded out, disable
 							this.enabled = false;
@@ -33614,25 +30205,19 @@
 					}
 				}
 			}
-
 			this._effectiveWeight = weight;
 			return weight;
 		}
-
 		_updateTimeScale(time) {
 			let timeScale = 0;
-
 			if (!this.paused) {
 				timeScale = this.timeScale;
 				const interpolant = this._timeScaleInterpolant;
-
 				if (interpolant !== null) {
 					const interpolantValue = interpolant.evaluate(time)[0];
 					timeScale *= interpolantValue;
-
 					if (time > interpolant.parameterPositions[1]) {
 						this.stopWarping();
-
 						if (timeScale === 0) {
 							// motion has halted, pause
 							this.paused = true;
@@ -33643,31 +30228,26 @@
 					}
 				}
 			}
-
 			this._effectiveTimeScale = timeScale;
 			return timeScale;
 		}
-
 		_updateTime(deltaTime) {
 			const duration = this._clip.duration;
 			const loop = this.loop;
 			let time = this.time + deltaTime;
 			let loopCount = this._loopCount;
 			const pingPong = loop === LoopPingPong;
-
 			if (deltaTime === 0) {
 				if (loopCount === -1) return time;
 				return pingPong && (loopCount & 1) === 1 ? duration - time : time;
 			}
-
 			if (loop === LoopOnce) {
 				if (loopCount === -1) {
 					// just started
-					this._loopCount = 0;
 
+					this._loopCount = 0;
 					this._setEndings(true, true, false);
 				}
-
 				handle_stop: {
 					if (time >= duration) {
 						time = duration;
@@ -33677,10 +30257,8 @@
 						this.time = time;
 						break handle_stop;
 					}
-
 					if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
 					this.time = time;
-
 					this._mixer.dispatchEvent({
 						type: 'finished',
 						action: this,
@@ -33689,34 +30267,34 @@
 				}
 			} else {
 				// repetitive Repeat or PingPong
+
 				if (loopCount === -1) {
 					// just started
+
 					if (deltaTime >= 0) {
 						loopCount = 0;
-
 						this._setEndings(true, this.repetitions === 0, pingPong);
 					} else {
 						// when looping in reverse direction, the initial
 						// transition through zero counts as a repetition,
 						// so leave loopCount at -1
+
 						this._setEndings(this.repetitions === 0, true, pingPong);
 					}
 				}
-
 				if (time >= duration || time < 0) {
 					// wrap around
-					const loopDelta = Math.floor(time / duration); // signed
 
+					const loopDelta = Math.floor(time / duration); // signed
 					time -= duration * loopDelta;
 					loopCount += Math.abs(loopDelta);
 					const pending = this.repetitions - loopCount;
-
 					if (pending <= 0) {
 						// have to stop (switch state, clamp time, fire event)
+
 						if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
 						time = deltaTime > 0 ? duration : 0;
 						this.time = time;
-
 						this._mixer.dispatchEvent({
 							type: 'finished',
 							action: this,
@@ -33724,18 +30302,17 @@
 						});
 					} else {
 						// keep running
+
 						if (pending === 1) {
 							// entering the last round
-							const atStart = deltaTime < 0;
 
+							const atStart = deltaTime < 0;
 							this._setEndings(atStart, !atStart, pingPong);
 						} else {
 							this._setEndings(false, false, pingPong);
 						}
-
 						this._loopCount = loopCount;
 						this.time = time;
-
 						this._mixer.dispatchEvent({
 							type: 'loop',
 							action: this,
@@ -33745,30 +30322,27 @@
 				} else {
 					this.time = time;
 				}
-
 				if (pingPong && (loopCount & 1) === 1) {
 					// invert time for the "pong round"
+
 					return duration - time;
 				}
 			}
-
 			return time;
 		}
-
 		_setEndings(atStart, atEnd, pingPong) {
 			const settings = this._interpolantSettings;
-
 			if (pingPong) {
 				settings.endingStart = ZeroSlopeEnding;
 				settings.endingEnd = ZeroSlopeEnding;
 			} else {
 				// assuming for LoopOnce atStart == atEnd == true
+
 				if (atStart) {
 					settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
 				} else {
 					settings.endingStart = WrapAroundEnding;
 				}
-
 				if (atEnd) {
 					settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
 				} else {
@@ -33776,158 +30350,132 @@
 				}
 			}
 		}
-
 		_scheduleFading(duration, weightNow, weightThen) {
 			const mixer = this._mixer,
-						now = mixer.time;
+				now = mixer.time;
 			let interpolant = this._weightInterpolant;
-
 			if (interpolant === null) {
 				interpolant = mixer._lendControlInterpolant();
 				this._weightInterpolant = interpolant;
 			}
-
 			const times = interpolant.parameterPositions,
-						values = interpolant.sampleValues;
+				values = interpolant.sampleValues;
 			times[0] = now;
 			values[0] = weightNow;
 			times[1] = now + duration;
 			values[1] = weightThen;
 			return this;
 		}
-
 	}
 
 	const _controlInterpolantsResultBuffer = new Float32Array(1);
-
 	class AnimationMixer extends EventDispatcher {
 		constructor(root) {
 			super();
 			this._root = root;
-
 			this._initMemoryManager();
-
 			this._accuIndex = 0;
 			this.time = 0;
 			this.timeScale = 1.0;
 		}
-
 		_bindAction(action, prototypeAction) {
 			const root = action._localRoot || this._root,
-						tracks = action._clip.tracks,
-						nTracks = tracks.length,
-						bindings = action._propertyBindings,
-						interpolants = action._interpolants,
-						rootUuid = root.uuid,
-						bindingsByRoot = this._bindingsByRootAndName;
+				tracks = action._clip.tracks,
+				nTracks = tracks.length,
+				bindings = action._propertyBindings,
+				interpolants = action._interpolants,
+				rootUuid = root.uuid,
+				bindingsByRoot = this._bindingsByRootAndName;
 			let bindingsByName = bindingsByRoot[rootUuid];
-
 			if (bindingsByName === undefined) {
 				bindingsByName = {};
 				bindingsByRoot[rootUuid] = bindingsByName;
 			}
-
 			for (let i = 0; i !== nTracks; ++i) {
 				const track = tracks[i],
-							trackName = track.name;
+					trackName = track.name;
 				let binding = bindingsByName[trackName];
-
 				if (binding !== undefined) {
 					++binding.referenceCount;
 					bindings[i] = binding;
 				} else {
 					binding = bindings[i];
-
 					if (binding !== undefined) {
 						// existing binding, make sure the cache knows
+
 						if (binding._cacheIndex === null) {
 							++binding.referenceCount;
-
 							this._addInactiveBinding(binding, rootUuid, trackName);
 						}
-
 						continue;
 					}
-
 					const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
 					binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
 					++binding.referenceCount;
-
 					this._addInactiveBinding(binding, rootUuid, trackName);
-
 					bindings[i] = binding;
 				}
-
 				interpolants[i].resultBuffer = binding.buffer;
 			}
 		}
-
 		_activateAction(action) {
 			if (!this._isActiveAction(action)) {
 				if (action._cacheIndex === null) {
 					// this action has been forgotten by the cache, but the user
 					// appears to be still using it -> rebind
-					const rootUuid = (action._localRoot || this._root).uuid,
-								clipUuid = action._clip.uuid,
-								actionsForClip = this._actionsByClip[clipUuid];
 
+					const rootUuid = (action._localRoot || this._root).uuid,
+						clipUuid = action._clip.uuid,
+						actionsForClip = this._actionsByClip[clipUuid];
 					this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
-
 					this._addInactiveAction(action, clipUuid, rootUuid);
 				}
+				const bindings = action._propertyBindings;
 
-				const bindings = action._propertyBindings; // increment reference counts / sort out state
-
+				// increment reference counts / sort out state
 				for (let i = 0, n = bindings.length; i !== n; ++i) {
 					const binding = bindings[i];
-
 					if (binding.useCount++ === 0) {
 						this._lendBinding(binding);
-
 						binding.saveOriginalState();
 					}
 				}
-
 				this._lendAction(action);
 			}
 		}
-
 		_deactivateAction(action) {
 			if (this._isActiveAction(action)) {
-				const bindings = action._propertyBindings; // decrement reference counts / sort out state
+				const bindings = action._propertyBindings;
 
+				// decrement reference counts / sort out state
 				for (let i = 0, n = bindings.length; i !== n; ++i) {
 					const binding = bindings[i];
-
 					if (--binding.useCount === 0) {
 						binding.restoreOriginalState();
-
 						this._takeBackBinding(binding);
 					}
 				}
-
 				this._takeBackAction(action);
 			}
-		} // Memory manager
+		}
 
+		// Memory manager
 
 		_initMemoryManager() {
 			this._actions = []; // 'nActiveActions' followed by inactive ones
-
 			this._nActiveActions = 0;
-			this._actionsByClip = {}; // inside:
+			this._actionsByClip = {};
+			// inside:
 			// {
 			// 	knownActions: Array< AnimationAction > - used as prototypes
 			// 	actionByRoot: AnimationAction - lookup
 			// }
 
 			this._bindings = []; // 'nActiveBindings' followed by inactive ones
-
 			this._nActiveBindings = 0;
 			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
 
 			this._controlInterpolants = []; // same game as above
-
 			this._nActiveControlInterpolants = 0;
 			const scope = this;
 			this.stats = {
@@ -33935,46 +30483,39 @@
 					get total() {
 						return scope._actions.length;
 					},
-
 					get inUse() {
 						return scope._nActiveActions;
 					}
-
 				},
 				bindings: {
 					get total() {
 						return scope._bindings.length;
 					},
-
 					get inUse() {
 						return scope._nActiveBindings;
 					}
-
 				},
 				controlInterpolants: {
 					get total() {
 						return scope._controlInterpolants.length;
 					},
-
 					get inUse() {
 						return scope._nActiveControlInterpolants;
 					}
-
 				}
 			};
-		} // Memory management for AnimationAction objects
+		}
 
+		// Memory management for AnimationAction objects
 
 		_isActiveAction(action) {
 			const index = action._cacheIndex;
 			return index !== null && index < this._nActiveActions;
 		}
-
 		_addInactiveAction(action, clipUuid, rootUuid) {
 			const actions = this._actions,
-						actionsByClip = this._actionsByClip;
+				actionsByClip = this._actionsByClip;
 			let actionsForClip = actionsByClip[clipUuid];
-
 			if (actionsForClip === undefined) {
 				actionsForClip = {
 					knownActions: [action],
@@ -33987,179 +30528,164 @@
 				action._byClipCacheIndex = knownActions.length;
 				knownActions.push(action);
 			}
-
 			action._cacheIndex = actions.length;
 			actions.push(action);
 			actionsForClip.actionByRoot[rootUuid] = action;
 		}
-
 		_removeInactiveAction(action) {
 			const actions = this._actions,
-						lastInactiveAction = actions[actions.length - 1],
-						cacheIndex = action._cacheIndex;
+				lastInactiveAction = actions[actions.length - 1],
+				cacheIndex = action._cacheIndex;
 			lastInactiveAction._cacheIndex = cacheIndex;
 			actions[cacheIndex] = lastInactiveAction;
 			actions.pop();
 			action._cacheIndex = null;
 			const clipUuid = action._clip.uuid,
-						actionsByClip = this._actionsByClip,
-						actionsForClip = actionsByClip[clipUuid],
-						knownActionsForClip = actionsForClip.knownActions,
-						lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
-						byClipCacheIndex = action._byClipCacheIndex;
+				actionsByClip = this._actionsByClip,
+				actionsForClip = actionsByClip[clipUuid],
+				knownActionsForClip = actionsForClip.knownActions,
+				lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
+				byClipCacheIndex = action._byClipCacheIndex;
 			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
 			knownActionsForClip[byClipCacheIndex] = lastKnownAction;
 			knownActionsForClip.pop();
 			action._byClipCacheIndex = null;
 			const actionByRoot = actionsForClip.actionByRoot,
-						rootUuid = (action._localRoot || this._root).uuid;
+				rootUuid = (action._localRoot || this._root).uuid;
 			delete actionByRoot[rootUuid];
-
 			if (knownActionsForClip.length === 0) {
 				delete actionsByClip[clipUuid];
 			}
-
 			this._removeInactiveBindingsForAction(action);
 		}
-
 		_removeInactiveBindingsForAction(action) {
 			const bindings = action._propertyBindings;
-
 			for (let i = 0, n = bindings.length; i !== n; ++i) {
 				const binding = bindings[i];
-
 				if (--binding.referenceCount === 0) {
 					this._removeInactiveBinding(binding);
 				}
 			}
 		}
-
 		_lendAction(action) {
 			// [ active actions |	inactive actions	]
 			// [	active actions >| inactive actions ]
 			//								 s				a
 			//									<-swap->
 			//								 a				s
+
 			const actions = this._actions,
-						prevIndex = action._cacheIndex,
-						lastActiveIndex = this._nActiveActions++,
-						firstInactiveAction = actions[lastActiveIndex];
+				prevIndex = action._cacheIndex,
+				lastActiveIndex = this._nActiveActions++,
+				firstInactiveAction = actions[lastActiveIndex];
 			action._cacheIndex = lastActiveIndex;
 			actions[lastActiveIndex] = action;
 			firstInactiveAction._cacheIndex = prevIndex;
 			actions[prevIndex] = firstInactiveAction;
 		}
-
 		_takeBackAction(action) {
 			// [	active actions	| inactive actions ]
 			// [ active actions |< inactive actions	]
 			//				a				s
 			//				 <-swap->
 			//				s				a
+
 			const actions = this._actions,
-						prevIndex = action._cacheIndex,
-						firstInactiveIndex = --this._nActiveActions,
-						lastActiveAction = actions[firstInactiveIndex];
+				prevIndex = action._cacheIndex,
+				firstInactiveIndex = --this._nActiveActions,
+				lastActiveAction = actions[firstInactiveIndex];
 			action._cacheIndex = firstInactiveIndex;
 			actions[firstInactiveIndex] = action;
 			lastActiveAction._cacheIndex = prevIndex;
 			actions[prevIndex] = lastActiveAction;
-		} // Memory management for PropertyMixer objects
+		}
 
+		// Memory management for PropertyMixer objects
 
 		_addInactiveBinding(binding, rootUuid, trackName) {
 			const bindingsByRoot = this._bindingsByRootAndName,
-						bindings = this._bindings;
+				bindings = this._bindings;
 			let bindingByName = bindingsByRoot[rootUuid];
-
 			if (bindingByName === undefined) {
 				bindingByName = {};
 				bindingsByRoot[rootUuid] = bindingByName;
 			}
-
 			bindingByName[trackName] = binding;
 			binding._cacheIndex = bindings.length;
 			bindings.push(binding);
 		}
-
 		_removeInactiveBinding(binding) {
 			const bindings = this._bindings,
-						propBinding = binding.binding,
-						rootUuid = propBinding.rootNode.uuid,
-						trackName = propBinding.path,
-						bindingsByRoot = this._bindingsByRootAndName,
-						bindingByName = bindingsByRoot[rootUuid],
-						lastInactiveBinding = bindings[bindings.length - 1],
-						cacheIndex = binding._cacheIndex;
+				propBinding = binding.binding,
+				rootUuid = propBinding.rootNode.uuid,
+				trackName = propBinding.path,
+				bindingsByRoot = this._bindingsByRootAndName,
+				bindingByName = bindingsByRoot[rootUuid],
+				lastInactiveBinding = bindings[bindings.length - 1],
+				cacheIndex = binding._cacheIndex;
 			lastInactiveBinding._cacheIndex = cacheIndex;
 			bindings[cacheIndex] = lastInactiveBinding;
 			bindings.pop();
 			delete bindingByName[trackName];
-
 			if (Object.keys(bindingByName).length === 0) {
 				delete bindingsByRoot[rootUuid];
 			}
 		}
-
 		_lendBinding(binding) {
 			const bindings = this._bindings,
-						prevIndex = binding._cacheIndex,
-						lastActiveIndex = this._nActiveBindings++,
-						firstInactiveBinding = bindings[lastActiveIndex];
+				prevIndex = binding._cacheIndex,
+				lastActiveIndex = this._nActiveBindings++,
+				firstInactiveBinding = bindings[lastActiveIndex];
 			binding._cacheIndex = lastActiveIndex;
 			bindings[lastActiveIndex] = binding;
 			firstInactiveBinding._cacheIndex = prevIndex;
 			bindings[prevIndex] = firstInactiveBinding;
 		}
-
 		_takeBackBinding(binding) {
 			const bindings = this._bindings,
-						prevIndex = binding._cacheIndex,
-						firstInactiveIndex = --this._nActiveBindings,
-						lastActiveBinding = bindings[firstInactiveIndex];
+				prevIndex = binding._cacheIndex,
+				firstInactiveIndex = --this._nActiveBindings,
+				lastActiveBinding = bindings[firstInactiveIndex];
 			binding._cacheIndex = firstInactiveIndex;
 			bindings[firstInactiveIndex] = binding;
 			lastActiveBinding._cacheIndex = prevIndex;
 			bindings[prevIndex] = lastActiveBinding;
-		} // Memory management of Interpolants for weight and time scale
+		}
 
+		// Memory management of Interpolants for weight and time scale
 
 		_lendControlInterpolant() {
 			const interpolants = this._controlInterpolants,
-						lastActiveIndex = this._nActiveControlInterpolants++;
+				lastActiveIndex = this._nActiveControlInterpolants++;
 			let interpolant = interpolants[lastActiveIndex];
-
 			if (interpolant === undefined) {
 				interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, _controlInterpolantsResultBuffer);
 				interpolant.__cacheIndex = lastActiveIndex;
 				interpolants[lastActiveIndex] = interpolant;
 			}
-
 			return interpolant;
 		}
-
 		_takeBackControlInterpolant(interpolant) {
 			const interpolants = this._controlInterpolants,
-						prevIndex = interpolant.__cacheIndex,
-						firstInactiveIndex = --this._nActiveControlInterpolants,
-						lastActiveInterpolant = interpolants[firstInactiveIndex];
+				prevIndex = interpolant.__cacheIndex,
+				firstInactiveIndex = --this._nActiveControlInterpolants,
+				lastActiveInterpolant = interpolants[firstInactiveIndex];
 			interpolant.__cacheIndex = firstInactiveIndex;
 			interpolants[firstInactiveIndex] = interpolant;
 			lastActiveInterpolant.__cacheIndex = prevIndex;
 			interpolants[prevIndex] = lastActiveInterpolant;
-		} // return an action for a clip optionally using a custom root target
+		}
+
+		// return an action for a clip optionally using a custom root target
 		// object (this method allocates a lot of dynamic memory in case a
 		// previously unknown clip/root combination is specified)
-
-
 		clipAction(clip, optionalRoot, blendMode) {
 			const root = optionalRoot || this._root,
-						rootUuid = root.uuid;
+				rootUuid = root.uuid;
 			let clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;
 			const clipUuid = clipObject !== null ? clipObject.uuid : clip;
 			const actionsForClip = this._actionsByClip[clipUuid];
 			let prototypeAction = null;
-
 			if (blendMode === undefined) {
 				if (clipObject !== null) {
 					blendMode = clipObject.blendMode;
@@ -34167,191 +30693,167 @@
 					blendMode = NormalAnimationBlendMode;
 				}
 			}
-
 			if (actionsForClip !== undefined) {
 				const existingAction = actionsForClip.actionByRoot[rootUuid];
-
 				if (existingAction !== undefined && existingAction.blendMode === blendMode) {
 					return existingAction;
-				} // we know the clip, so we don't have to parse all
-				// the bindings again but can just copy
-
+				}
 
-				prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action
+				// we know the clip, so we don't have to parse all
+				// the bindings again but can just copy
+				prototypeAction = actionsForClip.knownActions[0];
 
+				// also, take the clip from the prototype action
 				if (clipObject === null) clipObject = prototypeAction._clip;
-			} // clip must be known when specified via string
-
+			}
 
-			if (clipObject === null) return null; // allocate all resources required to run it
+			// clip must be known when specified via string
+			if (clipObject === null) return null;
 
+			// allocate all resources required to run it
 			const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
+			this._bindAction(newAction, prototypeAction);
 
-			this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager
-
-
+			// and make the action known to the memory manager
 			this._addInactiveAction(newAction, clipUuid, rootUuid);
-
 			return newAction;
-		} // get an existing action
-
+		}
 
+		// get an existing action
 		existingAction(clip, optionalRoot) {
 			const root = optionalRoot || this._root,
-						rootUuid = root.uuid,
-						clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
-						clipUuid = clipObject ? clipObject.uuid : clip,
-						actionsForClip = this._actionsByClip[clipUuid];
-
+				rootUuid = root.uuid,
+				clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
+				clipUuid = clipObject ? clipObject.uuid : clip,
+				actionsForClip = this._actionsByClip[clipUuid];
 			if (actionsForClip !== undefined) {
 				return actionsForClip.actionByRoot[rootUuid] || null;
 			}
-
 			return null;
-		} // deactivates all previously scheduled actions
-
+		}
 
+		// deactivates all previously scheduled actions
 		stopAllAction() {
 			const actions = this._actions,
-						nActions = this._nActiveActions;
-
+				nActions = this._nActiveActions;
 			for (let i = nActions - 1; i >= 0; --i) {
 				actions[i].stop();
 			}
-
 			return this;
-		} // advance the time and update apply the animation
-
+		}
 
+		// advance the time and update apply the animation
 		update(deltaTime) {
 			deltaTime *= this.timeScale;
 			const actions = this._actions,
-						nActions = this._nActiveActions,
-						time = this.time += deltaTime,
-						timeDirection = Math.sign(deltaTime),
-						accuIndex = this._accuIndex ^= 1; // run active actions
+				nActions = this._nActiveActions,
+				time = this.time += deltaTime,
+				timeDirection = Math.sign(deltaTime),
+				accuIndex = this._accuIndex ^= 1;
+
+			// run active actions
 
 			for (let i = 0; i !== nActions; ++i) {
 				const action = actions[i];
-
 				action._update(time, deltaTime, timeDirection, accuIndex);
-			} // update scene graph
+			}
 
+			// update scene graph
 
 			const bindings = this._bindings,
-						nBindings = this._nActiveBindings;
-
+				nBindings = this._nActiveBindings;
 			for (let i = 0; i !== nBindings; ++i) {
 				bindings[i].apply(accuIndex);
 			}
-
 			return this;
-		} // Allows you to seek to a specific time in an animation.
-
+		}
 
+		// Allows you to seek to a specific time in an animation.
 		setTime(timeInSeconds) {
 			this.time = 0; // Zero out time attribute for AnimationMixer object;
-
 			for (let i = 0; i < this._actions.length; i++) {
 				this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.
 			}
 
 			return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
-		} // return this mixer's root target object
-
+		}
 
+		// return this mixer's root target object
 		getRoot() {
 			return this._root;
-		} // free all resources specific to a particular clip
-
+		}
 
+		// free all resources specific to a particular clip
 		uncacheClip(clip) {
 			const actions = this._actions,
-						clipUuid = clip.uuid,
-						actionsByClip = this._actionsByClip,
-						actionsForClip = actionsByClip[clipUuid];
-
+				clipUuid = clip.uuid,
+				actionsByClip = this._actionsByClip,
+				actionsForClip = actionsByClip[clipUuid];
 			if (actionsForClip !== undefined) {
 				// note: just calling _removeInactiveAction would mess up the
 				// iteration state and also require updating the state we can
 				// just throw away
-				const actionsToRemove = actionsForClip.knownActions;
 
+				const actionsToRemove = actionsForClip.knownActions;
 				for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
 					const action = actionsToRemove[i];
-
 					this._deactivateAction(action);
-
 					const cacheIndex = action._cacheIndex,
-								lastInactiveAction = actions[actions.length - 1];
+						lastInactiveAction = actions[actions.length - 1];
 					action._cacheIndex = null;
 					action._byClipCacheIndex = null;
 					lastInactiveAction._cacheIndex = cacheIndex;
 					actions[cacheIndex] = lastInactiveAction;
 					actions.pop();
-
 					this._removeInactiveBindingsForAction(action);
 				}
-
 				delete actionsByClip[clipUuid];
 			}
-		} // free all resources specific to a particular root target object
-
+		}
 
+		// free all resources specific to a particular root target object
 		uncacheRoot(root) {
 			const rootUuid = root.uuid,
-						actionsByClip = this._actionsByClip;
-
+				actionsByClip = this._actionsByClip;
 			for (const clipUuid in actionsByClip) {
 				const actionByRoot = actionsByClip[clipUuid].actionByRoot,
-							action = actionByRoot[rootUuid];
-
+					action = actionByRoot[rootUuid];
 				if (action !== undefined) {
 					this._deactivateAction(action);
-
 					this._removeInactiveAction(action);
 				}
 			}
-
 			const bindingsByRoot = this._bindingsByRootAndName,
-						bindingByName = bindingsByRoot[rootUuid];
-
+				bindingByName = bindingsByRoot[rootUuid];
 			if (bindingByName !== undefined) {
 				for (const trackName in bindingByName) {
 					const binding = bindingByName[trackName];
 					binding.restoreOriginalState();
-
 					this._removeInactiveBinding(binding);
 				}
 			}
-		} // remove a targeted clip from the cache
-
+		}
 
+		// remove a targeted clip from the cache
 		uncacheAction(clip, optionalRoot) {
 			const action = this.existingAction(clip, optionalRoot);
-
 			if (action !== null) {
 				this._deactivateAction(action);
-
 				this._removeInactiveAction(action);
 			}
 		}
-
 	}
 
 	class Uniform {
 		constructor(value) {
 			this.value = value;
 		}
-
 		clone() {
 			return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
 		}
-
 	}
 
 	let id = 0;
-
 	class UniformsGroup extends EventDispatcher {
 		constructor() {
 			super();
@@ -34363,52 +30865,42 @@
 			this.usage = StaticDrawUsage;
 			this.uniforms = [];
 		}
-
 		add(uniform) {
 			this.uniforms.push(uniform);
 			return this;
 		}
-
 		remove(uniform) {
 			const index = this.uniforms.indexOf(uniform);
 			if (index !== -1) this.uniforms.splice(index, 1);
 			return this;
 		}
-
 		setName(name) {
 			this.name = name;
 			return this;
 		}
-
 		setUsage(value) {
 			this.usage = value;
 			return this;
 		}
-
 		dispose() {
 			this.dispatchEvent({
 				type: 'dispose'
 			});
 			return this;
 		}
-
 		copy(source) {
 			this.name = source.name;
 			this.usage = source.usage;
 			const uniformsSource = source.uniforms;
 			this.uniforms.length = 0;
-
 			for (let i = 0, l = uniformsSource.length; i < l; i++) {
 				this.uniforms.push(uniformsSource[i].clone());
 			}
-
 			return this;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	class InstancedInterleavedBuffer extends InterleavedBuffer {
@@ -34417,26 +30909,22 @@
 			this.isInstancedInterleavedBuffer = true;
 			this.meshPerAttribute = meshPerAttribute;
 		}
-
 		copy(source) {
 			super.copy(source);
 			this.meshPerAttribute = source.meshPerAttribute;
 			return this;
 		}
-
 		clone(data) {
 			const ib = super.clone(data);
 			ib.meshPerAttribute = this.meshPerAttribute;
 			return ib;
 		}
-
 		toJSON(data) {
 			const json = super.toJSON(data);
 			json.isInstancedInterleavedBuffer = true;
 			json.meshPerAttribute = this.meshPerAttribute;
 			return json;
 		}
-
 	}
 
 	class GLBufferAttribute {
@@ -34449,37 +30937,32 @@
 			this.count = count;
 			this.version = 0;
 		}
-
 		set needsUpdate(value) {
 			if (value === true) this.version++;
 		}
-
 		setBuffer(buffer) {
 			this.buffer = buffer;
 			return this;
 		}
-
 		setType(type, elementSize) {
 			this.type = type;
 			this.elementSize = elementSize;
 			return this;
 		}
-
 		setItemSize(itemSize) {
 			this.itemSize = itemSize;
 			return this;
 		}
-
 		setCount(count) {
 			this.count = count;
 			return this;
 		}
-
 	}
 
 	class Raycaster {
 		constructor(origin, direction, near = 0, far = Infinity) {
-			this.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)
+			this.ray = new Ray(origin, direction);
+			// direction is assumed to be normalized (for accurate distance calculations)
 
 			this.near = near;
 			this.far = far;
@@ -34497,12 +30980,11 @@
 				Sprite: {}
 			};
 		}
-
 		set(origin, direction) {
 			// direction is assumed to be normalized (for accurate distance calculations)
+
 			this.ray.set(origin, direction);
 		}
-
 		setFromCamera(coords, camera) {
 			if (camera.isPerspectiveCamera) {
 				this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
@@ -34510,43 +30992,34 @@
 				this.camera = camera;
 			} else if (camera.isOrthographicCamera) {
 				this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera
-
 				this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
 				this.camera = camera;
 			} else {
 				console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);
 			}
 		}
-
 		intersectObject(object, recursive = true, intersects = []) {
 			intersectObject(object, this, intersects, recursive);
 			intersects.sort(ascSort);
 			return intersects;
 		}
-
 		intersectObjects(objects, recursive = true, intersects = []) {
 			for (let i = 0, l = objects.length; i < l; i++) {
 				intersectObject(objects[i], this, intersects, recursive);
 			}
-
 			intersects.sort(ascSort);
 			return intersects;
 		}
-
 	}
-
 	function ascSort(a, b) {
 		return a.distance - b.distance;
 	}
-
 	function intersectObject(object, raycaster, intersects, recursive) {
 		if (object.layers.test(raycaster.layers)) {
 			object.raycast(raycaster, intersects);
 		}
-
 		if (recursive === true) {
 			const children = object.children;
-
 			for (let i = 0, l = children.length; i < l; i++) {
 				intersectObject(children[i], raycaster, intersects, true);
 			}
@@ -34559,45 +31032,38 @@
 	 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 	 * The azimuthal angle (theta) is measured from the positive z-axis.
 	 */
-
 	class Spherical {
 		constructor(radius = 1, phi = 0, theta = 0) {
 			this.radius = radius;
 			this.phi = phi; // polar angle
-
 			this.theta = theta; // azimuthal angle
 
 			return this;
 		}
-
 		set(radius, phi, theta) {
 			this.radius = radius;
 			this.phi = phi;
 			this.theta = theta;
 			return this;
 		}
-
 		copy(other) {
 			this.radius = other.radius;
 			this.phi = other.phi;
 			this.theta = other.theta;
 			return this;
-		} // restrict phi to be between EPS and PI-EPS
-
+		}
 
+		// restrict phi to be between EPS and PI-EPS
 		makeSafe() {
 			const EPS = 0.000001;
 			this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
 			return this;
 		}
-
 		setFromVector3(v) {
 			return this.setFromCartesianCoords(v.x, v.y, v.z);
 		}
-
 		setFromCartesianCoords(x, y, z) {
 			this.radius = Math.sqrt(x * x + y * y + z * z);
-
 			if (this.radius === 0) {
 				this.theta = 0;
 				this.phi = 0;
@@ -34605,277 +31071,220 @@
 				this.theta = Math.atan2(x, z);
 				this.phi = Math.acos(clamp(y / this.radius, -1, 1));
 			}
-
 			return this;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	/**
 	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 	 */
+
 	class Cylindrical {
 		constructor(radius = 1, theta = 0, y = 0) {
 			this.radius = radius; // distance from the origin to a point in the x-z plane
-
 			this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
-
 			this.y = y; // height above the x-z plane
 
 			return this;
 		}
-
 		set(radius, theta, y) {
 			this.radius = radius;
 			this.theta = theta;
 			this.y = y;
 			return this;
 		}
-
 		copy(other) {
 			this.radius = other.radius;
 			this.theta = other.theta;
 			this.y = other.y;
 			return this;
 		}
-
 		setFromVector3(v) {
 			return this.setFromCartesianCoords(v.x, v.y, v.z);
 		}
-
 		setFromCartesianCoords(x, y, z) {
 			this.radius = Math.sqrt(x * x + z * z);
 			this.theta = Math.atan2(x, z);
 			this.y = y;
 			return this;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	const _vector$4 = /*@__PURE__*/new Vector2();
-
 	class Box2 {
 		constructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {
 			this.isBox2 = true;
 			this.min = min;
 			this.max = max;
 		}
-
 		set(min, max) {
 			this.min.copy(min);
 			this.max.copy(max);
 			return this;
 		}
-
 		setFromPoints(points) {
 			this.makeEmpty();
-
 			for (let i = 0, il = points.length; i < il; i++) {
 				this.expandByPoint(points[i]);
 			}
-
 			return this;
 		}
-
 		setFromCenterAndSize(center, size) {
 			const halfSize = _vector$4.copy(size).multiplyScalar(0.5);
-
 			this.min.copy(center).sub(halfSize);
 			this.max.copy(center).add(halfSize);
 			return this;
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 		copy(box) {
 			this.min.copy(box.min);
 			this.max.copy(box.max);
 			return this;
 		}
-
 		makeEmpty() {
 			this.min.x = this.min.y = +Infinity;
 			this.max.x = this.max.y = -Infinity;
 			return this;
 		}
-
 		isEmpty() {
 			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
+
 			return this.max.x < this.min.x || this.max.y < this.min.y;
 		}
-
 		getCenter(target) {
 			return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
 		}
-
 		getSize(target) {
 			return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
 		}
-
 		expandByPoint(point) {
 			this.min.min(point);
 			this.max.max(point);
 			return this;
 		}
-
 		expandByVector(vector) {
 			this.min.sub(vector);
 			this.max.add(vector);
 			return this;
 		}
-
 		expandByScalar(scalar) {
 			this.min.addScalar(-scalar);
 			this.max.addScalar(scalar);
 			return this;
 		}
-
 		containsPoint(point) {
 			return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
 		}
-
 		containsBox(box) {
 			return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
 		}
-
 		getParameter(point, target) {
 			// This can potentially have a divide by zero if the box
 			// has a size dimension of 0.
+
 			return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
 		}
-
 		intersectsBox(box) {
 			// using 4 splitting planes to rule out intersections
+
 			return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
 		}
-
 		clampPoint(point, target) {
 			return target.copy(point).clamp(this.min, this.max);
 		}
-
 		distanceToPoint(point) {
 			const clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);
-
 			return clampedPoint.sub(point).length();
 		}
-
 		intersect(box) {
 			this.min.max(box.min);
 			this.max.min(box.max);
 			return this;
 		}
-
 		union(box) {
 			this.min.min(box.min);
 			this.max.max(box.max);
 			return this;
 		}
-
 		translate(offset) {
 			this.min.add(offset);
 			this.max.add(offset);
 			return this;
 		}
-
 		equals(box) {
 			return box.min.equals(this.min) && box.max.equals(this.max);
 		}
-
 	}
 
 	const _startP = /*@__PURE__*/new Vector3();
-
 	const _startEnd = /*@__PURE__*/new Vector3();
-
 	class Line3 {
 		constructor(start = new Vector3(), end = new Vector3()) {
 			this.start = start;
 			this.end = end;
 		}
-
 		set(start, end) {
 			this.start.copy(start);
 			this.end.copy(end);
 			return this;
 		}
-
 		copy(line) {
 			this.start.copy(line.start);
 			this.end.copy(line.end);
 			return this;
 		}
-
 		getCenter(target) {
 			return target.addVectors(this.start, this.end).multiplyScalar(0.5);
 		}
-
 		delta(target) {
 			return target.subVectors(this.end, this.start);
 		}
-
 		distanceSq() {
 			return this.start.distanceToSquared(this.end);
 		}
-
 		distance() {
 			return this.start.distanceTo(this.end);
 		}
-
 		at(t, target) {
 			return this.delta(target).multiplyScalar(t).add(this.start);
 		}
-
 		closestPointToPointParameter(point, clampToLine) {
 			_startP.subVectors(point, this.start);
-
 			_startEnd.subVectors(this.end, this.start);
-
 			const startEnd2 = _startEnd.dot(_startEnd);
-
 			const startEnd_startP = _startEnd.dot(_startP);
-
 			let t = startEnd_startP / startEnd2;
-
 			if (clampToLine) {
 				t = clamp(t, 0, 1);
 			}
-
 			return t;
 		}
-
 		closestPointToPoint(point, clampToLine, target) {
 			const t = this.closestPointToPointParameter(point, clampToLine);
 			return this.delta(target).multiplyScalar(t).add(this.start);
 		}
-
 		applyMatrix4(matrix) {
 			this.start.applyMatrix4(matrix);
 			this.end.applyMatrix4(matrix);
 			return this;
 		}
-
 		equals(line) {
 			return line.start.equals(this.start) && line.end.equals(this.end);
 		}
-
 		clone() {
 			return new this.constructor().copy(this);
 		}
-
 	}
 
 	const _vector$3 = /*@__PURE__*/new Vector3();
-
 	class SpotLightHelper extends Object3D {
 		constructor(light, color) {
 			super();
@@ -34886,13 +31295,11 @@
 			this.type = 'SpotLightHelper';
 			const geometry = new BufferGeometry();
 			const positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
-
 			for (let i = 0, j = 1, l = 32; i < l; i++, j++) {
 				const p1 = i / l * Math.PI * 2;
 				const p2 = j / l * Math.PI * 2;
 				positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
 			}
-
 			geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
 			const material = new LineBasicMaterial({
 				fog: false,
@@ -34902,38 +31309,29 @@
 			this.add(this.cone);
 			this.update();
 		}
-
 		dispose() {
 			this.cone.geometry.dispose();
 			this.cone.material.dispose();
 		}
-
 		update() {
 			this.light.updateWorldMatrix(true, false);
 			this.light.target.updateWorldMatrix(true, false);
 			const coneLength = this.light.distance ? this.light.distance : 1000;
 			const coneWidth = coneLength * Math.tan(this.light.angle);
 			this.cone.scale.set(coneWidth, coneWidth, coneLength);
-
 			_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
-
 			this.cone.lookAt(_vector$3);
-
 			if (this.color !== undefined) {
 				this.cone.material.color.set(this.color);
 			} else {
 				this.cone.material.color.copy(this.light.color);
 			}
 		}
-
 	}
 
 	const _vector$2 = /*@__PURE__*/new Vector3();
-
 	const _boneMatrix = /*@__PURE__*/new Matrix4();
-
 	const _matrixWorldInv = /*@__PURE__*/new Matrix4();
-
 	class SkeletonHelper extends LineSegments {
 		constructor(object) {
 			const bones = getBoneList(object);
@@ -34942,10 +31340,8 @@
 			const colors = [];
 			const color1 = new Color(0, 0, 1);
 			const color2 = new Color(0, 1, 0);
-
 			for (let i = 0; i < bones.length; i++) {
 				const bone = bones[i];
-
 				if (bone.parent && bone.parent.isBone) {
 					vertices.push(0, 0, 0);
 					vertices.push(0, 0, 0);
@@ -34953,7 +31349,6 @@
 					colors.push(color2.r, color2.g, color2.b);
 				}
 			}
-
 			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
 			const material = new LineBasicMaterial({
@@ -34971,55 +31366,39 @@
 			this.matrix = object.matrixWorld;
 			this.matrixAutoUpdate = false;
 		}
-
 		updateMatrixWorld(force) {
 			const bones = this.bones;
 			const geometry = this.geometry;
 			const position = geometry.getAttribute('position');
-
 			_matrixWorldInv.copy(this.root.matrixWorld).invert();
-
 			for (let i = 0, j = 0; i < bones.length; i++) {
 				const bone = bones[i];
-
 				if (bone.parent && bone.parent.isBone) {
 					_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
-
 					_vector$2.setFromMatrixPosition(_boneMatrix);
-
 					position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);
-
 					_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
-
 					_vector$2.setFromMatrixPosition(_boneMatrix);
-
 					position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
 					j += 2;
 				}
 			}
-
 			geometry.getAttribute('position').needsUpdate = true;
 			super.updateMatrixWorld(force);
 		}
-
 		dispose() {
 			this.geometry.dispose();
 			this.material.dispose();
 		}
-
 	}
-
 	function getBoneList(object) {
 		const boneList = [];
-
 		if (object.isBone === true) {
 			boneList.push(object);
 		}
-
 		for (let i = 0; i < object.children.length; i++) {
 			boneList.push.apply(boneList, getBoneList(object.children[i]));
 		}
-
 		return boneList;
 	}
 
@@ -35038,6 +31417,7 @@
 			this.matrix = this.light.matrixWorld;
 			this.matrixAutoUpdate = false;
 			this.update();
+
 			/*
 			// TODO: delete this comment?
 			const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
@@ -35058,15 +31438,14 @@
 			this.geometry.dispose();
 			this.material.dispose();
 		}
-
 		update() {
 			this.light.updateWorldMatrix(true, false);
-
 			if (this.color !== undefined) {
 				this.material.color.set(this.color);
 			} else {
 				this.material.color.copy(this.light.color);
 			}
+
 			/*
 			const d = this.light.distance;
 				if ( d === 0.0 ) {
@@ -35076,17 +31455,12 @@
 				this.lightDistance.scale.set( d, d, d );
 				}
 			*/
-
 		}
-
 	}
 
 	const _vector$1 = /*@__PURE__*/new Vector3();
-
 	const _color1 = /*@__PURE__*/new Color();
-
 	const _color2 = /*@__PURE__*/new Color();
-
 	class HemisphereLightHelper extends Object3D {
 		constructor(light, size, color) {
 			super();
@@ -35109,36 +31483,27 @@
 			this.add(new Mesh(geometry, this.material));
 			this.update();
 		}
-
 		dispose() {
 			this.children[0].geometry.dispose();
 			this.children[0].material.dispose();
 		}
-
 		update() {
 			const mesh = this.children[0];
-
 			if (this.color !== undefined) {
 				this.material.color.set(this.color);
 			} else {
 				const colors = mesh.geometry.getAttribute('color');
-
 				_color1.copy(this.light.color);
-
 				_color2.copy(this.light.groundColor);
-
 				for (let i = 0, l = colors.count; i < l; i++) {
 					const color = i < l / 2 ? _color1 : _color2;
 					colors.setXYZ(i, color.r, color.g, color.b);
 				}
-
 				colors.needsUpdate = true;
 			}
-
 			this.light.updateWorldMatrix(true, false);
 			mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
 		}
-
 	}
 
 	class GridHelper extends LineSegments {
@@ -35149,8 +31514,7 @@
 			const step = size / divisions;
 			const halfSize = size / 2;
 			const vertices = [],
-						colors = [];
-
+				colors = [];
 			for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
 				vertices.push(-halfSize, 0, k, halfSize, 0, k);
 				vertices.push(k, 0, -halfSize, k, 0, halfSize);
@@ -35164,7 +31528,6 @@
 				color.toArray(colors, j);
 				j += 3;
 			}
-
 			const geometry = new BufferGeometry();
 			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
@@ -35175,12 +31538,10 @@
 			super(geometry, material);
 			this.type = 'GridHelper';
 		}
-
 		dispose() {
 			this.geometry.dispose();
 			this.material.dispose();
 		}
-
 	}
 
 	class PolarGridHelper extends LineSegments {
@@ -35188,7 +31549,9 @@
 			color1 = new Color(color1);
 			color2 = new Color(color2);
 			const vertices = [];
-			const colors = []; // create the sectors
+			const colors = [];
+
+			// create the sectors
 
 			if (sectors > 1) {
 				for (let i = 0; i < sectors; i++) {
@@ -35201,20 +31564,23 @@
 					colors.push(color.r, color.g, color.b);
 					colors.push(color.r, color.g, color.b);
 				}
-			} // create the rings
+			}
 
+			// create the rings
 
 			for (let i = 0; i < rings; i++) {
 				const color = i & 1 ? color1 : color2;
 				const r = radius - radius / rings * i;
-
 				for (let j = 0; j < divisions; j++) {
 					// first vertex
+
 					let v = j / divisions * (Math.PI * 2);
 					let x = Math.sin(v) * r;
 					let z = Math.cos(v) * r;
 					vertices.push(x, 0, z);
-					colors.push(color.r, color.g, color.b); // second vertex
+					colors.push(color.r, color.g, color.b);
+
+					// second vertex
 
 					v = (j + 1) / divisions * (Math.PI * 2);
 					x = Math.sin(v) * r;
@@ -35223,7 +31589,6 @@
 					colors.push(color.r, color.g, color.b);
 				}
 			}
-
 			const geometry = new BufferGeometry();
 			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
@@ -35234,20 +31599,15 @@
 			super(geometry, material);
 			this.type = 'PolarGridHelper';
 		}
-
 		dispose() {
 			this.geometry.dispose();
 			this.material.dispose();
 		}
-
 	}
 
 	const _v1 = /*@__PURE__*/new Vector3();
-
 	const _v2 = /*@__PURE__*/new Vector3();
-
 	const _v3 = /*@__PURE__*/new Vector3();
-
 	class DirectionalLightHelper extends Object3D {
 		constructor(light, size, color) {
 			super();
@@ -35271,26 +31631,19 @@
 			this.add(this.targetLine);
 			this.update();
 		}
-
 		dispose() {
 			this.lightPlane.geometry.dispose();
 			this.lightPlane.material.dispose();
 			this.targetLine.geometry.dispose();
 			this.targetLine.material.dispose();
 		}
-
 		update() {
 			this.light.updateWorldMatrix(true, false);
 			this.light.target.updateWorldMatrix(true, false);
-
 			_v1.setFromMatrixPosition(this.light.matrixWorld);
-
 			_v2.setFromMatrixPosition(this.light.target.matrixWorld);
-
 			_v3.subVectors(_v2, _v1);
-
 			this.lightPlane.lookAt(_v2);
-
 			if (this.color !== undefined) {
 				this.lightPlane.material.color.set(this.color);
 				this.targetLine.material.color.set(this.color);
@@ -35298,16 +31651,14 @@
 				this.lightPlane.material.color.copy(this.light.color);
 				this.targetLine.material.color.copy(this.light.color);
 			}
-
 			this.targetLine.lookAt(_v2);
 			this.targetLine.scale.z = _v3.length();
 		}
-
 	}
 
 	const _vector = /*@__PURE__*/new Vector3();
-
 	const _camera = /*@__PURE__*/new Camera();
+
 	/**
 	 *	- shows frustum, line of sight and up of the camera
 	 *	- suitable for fast updates
@@ -35315,7 +31666,6 @@
 	 *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
 	 */
 
-
 	class CameraHelper extends LineSegments {
 		constructor(camera) {
 			const geometry = new BufferGeometry();
@@ -35326,56 +31676,65 @@
 			});
 			const vertices = [];
 			const colors = [];
-			const pointMap = {}; // near
+			const pointMap = {};
+
+			// near
 
 			addLine('n1', 'n2');
 			addLine('n2', 'n4');
 			addLine('n4', 'n3');
-			addLine('n3', 'n1'); // far
+			addLine('n3', 'n1');
+
+			// far
 
 			addLine('f1', 'f2');
 			addLine('f2', 'f4');
 			addLine('f4', 'f3');
-			addLine('f3', 'f1'); // sides
+			addLine('f3', 'f1');
+
+			// sides
 
 			addLine('n1', 'f1');
 			addLine('n2', 'f2');
 			addLine('n3', 'f3');
-			addLine('n4', 'f4'); // cone
+			addLine('n4', 'f4');
+
+			// cone
 
 			addLine('p', 'n1');
 			addLine('p', 'n2');
 			addLine('p', 'n3');
-			addLine('p', 'n4'); // up
+			addLine('p', 'n4');
+
+			// up
 
 			addLine('u1', 'u2');
 			addLine('u2', 'u3');
-			addLine('u3', 'u1'); // target
+			addLine('u3', 'u1');
+
+			// target
 
 			addLine('c', 't');
-			addLine('p', 'c'); // cross
+			addLine('p', 'c');
+
+			// cross
 
 			addLine('cn1', 'cn2');
 			addLine('cn3', 'cn4');
 			addLine('cf1', 'cf2');
 			addLine('cf3', 'cf4');
-
 			function addLine(a, b) {
 				addPoint(a);
 				addPoint(b);
 			}
-
 			function addPoint(id) {
 				vertices.push(0, 0, 0);
 				colors.push(0, 0, 0);
-
 				if (pointMap[id] === undefined) {
 					pointMap[id] = [];
 				}
-
 				pointMap[id].push(vertices.length / 3 - 1);
 			}
-
 			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
 			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
 			super(geometry, material);
@@ -35385,7 +31744,9 @@
 			this.matrix = camera.matrixWorld;
 			this.matrixAutoUpdate = false;
 			this.pointMap = pointMap;
-			this.update(); // colors
+			this.update();
+
+			// colors
 
 			const colorFrustum = new Color(0xffaa00);
 			const colorCone = new Color(0xff0000);
@@ -35394,121 +31755,121 @@
 			const colorCross = new Color(0x333333);
 			this.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);
 		}
-
 		setColors(frustum, cone, up, target, cross) {
 			const geometry = this.geometry;
-			const colorAttribute = geometry.getAttribute('color'); // near
+			const colorAttribute = geometry.getAttribute('color');
+
+			// near
 
 			colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b); // n1, n2
-
 			colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b); // n2, n4
-
 			colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b); // n4, n3
-
 			colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b); // n3, n1
+
 			// far
 
 			colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b); // f1, f2
-
 			colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b); // f2, f4
-
 			colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b); // f4, f3
-
 			colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b); // f3, f1
+
 			// sides
 
 			colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b); // n1, f1
-
 			colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b); // n2, f2
-
 			colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b); // n3, f3
-
 			colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);
 			colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b); // n4, f4
+
 			// cone
 
 			colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);
 			colorAttribute.setXYZ(25, cone.r, cone.g, cone.b); // p, n1
-
 			colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);
 			colorAttribute.setXYZ(27, cone.r, cone.g, cone.b); // p, n2
-
 			colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);
 			colorAttribute.setXYZ(29, cone.r, cone.g, cone.b); // p, n3
-
 			colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);
 			colorAttribute.setXYZ(31, cone.r, cone.g, cone.b); // p, n4
+
 			// up
 
 			colorAttribute.setXYZ(32, up.r, up.g, up.b);
 			colorAttribute.setXYZ(33, up.r, up.g, up.b); // u1, u2
-
 			colorAttribute.setXYZ(34, up.r, up.g, up.b);
 			colorAttribute.setXYZ(35, up.r, up.g, up.b); // u2, u3
-
 			colorAttribute.setXYZ(36, up.r, up.g, up.b);
 			colorAttribute.setXYZ(37, up.r, up.g, up.b); // u3, u1
+
 			// target
 
 			colorAttribute.setXYZ(38, target.r, target.g, target.b);
 			colorAttribute.setXYZ(39, target.r, target.g, target.b); // c, t
-
 			colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);
 			colorAttribute.setXYZ(41, cross.r, cross.g, cross.b); // p, c
+
 			// cross
 
 			colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);
 			colorAttribute.setXYZ(43, cross.r, cross.g, cross.b); // cn1, cn2
-
 			colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);
 			colorAttribute.setXYZ(45, cross.r, cross.g, cross.b); // cn3, cn4
 
 			colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);
 			colorAttribute.setXYZ(47, cross.r, cross.g, cross.b); // cf1, cf2
-
 			colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);
 			colorAttribute.setXYZ(49, cross.r, cross.g, cross.b); // cf3, cf4
 
 			colorAttribute.needsUpdate = true;
 		}
-
 		update() {
 			const geometry = this.geometry;
 			const pointMap = this.pointMap;
 			const w = 1,
-						h = 1; // we need just camera projection matrix inverse
+				h = 1;
+
+			// we need just camera projection matrix inverse
 			// world matrix must be identity
 
-			_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target
+			_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
 
+			// center / target
 
 			setPoint('c', pointMap, geometry, _camera, 0, 0, -1);
-			setPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near
+			setPoint('t', pointMap, geometry, _camera, 0, 0, 1);
+
+			// near
 
 			setPoint('n1', pointMap, geometry, _camera, -w, -h, -1);
 			setPoint('n2', pointMap, geometry, _camera, w, -h, -1);
 			setPoint('n3', pointMap, geometry, _camera, -w, h, -1);
-			setPoint('n4', pointMap, geometry, _camera, w, h, -1); // far
+			setPoint('n4', pointMap, geometry, _camera, w, h, -1);
+
+			// far
 
 			setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);
 			setPoint('f2', pointMap, geometry, _camera, w, -h, 1);
 			setPoint('f3', pointMap, geometry, _camera, -w, h, 1);
-			setPoint('f4', pointMap, geometry, _camera, w, h, 1); // up
+			setPoint('f4', pointMap, geometry, _camera, w, h, 1);
+
+			// up
 
 			setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
 			setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
-			setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross
+			setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1);
+
+			// cross
 
 			setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);
 			setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);
@@ -35520,22 +31881,16 @@
 			setPoint('cn4', pointMap, geometry, _camera, 0, h, -1);
 			geometry.getAttribute('position').needsUpdate = true;
 		}
-
 		dispose() {
 			this.geometry.dispose();
 			this.material.dispose();
 		}
-
 	}
-
 	function setPoint(point, pointMap, geometry, camera, x, y, z) {
 		_vector.set(x, y, z).unproject(camera);
-
 		const points = pointMap[point];
-
 		if (points !== undefined) {
 			const position = geometry.getAttribute('position');
-
 			for (let i = 0, l = points.length; i < l; i++) {
 				position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);
 			}
@@ -35543,7 +31898,6 @@
 	}
 
 	const _box = /*@__PURE__*/new Box3();
-
 	class BoxHelper extends LineSegments {
 		constructor(object, color = 0xffff00) {
 			const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
@@ -35560,19 +31914,17 @@
 			this.matrixAutoUpdate = false;
 			this.update();
 		}
-
 		update(object) {
 			if (object !== undefined) {
 				console.warn('THREE.BoxHelper: .update() has no longer arguments.');
 			}
-
 			if (this.object !== undefined) {
 				_box.setFromObject(this.object);
 			}
-
 			if (_box.isEmpty()) return;
 			const min = _box.min;
 			const max = _box.max;
+
 			/*
 				5____4
 			1/___0/|
@@ -35617,24 +31969,20 @@
 			position.needsUpdate = true;
 			this.geometry.computeBoundingSphere();
 		}
-
 		setFromObject(object) {
 			this.object = object;
 			this.update();
 			return this;
 		}
-
 		copy(source, recursive) {
 			super.copy(source, recursive);
 			this.object = source.object;
 			return this;
 		}
-
 		dispose() {
 			this.geometry.dispose();
 			this.material.dispose();
 		}
-
 	}
 
 	class Box3Helper extends LineSegments {
@@ -35652,7 +32000,6 @@
 			this.type = 'Box3Helper';
 			this.geometry.computeBoundingSphere();
 		}
-
 		updateMatrixWorld(force) {
 			const box = this.box;
 			if (box.isEmpty()) return;
@@ -35661,12 +32008,10 @@
 			this.scale.multiplyScalar(0.5);
 			super.updateMatrixWorld(force);
 		}
-
 		dispose() {
 			this.geometry.dispose();
 			this.material.dispose();
 		}
-
 	}
 
 	class PlaneHelper extends Line {
@@ -35695,7 +32040,6 @@
 				toneMapped: false
 			})));
 		}
-
 		updateMatrixWorld(force) {
 			this.position.set(0, 0, 0);
 			this.scale.set(0.5 * this.size, 0.5 * this.size, 1);
@@ -35703,36 +32047,28 @@
 			this.translateZ(-this.plane.constant);
 			super.updateMatrixWorld(force);
 		}
-
 		dispose() {
 			this.geometry.dispose();
 			this.material.dispose();
 			this.children[0].geometry.dispose();
 			this.children[0].material.dispose();
 		}
-
 	}
 
 	const _axis = /*@__PURE__*/new Vector3();
-
 	let _lineGeometry, _coneGeometry;
-
 	class ArrowHelper extends Object3D {
 		// dir is assumed to be normalized
+
 		constructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {
 			super();
 			this.type = 'ArrowHelper';
-
 			if (_lineGeometry === undefined) {
 				_lineGeometry = new BufferGeometry();
-
 				_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));
-
 				_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);
-
 				_coneGeometry.translate(0, -0.5, 0);
 			}
-
 			this.position.copy(origin);
 			this.line = new Line(_lineGeometry, new LineBasicMaterial({
 				color: color,
@@ -35749,49 +32085,42 @@
 			this.setDirection(dir);
 			this.setLength(length, headLength, headWidth);
 		}
-
 		setDirection(dir) {
 			// dir is assumed to be normalized
+
 			if (dir.y > 0.99999) {
 				this.quaternion.set(0, 0, 0, 1);
 			} else if (dir.y < -0.99999) {
 				this.quaternion.set(1, 0, 0, 0);
 			} else {
 				_axis.set(dir.z, 0, -dir.x).normalize();
-
 				const radians = Math.acos(dir.y);
 				this.quaternion.setFromAxisAngle(_axis, radians);
 			}
 		}
-
 		setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
 			this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458
-
 			this.line.updateMatrix();
 			this.cone.scale.set(headWidth, headLength, headWidth);
 			this.cone.position.y = length;
 			this.cone.updateMatrix();
 		}
-
 		setColor(color) {
 			this.line.material.color.set(color);
 			this.cone.material.color.set(color);
 		}
-
 		copy(source) {
 			super.copy(source, false);
 			this.line.copy(source.line);
 			this.cone.copy(source.cone);
 			return this;
 		}
-
 		dispose() {
 			this.line.geometry.dispose();
 			this.line.material.dispose();
 			this.cone.geometry.dispose();
 			this.cone.material.dispose();
 		}
-
 	}
 
 	class AxesHelper extends LineSegments {
@@ -35808,7 +32137,6 @@
 			super(geometry, material);
 			this.type = 'AxesHelper';
 		}
-
 		setColors(xAxisColor, yAxisColor, zAxisColor) {
 			const color = new Color();
 			const array = this.geometry.attributes.color.array;
@@ -35824,12 +32152,10 @@
 			this.geometry.attributes.color.needsUpdate = true;
 			return this;
 		}
-
 		dispose() {
 			this.geometry.dispose();
 			this.material.dispose();
 		}
-
 	}
 
 	class ShapePath {
@@ -35839,62 +32165,52 @@
 			this.subPaths = [];
 			this.currentPath = null;
 		}
-
 		moveTo(x, y) {
 			this.currentPath = new Path();
 			this.subPaths.push(this.currentPath);
 			this.currentPath.moveTo(x, y);
 			return this;
 		}
-
 		lineTo(x, y) {
 			this.currentPath.lineTo(x, y);
 			return this;
 		}
-
 		quadraticCurveTo(aCPx, aCPy, aX, aY) {
 			this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
 			return this;
 		}
-
 		bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
 			this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
 			return this;
 		}
-
 		splineThru(pts) {
 			this.currentPath.splineThru(pts);
 			return this;
 		}
-
 		toShapes(isCCW) {
 			function toShapesNoHoles(inSubpaths) {
 				const shapes = [];
-
 				for (let i = 0, l = inSubpaths.length; i < l; i++) {
 					const tmpPath = inSubpaths[i];
 					const tmpShape = new Shape();
 					tmpShape.curves = tmpPath.curves;
 					shapes.push(tmpShape);
 				}
-
 				return shapes;
 			}
-
 			function isPointInsidePolygon(inPt, inPolygon) {
-				const polyLen = inPolygon.length; // inPt on polygon contour => immediate success		or
+				const polyLen = inPolygon.length;
+
+				// inPt on polygon contour => immediate success		or
 				// toggling of inside/outside at every single! intersection point of an edge
 				//	with the horizontal line through inPt, left of inPt
 				//	not counting lowerY endpoints of edges and whole edges on that line
-
 				let inside = false;
-
 				for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
 					let edgeLowPt = inPolygon[p];
 					let edgeHighPt = inPolygon[q];
 					let edgeDx = edgeHighPt.x - edgeLowPt.x;
 					let edgeDy = edgeHighPt.y - edgeLowPt.y;
-
 					if (Math.abs(edgeDy) > Number.EPSILON) {
 						// not parallel
 						if (edgeDy < 0) {
@@ -35903,16 +32219,13 @@
 							edgeHighPt = inPolygon[p];
 							edgeDy = -edgeDy;
 						}
-
 						if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
-
 						if (inPt.y === edgeLowPt.y) {
 							if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
 							// continue;				// no intersection or edgeLowPt => doesn't count !!!
 						} else {
 							const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
 							if (perpEdge === 0) return true; // inPt is on contour ?
-
 							if (perpEdge < 0) continue;
 							inside = !inside; // true intersection left of inPt
 						}
@@ -35920,7 +32233,6 @@
 						// parallel or collinear
 						if (inPt.y !== edgeLowPt.y) continue; // parallel
 						// edge lies on the same horizontal line as inPt
-
 						if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
 						// continue;
 					}
@@ -35928,13 +32240,11 @@
 
 				return inside;
 			}
-
 			const isClockWise = ShapeUtils.isClockWise;
 			const subPaths = this.subPaths;
 			if (subPaths.length === 0) return [];
 			let solid, tmpPath, tmpShape;
 			const shapes = [];
-
 			if (subPaths.length === 1) {
 				tmpPath = subPaths[0];
 				tmpShape = new Shape();
@@ -35942,9 +32252,10 @@
 				shapes.push(tmpShape);
 				return shapes;
 			}
-
 			let holesFirst = !isClockWise(subPaths[0].getPoints());
-			holesFirst = isCCW ? !holesFirst : holesFirst; // console.log("Holes first", holesFirst);
+			holesFirst = isCCW ? !holesFirst : holesFirst;
+
+			// console.log("Holes first", holesFirst);
 
 			const betterShapeHoles = [];
 			const newShapes = [];
@@ -35953,13 +32264,11 @@
 			let tmpPoints;
 			newShapes[mainIdx] = undefined;
 			newShapeHoles[mainIdx] = [];
-
 			for (let i = 0, l = subPaths.length; i < l; i++) {
 				tmpPath = subPaths[i];
 				tmpPoints = tmpPath.getPoints();
 				solid = isClockWise(tmpPoints);
 				solid = isCCW ? !solid : solid;
-
 				if (solid) {
 					if (!holesFirst && newShapes[mainIdx]) mainIdx++;
 					newShapes[mainIdx] = {
@@ -35968,37 +32277,35 @@
 					};
 					newShapes[mainIdx].s.curves = tmpPath.curves;
 					if (holesFirst) mainIdx++;
-					newShapeHoles[mainIdx] = []; //console.log('cw', i);
+					newShapeHoles[mainIdx] = [];
+
+					//console.log('cw', i);
 				} else {
 					newShapeHoles[mainIdx].push({
 						h: tmpPath,
 						p: tmpPoints[0]
-					}); //console.log('ccw', i);
-				}
-			} // only Holes? -> probably all Shapes with wrong orientation
+					});
 
+					//console.log('ccw', i);
+				}
+			}
 
+			// only Holes? -> probably all Shapes with wrong orientation
 			if (!newShapes[0]) return toShapesNoHoles(subPaths);
-
 			if (newShapes.length > 1) {
 				let ambiguous = false;
 				let toChange = 0;
-
 				for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
 					betterShapeHoles[sIdx] = [];
 				}
-
 				for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
 					const sho = newShapeHoles[sIdx];
-
 					for (let hIdx = 0; hIdx < sho.length; hIdx++) {
 						const ho = sho[hIdx];
 						let hole_unassigned = true;
-
 						for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
 							if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
 								if (sIdx !== s2Idx) toChange++;
-
 								if (hole_unassigned) {
 									hole_unassigned = false;
 									betterShapeHoles[s2Idx].push(ho);
@@ -36007,123 +32314,120 @@
 								}
 							}
 						}
-
 						if (hole_unassigned) {
 							betterShapeHoles[sIdx].push(ho);
 						}
 					}
 				}
-
 				if (toChange > 0 && ambiguous === false) {
 					newShapeHoles = betterShapeHoles;
 				}
 			}
-
 			let tmpHoles;
-
 			for (let i = 0, il = newShapes.length; i < il; i++) {
 				tmpShape = newShapes[i].s;
 				shapes.push(tmpShape);
 				tmpHoles = newShapeHoles[i];
-
 				for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
 					tmpShape.holes.push(tmpHoles[j].h);
 				}
-			} //console.log("shape", shapes);
+			}
 
+			//console.log("shape", shapes);
 
 			return shapes;
 		}
-
 	}
 
-	const _tables = /*@__PURE__*/_generateTables();
+	// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 
+	const _tables = /*@__PURE__*/_generateTables();
 	function _generateTables() {
 		// float32 to float16 helpers
+
 		const buffer = new ArrayBuffer(4);
 		const floatView = new Float32Array(buffer);
 		const uint32View = new Uint32Array(buffer);
 		const baseTable = new Uint32Array(512);
 		const shiftTable = new Uint32Array(512);
-
 		for (let i = 0; i < 256; ++i) {
-			const e = i - 127; // very small number (0, -0)
+			const e = i - 127;
+
+			// very small number (0, -0)
 
 			if (e < -27) {
 				baseTable[i] = 0x0000;
 				baseTable[i | 0x100] = 0x8000;
 				shiftTable[i] = 24;
-				shiftTable[i | 0x100] = 24; // small number (denorm)
+				shiftTable[i | 0x100] = 24;
+
+				// small number (denorm)
 			} else if (e < -14) {
 				baseTable[i] = 0x0400 >> -e - 14;
 				baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;
 				shiftTable[i] = -e - 1;
-				shiftTable[i | 0x100] = -e - 1; // normal number
+				shiftTable[i | 0x100] = -e - 1;
+
+				// normal number
 			} else if (e <= 15) {
 				baseTable[i] = e + 15 << 10;
 				baseTable[i | 0x100] = e + 15 << 10 | 0x8000;
 				shiftTable[i] = 13;
-				shiftTable[i | 0x100] = 13; // large number (Infinity, -Infinity)
+				shiftTable[i | 0x100] = 13;
+
+				// large number (Infinity, -Infinity)
 			} else if (e < 128) {
 				baseTable[i] = 0x7c00;
 				baseTable[i | 0x100] = 0xfc00;
 				shiftTable[i] = 24;
-				shiftTable[i | 0x100] = 24; // stay (NaN, Infinity, -Infinity)
+				shiftTable[i | 0x100] = 24;
+
+				// stay (NaN, Infinity, -Infinity)
 			} else {
 				baseTable[i] = 0x7c00;
 				baseTable[i | 0x100] = 0xfc00;
 				shiftTable[i] = 13;
 				shiftTable[i | 0x100] = 13;
 			}
-		} // float16 to float32 helpers
+		}
 
+		// float16 to float32 helpers
 
 		const mantissaTable = new Uint32Array(2048);
 		const exponentTable = new Uint32Array(64);
 		const offsetTable = new Uint32Array(64);
-
 		for (let i = 1; i < 1024; ++i) {
 			let m = i << 13; // zero pad mantissa bits
-
 			let e = 0; // zero exponent
-			// normalized
 
+			// normalized
 			while ((m & 0x00800000) === 0) {
 				m <<= 1;
 				e -= 0x00800000; // decrement exponent
 			}
 
 			m &= ~0x00800000; // clear leading 1 bit
-
 			e += 0x38800000; // adjust bias
 
 			mantissaTable[i] = m | e;
 		}
-
 		for (let i = 1024; i < 2048; ++i) {
 			mantissaTable[i] = 0x38000000 + (i - 1024 << 13);
 		}
-
 		for (let i = 1; i < 31; ++i) {
 			exponentTable[i] = i << 23;
 		}
-
 		exponentTable[31] = 0x47800000;
 		exponentTable[32] = 0x80000000;
-
 		for (let i = 33; i < 63; ++i) {
 			exponentTable[i] = 0x80000000 + (i - 32 << 23);
 		}
-
 		exponentTable[63] = 0xc7800000;
-
 		for (let i = 1; i < 64; ++i) {
 			if (i !== 32) {
 				offsetTable[i] = 1024;
 			}
 		}
-
 		return {
 			floatView: floatView,
 			uint32View: uint32View,
@@ -36133,8 +32437,9 @@
 			exponentTable: exponentTable,
 			offsetTable: offsetTable
 		};
-	} // float32 to float16
+	}
 
+	// float32 to float16
 
 	function toHalfFloat(val) {
 		if (Math.abs(val) > 65504) console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.');
@@ -36143,8 +32448,9 @@
 		const f = _tables.uint32View[0];
 		const e = f >> 23 & 0x1ff;
 		return _tables.baseTable[e] + ((f & 0x007fffff) >> _tables.shiftTable[e]);
-	} // float16 to float32
+	}
 
+	// float16 to float32
 
 	function fromHalfFloat(val) {
 		const m = val >> 10;
@@ -36158,9 +32464,13 @@
 		fromHalfFloat: fromHalfFloat
 	});
 
+	// r134, d65e0af06644fe5a84a6fc0e372f4318f95a04c0
+
 	function ImmediateRenderObject() {
 		console.error('THREE.ImmediateRenderObject has been removed.');
-	} // r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17
+	}
+
+	// r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17
 
 	class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
 		constructor(width, height, options) {
@@ -36168,175 +32478,195 @@
 			super(width, height, options);
 			this.samples = 4;
 		}
+	}
 
-	} // r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
+	// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
 
 	class DataTexture2DArray extends DataArrayTexture {
 		constructor(data, width, height, depth) {
 			console.warn('THREE.DataTexture2DArray has been renamed to DataArrayTexture.');
 			super(data, width, height, depth);
 		}
+	}
 
-	} // r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
+	// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
 
 	class DataTexture3D extends Data3DTexture {
 		constructor(data, width, height, depth) {
 			console.warn('THREE.DataTexture3D has been renamed to Data3DTexture.');
 			super(data, width, height, depth);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class BoxBufferGeometry extends BoxGeometry {
 		constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {
 			console.warn('THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.');
 			super(width, height, depth, widthSegments, heightSegments, depthSegments);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class CapsuleBufferGeometry extends CapsuleGeometry {
 		constructor(radius, length, capSegments, radialSegments) {
 			console.warn('THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.');
 			super(radius, length, capSegments, radialSegments);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class CircleBufferGeometry extends CircleGeometry {
 		constructor(radius, segments, thetaStart, thetaLength) {
 			console.warn('THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.');
 			super(radius, segments, thetaStart, thetaLength);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class ConeBufferGeometry extends ConeGeometry {
 		constructor(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
 			console.warn('THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.');
 			super(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class CylinderBufferGeometry extends CylinderGeometry {
 		constructor(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
 			console.warn('THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.');
 			super(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class DodecahedronBufferGeometry extends DodecahedronGeometry {
 		constructor(radius, detail) {
 			console.warn('THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.');
 			super(radius, detail);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class ExtrudeBufferGeometry extends ExtrudeGeometry {
 		constructor(shapes, options) {
 			console.warn('THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.');
 			super(shapes, options);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class IcosahedronBufferGeometry extends IcosahedronGeometry {
 		constructor(radius, detail) {
 			console.warn('THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.');
 			super(radius, detail);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class LatheBufferGeometry extends LatheGeometry {
 		constructor(points, segments, phiStart, phiLength) {
 			console.warn('THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.');
 			super(points, segments, phiStart, phiLength);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class OctahedronBufferGeometry extends OctahedronGeometry {
 		constructor(radius, detail) {
 			console.warn('THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.');
 			super(radius, detail);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class PlaneBufferGeometry extends PlaneGeometry {
 		constructor(width, height, widthSegments, heightSegments) {
 			console.warn('THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.');
 			super(width, height, widthSegments, heightSegments);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class PolyhedronBufferGeometry extends PolyhedronGeometry {
 		constructor(vertices, indices, radius, detail) {
 			console.warn('THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.');
 			super(vertices, indices, radius, detail);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class RingBufferGeometry extends RingGeometry {
 		constructor(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
 			console.warn('THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.');
 			super(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class ShapeBufferGeometry extends ShapeGeometry {
 		constructor(shapes, curveSegments) {
 			console.warn('THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.');
 			super(shapes, curveSegments);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class SphereBufferGeometry extends SphereGeometry {
 		constructor(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
 			console.warn('THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.');
 			super(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class TetrahedronBufferGeometry extends TetrahedronGeometry {
 		constructor(radius, detail) {
 			console.warn('THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.');
 			super(radius, detail);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class TorusBufferGeometry extends TorusGeometry {
 		constructor(radius, tube, radialSegments, tubularSegments, arc) {
 			console.warn('THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.');
 			super(radius, tube, radialSegments, tubularSegments, arc);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class TorusKnotBufferGeometry extends TorusKnotGeometry {
 		constructor(radius, tube, tubularSegments, radialSegments, p, q) {
 			console.warn('THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.');
 			super(radius, tube, tubularSegments, radialSegments, p, q);
 		}
+	}
 
-	} // r144
+	// r144
 
 	class TubeBufferGeometry extends TubeGeometry {
 		constructor(path, tubularSegments, radius, radialSegments, closed) {
 			console.warn('THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.');
 			super(path, tubularSegments, radius, radialSegments, closed);
 		}
-
 	}
 
 	if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
@@ -36346,7 +32676,6 @@
 			}
 		}));
 	}
-
 	if (typeof window !== 'undefined') {
 		if (window.__THREE__) {
 			console.warn('WARNING: Multiple instances of Three.js being imported.');
diff --git a/node_modules/super-three/build/three.min.js b/node_modules/super-three/build/three.min.js
index 0af87af..f3a64fe 100644
--- a/node_modules/super-three/build/three.min.js
+++ b/node_modules/super-three/build/three.min.js
@@ -3,4 +3,4 @@
  * Copyright 2010-2022 Three.js Authors
  * SPDX-License-Identifier: MIT
  */
-!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).THREE={})}(this,(function(t){"use strict";const e="147",i=100,n=300,r=301,s=302,a=303,o=304,l=306,c=1e3,h=1001,u=1002,d=1003,p=1004,m=1005,f=1006,g=1007,v=1008,x=1009,_=1012,y=1014,M=1015,b=1016,w=1020,S=1023,T=1026,A=1027,E=33776,C=33777,L=33778,R=33779,P=35840,I=35841,D=35842,N=35843,O=37492,z=37496,U=37808,B=37809,F=37810,k=37811,G=37812,V=37813,H=37814,W=37815,j=37816,q=37817,X=37818,Y=37819,Z=37820,J=37821,K=36492,$=2300,Q=2301,tt=2302,et=2400,it=2401,nt=2402,rt=2500,st=2501,at=3e3,ot=3001,lt="srgb",ct="srgb-linear",ht=7680,ut=35044,dt="300 es",pt=1035;class mt{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const i=this._listeners;return void 0!==i[t]&&-1!==i[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const i=this._listeners[t];if(void 0!==i){const t=i.indexOf(e);-1!==t&&i.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const i=e.slice(0);for(let e=0,n=i.length;e<n;e++)i[e].call(this,t);t.target=null}}}const ft=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let gt=1234567;const vt=Math.PI/180,xt=180/Math.PI;function _t(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(ft[255&t]+ft[t>>8&255]+ft[t>>16&255]+ft[t>>24&255]+"-"+ft[255&e]+ft[e>>8&255]+"-"+ft[e>>16&15|64]+ft[e>>24&255]+"-"+ft[63&i|128]+ft[i>>8&255]+"-"+ft[i>>16&255]+ft[i>>24&255]+ft[255&n]+ft[n>>8&255]+ft[n>>16&255]+ft[n>>24&255]).toLowerCase()}function yt(t,e,i){return Math.max(e,Math.min(i,t))}function Mt(t,e){return(t%e+e)%e}function bt(t,e,i){return(1-i)*t+i*e}function wt(t){return 0==(t&t-1)&&0!==t}function St(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}function Tt(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}function At(t,e){switch(e.constructor){case Float32Array:return t;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function Et(t,e){switch(e.constructor){case Float32Array:return t;case Uint16Array:return Math.round(65535*t);case Uint8Array:return Math.round(255*t);case Int16Array:return Math.round(32767*t);case Int8Array:return Math.round(127*t);default:throw new Error("Invalid component type.")}}var Ct=Object.freeze({__proto__:null,DEG2RAD:vt,RAD2DEG:xt,generateUUID:_t,clamp:yt,euclideanModulo:Mt,mapLinear:function(t,e,i,n,r){return n+(t-e)*(r-n)/(i-e)},inverseLerp:function(t,e,i){return t!==e?(i-t)/(e-t):0},lerp:bt,damp:function(t,e,i,n){return bt(t,e,1-Math.exp(-i*n))},pingpong:function(t,e=1){return e-Math.abs(Mt(t,2*e)-e)},smoothstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*(3-2*t)},smootherstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){void 0!==t&&(gt=t);let e=gt+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296},degToRad:function(t){return t*vt},radToDeg:function(t){return t*xt},isPowerOfTwo:wt,ceilPowerOfTwo:St,floorPowerOfTwo:Tt,setQuaternionFromProperEuler:function(t,e,i,n,r){const s=Math.cos,a=Math.sin,o=s(i/2),l=a(i/2),c=s((e+n)/2),h=a((e+n)/2),u=s((e-n)/2),d=a((e-n)/2),p=s((n-e)/2),m=a((n-e)/2);switch(r){case"XYX":t.set(o*h,l*u,l*d,o*c);break;case"YZY":t.set(l*d,o*h,l*u,o*c);break;case"ZXZ":t.set(l*u,l*d,o*h,o*c);break;case"XZX":t.set(o*h,l*m,l*p,o*c);break;case"YXY":t.set(l*p,o*h,l*m,o*c);break;case"ZYZ":t.set(l*m,l*p,o*h,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}},normalize:Et,denormalize:At});class Lt{constructor(t=0,e=0){Lt.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),n=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.x=r*i-s*n+t.x,this.y=r*n+s*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Rt{constructor(){Rt.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(t,e,i,n,r,s,a,o,l){const c=this.elements;return c[0]=t,c[1]=n,c[2]=a,c[3]=e,c[4]=r,c[5]=o,c[6]=i,c[7]=s,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,r=this.elements,s=i[0],a=i[3],o=i[6],l=i[1],c=i[4],h=i[7],u=i[2],d=i[5],p=i[8],m=n[0],f=n[3],g=n[6],v=n[1],x=n[4],_=n[7],y=n[2],M=n[5],b=n[8];return r[0]=s*m+a*v+o*y,r[3]=s*f+a*x+o*M,r[6]=s*g+a*_+o*b,r[1]=l*m+c*v+h*y,r[4]=l*f+c*x+h*M,r[7]=l*g+c*_+h*b,r[2]=u*m+d*v+p*y,r[5]=u*f+d*x+p*M,r[8]=u*g+d*_+p*b,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8];return e*s*c-e*a*l-i*r*c+i*a*o+n*r*l-n*s*o}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=c*s-a*l,u=a*o-c*r,d=l*r-s*o,p=e*h+i*u+n*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return t[0]=h*m,t[1]=(n*l-c*i)*m,t[2]=(a*i-n*s)*m,t[3]=u*m,t[4]=(c*e-n*o)*m,t[5]=(n*r-a*e)*m,t[6]=d*m,t[7]=(i*o-l*e)*m,t[8]=(s*e-i*r)*m,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,n,r,s,a){const o=Math.cos(r),l=Math.sin(r);return this.set(i*o,i*l,-i*(o*s+l*a)+s+t,-n*l,n*o,-n*(-l*s+o*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(Pt.makeScale(t,e)),this}rotate(t){return this.premultiply(Pt.makeRotation(-t)),this}translate(t,e){return this.premultiply(Pt.makeTranslation(t,e)),this}makeTranslation(t,e){return this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,i,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,i=t.elements;for(let t=0;t<9;t++)if(e[t]!==i[t])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}const Pt=new Rt;function It(t){for(let e=t.length-1;e>=0;--e)if(t[e]>=65535)return!0;return!1}const Dt={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Nt(t,e){return new Dt[t](e)}function Ot(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function zt(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Ut(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}const Bt={[lt]:{[ct]:zt},[ct]:{[lt]:Ut}},Ft={legacyMode:!0,get workingColorSpace(){return ct},set workingColorSpace(t){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(t,e,i){if(this.legacyMode||e===i||!e||!i)return t;if(Bt[e]&&void 0!==Bt[e][i]){const n=Bt[e][i];return t.r=n(t.r),t.g=n(t.g),t.b=n(t.b),t}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(t,e){return this.convert(t,this.workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this.workingColorSpace)}},kt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Gt={r:0,g:0,b:0},Vt={h:0,s:0,l:0},Ht={h:0,s:0,l:0};function Wt(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+6*(e-t)*(2/3-i):t}function jt(t,e){return e.r=t.r,e.g=t.g,e.b=t.b,e}class qt{constructor(t,e,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,void 0===e&&void 0===i?this.set(t):this.setRGB(t,e,i)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e="srgb"){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,Ft.toWorkingColorSpace(this,e),this}setRGB(t,e,i,n=Ft.workingColorSpace){return this.r=t,this.g=e,this.b=i,Ft.toWorkingColorSpace(this,n),this}setHSL(t,e,i,n=Ft.workingColorSpace){if(t=Mt(t,1),e=yt(e,0,1),i=yt(i,0,1),0===e)this.r=this.g=this.b=i;else{const n=i<=.5?i*(1+e):i+e-i*e,r=2*i-n;this.r=Wt(r,n,t+1/3),this.g=Wt(r,n,t),this.b=Wt(r,n,t-1/3)}return Ft.toWorkingColorSpace(this,n),this}setStyle(t,e="srgb"){function i(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const r=n[1],s=n[2];switch(r){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,Ft.toWorkingColorSpace(this,e),i(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,Ft.toWorkingColorSpace(this,e),i(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s)){const n=parseFloat(t[1])/360,r=parseFloat(t[2])/100,s=parseFloat(t[3])/100;return i(t[4]),this.setHSL(n,r,s,e)}}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=n[1],i=t.length;if(3===i)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,Ft.toWorkingColorSpace(this,e),this;if(6===i)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,Ft.toWorkingColorSpace(this,e),this}return t&&t.length>0?this.setColorName(t,e):this}setColorName(t,e="srgb"){const i=kt[t.toLowerCase()];return void 0!==i?this.setHex(i,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=zt(t.r),this.g=zt(t.g),this.b=zt(t.b),this}copyLinearToSRGB(t){return this.r=Ut(t.r),this.g=Ut(t.g),this.b=Ut(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t="srgb"){return Ft.fromWorkingColorSpace(jt(this,Gt),t),yt(255*Gt.r,0,255)<<16^yt(255*Gt.g,0,255)<<8^yt(255*Gt.b,0,255)<<0}getHexString(t="srgb"){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Ft.workingColorSpace){Ft.fromWorkingColorSpace(jt(this,Gt),e);const i=Gt.r,n=Gt.g,r=Gt.b,s=Math.max(i,n,r),a=Math.min(i,n,r);let o,l;const c=(a+s)/2;if(a===s)o=0,l=0;else{const t=s-a;switch(l=c<=.5?t/(s+a):t/(2-s-a),s){case i:o=(n-r)/t+(n<r?6:0);break;case n:o=(r-i)/t+2;break;case r:o=(i-n)/t+4}o/=6}return t.h=o,t.s=l,t.l=c,t}getRGB(t,e=Ft.workingColorSpace){return Ft.fromWorkingColorSpace(jt(this,Gt),e),t.r=Gt.r,t.g=Gt.g,t.b=Gt.b,t}getStyle(t="srgb"){return Ft.fromWorkingColorSpace(jt(this,Gt),t),t!==lt?`color(${t} ${Gt.r} ${Gt.g} ${Gt.b})`:`rgb(${255*Gt.r|0},${255*Gt.g|0},${255*Gt.b|0})`}offsetHSL(t,e,i){return this.getHSL(Vt),Vt.h+=t,Vt.s+=e,Vt.l+=i,this.setHSL(Vt.h,Vt.s,Vt.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(Vt),t.getHSL(Ht);const i=bt(Vt.h,Ht.h,e),n=bt(Vt.s,Ht.s,e),r=bt(Vt.l,Ht.l,e);return this.setHSL(i,n,r),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}let Xt;qt.NAMES=kt;class Yt{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Xt&&(Xt=Ot("canvas")),Xt.width=t.width,Xt.height=t.height;const i=Xt.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=Xt}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=Ot("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");i.drawImage(t,0,0,t.width,t.height);const n=i.getImageData(0,0,t.width,t.height),r=n.data;for(let t=0;t<r.length;t++)r[t]=255*zt(r[t]/255);return i.putImageData(n,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*zt(e[t]/255)):e[t]=zt(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}class Zt{constructor(t=null){this.isSource=!0,this.uuid=_t(),this.data=t,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const i={uuid:this.uuid,url:""},n=this.data;if(null!==n){let t;if(Array.isArray(n)){t=[];for(let e=0,i=n.length;e<i;e++)n[e].isDataTexture?t.push(Jt(n[e].image)):t.push(Jt(n[e]))}else t=Jt(n);i.url=t}return e||(t.images[this.uuid]=i),i}}function Jt(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?Yt.getDataURL(t):t.data?{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Kt=0;class $t extends mt{constructor(t=$t.DEFAULT_IMAGE,e=$t.DEFAULT_MAPPING,i=1001,n=1001,r=1006,s=1008,a=1023,o=1009,l=$t.DEFAULT_ANISOTROPY,c=3e3){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Kt++}),this.uuid=_t(),this.name="",this.source=new Zt(t),this.mipmaps=[],this.mapping=e,this.wrapS=i,this.wrapT=n,this.magFilter=r,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new Lt(0,0),this.repeat=new Lt(1,1),this.center=new Lt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Rt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const i={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==n)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case c:t.x=t.x-Math.floor(t.x);break;case h:t.x=t.x<0?0:1;break;case u:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case c:t.y=t.y-Math.floor(t.y);break;case h:t.y=t.y<0?0:1;break;case u:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}}$t.DEFAULT_IMAGE=null,$t.DEFAULT_MAPPING=n,$t.DEFAULT_ANISOTROPY=1;class Qt{constructor(t=0,e=0,i=0,n=1){Qt.prototype.isVector4=!0,this.x=t,this.y=e,this.z=i,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,r=this.w,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*n+s[12]*r,this.y=s[1]*e+s[5]*i+s[9]*n+s[13]*r,this.z=s[2]*e+s[6]*i+s[10]*n+s[14]*r,this.w=s[3]*e+s[7]*i+s[11]*n+s[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,n,r;const s=.01,a=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],m=o[2],f=o[6],g=o[10];if(Math.abs(c-u)<s&&Math.abs(h-m)<s&&Math.abs(p-f)<s){if(Math.abs(c+u)<a&&Math.abs(h+m)<a&&Math.abs(p+f)<a&&Math.abs(l+d+g-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,v=(g+1)/2,x=(c+u)/4,_=(h+m)/4,y=(p+f)/4;return t>o&&t>v?t<s?(i=0,n=.707106781,r=.707106781):(i=Math.sqrt(t),n=x/i,r=_/i):o>v?o<s?(i=.707106781,n=0,r=.707106781):(n=Math.sqrt(o),i=x/n,r=y/n):v<s?(i=.707106781,n=.707106781,r=0):(r=Math.sqrt(v),i=_/r,n=y/r),this.set(i,n,r,e),this}let v=Math.sqrt((f-p)*(f-p)+(h-m)*(h-m)+(u-c)*(u-c));return Math.abs(v)<.001&&(v=1),this.x=(f-p)/v,this.y=(h-m)/v,this.z=(u-c)/v,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class te extends mt{constructor(t=1,e=1,i={}){super(),this.isWebGLRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Qt(0,0,t,e),this.scissorTest=!1,this.viewport=new Qt(0,0,t,e);const n={width:t,height:e,depth:1};this.texture=new $t(n,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=void 0!==i.generateMipmaps&&i.generateMipmaps,this.texture.internalFormat=void 0!==i.internalFormat?i.internalFormat:null,this.texture.minFilter=void 0!==i.minFilter?i.minFilter:f,this.depthBuffer=void 0===i.depthBuffer||i.depthBuffer,this.stencilBuffer=void 0!==i.stencilBuffer&&i.stencilBuffer,this.depthTexture=void 0!==i.depthTexture?i.depthTexture:null,this.samples=void 0!==i.samples?i.samples:0}setSize(t,e,i=1){this.width===t&&this.height===e&&this.depth===i||(this.width=t,this.height=e,this.depth=i,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=i,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new Zt(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class ee extends $t{constructor(t=null,e=1,i=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=d,this.minFilter=d,this.wrapR=h,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class ie extends $t{constructor(t=null,e=1,i=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=d,this.minFilter=d,this.wrapR=h,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class ne{constructor(t=0,e=0,i=0,n=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=i,this._w=n}static slerpFlat(t,e,i,n,r,s,a){let o=i[n+0],l=i[n+1],c=i[n+2],h=i[n+3];const u=r[s+0],d=r[s+1],p=r[s+2],m=r[s+3];if(0===a)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===a)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=m);if(h!==m||o!==u||l!==d||c!==p){let t=1-a;const e=o*u+l*d+c*p+h*m,i=e>=0?1:-1,n=1-e*e;if(n>Number.EPSILON){const r=Math.sqrt(n),s=Math.atan2(r,e*i);t=Math.sin(t*s)/r,a=Math.sin(a*s)/r}const r=a*i;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+m*r,t===1-a){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,i,n,r,s){const a=i[n],o=i[n+1],l=i[n+2],c=i[n+3],h=r[s],u=r[s+1],d=r[s+2],p=r[s+3];return t[e]=a*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-a*d,t[e+2]=l*p+c*d+a*u-o*h,t[e+3]=c*p-a*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){const i=t._x,n=t._y,r=t._z,s=t._order,a=Math.cos,o=Math.sin,l=a(i/2),c=a(n/2),h=a(r/2),u=o(i/2),d=o(n/2),p=o(r/2);switch(s){case"XYZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"YXZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"ZXY":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"ZYX":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"YZX":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case"XZY":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],n=e[4],r=e[8],s=e[1],a=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=i+a+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(s-n)*t}else if(i>a&&i>h){const t=2*Math.sqrt(1+i-a-h);this._w=(c-o)/t,this._x=.25*t,this._y=(n+s)/t,this._z=(r+l)/t}else if(a>h){const t=2*Math.sqrt(1+a-i-h);this._w=(r-l)/t,this._x=(n+s)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-i-a);this._w=(s-n)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(yt(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(0===i)return this;const n=Math.min(1,e/i);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,n=t._y,r=t._z,s=t._w,a=e._x,o=e._y,l=e._z,c=e._w;return this._x=i*c+s*a+n*l-r*o,this._y=n*c+s*o+r*a-i*l,this._z=r*c+s*l+i*o-n*a,this._w=s*c-i*a-n*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const i=this._x,n=this._y,r=this._z,s=this._w;let a=s*t._w+i*t._x+n*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=s,this._x=i,this._y=n,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;return this._w=t*s+e*this._w,this._x=t*i+e*this._x,this._y=t*n+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,a),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=s*h+this._w*u,this._x=i*h+this._x*u,this._y=n*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,i){return this.copy(t).slerp(e,i)}random(){const t=Math.random(),e=Math.sqrt(1-t),i=Math.sqrt(t),n=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(e*Math.cos(n),i*Math.sin(r),i*Math.cos(r),e*Math.sin(n))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class re{constructor(t=0,e=0,i=0){re.prototype.isVector3=!0,this.x=t,this.y=e,this.z=i}set(t,e,i){return void 0===i&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(ae.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ae.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6]*n,this.y=r[1]*e+r[4]*i+r[7]*n,this.z=r[2]*e+r[5]*i+r[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,r=t.elements,s=1/(r[3]*e+r[7]*i+r[11]*n+r[15]);return this.x=(r[0]*e+r[4]*i+r[8]*n+r[12])*s,this.y=(r[1]*e+r[5]*i+r[9]*n+r[13])*s,this.z=(r[2]*e+r[6]*i+r[10]*n+r[14])*s,this}applyQuaternion(t){const e=this.x,i=this.y,n=this.z,r=t.x,s=t.y,a=t.z,o=t.w,l=o*e+s*n-a*i,c=o*i+a*e-r*n,h=o*n+r*i-s*e,u=-r*e-s*i-a*n;return this.x=l*o+u*-r+c*-a-h*-s,this.y=c*o+u*-s+h*-r-l*-a,this.z=h*o+u*-a+l*-s-c*-r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[4]*i+r[8]*n,this.y=r[1]*e+r[5]*i+r[9]*n,this.z=r[2]*e+r[6]*i+r[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,n=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=n*o-r*a,this.y=r*s-i*o,this.z=i*a-n*s,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return se.copy(this).projectOnVector(t),this.sub(se)}reflect(t){return this.sub(se.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(yt(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=2*(Math.random()-.5),e=Math.random()*Math.PI*2,i=Math.sqrt(1-t**2);return this.x=i*Math.cos(e),this.y=i*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const se=new re,ae=new ne;class oe{constructor(t=new re(1/0,1/0,1/0),e=new re(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,i=1/0,n=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.length;o<l;o+=3){const l=t[o],c=t[o+1],h=t[o+2];l<e&&(e=l),c<i&&(i=c),h<n&&(n=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,i,n),this.max.set(r,s,a),this}setFromBufferAttribute(t){let e=1/0,i=1/0,n=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o),c=t.getY(o),h=t.getZ(o);l<e&&(e=l),c<i&&(i=c),h<n&&(n=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,i,n),this.max.set(r,s,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=ce.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const i=t.geometry;if(void 0!==i)if(e&&null!=i.attributes&&void 0!==i.attributes.position){const e=i.attributes.position;for(let i=0,n=e.count;i<n;i++)ce.fromBufferAttribute(e,i).applyMatrix4(t.matrixWorld),this.expandByPoint(ce)}else null===i.boundingBox&&i.computeBoundingBox(),he.copy(i.boundingBox),he.applyMatrix4(t.matrixWorld),this.union(he);const n=t.children;for(let t=0,i=n.length;t<i;t++)this.expandByObject(n[t],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,ce),ce.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(ve),xe.subVectors(this.max,ve),ue.subVectors(t.a,ve),de.subVectors(t.b,ve),pe.subVectors(t.c,ve),me.subVectors(de,ue),fe.subVectors(pe,de),ge.subVectors(ue,pe);let e=[0,-me.z,me.y,0,-fe.z,fe.y,0,-ge.z,ge.y,me.z,0,-me.x,fe.z,0,-fe.x,ge.z,0,-ge.x,-me.y,me.x,0,-fe.y,fe.x,0,-ge.y,ge.x,0];return!!Me(e,ue,de,pe,xe)&&(e=[1,0,0,0,1,0,0,0,1],!!Me(e,ue,de,pe,xe)&&(_e.crossVectors(me,fe),e=[_e.x,_e.y,_e.z],Me(e,ue,de,pe,xe)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return ce.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(ce).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(le[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),le[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),le[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),le[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),le[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),le[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),le[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),le[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(le)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const le=[new re,new re,new re,new re,new re,new re,new re,new re],ce=new re,he=new oe,ue=new re,de=new re,pe=new re,me=new re,fe=new re,ge=new re,ve=new re,xe=new re,_e=new re,ye=new re;function Me(t,e,i,n,r){for(let s=0,a=t.length-3;s<=a;s+=3){ye.fromArray(t,s);const a=r.x*Math.abs(ye.x)+r.y*Math.abs(ye.y)+r.z*Math.abs(ye.z),o=e.dot(ye),l=i.dot(ye),c=n.dot(ye);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>a)return!1}return!0}const be=new oe,we=new re,Se=new re;class Te{constructor(t=new re,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;void 0!==e?i.copy(e):be.setFromPoints(t).getCenter(i);let n=0;for(let e=0,r=t.length;e<r;e++)n=Math.max(n,i.distanceToSquared(t[e]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;we.subVectors(t,this.center);const e=we.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),i=.5*(t-this.radius);this.center.addScaledVector(we,i/t),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(!0===this.center.equals(t.center)?this.radius=Math.max(this.radius,t.radius):(Se.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(we.copy(t.center).add(Se)),this.expandByPoint(we.copy(t.center).sub(Se))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Ae=new re,Ee=new re,Ce=new re,Le=new re,Re=new re,Pe=new re,Ie=new re;class De{constructor(t=new re,e=new re(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Ae)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Ae.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Ae.copy(this.direction).multiplyScalar(e).add(this.origin),Ae.distanceToSquared(t))}distanceSqToSegment(t,e,i,n){Ee.copy(t).add(e).multiplyScalar(.5),Ce.copy(e).sub(t).normalize(),Le.copy(this.origin).sub(Ee);const r=.5*t.distanceTo(e),s=-this.direction.dot(Ce),a=Le.dot(this.direction),o=-Le.dot(Ce),l=Le.lengthSq(),c=Math.abs(1-s*s);let h,u,d,p;if(c>0)if(h=s*o-a,u=s*a-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+s*u+2*a)+u*(s*h+u+2*o)+l}else u=r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-s*r+a)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(s*r+a)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=s>0?-r:r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;return i&&i.copy(this.direction).multiplyScalar(h).add(this.origin),n&&n.copy(Ce).multiplyScalar(u).add(Ee),d}intersectSphere(t,e){Ae.subVectors(t.center,this.origin);const i=Ae.dot(this.direction),n=Ae.dot(Ae)-i*i,r=t.radius*t.radius;if(n>r)return null;const s=Math.sqrt(r-n),a=i-s,o=i+s;return a<0&&o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return null===i?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return!0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,n,r,s,a,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(i=(t.min.x-u.x)*l,n=(t.max.x-u.x)*l):(i=(t.max.x-u.x)*l,n=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,s=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,s=(t.min.y-u.y)*c),i>s||r>n?null:((r>i||isNaN(i))&&(i=r),(s<n||isNaN(n))&&(n=s),h>=0?(a=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(a=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),i>o||a>n?null:((a>i||i!=i)&&(i=a),(o<n||n!=n)&&(n=o),n<0?null:this.at(i>=0?i:n,e)))}intersectsBox(t){return null!==this.intersectBox(t,Ae)}intersectTriangle(t,e,i,n,r){Re.subVectors(e,t),Pe.subVectors(i,t),Ie.crossVectors(Re,Pe);let s,a=this.direction.dot(Ie);if(a>0){if(n)return null;s=1}else{if(!(a<0))return null;s=-1,a=-a}Le.subVectors(this.origin,t);const o=s*this.direction.dot(Pe.crossVectors(Le,Pe));if(o<0)return null;const l=s*this.direction.dot(Re.cross(Le));if(l<0)return null;if(o+l>a)return null;const c=-s*Le.dot(Ie);return c<0?null:this.at(c/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Ne{constructor(){Ne.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(t,e,i,n,r,s,a,o,l,c,h,u,d,p,m,f){const g=this.elements;return g[0]=t,g[4]=e,g[8]=i,g[12]=n,g[1]=r,g[5]=s,g[9]=a,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=m,g[15]=f,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Ne).fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,n=1/Oe.setFromMatrixColumn(t,0).length(),r=1/Oe.setFromMatrixColumn(t,1).length(),s=1/Oe.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*r,e[5]=i[5]*r,e[6]=i[6]*r,e[7]=0,e[8]=i[8]*s,e[9]=i[9]*s,e[10]=i[10]*s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,i=t.x,n=t.y,r=t.z,s=Math.cos(i),a=Math.sin(i),o=Math.cos(n),l=Math.sin(n),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){const t=s*c,i=s*h,n=a*c,r=a*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=i+n*l,e[5]=t-r*l,e[9]=-a*o,e[2]=r-t*l,e[6]=n+i*l,e[10]=s*o}else if("YXZ"===t.order){const t=o*c,i=o*h,n=l*c,r=l*h;e[0]=t+r*a,e[4]=n*a-i,e[8]=s*l,e[1]=s*h,e[5]=s*c,e[9]=-a,e[2]=i*a-n,e[6]=r+t*a,e[10]=s*o}else if("ZXY"===t.order){const t=o*c,i=o*h,n=l*c,r=l*h;e[0]=t-r*a,e[4]=-s*h,e[8]=n+i*a,e[1]=i+n*a,e[5]=s*c,e[9]=r-t*a,e[2]=-s*l,e[6]=a,e[10]=s*o}else if("ZYX"===t.order){const t=s*c,i=s*h,n=a*c,r=a*h;e[0]=o*c,e[4]=n*l-i,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=i*l-n,e[2]=-l,e[6]=a*o,e[10]=s*o}else if("YZX"===t.order){const t=s*o,i=s*l,n=a*o,r=a*l;e[0]=o*c,e[4]=r-t*h,e[8]=n*h+i,e[1]=h,e[5]=s*c,e[9]=-a*c,e[2]=-l*c,e[6]=i*h+n,e[10]=t-r*h}else if("XZY"===t.order){const t=s*o,i=s*l,n=a*o,r=a*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=s*c,e[9]=i*h-n,e[2]=n*h-i,e[6]=a*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Ue,t,Be)}lookAt(t,e,i){const n=this.elements;return Ge.subVectors(t,e),0===Ge.lengthSq()&&(Ge.z=1),Ge.normalize(),Fe.crossVectors(i,Ge),0===Fe.lengthSq()&&(1===Math.abs(i.z)?Ge.x+=1e-4:Ge.z+=1e-4,Ge.normalize(),Fe.crossVectors(i,Ge)),Fe.normalize(),ke.crossVectors(Ge,Fe),n[0]=Fe.x,n[4]=ke.x,n[8]=Ge.x,n[1]=Fe.y,n[5]=ke.y,n[9]=Ge.y,n[2]=Fe.z,n[6]=ke.z,n[10]=Ge.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,r=this.elements,s=i[0],a=i[4],o=i[8],l=i[12],c=i[1],h=i[5],u=i[9],d=i[13],p=i[2],m=i[6],f=i[10],g=i[14],v=i[3],x=i[7],_=i[11],y=i[15],M=n[0],b=n[4],w=n[8],S=n[12],T=n[1],A=n[5],E=n[9],C=n[13],L=n[2],R=n[6],P=n[10],I=n[14],D=n[3],N=n[7],O=n[11],z=n[15];return r[0]=s*M+a*T+o*L+l*D,r[4]=s*b+a*A+o*R+l*N,r[8]=s*w+a*E+o*P+l*O,r[12]=s*S+a*C+o*I+l*z,r[1]=c*M+h*T+u*L+d*D,r[5]=c*b+h*A+u*R+d*N,r[9]=c*w+h*E+u*P+d*O,r[13]=c*S+h*C+u*I+d*z,r[2]=p*M+m*T+f*L+g*D,r[6]=p*b+m*A+f*R+g*N,r[10]=p*w+m*E+f*P+g*O,r[14]=p*S+m*C+f*I+g*z,r[3]=v*M+x*T+_*L+y*D,r[7]=v*b+x*A+_*R+y*N,r[11]=v*w+x*E+_*P+y*O,r[15]=v*S+x*C+_*I+y*z,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],n=t[8],r=t[12],s=t[1],a=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-n*l*h-r*a*u+i*l*u+n*a*d-i*o*d)+t[7]*(+e*o*d-e*l*u+r*s*u-n*s*d+n*l*c-r*o*c)+t[11]*(+e*l*h-e*a*d-r*s*h+i*s*d+r*a*c-i*l*c)+t[15]*(-n*a*c-e*o*h+e*a*u+n*s*h-i*s*u+i*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],m=t[13],f=t[14],g=t[15],v=h*f*l-m*u*l+m*o*d-a*f*d-h*o*g+a*u*g,x=p*u*l-c*f*l-p*o*d+s*f*d+c*o*g-s*u*g,_=c*m*l-p*h*l+p*a*d-s*m*d-c*a*g+s*h*g,y=p*h*o-c*m*o-p*a*u+s*m*u+c*a*f-s*h*f,M=e*v+i*x+n*_+r*y;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const b=1/M;return t[0]=v*b,t[1]=(m*u*r-h*f*r-m*n*d+i*f*d+h*n*g-i*u*g)*b,t[2]=(a*f*r-m*o*r+m*n*l-i*f*l-a*n*g+i*o*g)*b,t[3]=(h*o*r-a*u*r-h*n*l+i*u*l+a*n*d-i*o*d)*b,t[4]=x*b,t[5]=(c*f*r-p*u*r+p*n*d-e*f*d-c*n*g+e*u*g)*b,t[6]=(p*o*r-s*f*r-p*n*l+e*f*l+s*n*g-e*o*g)*b,t[7]=(s*u*r-c*o*r+c*n*l-e*u*l-s*n*d+e*o*d)*b,t[8]=_*b,t[9]=(p*h*r-c*m*r-p*i*d+e*m*d+c*i*g-e*h*g)*b,t[10]=(s*m*r-p*a*r+p*i*l-e*m*l-s*i*g+e*a*g)*b,t[11]=(c*a*r-s*h*r-c*i*l+e*h*l+s*i*d-e*a*d)*b,t[12]=y*b,t[13]=(c*m*n-p*h*n+p*i*u-e*m*u-c*i*f+e*h*f)*b,t[14]=(p*a*n-s*m*n-p*i*o+e*m*o+s*i*f-e*a*f)*b,t[15]=(s*h*n-c*a*n+c*i*o-e*h*o-s*i*u+e*a*u)*b,this}scale(t){const e=this.elements,i=t.x,n=t.y,r=t.z;return e[0]*=i,e[4]*=n,e[8]*=r,e[1]*=i,e[5]*=n,e[9]*=r,e[2]*=i,e[6]*=n,e[10]*=r,e[3]*=i,e[7]*=n,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))}makeTranslation(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),n=Math.sin(e),r=1-i,s=t.x,a=t.y,o=t.z,l=r*s,c=r*a;return this.set(l*s+i,l*a-n*o,l*o+n*a,0,l*a+n*o,c*a+i,c*o-n*s,0,l*o-n*a,c*o+n*s,r*o*o+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i,n,r,s){return this.set(1,i,r,0,t,1,s,0,e,n,1,0,0,0,0,1),this}compose(t,e,i){const n=this.elements,r=e._x,s=e._y,a=e._z,o=e._w,l=r+r,c=s+s,h=a+a,u=r*l,d=r*c,p=r*h,m=s*c,f=s*h,g=a*h,v=o*l,x=o*c,_=o*h,y=i.x,M=i.y,b=i.z;return n[0]=(1-(m+g))*y,n[1]=(d+_)*y,n[2]=(p-x)*y,n[3]=0,n[4]=(d-_)*M,n[5]=(1-(u+g))*M,n[6]=(f+v)*M,n[7]=0,n[8]=(p+x)*b,n[9]=(f-v)*b,n[10]=(1-(u+m))*b,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,i){const n=this.elements;let r=Oe.set(n[0],n[1],n[2]).length();const s=Oe.set(n[4],n[5],n[6]).length(),a=Oe.set(n[8],n[9],n[10]).length();this.determinant()<0&&(r=-r),t.x=n[12],t.y=n[13],t.z=n[14],ze.copy(this);const o=1/r,l=1/s,c=1/a;return ze.elements[0]*=o,ze.elements[1]*=o,ze.elements[2]*=o,ze.elements[4]*=l,ze.elements[5]*=l,ze.elements[6]*=l,ze.elements[8]*=c,ze.elements[9]*=c,ze.elements[10]*=c,e.setFromRotationMatrix(ze),i.x=r,i.y=s,i.z=a,this}makePerspective(t,e,i,n,r,s){const a=this.elements,o=2*r/(e-t),l=2*r/(i-n),c=(e+t)/(e-t),h=(i+n)/(i-n),u=-(s+r)/(s-r),d=-2*s*r/(s-r);return a[0]=o,a[4]=0,a[8]=c,a[12]=0,a[1]=0,a[5]=l,a[9]=h,a[13]=0,a[2]=0,a[6]=0,a[10]=u,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,i,n,r,s){const a=this.elements,o=1/(e-t),l=1/(i-n),c=1/(s-r),h=(e+t)*o,u=(i+n)*l,d=(s+r)*c;return a[0]=2*o,a[4]=0,a[8]=0,a[12]=-h,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-u,a[2]=0,a[6]=0,a[10]=-2*c,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let t=0;t<16;t++)if(e[t]!==i[t])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}const Oe=new re,ze=new Ne,Ue=new re(0,0,0),Be=new re(1,1,1),Fe=new re,ke=new re,Ge=new re,Ve=new Ne,He=new ne;class We{constructor(t=0,e=0,i=0,n=We.DefaultOrder){this.isEuler=!0,this._x=t,this._y=e,this._z=i,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,n=this._order){return this._x=t,this._y=e,this._z=i,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,i=!0){const n=t.elements,r=n[0],s=n[4],a=n[8],o=n[1],l=n[5],c=n[9],h=n[2],u=n[6],d=n[10];switch(e){case"XYZ":this._y=Math.asin(yt(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-yt(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(yt(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-yt(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(yt(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-yt(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===i&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return Ve.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Ve,e,i)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return He.setFromEuler(this),this.setFromQuaternion(He,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}We.DefaultOrder="XYZ",We.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class je{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}isEnabled(t){return 0!=(this.mask&(1<<t|0))}}let qe=0;const Xe=new re,Ye=new ne,Ze=new Ne,Je=new re,Ke=new re,$e=new re,Qe=new ne,ti=new re(1,0,0),ei=new re(0,1,0),ii=new re(0,0,1),ni={type:"added"},ri={type:"removed"};class si extends mt{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:qe++}),this.uuid=_t(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=si.DefaultUp.clone();const t=new re,e=new We,i=new ne,n=new re(1,1,1);e._onChange((function(){i.setFromEuler(e,!1)})),i._onChange((function(){e.setFromQuaternion(i,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new Ne},normalMatrix:{value:new Rt}}),this.matrix=new Ne,this.matrixWorld=new Ne,this.matrixAutoUpdate=si.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=si.DefaultMatrixWorldAutoUpdate,this.layers=new je,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Ye.setFromAxisAngle(t,e),this.quaternion.multiply(Ye),this}rotateOnWorldAxis(t,e){return Ye.setFromAxisAngle(t,e),this.quaternion.premultiply(Ye),this}rotateX(t){return this.rotateOnAxis(ti,t)}rotateY(t){return this.rotateOnAxis(ei,t)}rotateZ(t){return this.rotateOnAxis(ii,t)}translateOnAxis(t,e){return Xe.copy(t).applyQuaternion(this.quaternion),this.position.add(Xe.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(ti,t)}translateY(t){return this.translateOnAxis(ei,t)}translateZ(t){return this.translateOnAxis(ii,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(Ze.copy(this.matrixWorld).invert())}lookAt(t,e,i){t.isVector3?Je.copy(t):Je.set(t,e,i);const n=this.parent;this.updateWorldMatrix(!0,!1),Ke.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ze.lookAt(Ke,Je,this.up):Ze.lookAt(Je,Ke,this.up),this.quaternion.setFromRotationMatrix(Ze),n&&(Ze.extractRotation(n.matrixWorld),Ye.setFromRotationMatrix(Ze),this.quaternion.premultiply(Ye.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(ni)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(ri)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(ri)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Ze.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Ze.multiply(t.parent.matrixWorld)),t.applyMatrix4(Ze),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,n=this.children.length;i<n;i++){const n=this.children[i].getObjectByProperty(t,e);if(void 0!==n)return n}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ke,t,$e),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ke,Qe,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,n=e.length;i<n;i++){const n=e[i];!0!==n.matrixWorldAutoUpdate&&!0!==t||n.updateMatrixWorld(t)}}updateWorldMatrix(t,e){const i=this.parent;if(!0===t&&null!==i&&!0===i.matrixWorldAutoUpdate&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,i=t.length;e<i;e++){const i=t[e];!0===i.matrixWorldAutoUpdate&&i.updateWorldMatrix(!1,!0)}}}toJSON(t){const e=void 0===t||"string"==typeof t,i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const n={};function r(e,i){return void 0===e[i.uuid]&&(e[i.uuid]=i.toJSON(t)),i.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(n.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const i=e.shapes;if(Array.isArray(i))for(let e=0,n=i.length;e<n;e++){const n=i[e];r(t.shapes,n)}else r(t.shapes,i)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let i=0,n=this.material.length;i<n;i++)e.push(r(t.materials,this.material[i]));n.material=e}else n.material=r(t.materials,this.material);if(this.children.length>0){n.children=[];for(let e=0;e<this.children.length;e++)n.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let e=0;e<this.animations.length;e++){const i=this.animations[e];n.animations.push(r(t.animations,i))}}if(e){const e=s(t.geometries),n=s(t.materials),r=s(t.textures),a=s(t.images),o=s(t.shapes),l=s(t.skeletons),c=s(t.animations),h=s(t.nodes);e.length>0&&(i.geometries=e),n.length>0&&(i.materials=n),r.length>0&&(i.textures=r),a.length>0&&(i.images=a),o.length>0&&(i.shapes=o),l.length>0&&(i.skeletons=l),c.length>0&&(i.animations=c),h.length>0&&(i.nodes=h)}return i.object=n,i;function s(t){const e=[];for(const i in t){const n=t[i];delete n.metadata,e.push(n)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const i=t.children[e];this.add(i.clone())}return this}}si.DefaultUp=new re(0,1,0),si.DefaultMatrixAutoUpdate=!0,si.DefaultMatrixWorldAutoUpdate=!0;const ai=new re,oi=new re,li=new re,ci=new re,hi=new re,ui=new re,di=new re,pi=new re,mi=new re,fi=new re;class gi{constructor(t=new re,e=new re,i=new re){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,n){n.subVectors(i,e),ai.subVectors(t,e),n.cross(ai);const r=n.lengthSq();return r>0?n.multiplyScalar(1/Math.sqrt(r)):n.set(0,0,0)}static getBarycoord(t,e,i,n,r){ai.subVectors(n,e),oi.subVectors(i,e),li.subVectors(t,e);const s=ai.dot(ai),a=ai.dot(oi),o=ai.dot(li),l=oi.dot(oi),c=oi.dot(li),h=s*l-a*a;if(0===h)return r.set(-2,-1,-1);const u=1/h,d=(l*o-a*c)*u,p=(s*c-a*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,i,n){return this.getBarycoord(t,e,i,n,ci),ci.x>=0&&ci.y>=0&&ci.x+ci.y<=1}static getUV(t,e,i,n,r,s,a,o){return this.getBarycoord(t,e,i,n,ci),o.set(0,0),o.addScaledVector(r,ci.x),o.addScaledVector(s,ci.y),o.addScaledVector(a,ci.z),o}static isFrontFacing(t,e,i,n){return ai.subVectors(i,e),oi.subVectors(t,e),ai.cross(oi).dot(n)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this}setFromAttributeAndIndices(t,e,i,n){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,i),this.c.fromBufferAttribute(t,n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return ai.subVectors(this.c,this.b),oi.subVectors(this.a,this.b),.5*ai.cross(oi).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return gi.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return gi.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,i,n,r){return gi.getUV(t,this.a,this.b,this.c,e,i,n,r)}containsPoint(t){return gi.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return gi.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const i=this.a,n=this.b,r=this.c;let s,a;hi.subVectors(n,i),ui.subVectors(r,i),pi.subVectors(t,i);const o=hi.dot(pi),l=ui.dot(pi);if(o<=0&&l<=0)return e.copy(i);mi.subVectors(t,n);const c=hi.dot(mi),h=ui.dot(mi);if(c>=0&&h<=c)return e.copy(n);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return s=o/(o-c),e.copy(i).addScaledVector(hi,s);fi.subVectors(t,r);const d=hi.dot(fi),p=ui.dot(fi);if(p>=0&&d<=p)return e.copy(r);const m=d*l-o*p;if(m<=0&&l>=0&&p<=0)return a=l/(l-p),e.copy(i).addScaledVector(ui,a);const f=c*p-d*h;if(f<=0&&h-c>=0&&d-p>=0)return di.subVectors(r,n),a=(h-c)/(h-c+(d-p)),e.copy(n).addScaledVector(di,a);const g=1/(f+m+u);return s=m*g,a=u*g,e.copy(i).addScaledVector(hi,s).addScaledVector(ui,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let vi=0;class xi extends mt{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:vi++}),this.uuid=_t(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=i,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ht,this.stencilZFail=ht,this.stencilZPass=ht,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const i=t[e];if(void 0===i){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}const n=this[e];void 0!==n?n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const i={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(t){const e=[];for(const i in t){const n=t[i];delete n.metadata,e.push(n)}return e}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),void 0!==this.sheen&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearcoat&&(i.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(i.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(i.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(i.combine=this.combine)),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(i.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(i.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(i.size=this.size),null!==this.shadowSide&&(i.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(i.blending=this.blending),0!==this.side&&(i.side=this.side),this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,i.colorWrite=this.colorWrite,i.stencilWrite=this.stencilWrite,i.stencilWriteMask=this.stencilWriteMask,i.stencilFunc=this.stencilFunc,i.stencilRef=this.stencilRef,i.stencilFuncMask=this.stencilFuncMask,i.stencilFail=this.stencilFail,i.stencilZFail=this.stencilZFail,i.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(i.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(i.flatShading=this.flatShading),!1===this.visible&&(i.visible=!1),!1===this.toneMapped&&(i.toneMapped=!1),!1===this.fog&&(i.fog=!1),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),e){const e=n(t.textures),r=n(t.images);e.length>0&&(i.textures=e),r.length>0&&(i.images=r)}return i}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(null!==e){const t=e.length;i=new Array(t);for(let n=0;n!==t;++n)i[n]=e[n].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}class _i extends xi{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new qt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const yi=new re,Mi=new Lt;class bi{constructor(t,e,i){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===i,this.usage=ut,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let n=0,r=this.itemSize;n<r;n++)this.array[t+n]=e.array[i+n];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,i=this.count;e<i;e++)Mi.fromBufferAttribute(this,e),Mi.applyMatrix3(t),this.setXY(e,Mi.x,Mi.y);else if(3===this.itemSize)for(let e=0,i=this.count;e<i;e++)yi.fromBufferAttribute(this,e),yi.applyMatrix3(t),this.setXYZ(e,yi.x,yi.y,yi.z);return this}applyMatrix4(t){for(let e=0,i=this.count;e<i;e++)yi.fromBufferAttribute(this,e),yi.applyMatrix4(t),this.setXYZ(e,yi.x,yi.y,yi.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)yi.fromBufferAttribute(this,e),yi.applyNormalMatrix(t),this.setXYZ(e,yi.x,yi.y,yi.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)yi.fromBufferAttribute(this,e),yi.transformDirection(t),this.setXYZ(e,yi.x,yi.y,yi.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=At(e,this.array)),e}setX(t,e){return this.normalized&&(e=Et(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=At(e,this.array)),e}setY(t,e){return this.normalized&&(e=Et(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=At(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Et(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=At(e,this.array)),e}setW(t,e){return this.normalized&&(e=Et(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array)),this.array[t+0]=e,this.array[t+1]=i,this}setXYZ(t,e,i,n){return t*=this.itemSize,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array),n=Et(n,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this}setXYZW(t,e,i,n,r){return t*=this.itemSize,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array),n=Et(n,this.array),r=Et(r,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==ut&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class wi extends bi{constructor(t,e,i){super(new Uint16Array(t),e,i)}}class Si extends bi{constructor(t,e,i){super(new Uint32Array(t),e,i)}}class Ti extends bi{constructor(t,e,i){super(new Float32Array(t),e,i)}}let Ai=0;const Ei=new Ne,Ci=new si,Li=new re,Ri=new oe,Pi=new oe,Ii=new re;class Di extends mt{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Ai++}),this.uuid=_t(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(It(t)?Si:wi)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(void 0!==i){const e=(new Rt).getNormalMatrix(t);i.applyNormalMatrix(e),i.needsUpdate=!0}const n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(t),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ei.makeRotationFromQuaternion(t),this.applyMatrix4(Ei),this}rotateX(t){return Ei.makeRotationX(t),this.applyMatrix4(Ei),this}rotateY(t){return Ei.makeRotationY(t),this.applyMatrix4(Ei),this}rotateZ(t){return Ei.makeRotationZ(t),this.applyMatrix4(Ei),this}translate(t,e,i){return Ei.makeTranslation(t,e,i),this.applyMatrix4(Ei),this}scale(t,e,i){return Ei.makeScale(t,e,i),this.applyMatrix4(Ei),this}lookAt(t){return Ci.lookAt(t),Ci.updateMatrix(),this.applyMatrix4(Ci.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Li).negate(),this.translate(Li.x,Li.y,Li.z),this}setFromPoints(t){const e=[];for(let i=0,n=t.length;i<n;i++){const n=t[i];e.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new Ti(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new oe);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new re(-1/0,-1/0,-1/0),new re(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,i=e.length;t<i;t++){const i=e[t];Ri.setFromBufferAttribute(i),this.morphTargetsRelative?(Ii.addVectors(this.boundingBox.min,Ri.min),this.boundingBox.expandByPoint(Ii),Ii.addVectors(this.boundingBox.max,Ri.max),this.boundingBox.expandByPoint(Ii)):(this.boundingBox.expandByPoint(Ri.min),this.boundingBox.expandByPoint(Ri.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Te);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new re,1/0);if(t){const i=this.boundingSphere.center;if(Ri.setFromBufferAttribute(t),e)for(let t=0,i=e.length;t<i;t++){const i=e[t];Pi.setFromBufferAttribute(i),this.morphTargetsRelative?(Ii.addVectors(Ri.min,Pi.min),Ri.expandByPoint(Ii),Ii.addVectors(Ri.max,Pi.max),Ri.expandByPoint(Ii)):(Ri.expandByPoint(Pi.min),Ri.expandByPoint(Pi.max))}Ri.getCenter(i);let n=0;for(let e=0,r=t.count;e<r;e++)Ii.fromBufferAttribute(t,e),n=Math.max(n,i.distanceToSquared(Ii));if(e)for(let r=0,s=e.length;r<s;r++){const s=e[r],a=this.morphTargetsRelative;for(let e=0,r=s.count;e<r;e++)Ii.fromBufferAttribute(s,e),a&&(Li.fromBufferAttribute(t,e),Ii.add(Li)),n=Math.max(n,i.distanceToSquared(Ii))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const i=t.array,n=e.position.array,r=e.normal.array,s=e.uv.array,a=n.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new bi(new Float32Array(4*a),4));const o=this.getAttribute("tangent").array,l=[],c=[];for(let t=0;t<a;t++)l[t]=new re,c[t]=new re;const h=new re,u=new re,d=new re,p=new Lt,m=new Lt,f=new Lt,g=new re,v=new re;function x(t,e,i){h.fromArray(n,3*t),u.fromArray(n,3*e),d.fromArray(n,3*i),p.fromArray(s,2*t),m.fromArray(s,2*e),f.fromArray(s,2*i),u.sub(h),d.sub(h),m.sub(p),f.sub(p);const r=1/(m.x*f.y-f.x*m.y);isFinite(r)&&(g.copy(u).multiplyScalar(f.y).addScaledVector(d,-m.y).multiplyScalar(r),v.copy(d).multiplyScalar(m.x).addScaledVector(u,-f.x).multiplyScalar(r),l[t].add(g),l[e].add(g),l[i].add(g),c[t].add(v),c[e].add(v),c[i].add(v))}let _=this.groups;0===_.length&&(_=[{start:0,count:i.length}]);for(let t=0,e=_.length;t<e;++t){const e=_[t],n=e.start;for(let t=n,r=n+e.count;t<r;t+=3)x(i[t+0],i[t+1],i[t+2])}const y=new re,M=new re,b=new re,w=new re;function S(t){b.fromArray(r,3*t),w.copy(b);const e=l[t];y.copy(e),y.sub(b.multiplyScalar(b.dot(e))).normalize(),M.crossVectors(w,e);const i=M.dot(c[t])<0?-1:1;o[4*t]=y.x,o[4*t+1]=y.y,o[4*t+2]=y.z,o[4*t+3]=i}for(let t=0,e=_.length;t<e;++t){const e=_[t],n=e.start;for(let t=n,r=n+e.count;t<r;t+=3)S(i[t+0]),S(i[t+1]),S(i[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let i=this.getAttribute("normal");if(void 0===i)i=new bi(new Float32Array(3*e.count),3),this.setAttribute("normal",i);else for(let t=0,e=i.count;t<e;t++)i.setXYZ(t,0,0,0);const n=new re,r=new re,s=new re,a=new re,o=new re,l=new re,c=new re,h=new re;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),m=t.getX(u+2);n.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),s.fromBufferAttribute(e,m),c.subVectors(s,r),h.subVectors(n,r),c.cross(h),a.fromBufferAttribute(i,d),o.fromBufferAttribute(i,p),l.fromBufferAttribute(i,m),a.add(c),o.add(c),l.add(c),i.setXYZ(d,a.x,a.y,a.z),i.setXYZ(p,o.x,o.y,o.z),i.setXYZ(m,l.x,l.y,l.z)}else for(let t=0,a=e.count;t<a;t+=3)n.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),s.fromBufferAttribute(e,t+2),c.subVectors(s,r),h.subVectors(n,r),c.cross(h),i.setXYZ(t+0,c.x,c.y,c.z),i.setXYZ(t+1,c.x,c.y,c.z),i.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),i.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."),this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)Ii.fromBufferAttribute(t,e),Ii.normalize(),t.setXYZ(e,Ii.x,Ii.y,Ii.z)}toNonIndexed(){function t(t,e){const i=t.array,n=t.itemSize,r=t.normalized,s=new i.constructor(e.length*n);let a=0,o=0;for(let r=0,l=e.length;r<l;r++){a=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*n;for(let t=0;t<n;t++)s[o++]=i[a++]}return new bi(s,n,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Di,i=this.index.array,n=this.attributes;for(const r in n){const s=t(n[r],i);e.setAttribute(r,s)}const r=this.morphAttributes;for(const n in r){const s=[],a=r[n];for(let e=0,n=a.length;e<n;e++){const n=t(a[e],i);s.push(n)}e.morphAttributes[n]=s}e.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let t=0,i=s.length;t<i;t++){const i=s[t];e.addGroup(i.start,i.count,i.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const i in e)void 0!==e[i]&&(t[i]=e[i]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const e in i){const n=i[e];t.data.attributes[e]=n.toJSON(t.data)}const n={};let r=!1;for(const e in this.morphAttributes){const i=this.morphAttributes[e],s=[];for(let e=0,n=i.length;e<n;e++){const n=i[e];s.push(n.toJSON(t.data))}s.length>0&&(n[e]=s,r=!0)}r&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return null!==a&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;null!==i&&this.setIndex(i.clone(e));const n=t.attributes;for(const t in n){const i=n[t];this.setAttribute(t,i.clone(e))}const r=t.morphAttributes;for(const t in r){const i=[],n=r[t];for(let t=0,r=n.length;t<r;t++)i.push(n[t].clone(e));this.morphAttributes[t]=i}this.morphTargetsRelative=t.morphTargetsRelative;const s=t.groups;for(let t=0,e=s.length;t<e;t++){const e=s[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,void 0!==t.parameters&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}const Ni=new Ne,Oi=new De,zi=new Te,Ui=new re,Bi=new re,Fi=new re,ki=new re,Gi=new re,Vi=new re,Hi=new re,Wi=new re,ji=new re,qi=new Lt,Xi=new Lt,Yi=new Lt,Zi=new re,Ji=new re;class Ki extends si{constructor(t=new Di,e=new _i){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}raycast(t,e){const i=this.geometry,n=this.material,r=this.matrixWorld;if(void 0===n)return;if(null===i.boundingSphere&&i.computeBoundingSphere(),zi.copy(i.boundingSphere),zi.applyMatrix4(r),!1===t.ray.intersectsSphere(zi))return;if(Ni.copy(r).invert(),Oi.copy(t.ray).applyMatrix4(Ni),null!==i.boundingBox&&!1===Oi.intersectsBox(i.boundingBox))return;let s;const a=i.index,o=i.attributes.position,l=i.morphAttributes.position,c=i.morphTargetsRelative,h=i.attributes.uv,u=i.attributes.uv2,d=i.groups,p=i.drawRange;if(null!==a)if(Array.isArray(n))for(let i=0,r=d.length;i<r;i++){const r=d[i],m=n[r.materialIndex];for(let i=Math.max(r.start,p.start),n=Math.min(a.count,Math.min(r.start+r.count,p.start+p.count));i<n;i+=3){const n=a.getX(i),d=a.getX(i+1),p=a.getX(i+2);s=$i(this,m,t,Oi,o,l,c,h,u,n,d,p),s&&(s.faceIndex=Math.floor(i/3),s.face.materialIndex=r.materialIndex,e.push(s))}}else{for(let i=Math.max(0,p.start),r=Math.min(a.count,p.start+p.count);i<r;i+=3){const r=a.getX(i),d=a.getX(i+1),p=a.getX(i+2);s=$i(this,n,t,Oi,o,l,c,h,u,r,d,p),s&&(s.faceIndex=Math.floor(i/3),e.push(s))}}else if(void 0!==o)if(Array.isArray(n))for(let i=0,r=d.length;i<r;i++){const r=d[i],a=n[r.materialIndex];for(let i=Math.max(r.start,p.start),n=Math.min(o.count,Math.min(r.start+r.count,p.start+p.count));i<n;i+=3){s=$i(this,a,t,Oi,o,l,c,h,u,i,i+1,i+2),s&&(s.faceIndex=Math.floor(i/3),s.face.materialIndex=r.materialIndex,e.push(s))}}else{for(let i=Math.max(0,p.start),r=Math.min(o.count,p.start+p.count);i<r;i+=3){s=$i(this,n,t,Oi,o,l,c,h,u,i,i+1,i+2),s&&(s.faceIndex=Math.floor(i/3),e.push(s))}}}}function $i(t,e,i,n,r,s,a,o,l,c,h,u){Ui.fromBufferAttribute(r,c),Bi.fromBufferAttribute(r,h),Fi.fromBufferAttribute(r,u);const d=t.morphTargetInfluences;if(s&&d){Hi.set(0,0,0),Wi.set(0,0,0),ji.set(0,0,0);for(let t=0,e=s.length;t<e;t++){const e=d[t],i=s[t];0!==e&&(ki.fromBufferAttribute(i,c),Gi.fromBufferAttribute(i,h),Vi.fromBufferAttribute(i,u),a?(Hi.addScaledVector(ki,e),Wi.addScaledVector(Gi,e),ji.addScaledVector(Vi,e)):(Hi.addScaledVector(ki.sub(Ui),e),Wi.addScaledVector(Gi.sub(Bi),e),ji.addScaledVector(Vi.sub(Fi),e)))}Ui.add(Hi),Bi.add(Wi),Fi.add(ji)}t.isSkinnedMesh&&(t.boneTransform(c,Ui),t.boneTransform(h,Bi),t.boneTransform(u,Fi));const p=function(t,e,i,n,r,s,a,o){let l;if(l=1===e.side?n.intersectTriangle(a,s,r,!0,o):n.intersectTriangle(r,s,a,2!==e.side,o),null===l)return null;Ji.copy(o),Ji.applyMatrix4(t.matrixWorld);const c=i.ray.origin.distanceTo(Ji);return c<i.near||c>i.far?null:{distance:c,point:Ji.clone(),object:t}}(t,e,i,n,Ui,Bi,Fi,Zi);if(p){o&&(qi.fromBufferAttribute(o,c),Xi.fromBufferAttribute(o,h),Yi.fromBufferAttribute(o,u),p.uv=gi.getUV(Zi,Ui,Bi,Fi,qi,Xi,Yi,new Lt)),l&&(qi.fromBufferAttribute(l,c),Xi.fromBufferAttribute(l,h),Yi.fromBufferAttribute(l,u),p.uv2=gi.getUV(Zi,Ui,Bi,Fi,qi,Xi,Yi,new Lt));const t={a:c,b:h,c:u,normal:new re,materialIndex:0};gi.getNormal(Ui,Bi,Fi,t.normal),p.face=t}return p}class Qi extends Di{constructor(t=1,e=1,i=1,n=1,r=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:r,depthSegments:s};const a=this;n=Math.floor(n),r=Math.floor(r),s=Math.floor(s);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,i,n,r,s,p,m,f,g,v){const x=s/f,_=p/g,y=s/2,M=p/2,b=m/2,w=f+1,S=g+1;let T=0,A=0;const E=new re;for(let s=0;s<S;s++){const a=s*_-M;for(let o=0;o<w;o++){const u=o*x-y;E[t]=u*n,E[e]=a*r,E[i]=b,l.push(E.x,E.y,E.z),E[t]=0,E[e]=0,E[i]=m>0?1:-1,c.push(E.x,E.y,E.z),h.push(o/f),h.push(1-s/g),T+=1}}for(let t=0;t<g;t++)for(let e=0;e<f;e++){const i=u+e+w*t,n=u+e+w*(t+1),r=u+(e+1)+w*(t+1),s=u+(e+1)+w*t;o.push(i,n,s),o.push(n,r,s),A+=6}a.addGroup(d,A,v),d+=A,u+=T}p("z","y","x",-1,-1,i,e,t,s,r,0),p("z","y","x",1,-1,i,e,-t,s,r,1),p("x","z","y",1,1,t,i,e,n,s,2),p("x","z","y",1,-1,t,i,-e,n,s,3),p("x","y","z",1,-1,t,e,i,n,r,4),p("x","y","z",-1,-1,t,e,-i,n,r,5),this.setIndex(o),this.setAttribute("position",new Ti(l,3)),this.setAttribute("normal",new Ti(c,3)),this.setAttribute("uv",new Ti(h,2))}static fromJSON(t){return new Qi(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function tn(t){const e={};for(const i in t){e[i]={};for(const n in t[i]){const r=t[i][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?e[i][n]=r.clone():Array.isArray(r)?e[i][n]=r.slice():e[i][n]=r}}return e}function en(t){const e={};for(let i=0;i<t.length;i++){const n=tn(t[i]);for(const t in n)e[t]=n[t]}return e}function nn(t){return null===t.getRenderTarget()&&t.outputEncoding===ot?lt:ct}const rn={clone:tn,merge:en};class sn extends xi{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=tn(t.uniforms),this.uniformsGroups=function(t){const e=[];for(let i=0;i<t.length;i++)e.push(t[i].clone());return e}(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const n=this.uniforms[i].value;n&&n.isTexture?e.uniforms[i]={type:"t",value:n.toJSON(t).uuid}:n&&n.isColor?e.uniforms[i]={type:"c",value:n.getHex()}:n&&n.isVector2?e.uniforms[i]={type:"v2",value:n.toArray()}:n&&n.isVector3?e.uniforms[i]={type:"v3",value:n.toArray()}:n&&n.isVector4?e.uniforms[i]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[i]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[i]={type:"m4",value:n.toArray()}:e.uniforms[i]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const i={};for(const t in this.extensions)!0===this.extensions[t]&&(i[t]=!0);return Object.keys(i).length>0&&(e.extensions=i),e}}class an extends si{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Ne,this.projectionMatrix=new Ne,this.projectionMatrixInverse=new Ne}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}class on extends an{constructor(t=50,e=1,i=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*xt*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*vt*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*xt*Math.atan(Math.tan(.5*vt*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,i,n,r,s){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*vt*this.fov)/this.zoom,i=2*e,n=this.aspect*i,r=-.5*n;const s=this.view;if(null!==this.view&&this.view.enabled){const t=s.fullWidth,a=s.fullHeight;r+=s.offsetX*n/t,e-=s.offsetY*i/a,n*=s.width/t,i*=s.height/a}const a=this.filmOffset;0!==a&&(r+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+n,e,e-i,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const ln=-90;class cn extends si{constructor(t,e,i){super(),this.type="CubeCamera",this.renderTarget=i;const n=new on(ln,1,t,e);n.layers=this.layers,n.up.set(0,1,0),n.lookAt(1,0,0),this.add(n);const r=new on(ln,1,t,e);r.layers=this.layers,r.up.set(0,1,0),r.lookAt(-1,0,0),this.add(r);const s=new on(ln,1,t,e);s.layers=this.layers,s.up.set(0,0,-1),s.lookAt(0,1,0),this.add(s);const a=new on(ln,1,t,e);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(0,-1,0),this.add(a);const o=new on(ln,1,t,e);o.layers=this.layers,o.up.set(0,1,0),o.lookAt(0,0,1),this.add(o);const l=new on(ln,1,t,e);l.layers=this.layers,l.up.set(0,1,0),l.lookAt(0,0,-1),this.add(l)}update(t,e){null===this.parent&&this.updateMatrixWorld();const i=this.renderTarget,[n,r,s,a,o,l]=this.children,c=t.getRenderTarget(),h=t.toneMapping,u=t.xr.enabled;t.toneMapping=0,t.xr.enabled=!1;const d=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0),t.render(e,n),t.setRenderTarget(i,1),t.render(e,r),t.setRenderTarget(i,2),t.render(e,s),t.setRenderTarget(i,3),t.render(e,a),t.setRenderTarget(i,4),t.render(e,o),i.texture.generateMipmaps=d,t.setRenderTarget(i,5),t.render(e,l),t.setRenderTarget(c),t.toneMapping=h,t.xr.enabled=u,i.texture.needsPMREMUpdate=!0}}class hn extends $t{constructor(t,e,i,n,s,a,o,l,c,h){super(t=void 0!==t?t:[],e=void 0!==e?e:r,i,n,s,a,o,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class un extends te{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const i={width:t,height:t,depth:1},n=[i,i,i,i,i,i];this.texture=new hn(n,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:f}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},n=new Qi(5,5,5),r=new sn({name:"CubemapFromEquirect",uniforms:tn(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=e;const s=new Ki(n,r),a=e.minFilter;e.minFilter===v&&(e.minFilter=f);return new cn(1,10,this).update(t,s),e.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(t,e,i,n){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,i,n);t.setRenderTarget(r)}}const dn=new re,pn=new re,mn=new Rt;class fn{constructor(t=new re(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const n=dn.subVectors(i,e).cross(pn.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const i=t.delta(dn),n=this.normal.dot(i);if(0===n)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/n;return r<0||r>1?null:e.copy(i).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||mn.getNormalMatrix(t),n=this.coplanarPoint(dn).applyMatrix4(t),r=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const gn=new Te,vn=new re;class xn{constructor(t=new fn,e=new fn,i=new fn,n=new fn,r=new fn,s=new fn){this.planes=[t,e,i,n,r,s]}set(t,e,i,n,r,s){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(n),a[4].copy(r),a[5].copy(s),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t){const e=this.planes,i=t.elements,n=i[0],r=i[1],s=i[2],a=i[3],o=i[4],l=i[5],c=i[6],h=i[7],u=i[8],d=i[9],p=i[10],m=i[11],f=i[12],g=i[13],v=i[14],x=i[15];return e[0].setComponents(a-n,h-o,m-u,x-f).normalize(),e[1].setComponents(a+n,h+o,m+u,x+f).normalize(),e[2].setComponents(a+r,h+l,m+d,x+g).normalize(),e[3].setComponents(a-r,h-l,m-d,x-g).normalize(),e[4].setComponents(a-s,h-c,m-p,x-v).normalize(),e[5].setComponents(a+s,h+c,m+p,x+v).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),gn.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(gn)}intersectsSprite(t){return gn.center.set(0,0,0),gn.radius=.7071067811865476,gn.applyMatrix4(t.matrixWorld),this.intersectsSphere(gn)}intersectsSphere(t){const e=this.planes,i=t.center,n=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(i)<n)return!1}return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const n=e[i];if(vn.x=n.normal.x>0?t.max.x:t.min.x,vn.y=n.normal.y>0?t.max.y:t.min.y,vn.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(vn)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function _n(){let t=null,e=!1,i=null,n=null;function r(e,s){i(e,s),n=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==i&&(n=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(t){i=t},setContext:function(e){t=e}}}function yn(t,e){const i=e.isWebGL2,n=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),n.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const i=n.get(e);i&&(t.deleteBuffer(i.buffer),n.delete(e))},update:function(e,r){if(e.isGLBufferAttribute){const t=n.get(e);return void((!t||t.version<e.version)&&n.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const s=n.get(e);void 0===s?n.set(e,function(e,n){const r=e.array,s=e.usage,a=t.createBuffer();let o;if(t.bindBuffer(n,a),t.bufferData(n,r,s),e.onUploadCallback(),r instanceof Float32Array)o=5126;else if(r instanceof Uint16Array)if(e.isFloat16BufferAttribute){if(!i)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");o=5131}else o=5123;else if(r instanceof Int16Array)o=5122;else if(r instanceof Uint32Array)o=5125;else if(r instanceof Int32Array)o=5124;else if(r instanceof Int8Array)o=5120;else if(r instanceof Uint8Array)o=5121;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);o=5121}return{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(e,r)):s.version<e.version&&(!function(e,n,r){const s=n.array,a=n.updateRange;t.bindBuffer(r,e),-1===a.count?t.bufferSubData(r,0,s):(i?t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s,a.offset,a.count):t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s.subarray(a.offset,a.offset+a.count)),a.count=-1),n.onUploadCallback()}(s.buffer,e,r),s.version=e.version)}}}class Mn extends Di{constructor(t=1,e=1,i=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n};const r=t/2,s=e/2,a=Math.floor(i),o=Math.floor(n),l=a+1,c=o+1,h=t/a,u=e/o,d=[],p=[],m=[],f=[];for(let t=0;t<c;t++){const e=t*u-s;for(let i=0;i<l;i++){const n=i*h-r;p.push(n,-e,0),m.push(0,0,1),f.push(i/a),f.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<a;e++){const i=e+l*t,n=e+l*(t+1),r=e+1+l*(t+1),s=e+1+l*t;d.push(i,n,s),d.push(n,r,s)}this.setIndex(d),this.setAttribute("position",new Ti(p,3)),this.setAttribute("normal",new Ti(m,3)),this.setAttribute("uv",new Ti(f,2))}static fromJSON(t){return new Mn(t.width,t.height,t.widthSegments,t.heightSegments)}}const bn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n\t\tfloat x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n\t\tfloat x2 = x * x;\n\t\tfloat x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n\t\treturn ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\n\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,\t0.0556434,\n\t\t-1.5371385,\t1.8760108, -0.2040259,\n\t\t-0.4985314,\t0.0415560,\t1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\t return vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(\t\t0, 1,\t\t0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t\tf.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t\tf.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(\t1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,\t1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,\t1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},wn={common:{diffuse:{value:new qt(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Rt},uv2Transform:{value:new Rt},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Lt(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new qt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new qt(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Rt}},sprite:{diffuse:{value:new qt(16777215)},opacity:{value:1},center:{value:new Lt(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Rt}}},Sn={basic:{uniforms:en([wn.common,wn.specularmap,wn.envmap,wn.aomap,wn.lightmap,wn.fog]),vertexShader:bn.meshbasic_vert,fragmentShader:bn.meshbasic_frag},lambert:{uniforms:en([wn.common,wn.specularmap,wn.envmap,wn.aomap,wn.lightmap,wn.emissivemap,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.fog,wn.lights,{emissive:{value:new qt(0)}}]),vertexShader:bn.meshlambert_vert,fragmentShader:bn.meshlambert_frag},phong:{uniforms:en([wn.common,wn.specularmap,wn.envmap,wn.aomap,wn.lightmap,wn.emissivemap,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.fog,wn.lights,{emissive:{value:new qt(0)},specular:{value:new qt(1118481)},shininess:{value:30}}]),vertexShader:bn.meshphong_vert,fragmentShader:bn.meshphong_frag},standard:{uniforms:en([wn.common,wn.envmap,wn.aomap,wn.lightmap,wn.emissivemap,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.roughnessmap,wn.metalnessmap,wn.fog,wn.lights,{emissive:{value:new qt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:bn.meshphysical_vert,fragmentShader:bn.meshphysical_frag},toon:{uniforms:en([wn.common,wn.aomap,wn.lightmap,wn.emissivemap,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.gradientmap,wn.fog,wn.lights,{emissive:{value:new qt(0)}}]),vertexShader:bn.meshtoon_vert,fragmentShader:bn.meshtoon_frag},matcap:{uniforms:en([wn.common,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.fog,{matcap:{value:null}}]),vertexShader:bn.meshmatcap_vert,fragmentShader:bn.meshmatcap_frag},points:{uniforms:en([wn.points,wn.fog]),vertexShader:bn.points_vert,fragmentShader:bn.points_frag},dashed:{uniforms:en([wn.common,wn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:bn.linedashed_vert,fragmentShader:bn.linedashed_frag},depth:{uniforms:en([wn.common,wn.displacementmap]),vertexShader:bn.depth_vert,fragmentShader:bn.depth_frag},normal:{uniforms:en([wn.common,wn.bumpmap,wn.normalmap,wn.displacementmap,{opacity:{value:1}}]),vertexShader:bn.meshnormal_vert,fragmentShader:bn.meshnormal_frag},sprite:{uniforms:en([wn.sprite,wn.fog]),vertexShader:bn.sprite_vert,fragmentShader:bn.sprite_frag},background:{uniforms:{uvTransform:{value:new Rt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:bn.background_vert,fragmentShader:bn.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:bn.backgroundCube_vert,fragmentShader:bn.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:bn.cube_vert,fragmentShader:bn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:bn.equirect_vert,fragmentShader:bn.equirect_frag},distanceRGBA:{uniforms:en([wn.common,wn.displacementmap,{referencePosition:{value:new re},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:bn.distanceRGBA_vert,fragmentShader:bn.distanceRGBA_frag},shadow:{uniforms:en([wn.lights,wn.fog,{color:{value:new qt(0)},opacity:{value:1}}]),vertexShader:bn.shadow_vert,fragmentShader:bn.shadow_frag}};Sn.physical={uniforms:en([Sn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Lt(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new qt(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Lt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new qt(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new qt(1,1,1)},specularColorMap:{value:null}}]),vertexShader:bn.meshphysical_vert,fragmentShader:bn.meshphysical_frag};const Tn={r:0,b:0,g:0};function An(t,e,i,n,r,s,a){const o=new qt(0);let c,h,u=!0===s?0:1,d=null,p=0,m=null;function f(e,i){e.getRGB(Tn,nn(t)),n.buffers.color.setClear(Tn.r,Tn.g,Tn.b,i,a)}return{getClearColor:function(){return o},setClearColor:function(t,e=1){o.set(t),u=e,f(o,u)},getClearAlpha:function(){return u},setClearAlpha:function(t){u=t,f(o,u)},render:function(n,s){let a=!1,g=!0===s.isScene?s.background:null;if(g&&g.isTexture){g=(s.backgroundBlurriness>0?i:e).get(g)}const v=t.xr,x=v.getSession&&v.getSession();x&&"additive"===x.environmentBlendMode&&(g=null),null===g?f(o,u):g&&g.isColor&&(f(g,1),a=!0),(t.autoClear||a)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),g&&(g.isCubeTexture||g.mapping===l)?(void 0===h&&(h=new Ki(new Qi(1,1,1),new sn({name:"BackgroundCubeMaterial",uniforms:tn(Sn.backgroundCube.uniforms),vertexShader:Sn.backgroundCube.vertexShader,fragmentShader:Sn.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(t,e,i){this.matrixWorld.copyPosition(i.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(h)),h.material.uniforms.envMap.value=g,h.material.uniforms.flipEnvMap.value=g.isCubeTexture&&!1===g.isRenderTargetTexture?-1:1,h.material.uniforms.backgroundBlurriness.value=s.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=s.backgroundIntensity,d===g&&p===g.version&&m===t.toneMapping||(h.material.needsUpdate=!0,d=g,p=g.version,m=t.toneMapping),h.layers.enableAll(),n.unshift(h,h.geometry,h.material,0,0,null)):g&&g.isTexture&&(void 0===c&&(c=new Ki(new Mn(2,2),new sn({name:"BackgroundMaterial",uniforms:tn(Sn.background.uniforms),vertexShader:Sn.background.vertexShader,fragmentShader:Sn.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(c)),c.material.uniforms.t2D.value=g,c.material.uniforms.backgroundIntensity.value=s.backgroundIntensity,!0===g.matrixAutoUpdate&&g.updateMatrix(),c.material.uniforms.uvTransform.value.copy(g.matrix),d===g&&p===g.version&&m===t.toneMapping||(c.material.needsUpdate=!0,d=g,p=g.version,m=t.toneMapping),c.layers.enableAll(),n.unshift(c,c.geometry,c.material,0,0,null))}}}function En(t,e,i,n){const r=t.getParameter(34921),s=n.isWebGL2?null:e.get("OES_vertex_array_object"),a=n.isWebGL2||null!==s,o={},l=p(null);let c=l,h=!1;function u(e){return n.isWebGL2?t.bindVertexArray(e):s.bindVertexArrayOES(e)}function d(e){return n.isWebGL2?t.deleteVertexArray(e):s.deleteVertexArrayOES(e)}function p(t){const e=[],i=[],n=[];for(let t=0;t<r;t++)e[t]=0,i[t]=0,n[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:i,attributeDivisors:n,object:t,attributes:{},index:null}}function m(){const t=c.newAttributes;for(let e=0,i=t.length;e<i;e++)t[e]=0}function f(t){g(t,0)}function g(i,r){const s=c.newAttributes,a=c.enabledAttributes,o=c.attributeDivisors;if(s[i]=1,0===a[i]&&(t.enableVertexAttribArray(i),a[i]=1),o[i]!==r){(n.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](i,r),o[i]=r}}function v(){const e=c.newAttributes,i=c.enabledAttributes;for(let n=0,r=i.length;n<r;n++)i[n]!==e[n]&&(t.disableVertexAttribArray(n),i[n]=0)}function x(e,i,r,s,a,o){!0!==n.isWebGL2||5124!==r&&5125!==r?t.vertexAttribPointer(e,i,r,s,a,o):t.vertexAttribIPointer(e,i,r,a,o)}function _(){y(),h=!0,c!==l&&(c=l,u(c.object))}function y(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,d,_,y){let M=!1;if(a){const e=function(e,i,r){const a=!0===r.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let c=l[i.id];void 0===c&&(c={},l[i.id]=c);let h=c[a];void 0===h&&(h=p(n.isWebGL2?t.createVertexArray():s.createVertexArrayOES()),c[a]=h);return h}(_,d,l);c!==e&&(c=e,u(c.object)),M=function(t,e,i,n){const r=c.attributes,s=e.attributes;let a=0;const o=i.getAttributes();for(const e in o){if(o[e].location>=0){const i=r[e];let n=s[e];if(void 0===n&&("instanceMatrix"===e&&t.instanceMatrix&&(n=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(n=t.instanceColor)),void 0===i)return!0;if(i.attribute!==n)return!0;if(n&&i.data!==n.data)return!0;a++}}return c.attributesNum!==a||c.index!==n}(r,_,d,y),M&&function(t,e,i,n){const r={},s=e.attributes;let a=0;const o=i.getAttributes();for(const e in o){if(o[e].location>=0){let i=s[e];void 0===i&&("instanceMatrix"===e&&t.instanceMatrix&&(i=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(i=t.instanceColor));const n={};n.attribute=i,i&&i.data&&(n.data=i.data),r[e]=n,a++}}c.attributes=r,c.attributesNum=a,c.index=n}(r,_,d,y)}else{const t=!0===l.wireframe;c.geometry===_.id&&c.program===d.id&&c.wireframe===t||(c.geometry=_.id,c.program=d.id,c.wireframe=t,M=!0)}null!==y&&i.update(y,34963),(M||h)&&(h=!1,function(r,s,a,o){if(!1===n.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;m();const l=o.attributes,c=a.getAttributes(),h=s.defaultAttributeValues;for(const e in c){const n=c[e];if(n.location>=0){let s=l[e];if(void 0===s&&("instanceMatrix"===e&&r.instanceMatrix&&(s=r.instanceMatrix),"instanceColor"===e&&r.instanceColor&&(s=r.instanceColor)),void 0!==s){const e=s.normalized,a=s.itemSize,l=i.get(s);if(void 0===l)continue;const c=l.buffer,h=l.type,u=l.bytesPerElement;if(s.isInterleavedBufferAttribute){const i=s.data,l=i.stride,d=s.offset;if(i.isInstancedInterleavedBuffer){for(let t=0;t<n.locationSize;t++)g(n.location+t,i.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=i.meshPerAttribute*i.count)}else for(let t=0;t<n.locationSize;t++)f(n.location+t);t.bindBuffer(34962,c);for(let t=0;t<n.locationSize;t++)x(n.location+t,a/n.locationSize,h,e,l*u,(d+a/n.locationSize*t)*u)}else{if(s.isInstancedBufferAttribute){for(let t=0;t<n.locationSize;t++)g(n.location+t,s.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let t=0;t<n.locationSize;t++)f(n.location+t);t.bindBuffer(34962,c);for(let t=0;t<n.locationSize;t++)x(n.location+t,a/n.locationSize,h,e,a*u,a/n.locationSize*t*u)}}else if(void 0!==h){const i=h[e];if(void 0!==i)switch(i.length){case 2:t.vertexAttrib2fv(n.location,i);break;case 3:t.vertexAttrib3fv(n.location,i);break;case 4:t.vertexAttrib4fv(n.location,i);break;default:t.vertexAttrib1fv(n.location,i)}}}}v()}(r,l,d,_),null!==y&&t.bindBuffer(34963,i.get(y).buffer))},reset:_,resetDefaultState:y,dispose:function(){_();for(const t in o){const e=o[t];for(const t in e){const i=e[t];for(const t in i)d(i[t].object),delete i[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const i=e[t];for(const t in i)d(i[t].object),delete i[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function(t){for(const e in o){const i=o[e];if(void 0===i[t.id])continue;const n=i[t.id];for(const t in n)d(n[t].object),delete n[t];delete i[t.id]}},initAttributes:m,enableAttribute:f,disableUnusedAttributes:v}}function Cn(t,e,i,n){const r=n.isWebGL2;let s;this.setMode=function(t){s=t},this.render=function(e,n){t.drawArrays(s,e,n),i.update(n,s,1)},this.renderInstances=function(n,a,o){if(0===o)return;let l,c;if(r)l=t,c="drawArraysInstanced";else if(l=e.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](s,n,a,o),i.update(a,s,o)}}function Ln(t,e,i){let n;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const s="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let a=void 0!==i.precision?i.precision:"highp";const o=r(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);const l=s||e.has("WEBGL_draw_buffers"),c=!0===i.logarithmicDepthBuffer,h=t.getParameter(34930),u=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),m=t.getParameter(34921),f=t.getParameter(36347),g=t.getParameter(36348),v=t.getParameter(36349),x=u>0,_=s||e.has("OES_texture_float");return{isWebGL2:s,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===e.has("EXT_texture_filter_anisotropic")){const i=e.get("EXT_texture_filter_anisotropic");n=t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:r,precision:a,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:x,floatFragmentTextures:_,floatVertexTextures:x&&_,maxSamples:s?t.getParameter(36183):0}}function Rn(t){const e=this;let i=null,n=0,r=!1,s=!1;const a=new fn,o=new Rt,l={value:null,needsUpdate:!1};function c(){l.value!==i&&(l.value=i,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function h(t,i,n,r){const s=null!==t?t.length:0;let c=null;if(0!==s){if(c=l.value,!0!==r||null===c){const e=n+4*s,r=i.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,i=n;e!==s;++e,i+=4)a.copy(t[e]).applyMatrix4(r,o),a.normal.toArray(c,i),c[i+3]=a.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=s,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,s){const a=0!==t.length||e||0!==n||r;return r=e,i=h(t,s,0),n=t.length,a},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(e,a,o){const u=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,m=t.get(e);if(!r||null===u||0===u.length||s&&!p)s?h(null):c();else{const t=s?0:n,e=4*t;let r=m.clippingState||null;l.value=r,r=h(u,a,e,o);for(let t=0;t!==e;++t)r[t]=i[t];m.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function Pn(t){let e=new WeakMap;function i(t,e){return e===a?t.mapping=r:e===o&&(t.mapping=s),t}function n(t){const i=t.target;i.removeEventListener("dispose",n);const r=e.get(i);void 0!==r&&(e.delete(i),r.dispose())}return{get:function(r){if(r&&r.isTexture&&!1===r.isRenderTargetTexture){const s=r.mapping;if(s===a||s===o){if(e.has(r)){return i(e.get(r).texture,r.mapping)}{const s=r.image;if(s&&s.height>0){const a=new un(s.height/2);return a.fromEquirectangularTexture(t,r),e.set(r,a),r.addEventListener("dispose",n),i(a.texture,r.mapping)}return null}}}return r},dispose:function(){e=new WeakMap}}}class In extends an{constructor(t=-1,e=1,i=1,n=-1,r=.1,s=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=n,this.near=r,this.far=s,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,i,n,r,s){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let r=i-t,s=i+t,a=n+e,o=n-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,s=r+t*this.view.width,a-=e*this.view.offsetY,o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}const Dn=[.125,.215,.35,.446,.526,.582],Nn=20,On=new In,zn=new qt;let Un=null;const Bn=(1+Math.sqrt(5))/2,Fn=1/Bn,kn=[new re(1,1,1),new re(-1,1,1),new re(1,1,-1),new re(-1,1,-1),new re(0,Bn,Fn),new re(0,Bn,-Fn),new re(Fn,0,Bn),new re(-Fn,0,Bn),new re(Bn,Fn,0),new re(-Bn,Fn,0)];class Gn{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,i=.1,n=100){Un=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,i,n,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=jn(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Wn(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Un),t.scissorTest=!1,Hn(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===r||t.mapping===s?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Un=this._renderer.getRenderTarget();const i=e||this._allocateTargets();return this._textureToCubeUV(t,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,i={magFilter:f,minFilter:f,generateMipmaps:!1,type:b,format:S,encoding:at,depthBuffer:!1},n=Vn(t,e,i);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Vn(t,e,i);const{_lodMax:n}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],i=[],n=[];let r=t;const s=t-4+1+Dn.length;for(let a=0;a<s;a++){const s=Math.pow(2,r);i.push(s);let o=1/s;a>t-4?o=Dn[a-t+4-1]:0===a&&(o=0),n.push(o);const l=1/(s-2),c=-l,h=1+l,u=[c,c,h,c,h,h,c,c,h,h,c,h],d=6,p=6,m=3,f=2,g=1,v=new Float32Array(m*p*d),x=new Float32Array(f*p*d),_=new Float32Array(g*p*d);for(let t=0;t<d;t++){const e=t%3*2/3-1,i=t>2?0:-1,n=[e,i,0,e+2/3,i,0,e+2/3,i+1,0,e,i,0,e+2/3,i+1,0,e,i+1,0];v.set(n,m*p*t),x.set(u,f*p*t);const r=[t,t,t,t,t,t];_.set(r,g*p*t)}const y=new Di;y.setAttribute("position",new bi(v,m)),y.setAttribute("uv",new bi(x,f)),y.setAttribute("faceIndex",new bi(_,g)),e.push(y),r>4&&r--}return{lodPlanes:e,sizeLods:i,sigmas:n}}(n)),this._blurMaterial=function(t,e,i){const n=new Float32Array(Nn),r=new re(0,1,0);return new sn({name:"SphericalGaussianBlur",defines:{n:Nn,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/i,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:qn(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(n,t,e)}return n}_compileMaterial(t){const e=new Ki(this._lodPlanes[0],t);this._renderer.compile(e,On)}_sceneToCubeUV(t,e,i,n){const r=new on(90,1,e,i),s=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(zn),o.toneMapping=0,o.autoClear=!1;const h=new _i({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),u=new Ki(new Qi,h);let d=!1;const p=t.background;p?p.isColor&&(h.color.copy(p),t.background=null,d=!0):(h.color.copy(zn),d=!0);for(let e=0;e<6;e++){const i=e%3;0===i?(r.up.set(0,s[e],0),r.lookAt(a[e],0,0)):1===i?(r.up.set(0,0,s[e]),r.lookAt(0,a[e],0)):(r.up.set(0,s[e],0),r.lookAt(0,0,a[e]));const l=this._cubeSize;Hn(n,i*l,e>2?l:0,l,l),o.setRenderTarget(n),d&&o.render(u,r),o.render(t,r)}u.geometry.dispose(),u.material.dispose(),o.toneMapping=c,o.autoClear=l,t.background=p}_textureToCubeUV(t,e){const i=this._renderer,n=t.mapping===r||t.mapping===s;n?(null===this._cubemapMaterial&&(this._cubemapMaterial=jn()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=Wn());const a=n?this._cubemapMaterial:this._equirectMaterial,o=new Ki(this._lodPlanes[0],a);a.uniforms.envMap.value=t;const l=this._cubeSize;Hn(e,0,0,3*l,2*l),i.setRenderTarget(e),i.render(o,On)}_applyPMREM(t){const e=this._renderer,i=e.autoClear;e.autoClear=!1;for(let e=1;e<this._lodPlanes.length;e++){const i=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]),n=kn[(e-1)%kn.length];this._blur(t,e-1,e,i,n)}e.autoClear=i}_blur(t,e,i,n,r){const s=this._pingPongRenderTarget;this._halfBlur(t,s,e,i,n,"latitudinal",r),this._halfBlur(s,t,i,i,n,"longitudinal",r)}_halfBlur(t,e,i,n,r,s,a){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==s&&"longitudinal"!==s&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new Ki(this._lodPlanes[n],l),h=l.uniforms,u=this._sizeLods[i]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,m=isFinite(r)?1+Math.floor(3*p):Nn;m>Nn&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);const f=[];let g=0;for(let t=0;t<Nn;++t){const e=t/p,i=Math.exp(-e*e/2);f.push(i),0===t?g+=i:t<m&&(g+=2*i)}for(let t=0;t<f.length;t++)f[t]=f[t]/g;h.envMap.value=t.texture,h.samples.value=m,h.weights.value=f,h.latitudinal.value="latitudinal"===s,a&&(h.poleAxis.value=a);const{_lodMax:v}=this;h.dTheta.value=d,h.mipInt.value=v-i;const x=this._sizeLods[n];Hn(e,3*x*(n>v-4?n-v+4:0),4*(this._cubeSize-x),3*x,2*x),o.setRenderTarget(e),o.render(c,On)}}function Vn(t,e,i){const n=new te(t,e,i);return n.texture.mapping=l,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function Hn(t,e,i,n,r){t.viewport.set(e,i,n,r),t.scissor.set(e,i,n,r)}function Wn(){return new sn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:qn(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function jn(){return new sn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:qn(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function qn(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function Xn(t){let e=new WeakMap,i=null;function n(t){const i=t.target;i.removeEventListener("dispose",n);const r=e.get(i);void 0!==r&&(e.delete(i),r.dispose())}return{get:function(l){if(l&&l.isTexture){const c=l.mapping,h=c===a||c===o,u=c===r||c===s;if(h||u){if(l.isRenderTargetTexture&&!0===l.needsPMREMUpdate){l.needsPMREMUpdate=!1;let n=e.get(l);return null===i&&(i=new Gn(t)),n=h?i.fromEquirectangular(l,n):i.fromCubemap(l,n),e.set(l,n),n.texture}if(e.has(l))return e.get(l).texture;{const r=l.image;if(h&&r&&r.height>0||u&&r&&function(t){let e=0;const i=6;for(let n=0;n<i;n++)void 0!==t[n]&&e++;return e===i}(r)){null===i&&(i=new Gn(t));const r=h?i.fromEquirectangular(l):i.fromCubemap(l);return e.set(l,r),l.addEventListener("dispose",n),r.texture}return null}}}return l},dispose:function(){e=new WeakMap,null!==i&&(i.dispose(),i=null)}}}function Yn(t){const e={};function i(i){if(void 0!==e[i])return e[i];let n;switch(i){case"WEBGL_depth_texture":n=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=t.getExtension(i)}return e[i]=n,n}return{has:function(t){return null!==i(t)},init:function(t){t.isWebGL2?i("EXT_color_buffer_float"):(i("WEBGL_depth_texture"),i("OES_texture_float"),i("OES_texture_half_float"),i("OES_texture_half_float_linear"),i("OES_standard_derivatives"),i("OES_element_index_uint"),i("OES_vertex_array_object"),i("ANGLE_instanced_arrays")),i("OES_texture_float_linear"),i("EXT_color_buffer_half_float"),i("WEBGL_multisampled_render_to_texture")},get:function(t){const e=i(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function Zn(t,e,i,n){const r={},s=new WeakMap;function a(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener("dispose",a),delete r[o.id];const l=s.get(o);l&&(e.remove(l),s.delete(o)),n.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,i.memory.geometries--}function o(t){const i=[],n=t.index,r=t.attributes.position;let a=0;if(null!==n){const t=n.array;a=n.version;for(let e=0,n=t.length;e<n;e+=3){const n=t[e+0],r=t[e+1],s=t[e+2];i.push(n,r,r,s,s,n)}}else{const t=r.array;a=r.version;for(let e=0,n=t.length/3-1;e<n;e+=3){const t=e+0,n=e+1,r=e+2;i.push(t,n,n,r,r,t)}}const o=new(It(i)?Si:wi)(i,1);o.version=a;const l=s.get(t);l&&e.remove(l),s.set(t,o)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",a),r[e.id]=!0,i.memory.geometries++),e},update:function(t){const i=t.attributes;for(const t in i)e.update(i[t],34962);const n=t.morphAttributes;for(const t in n){const i=n[t];for(let t=0,n=i.length;t<n;t++)e.update(i[t],34962)}},getWireframeAttribute:function(t){const e=s.get(t);if(e){const i=t.index;null!==i&&e.version<i.version&&o(t)}else o(t);return s.get(t)}}}function Jn(t,e,i,n){const r=n.isWebGL2;let s,a,o;this.setMode=function(t){s=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,n){t.drawElements(s,n,a,e*o),i.update(n,s,1)},this.renderInstances=function(n,l,c){if(0===c)return;let h,u;if(r)h=t,u="drawElementsInstanced";else if(h=e.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[u](s,l,a,n*o,c),i.update(l,s,c)}}function Kn(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,i,n){switch(e.calls++,i){case 4:e.triangles+=n*(t/3);break;case 1:e.lines+=n*(t/2);break;case 3:e.lines+=n*(t-1);break;case 2:e.lines+=n*t;break;case 0:e.points+=n*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function $n(t,e){return t[0]-e[0]}function Qn(t,e){return Math.abs(e[1])-Math.abs(t[1])}function tr(t,e,i){const n={},r=new Float32Array(8),s=new WeakMap,a=new Qt,o=[];for(let t=0;t<8;t++)o[t]=[t,0];return{update:function(l,c,h,u){const d=l.morphTargetInfluences;if(!0===e.isWebGL2){const p=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,m=void 0!==p?p.length:0;let f=s.get(c);if(void 0===f||f.count!==m){void 0!==f&&f.texture.dispose();const x=void 0!==c.morphAttributes.position,_=void 0!==c.morphAttributes.normal,y=void 0!==c.morphAttributes.color,b=c.morphAttributes.position||[],w=c.morphAttributes.normal||[],S=c.morphAttributes.color||[];let T=0;!0===x&&(T=1),!0===_&&(T=2),!0===y&&(T=3);let A=c.attributes.position.count*T,E=1;A>e.maxTextureSize&&(E=Math.ceil(A/e.maxTextureSize),A=e.maxTextureSize);const C=new Float32Array(A*E*4*m),L=new ee(C,A,E,m);L.type=M,L.needsUpdate=!0;const R=4*T;for(let I=0;I<m;I++){const D=b[I],N=w[I],O=S[I],z=A*E*4*I;for(let U=0;U<D.count;U++){const B=U*R;!0===x&&(a.fromBufferAttribute(D,U),C[z+B+0]=a.x,C[z+B+1]=a.y,C[z+B+2]=a.z,C[z+B+3]=0),!0===_&&(a.fromBufferAttribute(N,U),C[z+B+4]=a.x,C[z+B+5]=a.y,C[z+B+6]=a.z,C[z+B+7]=0),!0===y&&(a.fromBufferAttribute(O,U),C[z+B+8]=a.x,C[z+B+9]=a.y,C[z+B+10]=a.z,C[z+B+11]=4===O.itemSize?a.w:1)}}function P(){L.dispose(),s.delete(c),c.removeEventListener("dispose",P)}f={count:m,texture:L,size:new Lt(A,E)},s.set(c,f),c.addEventListener("dispose",P)}let g=0;for(let F=0;F<d.length;F++)g+=d[F];const v=c.morphTargetsRelative?1:1-g;u.getUniforms().setValue(t,"morphTargetBaseInfluence",v),u.getUniforms().setValue(t,"morphTargetInfluences",d),u.getUniforms().setValue(t,"morphTargetsTexture",f.texture,i),u.getUniforms().setValue(t,"morphTargetsTextureSize",f.size)}else{const k=void 0===d?0:d.length;let G=n[c.id];if(void 0===G||G.length!==k){G=[];for(let q=0;q<k;q++)G[q]=[q,0];n[c.id]=G}for(let X=0;X<k;X++){const Y=G[X];Y[0]=X,Y[1]=d[X]}G.sort(Qn);for(let Z=0;Z<8;Z++)Z<k&&G[Z][1]?(o[Z][0]=G[Z][0],o[Z][1]=G[Z][1]):(o[Z][0]=Number.MAX_SAFE_INTEGER,o[Z][1]=0);o.sort($n);const V=c.morphAttributes.position,H=c.morphAttributes.normal;let W=0;for(let J=0;J<8;J++){const K=o[J],$=K[0],Q=K[1];$!==Number.MAX_SAFE_INTEGER&&Q?(V&&c.getAttribute("morphTarget"+J)!==V[$]&&c.setAttribute("morphTarget"+J,V[$]),H&&c.getAttribute("morphNormal"+J)!==H[$]&&c.setAttribute("morphNormal"+J,H[$]),r[J]=Q,W+=Q):(V&&!0===c.hasAttribute("morphTarget"+J)&&c.deleteAttribute("morphTarget"+J),H&&!0===c.hasAttribute("morphNormal"+J)&&c.deleteAttribute("morphNormal"+J),r[J]=0)}const j=c.morphTargetsRelative?1:1-W;u.getUniforms().setValue(t,"morphTargetBaseInfluence",j),u.getUniforms().setValue(t,"morphTargetInfluences",r)}}}}function er(t,e,i,n){let r=new WeakMap;function s(t){const e=t.target;e.removeEventListener("dispose",s),i.remove(e.instanceMatrix),null!==e.instanceColor&&i.remove(e.instanceColor)}return{update:function(t){const a=n.render.frame,o=t.geometry,l=e.get(t,o);return r.get(l)!==a&&(e.update(l),r.set(l,a)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",s)&&t.addEventListener("dispose",s),i.update(t.instanceMatrix,34962),null!==t.instanceColor&&i.update(t.instanceColor,34962)),l},dispose:function(){r=new WeakMap}}}const ir=new $t,nr=new ee,rr=new ie,sr=new hn,ar=[],or=[],lr=new Float32Array(16),cr=new Float32Array(9),hr=new Float32Array(4);function ur(t,e,i){const n=t[0];if(n<=0||n>0)return t;const r=e*i;let s=ar[r];if(void 0===s&&(s=new Float32Array(r),ar[r]=s),0!==e){n.toArray(s,0);for(let n=1,r=0;n!==e;++n)r+=i,t[n].toArray(s,r)}return s}function dr(t,e){if(t.length!==e.length)return!1;for(let i=0,n=t.length;i<n;i++)if(t[i]!==e[i])return!1;return!0}function pr(t,e){for(let i=0,n=e.length;i<n;i++)t[i]=e[i]}function mr(t,e){let i=or[e];void 0===i&&(i=new Int32Array(e),or[e]=i);for(let n=0;n!==e;++n)i[n]=t.allocateTextureUnit();return i}function fr(t,e){const i=this.cache;i[0]!==e&&(t.uniform1f(this.addr,e),i[0]=e)}function gr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(dr(i,e))return;t.uniform2fv(this.addr,e),pr(i,e)}}function vr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else if(void 0!==e.r)i[0]===e.r&&i[1]===e.g&&i[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),i[0]=e.r,i[1]=e.g,i[2]=e.b);else{if(dr(i,e))return;t.uniform3fv(this.addr,e),pr(i,e)}}function xr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(dr(i,e))return;t.uniform4fv(this.addr,e),pr(i,e)}}function _r(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(dr(i,e))return;t.uniformMatrix2fv(this.addr,!1,e),pr(i,e)}else{if(dr(i,n))return;hr.set(n),t.uniformMatrix2fv(this.addr,!1,hr),pr(i,n)}}function yr(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(dr(i,e))return;t.uniformMatrix3fv(this.addr,!1,e),pr(i,e)}else{if(dr(i,n))return;cr.set(n),t.uniformMatrix3fv(this.addr,!1,cr),pr(i,n)}}function Mr(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(dr(i,e))return;t.uniformMatrix4fv(this.addr,!1,e),pr(i,e)}else{if(dr(i,n))return;lr.set(n),t.uniformMatrix4fv(this.addr,!1,lr),pr(i,n)}}function br(t,e){const i=this.cache;i[0]!==e&&(t.uniform1i(this.addr,e),i[0]=e)}function wr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2i(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(dr(i,e))return;t.uniform2iv(this.addr,e),pr(i,e)}}function Sr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3i(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else{if(dr(i,e))return;t.uniform3iv(this.addr,e),pr(i,e)}}function Tr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4i(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(dr(i,e))return;t.uniform4iv(this.addr,e),pr(i,e)}}function Ar(t,e){const i=this.cache;i[0]!==e&&(t.uniform1ui(this.addr,e),i[0]=e)}function Er(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2ui(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(dr(i,e))return;t.uniform2uiv(this.addr,e),pr(i,e)}}function Cr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3ui(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else{if(dr(i,e))return;t.uniform3uiv(this.addr,e),pr(i,e)}}function Lr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4ui(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(dr(i,e))return;t.uniform4uiv(this.addr,e),pr(i,e)}}function Rr(t,e,i){const n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture2D(e||ir,r)}function Pr(t,e,i){const n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture3D(e||rr,r)}function Ir(t,e,i){const n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTextureCube(e||sr,r)}function Dr(t,e,i){const n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture2DArray(e||nr,r)}function Nr(t,e){t.uniform1fv(this.addr,e)}function Or(t,e){const i=ur(e,this.size,2);t.uniform2fv(this.addr,i)}function zr(t,e){const i=ur(e,this.size,3);t.uniform3fv(this.addr,i)}function Ur(t,e){const i=ur(e,this.size,4);t.uniform4fv(this.addr,i)}function Br(t,e){const i=ur(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,i)}function Fr(t,e){const i=ur(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,i)}function kr(t,e){const i=ur(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,i)}function Gr(t,e){t.uniform1iv(this.addr,e)}function Vr(t,e){t.uniform2iv(this.addr,e)}function Hr(t,e){t.uniform3iv(this.addr,e)}function Wr(t,e){t.uniform4iv(this.addr,e)}function jr(t,e){t.uniform1uiv(this.addr,e)}function qr(t,e){t.uniform2uiv(this.addr,e)}function Xr(t,e){t.uniform3uiv(this.addr,e)}function Yr(t,e){t.uniform4uiv(this.addr,e)}function Zr(t,e,i){const n=this.cache,r=e.length,s=mr(i,r);dr(n,s)||(t.uniform1iv(this.addr,s),pr(n,s));for(let t=0;t!==r;++t)i.setTexture2D(e[t]||ir,s[t])}function Jr(t,e,i){const n=this.cache,r=e.length,s=mr(i,r);dr(n,s)||(t.uniform1iv(this.addr,s),pr(n,s));for(let t=0;t!==r;++t)i.setTexture3D(e[t]||rr,s[t])}function Kr(t,e,i){const n=this.cache,r=e.length,s=mr(i,r);dr(n,s)||(t.uniform1iv(this.addr,s),pr(n,s));for(let t=0;t!==r;++t)i.setTextureCube(e[t]||sr,s[t])}function $r(t,e,i){const n=this.cache,r=e.length,s=mr(i,r);dr(n,s)||(t.uniform1iv(this.addr,s),pr(n,s));for(let t=0;t!==r;++t)i.setTexture2DArray(e[t]||nr,s[t])}class Qr{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.setValue=function(t){switch(t){case 5126:return fr;case 35664:return gr;case 35665:return vr;case 35666:return xr;case 35674:return _r;case 35675:return yr;case 35676:return Mr;case 5124:case 35670:return br;case 35667:case 35671:return wr;case 35668:case 35672:return Sr;case 35669:case 35673:return Tr;case 5125:return Ar;case 36294:return Er;case 36295:return Cr;case 36296:return Lr;case 35678:case 36198:case 36298:case 36306:case 35682:return Rr;case 35679:case 36299:case 36307:return Pr;case 35680:case 36300:case 36308:case 36293:return Ir;case 36289:case 36303:case 36311:case 36292:return Dr}}(e.type)}}class ts{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Nr;case 35664:return Or;case 35665:return zr;case 35666:return Ur;case 35674:return Br;case 35675:return Fr;case 35676:return kr;case 5124:case 35670:return Gr;case 35667:case 35671:return Vr;case 35668:case 35672:return Hr;case 35669:case 35673:return Wr;case 5125:return jr;case 36294:return qr;case 36295:return Xr;case 36296:return Yr;case 35678:case 36198:case 36298:case 36306:case 35682:return Zr;case 35679:case 36299:case 36307:return Jr;case 35680:case 36300:case 36308:case 36293:return Kr;case 36289:case 36303:case 36311:case 36292:return $r}}(e.type)}}class es{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,i){const n=this.seq;for(let r=0,s=n.length;r!==s;++r){const s=n[r];s.setValue(t,e[s.id],i)}}}const is=/(\w+)(\])?(\[|\.)?/g;function ns(t,e){t.seq.push(e),t.map[e.id]=e}function rs(t,e,i){const n=t.name,r=n.length;for(is.lastIndex=0;;){const s=is.exec(n),a=is.lastIndex;let o=s[1];const l="]"===s[2],c=s[3];if(l&&(o|=0),void 0===c||"["===c&&a+2===r){ns(i,void 0===c?new Qr(o,t,e):new ts(o,t,e));break}{let t=i.map[o];void 0===t&&(t=new es(o),ns(i,t)),i=t}}}class ss{constructor(t,e){this.seq=[],this.map={};const i=t.getProgramParameter(e,35718);for(let n=0;n<i;++n){const i=t.getActiveUniform(e,n);rs(i,t.getUniformLocation(e,i.name),this)}}setValue(t,e,i,n){const r=this.map[e];void 0!==r&&r.setValue(t,i,n)}setOptional(t,e,i){const n=e[i];void 0!==n&&this.setValue(t,i,n)}static upload(t,e,i,n){for(let r=0,s=e.length;r!==s;++r){const s=e[r],a=i[s.id];!1!==a.needsUpdate&&s.setValue(t,a.value,n)}}static seqWithValue(t,e){const i=[];for(let n=0,r=t.length;n!==r;++n){const r=t[n];r.id in e&&i.push(r)}return i}}function as(t,e,i){const n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),n}let os=0;function ls(t,e,i){const n=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();if(n&&""===r)return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const n=parseInt(s[1]);return i.toUpperCase()+"\n\n"+r+"\n\n"+function(t,e){const i=t.split("\n"),n=[],r=Math.max(e-6,0),s=Math.min(e+6,i.length);for(let t=r;t<s;t++){const r=t+1;n.push(`${r===e?">":" "} ${r}: ${i[t]}`)}return n.join("\n")}(t.getShaderSource(e),n)}return r}function cs(t,e){const i=function(t){switch(t){case at:return["Linear","( value )"];case ot:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+i[0]+i[1]+"; }"}function hs(t,e){let i;switch(e){case 1:i="Linear";break;case 2:i="Reinhard";break;case 3:i="OptimizedCineon";break;case 4:i="ACESFilmic";break;case 5:i="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),i="Linear"}return"vec3 "+t+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}function us(t){return""!==t}function ds(t,e){const i=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,i).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function ps(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const ms=/^[ \t]*#include +<([\w\d./]+)>/gm;function fs(t){return t.replace(ms,gs)}function gs(t,e){const i=bn[e];if(void 0===i)throw new Error("Can not resolve #include <"+e+">");return fs(i)}const vs=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function xs(t){return t.replace(vs,_s)}function _s(t,e,i,n){let r="";for(let t=parseInt(e);t<parseInt(i);t++)r+=n.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function ys(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function Ms(t,e,i,n){const a=t.getContext(),o=i.defines;let c=i.vertexShader,h=i.fragmentShader;const u=function(t){let e="SHADOWMAP_TYPE_BASIC";return 1===t.shadowMapType?e="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?e="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(e="SHADOWMAP_TYPE_VSM"),e}(i),d=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case r:case s:e="ENVMAP_TYPE_CUBE";break;case l:e="ENVMAP_TYPE_CUBE_UV"}return e}(i),p=function(t){let e="ENVMAP_MODE_REFLECTION";t.envMap&&t.envMapMode===s&&(e="ENVMAP_MODE_REFRACTION");return e}(i),m=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:e="ENVMAP_BLENDING_MULTIPLY";break;case 1:e="ENVMAP_BLENDING_MIX";break;case 2:e="ENVMAP_BLENDING_ADD"}return e}(i),f=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const i=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,i),112)),texelHeight:n,maxMip:i}}(i),g=i.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUVHeight||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(us).join("\n")}(i),v=function(t){const e=[];for(const i in t){const n=t[i];!1!==n&&e.push("#define "+i+" "+n)}return e.join("\n")}(o),x=a.createProgram();let _,y,M=i.glslVersion?"#version "+i.glslVersion+"\n":"";i.isRawShaderMaterial?(_=[v].filter(us).join("\n"),_.length>0&&(_+="\n"),y=[g,v].filter(us).join("\n"),y.length>0&&(y+="\n")):(_=[ys(i),"#define SHADER_NAME "+i.shaderName,v,i.instancing?"#define USE_INSTANCING":"",i.instancingColor?"#define USE_INSTANCING_COLOR":"",i.supportsVertexTextures?"#define VERTEX_TEXTURES":"",i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+p:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.normalMap&&i.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.displacementMap&&i.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",i.specularColorMap?"#define USE_SPECULARCOLORMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.sheenColorMap?"#define USE_SHEENCOLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUvs?"#define USE_UV":"",i.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&!1===i.flatShading?"#define USE_MORPHNORMALS":"",i.morphColors&&i.isWebGL2?"#define USE_MORPHCOLORS":"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+i.morphTextureStride:"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_COUNT "+i.morphTargetsCount:"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+u:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(us).join("\n"),y=[g,ys(i),"#define SHADER_NAME "+i.shaderName,v,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+d:"",i.envMap?"#define "+p:"",i.envMap?"#define "+m:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.normalMap&&i.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",i.clearcoat?"#define USE_CLEARCOAT":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescence?"#define USE_IRIDESCENCE":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",i.specularColorMap?"#define USE_SPECULARCOLORMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaTest?"#define USE_ALPHATEST":"",i.sheen?"#define USE_SHEEN":"",i.sheenColorMap?"#define USE_SHEENCOLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors||i.instancingColor?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUvs?"#define USE_UV":"",i.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+u:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==i.toneMapping?"#define TONE_MAPPING":"",0!==i.toneMapping?bn.tonemapping_pars_fragment:"",0!==i.toneMapping?hs("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.opaque?"#define OPAQUE":"",bn.encodings_pars_fragment,cs("linearToOutputTexel",i.outputEncoding),i.useDepthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(us).join("\n")),c=fs(c),c=ds(c,i),c=ps(c,i),h=fs(h),h=ds(h,i),h=ps(h,i),c=xs(c),h=xs(h),i.isWebGL2&&!0!==i.isRawShaderMaterial&&(M="#version 300 es\n",_=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+_,y=["#define varying in",i.glslVersion===dt?"":"layout(location = 0) out highp vec4 pc_fragColor;",i.glslVersion===dt?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+y);const b=M+y+h,w=as(a,35633,M+_+c),S=as(a,35632,b);if(a.attachShader(x,w),a.attachShader(x,S),void 0!==i.index0AttributeName?a.bindAttribLocation(x,0,i.index0AttributeName):!0===i.morphTargets&&a.bindAttribLocation(x,0,"position"),a.linkProgram(x),t.debug.checkShaderErrors){const t=a.getProgramInfoLog(x).trim(),e=a.getShaderInfoLog(w).trim(),i=a.getShaderInfoLog(S).trim();let n=!0,r=!0;if(!1===a.getProgramParameter(x,35714)){n=!1;const e=ls(a,w,"vertex"),i=ls(a,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+a.getError()+" - VALIDATE_STATUS "+a.getProgramParameter(x,35715)+"\n\nProgram Info Log: "+t+"\n"+e+"\n"+i)}else""!==t?console.warn("THREE.WebGLProgram: Program Info Log:",t):""!==e&&""!==i||(r=!1);r&&(this.diagnostics={runnable:n,programLog:t,vertexShader:{log:e,prefix:_},fragmentShader:{log:i,prefix:y}})}let T,A;return a.deleteShader(w),a.deleteShader(S),this.getUniforms=function(){return void 0===T&&(T=new ss(a,x)),T},this.getAttributes=function(){return void 0===A&&(A=function(t,e){const i={},n=t.getProgramParameter(e,35721);for(let r=0;r<n;r++){const n=t.getActiveAttrib(e,r),s=n.name;let a=1;35674===n.type&&(a=2),35675===n.type&&(a=3),35676===n.type&&(a=4),i[s]={type:n.type,location:t.getAttribLocation(e,s),locationSize:a}}return i}(a,x)),A},this.destroy=function(){n.releaseStatesOfProgram(this),a.deleteProgram(x),this.program=void 0},this.name=i.shaderName,this.id=os++,this.cacheKey=e,this.usedTimes=1,this.program=x,this.vertexShader=w,this.fragmentShader=S,this}let bs=0;class ws{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,i=t.fragmentShader,n=this._getShaderStage(e),r=this._getShaderStage(i),s=this._getShaderCacheForMaterial(t);return!1===s.has(n)&&(s.add(n),n.usedTimes++),!1===s.has(r)&&(s.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let i=e.get(t);return void 0===i&&(i=new Set,e.set(t,i)),i}_getShaderStage(t){const e=this.shaderCache;let i=e.get(t);return void 0===i&&(i=new Ss(t),e.set(t,i)),i}}class Ss{constructor(t){this.id=bs++,this.code=t,this.usedTimes=0}}function Ts(t,e,i,n,r,s,a){const o=new je,c=new ws,h=[],u=r.isWebGL2,d=r.logarithmicDepthBuffer,p=r.vertexTextures;let m=r.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(s,o,h,g,v){const x=g.fog,_=v.geometry,y=s.isMeshStandardMaterial?g.environment:null,M=(s.isMeshStandardMaterial?i:e).get(s.envMap||y),b=M&&M.mapping===l?M.image.height:null,w=f[s.type];null!==s.precision&&(m=r.getMaxPrecision(s.precision),m!==s.precision&&console.warn("THREE.WebGLProgram.getParameters:",s.precision,"not supported, using",m,"instead."));const S=_.morphAttributes.position||_.morphAttributes.normal||_.morphAttributes.color,T=void 0!==S?S.length:0;let A,E,C,L,R=0;if(void 0!==_.morphAttributes.position&&(R=1),void 0!==_.morphAttributes.normal&&(R=2),void 0!==_.morphAttributes.color&&(R=3),w){const t=Sn[w];A=t.vertexShader,E=t.fragmentShader}else A=s.vertexShader,E=s.fragmentShader,c.update(s),C=c.getVertexShaderID(s),L=c.getFragmentShaderID(s);const P=t.getRenderTarget(),I=s.alphaTest>0,D=s.clearcoat>0,N=s.iridescence>0;return{isWebGL2:u,shaderID:w,shaderName:s.type,vertexShader:A,fragmentShader:E,defines:s.defines,customVertexShaderID:C,customFragmentShaderID:L,isRawShaderMaterial:!0===s.isRawShaderMaterial,glslVersion:s.glslVersion,precision:m,instancing:!0===v.isInstancedMesh,instancingColor:!0===v.isInstancedMesh&&null!==v.instanceColor,supportsVertexTextures:p,outputEncoding:null===P?t.outputEncoding:!0===P.isXRRenderTarget?P.texture.encoding:at,map:!!s.map,matcap:!!s.matcap,envMap:!!M,envMapMode:M&&M.mapping,envMapCubeUVHeight:b,lightMap:!!s.lightMap,aoMap:!!s.aoMap,emissiveMap:!!s.emissiveMap,bumpMap:!!s.bumpMap,normalMap:!!s.normalMap,objectSpaceNormalMap:1===s.normalMapType,tangentSpaceNormalMap:0===s.normalMapType,decodeVideoTexture:!!s.map&&!0===s.map.isVideoTexture&&s.map.encoding===ot,clearcoat:D,clearcoatMap:D&&!!s.clearcoatMap,clearcoatRoughnessMap:D&&!!s.clearcoatRoughnessMap,clearcoatNormalMap:D&&!!s.clearcoatNormalMap,iridescence:N,iridescenceMap:N&&!!s.iridescenceMap,iridescenceThicknessMap:N&&!!s.iridescenceThicknessMap,displacementMap:!!s.displacementMap,roughnessMap:!!s.roughnessMap,metalnessMap:!!s.metalnessMap,specularMap:!!s.specularMap,specularIntensityMap:!!s.specularIntensityMap,specularColorMap:!!s.specularColorMap,opaque:!1===s.transparent&&1===s.blending,alphaMap:!!s.alphaMap,alphaTest:I,gradientMap:!!s.gradientMap,sheen:s.sheen>0,sheenColorMap:!!s.sheenColorMap,sheenRoughnessMap:!!s.sheenRoughnessMap,transmission:s.transmission>0,transmissionMap:!!s.transmissionMap,thicknessMap:!!s.thicknessMap,combine:s.combine,vertexTangents:!!s.normalMap&&!!_.attributes.tangent,vertexColors:s.vertexColors,vertexAlphas:!0===s.vertexColors&&!!_.attributes.color&&4===_.attributes.color.itemSize,vertexUvs:!!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatMap||s.clearcoatRoughnessMap||s.clearcoatNormalMap||s.iridescenceMap||s.iridescenceThicknessMap||s.displacementMap||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheenColorMap||s.sheenRoughnessMap),uvsVertexOnly:!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatNormalMap||s.iridescenceMap||s.iridescenceThicknessMap||s.transmission>0||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheen>0||s.sheenColorMap||s.sheenRoughnessMap||!s.displacementMap),fog:!!x,useFog:!0===s.fog,fogExp2:x&&x.isFogExp2,flatShading:!!s.flatShading,sizeAttenuation:s.sizeAttenuation,logarithmicDepthBuffer:d,skinning:!0===v.isSkinnedMesh,morphTargets:void 0!==_.morphAttributes.position,morphNormals:void 0!==_.morphAttributes.normal,morphColors:void 0!==_.morphAttributes.color,morphTargetsCount:T,morphTextureStride:R,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:s.dithering,shadowMapEnabled:t.shadowMap.enabled&&h.length>0,shadowMapType:t.shadowMap.type,toneMapping:s.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:s.premultipliedAlpha,doubleSided:2===s.side,flipSided:1===s.side,useDepthPacking:!!s.depthPacking,depthPacking:s.depthPacking||0,index0AttributeName:s.index0AttributeName,extensionDerivatives:s.extensions&&s.extensions.derivatives,extensionFragDepth:s.extensions&&s.extensions.fragDepth,extensionDrawBuffers:s.extensions&&s.extensions.drawBuffers,extensionShaderTextureLOD:s.extensions&&s.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||n.has("EXT_shader_texture_lod"),customProgramCacheKey:s.customProgramCacheKey()}},getProgramCacheKey:function(e){const i=[];if(e.shaderID?i.push(e.shaderID):(i.push(e.customVertexShaderID),i.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)i.push(t),i.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(!function(t,e){t.push(e.precision),t.push(e.outputEncoding),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.combine),t.push(e.vertexUvs),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numSpotLightMaps),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.numSpotLightShadowsWithMaps),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection),t.push(e.depthPacking)}(i,e),function(t,e){o.disableAll(),e.isWebGL2&&o.enable(0);e.supportsVertexTextures&&o.enable(1);e.instancing&&o.enable(2);e.instancingColor&&o.enable(3);e.map&&o.enable(4);e.matcap&&o.enable(5);e.envMap&&o.enable(6);e.lightMap&&o.enable(7);e.aoMap&&o.enable(8);e.emissiveMap&&o.enable(9);e.bumpMap&&o.enable(10);e.normalMap&&o.enable(11);e.objectSpaceNormalMap&&o.enable(12);e.tangentSpaceNormalMap&&o.enable(13);e.clearcoat&&o.enable(14);e.clearcoatMap&&o.enable(15);e.clearcoatRoughnessMap&&o.enable(16);e.clearcoatNormalMap&&o.enable(17);e.iridescence&&o.enable(18);e.iridescenceMap&&o.enable(19);e.iridescenceThicknessMap&&o.enable(20);e.displacementMap&&o.enable(21);e.specularMap&&o.enable(22);e.roughnessMap&&o.enable(23);e.metalnessMap&&o.enable(24);e.gradientMap&&o.enable(25);e.alphaMap&&o.enable(26);e.alphaTest&&o.enable(27);e.vertexColors&&o.enable(28);e.vertexAlphas&&o.enable(29);e.vertexUvs&&o.enable(30);e.vertexTangents&&o.enable(31);e.uvsVertexOnly&&o.enable(32);t.push(o.mask),o.disableAll(),e.fog&&o.enable(0);e.useFog&&o.enable(1);e.flatShading&&o.enable(2);e.logarithmicDepthBuffer&&o.enable(3);e.skinning&&o.enable(4);e.morphTargets&&o.enable(5);e.morphNormals&&o.enable(6);e.morphColors&&o.enable(7);e.premultipliedAlpha&&o.enable(8);e.shadowMapEnabled&&o.enable(9);e.physicallyCorrectLights&&o.enable(10);e.doubleSided&&o.enable(11);e.flipSided&&o.enable(12);e.useDepthPacking&&o.enable(13);e.dithering&&o.enable(14);e.specularIntensityMap&&o.enable(15);e.specularColorMap&&o.enable(16);e.transmission&&o.enable(17);e.transmissionMap&&o.enable(18);e.thicknessMap&&o.enable(19);e.sheen&&o.enable(20);e.sheenColorMap&&o.enable(21);e.sheenRoughnessMap&&o.enable(22);e.decodeVideoTexture&&o.enable(23);e.opaque&&o.enable(24);t.push(o.mask)}(i,e),i.push(t.outputEncoding)),i.push(e.customProgramCacheKey),i.join()},getUniforms:function(t){const e=f[t.type];let i;if(e){const t=Sn[e];i=rn.clone(t.uniforms)}else i=t.uniforms;return i},acquireProgram:function(e,i){let n;for(let t=0,e=h.length;t<e;t++){const e=h[t];if(e.cacheKey===i){n=e,++n.usedTimes;break}}return void 0===n&&(n=new Ms(t,i,e,s),h.push(n)),n},releaseProgram:function(t){if(0==--t.usedTimes){const e=h.indexOf(t);h[e]=h[h.length-1],h.pop(),t.destroy()}},releaseShaderCache:function(t){c.remove(t)},programs:h,dispose:function(){c.dispose()}}}function As(){let t=new WeakMap;return{get:function(e){let i=t.get(e);return void 0===i&&(i={},t.set(e,i)),i},remove:function(e){t.delete(e)},update:function(e,i,n){t.get(e)[i]=n},dispose:function(){t=new WeakMap}}}function Es(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Cs(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Ls(){const t=[];let e=0;const i=[],n=[],r=[];function s(i,n,r,s,a,o){let l=t[e];return void 0===l?(l={id:i.id,object:i,geometry:n,material:r,groupOrder:s,renderOrder:i.renderOrder,z:a,group:o},t[e]=l):(l.id=i.id,l.object=i,l.geometry=n,l.material=r,l.groupOrder=s,l.renderOrder=i.renderOrder,l.z=a,l.group=o),e++,l}return{opaque:i,transmissive:n,transparent:r,init:function(){e=0,i.length=0,n.length=0,r.length=0},push:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?n.push(h):!0===a.transparent?r.push(h):i.push(h)},unshift:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?n.unshift(h):!0===a.transparent?r.unshift(h):i.unshift(h)},finish:function(){for(let i=e,n=t.length;i<n;i++){const e=t[i];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){i.length>1&&i.sort(t||Es),n.length>1&&n.sort(e||Cs),r.length>1&&r.sort(e||Cs)}}}function Rs(){let t=new WeakMap;return{get:function(e,i){const n=t.get(e);let r;return void 0===n?(r=new Ls,t.set(e,[r])):i>=n.length?(r=new Ls,n.push(r)):r=n[i],r},dispose:function(){t=new WeakMap}}}function Ps(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let i;switch(e.type){case"DirectionalLight":i={direction:new re,color:new qt};break;case"SpotLight":i={position:new re,direction:new re,color:new qt,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new re,color:new qt,distance:0,decay:0};break;case"HemisphereLight":i={direction:new re,skyColor:new qt,groundColor:new qt};break;case"RectAreaLight":i={color:new qt,position:new re,halfWidth:new re,halfHeight:new re}}return t[e.id]=i,i}}}let Is=0;function Ds(t,e){return(e.castShadow?2:0)-(t.castShadow?2:0)+(e.map?1:0)-(t.map?1:0)}function Ns(t,e){const i=new Ps,n=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let i;switch(e.type){case"DirectionalLight":case"SpotLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Lt};break;case"PointLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Lt,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=i,i}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let t=0;t<9;t++)r.probe.push(new re);const s=new re,a=new Ne,o=new Ne;return{setup:function(s,a){let o=0,l=0,c=0;for(let t=0;t<9;t++)r.probe[t].set(0,0,0);let h=0,u=0,d=0,p=0,m=0,f=0,g=0,v=0,x=0,_=0;s.sort(Ds);const y=!0!==a?Math.PI:1;for(let t=0,e=s.length;t<e;t++){const e=s[t],a=e.color,M=e.intensity,b=e.distance,w=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)o+=a.r*M*y,l+=a.g*M*y,c+=a.b*M*y;else if(e.isLightProbe)for(let t=0;t<9;t++)r.probe[t].addScaledVector(e.sh.coefficients[t],M);else if(e.isDirectionalLight){const t=i.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),e.castShadow){const t=e.shadow,i=n.get(e);i.shadowBias=t.bias,i.shadowNormalBias=t.normalBias,i.shadowRadius=t.radius,i.shadowMapSize=t.mapSize,r.directionalShadow[h]=i,r.directionalShadowMap[h]=w,r.directionalShadowMatrix[h]=e.shadow.matrix,f++}r.directional[h]=t,h++}else if(e.isSpotLight){const t=i.get(e);t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(a).multiplyScalar(M*y),t.distance=b,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,r.spot[d]=t;const s=e.shadow;if(e.map&&(r.spotLightMap[x]=e.map,x++,s.updateMatrices(e),e.castShadow&&_++),r.spotLightMatrix[d]=s.matrix,e.castShadow){const t=n.get(e);t.shadowBias=s.bias,t.shadowNormalBias=s.normalBias,t.shadowRadius=s.radius,t.shadowMapSize=s.mapSize,r.spotShadow[d]=t,r.spotShadowMap[d]=w,v++}d++}else if(e.isRectAreaLight){const t=i.get(e);t.color.copy(a).multiplyScalar(M),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),r.rectArea[p]=t,p++}else if(e.isPointLight){const t=i.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,i=n.get(e);i.shadowBias=t.bias,i.shadowNormalBias=t.normalBias,i.shadowRadius=t.radius,i.shadowMapSize=t.mapSize,i.shadowCameraNear=t.camera.near,i.shadowCameraFar=t.camera.far,r.pointShadow[u]=i,r.pointShadowMap[u]=w,r.pointShadowMatrix[u]=e.shadow.matrix,g++}r.point[u]=t,u++}else if(e.isHemisphereLight){const t=i.get(e);t.skyColor.copy(e.color).multiplyScalar(M*y),t.groundColor.copy(e.groundColor).multiplyScalar(M*y),r.hemi[m]=t,m++}}p>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(r.rectAreaLTC1=wn.LTC_FLOAT_1,r.rectAreaLTC2=wn.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=wn.LTC_HALF_1,r.rectAreaLTC2=wn.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=c;const M=r.hash;M.directionalLength===h&&M.pointLength===u&&M.spotLength===d&&M.rectAreaLength===p&&M.hemiLength===m&&M.numDirectionalShadows===f&&M.numPointShadows===g&&M.numSpotShadows===v&&M.numSpotMaps===x||(r.directional.length=h,r.spot.length=d,r.rectArea.length=p,r.point.length=u,r.hemi.length=m,r.directionalShadow.length=f,r.directionalShadowMap.length=f,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=v,r.spotShadowMap.length=v,r.directionalShadowMatrix.length=f,r.pointShadowMatrix.length=g,r.spotLightMatrix.length=v+x-_,r.spotLightMap.length=x,r.numSpotLightShadowsWithMaps=_,M.directionalLength=h,M.pointLength=u,M.spotLength=d,M.rectAreaLength=p,M.hemiLength=m,M.numDirectionalShadows=f,M.numPointShadows=g,M.numSpotShadows=v,M.numSpotMaps=x,r.version=Is++)},setupView:function(t,e){let i=0,n=0,l=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=r.directional[i];t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),i++}else if(d.isSpotLight){const t=r.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),l++}else if(d.isRectAreaLight){const t=r.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),o.identity(),a.copy(d.matrixWorld),a.premultiply(u),o.extractRotation(a),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(o),t.halfHeight.applyMatrix4(o),c++}else if(d.isPointLight){const t=r.point[n];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),n++}else if(d.isHemisphereLight){const t=r.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),h++}}},state:r}}function Os(t,e){const i=new Ns(t,e),n=[],r=[];return{init:function(){n.length=0,r.length=0},state:{lightsArray:n,shadowsArray:r,lights:i},setupLights:function(t){i.setup(n,t)},setupLightsView:function(t){i.setupView(n,t)},pushLight:function(t){n.push(t)},pushShadow:function(t){r.push(t)}}}function zs(t,e){let i=new WeakMap;return{get:function(n,r=0){const s=i.get(n);let a;return void 0===s?(a=new Os(t,e),i.set(n,[a])):r>=s.length?(a=new Os(t,e),s.push(a)):a=s[r],a},dispose:function(){i=new WeakMap}}}class Us extends xi{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class Bs extends xi{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new re,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function Fs(t,e,i){let n=new xn;const r=new Lt,s=new Lt,a=new Qt,o=new Us({depthPacking:3201}),l=new Bs,c={},h=i.maxTextureSize,u={0:1,1:0,2:2},p=new sn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Lt},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),m=p.clone();m.defines.HORIZONTAL_PASS=1;const f=new Di;f.setAttribute("position",new bi(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const g=new Ki(f,p),v=this;function x(i,n){const s=e.update(g);p.defines.VSM_SAMPLES!==i.blurSamples&&(p.defines.VSM_SAMPLES=i.blurSamples,m.defines.VSM_SAMPLES=i.blurSamples,p.needsUpdate=!0,m.needsUpdate=!0),null===i.mapPass&&(i.mapPass=new te(r.x,r.y)),p.uniforms.shadow_pass.value=i.map.texture,p.uniforms.resolution.value=i.mapSize,p.uniforms.radius.value=i.radius,t.setRenderTarget(i.mapPass),t.clear(),t.renderBufferDirect(n,null,s,p,g,null),m.uniforms.shadow_pass.value=i.mapPass.texture,m.uniforms.resolution.value=i.mapSize,m.uniforms.radius.value=i.radius,t.setRenderTarget(i.map),t.clear(),t.renderBufferDirect(n,null,s,m,g,null)}function _(e,i,n,r,s,a){let h=null;const d=!0===n.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(h=void 0!==d?d:!0===n.isPointLight?l:o,t.localClippingEnabled&&!0===i.clipShadows&&Array.isArray(i.clippingPlanes)&&0!==i.clippingPlanes.length||i.displacementMap&&0!==i.displacementScale||i.alphaMap&&i.alphaTest>0||i.map&&i.alphaTest>0){const t=h.uuid,e=i.uuid;let n=c[t];void 0===n&&(n={},c[t]=n);let r=n[e];void 0===r&&(r=h.clone(),n[e]=r),h=r}return h.visible=i.visible,h.wireframe=i.wireframe,h.side=3===a?null!==i.shadowSide?i.shadowSide:i.side:null!==i.shadowSide?i.shadowSide:u[i.side],h.alphaMap=i.alphaMap,h.alphaTest=i.alphaTest,h.map=i.map,h.clipShadows=i.clipShadows,h.clippingPlanes=i.clippingPlanes,h.clipIntersection=i.clipIntersection,h.displacementMap=i.displacementMap,h.displacementScale=i.displacementScale,h.displacementBias=i.displacementBias,h.wireframeLinewidth=i.wireframeLinewidth,h.linewidth=i.linewidth,!0===n.isPointLight&&!0===h.isMeshDistanceMaterial&&(h.referencePosition.setFromMatrixPosition(n.matrixWorld),h.nearDistance=r,h.farDistance=s),h}function y(i,r,s,a,o){if(!1===i.visible)return;if(i.layers.test(r.layers)&&(i.isMesh||i.isLine||i.isPoints)&&(i.castShadow||i.receiveShadow&&3===o)&&(!i.frustumCulled||n.intersectsObject(i))){i.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,i.matrixWorld);const n=e.update(i),r=i.material;if(Array.isArray(r)){const e=n.groups;for(let l=0,c=e.length;l<c;l++){const c=e[l],h=r[c.materialIndex];if(h&&h.visible){const e=_(i,h,a,s.near,s.far,o);t.renderBufferDirect(s,null,n,e,i,c)}}}else if(r.visible){const e=_(i,r,a,s.near,s.far,o);t.renderBufferDirect(s,null,n,e,i,null)}}const l=i.children;for(let t=0,e=l.length;t<e;t++)y(l[t],r,s,a,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,i,o){if(!1===v.enabled)return;if(!1===v.autoUpdate&&!1===v.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),c=t.getActiveCubeFace(),u=t.getActiveMipmapLevel(),p=t.state;p.setBlending(0),p.buffers.color.setClear(1,1,1,1),p.buffers.depth.setTest(!0),p.setScissorTest(!1);for(let l=0,c=e.length;l<c;l++){const c=e[l],u=c.shadow;if(void 0===u){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(!1===u.autoUpdate&&!1===u.needsUpdate)continue;r.copy(u.mapSize);const m=u.getFrameExtents();if(r.multiply(m),s.copy(u.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(s.x=Math.floor(h/m.x),r.x=s.x*m.x,u.mapSize.x=s.x),r.y>h&&(s.y=Math.floor(h/m.y),r.y=s.y*m.y,u.mapSize.y=s.y)),null===u.map){const t=3!==this.type?{minFilter:d,magFilter:d}:{};u.map=new te(r.x,r.y,t),u.map.texture.name=c.name+".shadowMap",u.camera.updateProjectionMatrix()}t.setRenderTarget(u.map),t.clear();const f=u.getViewportCount();for(let t=0;t<f;t++){const e=u.getViewport(t);a.set(s.x*e.x,s.y*e.y,s.x*e.z,s.y*e.w),p.viewport(a),u.updateMatrices(c,t),n=u.getFrustum(),y(i,o,u.camera,c,this.type)}!0!==u.isPointLightShadow&&3===this.type&&x(u,o),u.needsUpdate=!1}v.needsUpdate=!1,t.setRenderTarget(l,c,u)}}function ks(t,e,n){const r=n.isWebGL2;const s=new function(){let e=!1;const i=new Qt;let n=null;const r=new Qt(0,0,0,0);return{setMask:function(i){n===i||e||(t.colorMask(i,i,i,i),n=i)},setLocked:function(t){e=t},setClear:function(e,n,s,a,o){!0===o&&(e*=a,n*=a,s*=a),i.set(e,n,s,a),!1===r.equals(i)&&(t.clearColor(e,n,s,a),r.copy(i))},reset:function(){e=!1,n=null,r.set(-1,0,0,0)}}},a=new function(){let e=!1,i=null,n=null,r=null;return{setTest:function(t){t?G(2929):V(2929)},setMask:function(n){i===n||e||(t.depthMask(n),i=n)},setFunc:function(e){if(n!==e){switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:default:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517)}n=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,i=null,n=null,r=null}}},o=new function(){let e=!1,i=null,n=null,r=null,s=null,a=null,o=null,l=null,c=null;return{setTest:function(t){e||(t?G(2960):V(2960))},setMask:function(n){i===n||e||(t.stencilMask(n),i=n)},setFunc:function(e,i,a){n===e&&r===i&&s===a||(t.stencilFunc(e,i,a),n=e,r=i,s=a)},setOp:function(e,i,n){a===e&&o===i&&l===n||(t.stencilOp(e,i,n),a=e,o=i,l=n)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,i=null,n=null,r=null,s=null,a=null,o=null,l=null,c=null}}},l=new WeakMap,c=new WeakMap;let h={},u={},d=new WeakMap,p=[],m=null,f=!1,g=null,v=null,x=null,_=null,y=null,M=null,b=null,w=!1,S=null,T=null,A=null,E=null,C=null;const L=t.getParameter(35661);let R=!1,P=0;const I=t.getParameter(7938);-1!==I.indexOf("WebGL")?(P=parseFloat(/^WebGL (\d)/.exec(I)[1]),R=P>=1):-1!==I.indexOf("OpenGL ES")&&(P=parseFloat(/^OpenGL ES (\d)/.exec(I)[1]),R=P>=2);let D=null,N={};const O=t.getParameter(3088),z=t.getParameter(2978),U=(new Qt).fromArray(O),B=(new Qt).fromArray(z);function F(e,i,n){const r=new Uint8Array(4),s=t.createTexture();t.bindTexture(e,s),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<n;e++)t.texImage2D(i+e,0,6408,1,1,0,6408,5121,r);return s}const k={};function G(e){!0!==h[e]&&(t.enable(e),h[e]=!0)}function V(e){!1!==h[e]&&(t.disable(e),h[e]=!1)}k[3553]=F(3553,3553,1),k[34067]=F(34067,34069,6),s.setClear(0,0,0,1),a.setClear(1),o.setClear(0),G(2929),a.setFunc(3),q(!1),X(1),G(2884),j(0);const H={[i]:32774,101:32778,102:32779};if(r)H[103]=32775,H[104]=32776;else{const t=e.get("EXT_blend_minmax");null!==t&&(H[103]=t.MIN_EXT,H[104]=t.MAX_EXT)}const W={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function j(e,n,r,s,a,o,l,c){if(0!==e){if(!1===f&&(G(3042),f=!0),5===e)a=a||n,o=o||r,l=l||s,n===v&&a===y||(t.blendEquationSeparate(H[n],H[a]),v=n,y=a),r===x&&s===_&&o===M&&l===b||(t.blendFuncSeparate(W[r],W[s],W[o],W[l]),x=r,_=s,M=o,b=l),g=e,w=!1;else if(e!==g||c!==w){if(v===i&&y===i||(t.blendEquation(32774),v=i,y=i),c)switch(e){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}x=null,_=null,M=null,b=null,g=e,w=c}}else!0===f&&(V(3042),f=!1)}function q(e){S!==e&&(e?t.frontFace(2304):t.frontFace(2305),S=e)}function X(e){0!==e?(G(2884),e!==T&&(1===e?t.cullFace(1029):2===e?t.cullFace(1028):t.cullFace(1032))):V(2884),T=e}function Y(e,i,n){e?(G(32823),E===i&&C===n||(t.polygonOffset(i,n),E=i,C=n)):V(32823)}return{buffers:{color:s,depth:a,stencil:o},enable:G,disable:V,bindFramebuffer:function(e,i){return u[e]!==i&&(t.bindFramebuffer(e,i),u[e]=i,r&&(36009===e&&(u[36160]=i),36160===e&&(u[36009]=i)),!0)},drawBuffers:function(i,r){let s=p,a=!1;if(i)if(s=d.get(r),void 0===s&&(s=[],d.set(r,s)),i.isWebGLMultipleRenderTargets){const t=i.texture;if(s.length!==t.length||36064!==s[0]){for(let e=0,i=t.length;e<i;e++)s[e]=36064+e;s.length=t.length,a=!0}}else 36064!==s[0]&&(s[0]=36064,a=!0);else 1029!==s[0]&&(s[0]=1029,a=!0);a&&(n.isWebGL2?t.drawBuffers(s):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(s))},useProgram:function(e){return m!==e&&(t.useProgram(e),m=e,!0)},setBlending:j,setMaterial:function(t,e){2===t.side?V(2884):G(2884);let i=1===t.side;e&&(i=!i),q(i),1===t.blending&&!1===t.transparent?j(0):j(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),s.setMask(t.colorWrite);const n=t.stencilWrite;o.setTest(n),n&&(o.setMask(t.stencilWriteMask),o.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),o.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),Y(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?G(32926):V(32926)},setFlipSided:q,setCullFace:X,setLineWidth:function(e){e!==A&&(R&&t.lineWidth(e),A=e)},setPolygonOffset:Y,setScissorTest:function(t){t?G(3089):V(3089)},activeTexture:function(e){void 0===e&&(e=33984+L-1),D!==e&&(t.activeTexture(e),D=e)},bindTexture:function(e,i,n){void 0===n&&(n=null===D?33984+L-1:D);let r=N[n];void 0===r&&(r={type:void 0,texture:void 0},N[n]=r),r.type===e&&r.texture===i||(D!==n&&(t.activeTexture(n),D=n),t.bindTexture(e,i||k[e]),r.type=e,r.texture=i)},unbindTexture:function(){const e=N[D];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexImage3D:function(){try{t.compressedTexImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},updateUBOMapping:function(e,i){let n=c.get(i);void 0===n&&(n=new WeakMap,c.set(i,n));let r=n.get(e);void 0===r&&(r=t.getUniformBlockIndex(i,e.name),n.set(e,r))},uniformBlockBinding:function(e,i){const n=c.get(i).get(e);l.get(e)!==n&&(t.uniformBlockBinding(i,n,e.__bindingPointIndex),l.set(e,n))},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage3D:function(){try{t.compressedTexSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===U.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),U.copy(e))},viewport:function(e){!1===B.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),B.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===r&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),h={},D=null,N={},u={},d=new WeakMap,p=[],m=null,f=!1,g=null,v=null,x=null,_=null,y=null,M=null,b=null,w=!1,S=null,T=null,A=null,E=null,C=null,U.set(0,0,t.canvas.width,t.canvas.height),B.set(0,0,t.canvas.width,t.canvas.height),s.reset(),a.reset(),o.reset()}}}function Gs(t,e,i,n,r,s,a){const o=r.isWebGL2,l=r.maxTextures,E=r.maxCubemapSize,C=r.maxTextureSize,L=r.maxSamples,R=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,P="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),I=new WeakMap;let D;const N=new WeakMap;let O=!1;try{O="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function z(t,e){return O?new OffscreenCanvas(t,e):Ot("canvas")}function U(t,e,i,n){let r=1;if((t.width>n||t.height>n)&&(r=n/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const n=e?Tt:Math.floor,s=n(r*t.width),a=n(r*t.height);void 0===D&&(D=z(s,a));const o=i?z(s,a):D;o.width=s,o.height=a;return o.getContext("2d").drawImage(t,0,0,s,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+s+"x"+a+")."),o}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function B(t){return wt(t.width)&&wt(t.height)}function F(t,e){return t.generateMipmaps&&e&&t.minFilter!==d&&t.minFilter!==f}function k(e){t.generateMipmap(e)}function G(i,n,r,s,a=!1){if(!1===o)return n;if(null!==i){if(void 0!==t[i])return t[i];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+i+"'")}let l=n;return 6403===n&&(5126===r&&(l=33326),5131===r&&(l=33325),5121===r&&(l=33321)),33319===n&&(5126===r&&(l=33328),5131===r&&(l=33327),5121===r&&(l=33323)),6408===n&&(5126===r&&(l=34836),5131===r&&(l=34842),5121===r&&(l=s===ot&&!1===a?35907:32856),32819===r&&(l=32854),32820===r&&(l=32855)),33325!==l&&33326!==l&&33327!==l&&33328!==l&&34842!==l&&34836!==l||e.get("EXT_color_buffer_float"),l}function V(t,e,i){return!0===F(t,i)||t.isFramebufferTexture&&t.minFilter!==d&&t.minFilter!==f?Math.log2(Math.max(e.width,e.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?e.mipmaps.length:1}function H(t){return t===d||t===p||t===m?9728:9729}function W(t){const e=t.target;e.removeEventListener("dispose",W),function(t){const e=n.get(t);if(void 0===e.__webglInit)return;const i=t.source,r=N.get(i);if(r){const n=r[e.__cacheKey];n.usedTimes--,0===n.usedTimes&&q(t),0===Object.keys(r).length&&N.delete(i)}n.remove(t)}(e),e.isVideoTexture&&I.delete(e)}function j(e){const i=e.target;i.removeEventListener("dispose",j),function(e){const i=e.texture,r=n.get(e),s=n.get(i);void 0!==s.__webglTexture&&(t.deleteTexture(s.__webglTexture),a.memory.textures--);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e]);else{if(t.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer)for(let e=0;e<r.__webglColorRenderbuffer.length;e++)r.__webglColorRenderbuffer[e]&&t.deleteRenderbuffer(r.__webglColorRenderbuffer[e]);r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer)}if(e.isWebGLMultipleRenderTargets)for(let e=0,r=i.length;e<r;e++){const r=n.get(i[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),a.memory.textures--),n.remove(i[e])}n.remove(i),n.remove(e)}(i)}function q(e){const i=n.get(e);t.deleteTexture(i.__webglTexture);const r=e.source;delete N.get(r)[i.__cacheKey],a.memory.textures--}let X=0;function Y(t,e){const r=n.get(t);if(t.isVideoTexture&&function(t){const e=a.render.frame;I.get(t)!==e&&(I.set(t,e),t.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&r.__version!==t.version){const i=t.image;if(null===i)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==i.complete)return void Q(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}i.bindTexture(3553,r.__webglTexture,33984+e)}const Z={[c]:10497,[h]:33071,[u]:33648},J={[d]:9728,[p]:9984,[m]:9986,[f]:9729,[g]:9985,[v]:9987};function K(i,s,a){if(a?(t.texParameteri(i,10242,Z[s.wrapS]),t.texParameteri(i,10243,Z[s.wrapT]),32879!==i&&35866!==i||t.texParameteri(i,32882,Z[s.wrapR]),t.texParameteri(i,10240,J[s.magFilter]),t.texParameteri(i,10241,J[s.minFilter])):(t.texParameteri(i,10242,33071),t.texParameteri(i,10243,33071),32879!==i&&35866!==i||t.texParameteri(i,32882,33071),s.wrapS===h&&s.wrapT===h||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(i,10240,H(s.magFilter)),t.texParameteri(i,10241,H(s.minFilter)),s.minFilter!==d&&s.minFilter!==f&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const a=e.get("EXT_texture_filter_anisotropic");if(s.type===M&&!1===e.has("OES_texture_float_linear"))return;if(!1===o&&s.type===b&&!1===e.has("OES_texture_half_float_linear"))return;(s.anisotropy>1||n.get(s).__currentAnisotropy)&&(t.texParameterf(i,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(s.anisotropy,r.getMaxAnisotropy())),n.get(s).__currentAnisotropy=s.anisotropy)}}function $(e,i){let n=!1;void 0===e.__webglInit&&(e.__webglInit=!0,i.addEventListener("dispose",W));const r=i.source;let s=N.get(r);void 0===s&&(s={},N.set(r,s));const o=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.wrapR||0),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.encoding),e.join()}(i);if(o!==e.__cacheKey){void 0===s[o]&&(s[o]={texture:t.createTexture(),usedTimes:0},a.memory.textures++,n=!0),s[o].usedTimes++;const r=s[e.__cacheKey];void 0!==r&&(s[e.__cacheKey].usedTimes--,0===r.usedTimes&&q(i)),e.__cacheKey=o,e.__webglTexture=s[o].texture}return n}function Q(e,r,a){let l=3553;(r.isDataArrayTexture||r.isCompressedArrayTexture)&&(l=35866),r.isData3DTexture&&(l=32879);const c=$(e,r),u=r.source;i.bindTexture(l,e.__webglTexture,33984+a);const p=n.get(u);if(u.version!==p.__version||!0===c){i.activeTexture(33984+a),t.pixelStorei(37440,r.flipY),t.pixelStorei(37441,r.premultiplyAlpha),t.pixelStorei(3317,r.unpackAlignment),t.pixelStorei(37443,0);const e=function(t){return!o&&(t.wrapS!==h||t.wrapT!==h||t.minFilter!==d&&t.minFilter!==f)}(r)&&!1===B(r.image);let n=U(r.image,e,!1,C);n=st(r,n);const m=B(n)||o,g=s.convert(r.format,r.encoding);let v,x=s.convert(r.type),b=G(r.internalFormat,g,x,r.encoding,r.isVideoTexture);K(l,r,m);const E=r.mipmaps,L=o&&!0!==r.isVideoTexture,R=void 0===p.__version||!0===c,P=V(r,n,m);if(r.isDepthTexture)b=6402,o?b=r.type===M?36012:r.type===y?33190:r.type===w?35056:33189:r.type===M&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),r.format===T&&6402===b&&r.type!==_&&r.type!==y&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=y,x=s.convert(r.type)),r.format===A&&6402===b&&(b=34041,r.type!==w&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=w,x=s.convert(r.type))),R&&(L?i.texStorage2D(3553,1,b,n.width,n.height):i.texImage2D(3553,0,b,n.width,n.height,0,g,x,null));else if(r.isDataTexture)if(E.length>0&&m){L&&R&&i.texStorage2D(3553,P,b,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)v=E[t],L?i.texSubImage2D(3553,t,0,0,v.width,v.height,g,x,v.data):i.texImage2D(3553,t,b,v.width,v.height,0,g,x,v.data);r.generateMipmaps=!1}else L?(R&&i.texStorage2D(3553,P,b,n.width,n.height),i.texSubImage2D(3553,0,0,0,n.width,n.height,g,x,n.data)):i.texImage2D(3553,0,b,n.width,n.height,0,g,x,n.data);else if(r.isCompressedTexture)if(r.isCompressedArrayTexture){L&&R&&i.texStorage3D(35866,P,b,E[0].width,E[0].height,n.depth);for(let t=0,e=E.length;t<e;t++)v=E[t],r.format!==S?null!==g?L?i.compressedTexSubImage3D(35866,t,0,0,0,v.width,v.height,n.depth,g,v.data,0,0):i.compressedTexImage3D(35866,t,b,v.width,v.height,n.depth,0,v.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):L?i.texSubImage3D(35866,t,0,0,0,v.width,v.height,n.depth,g,x,v.data):i.texImage3D(35866,t,b,v.width,v.height,n.depth,0,g,x,v.data)}else{L&&R&&i.texStorage2D(3553,P,b,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)v=E[t],r.format!==S?null!==g?L?i.compressedTexSubImage2D(3553,t,0,0,v.width,v.height,g,v.data):i.compressedTexImage2D(3553,t,b,v.width,v.height,0,v.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):L?i.texSubImage2D(3553,t,0,0,v.width,v.height,g,x,v.data):i.texImage2D(3553,t,b,v.width,v.height,0,g,x,v.data)}else if(r.isDataArrayTexture)L?(R&&i.texStorage3D(35866,P,b,n.width,n.height,n.depth),i.texSubImage3D(35866,0,0,0,0,n.width,n.height,n.depth,g,x,n.data)):i.texImage3D(35866,0,b,n.width,n.height,n.depth,0,g,x,n.data);else if(r.isData3DTexture)L?(R&&i.texStorage3D(32879,P,b,n.width,n.height,n.depth),i.texSubImage3D(32879,0,0,0,0,n.width,n.height,n.depth,g,x,n.data)):i.texImage3D(32879,0,b,n.width,n.height,n.depth,0,g,x,n.data);else if(r.isFramebufferTexture){if(R)if(L)i.texStorage2D(3553,P,b,n.width,n.height);else{let t=n.width,e=n.height;for(let n=0;n<P;n++)i.texImage2D(3553,n,b,t,e,0,g,x,null),t>>=1,e>>=1}}else if(E.length>0&&m){L&&R&&i.texStorage2D(3553,P,b,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)v=E[t],L?i.texSubImage2D(3553,t,0,0,g,x,v):i.texImage2D(3553,t,b,g,x,v);r.generateMipmaps=!1}else L?(R&&i.texStorage2D(3553,P,b,n.width,n.height),i.texSubImage2D(3553,0,0,0,g,x,n)):i.texImage2D(3553,0,b,g,x,n);F(r,m)&&k(l),p.__version=u.version,r.onUpdate&&r.onUpdate(r)}e.__version=r.version}function tt(e,r,a,o,l){const c=s.convert(a.format,a.encoding),h=s.convert(a.type),u=G(a.internalFormat,c,h,a.encoding);n.get(r).__hasExternalTextures||(32879===l||35866===l?i.texImage3D(l,0,u,r.width,r.height,r.depth,0,c,h,null):i.texImage2D(l,0,u,r.width,r.height,0,c,h,null)),i.bindFramebuffer(36160,e),rt(r)?R.framebufferTexture2DMultisampleEXT(36160,o,l,n.get(a).__webglTexture,0,nt(r)):(3553===l||l>=34069&&l<=34074)&&t.framebufferTexture2D(36160,o,l,n.get(a).__webglTexture,0),i.bindFramebuffer(36160,null)}function et(e,i,n){if(t.bindRenderbuffer(36161,e),i.depthBuffer&&!i.stencilBuffer){let r=33189;if(n||rt(i)){const e=i.depthTexture;e&&e.isDepthTexture&&(e.type===M?r=36012:e.type===y&&(r=33190));const n=nt(i);rt(i)?R.renderbufferStorageMultisampleEXT(36161,n,r,i.width,i.height):t.renderbufferStorageMultisample(36161,n,r,i.width,i.height)}else t.renderbufferStorage(36161,r,i.width,i.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(i.depthBuffer&&i.stencilBuffer){const r=nt(i);n&&!1===rt(i)?t.renderbufferStorageMultisample(36161,r,35056,i.width,i.height):rt(i)?R.renderbufferStorageMultisampleEXT(36161,r,35056,i.width,i.height):t.renderbufferStorage(36161,34041,i.width,i.height),t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===i.isWebGLMultipleRenderTargets?i.texture:[i.texture];for(let r=0;r<e.length;r++){const a=e[r],o=s.convert(a.format,a.encoding),l=s.convert(a.type),c=G(a.internalFormat,o,l,a.encoding),h=nt(i);n&&!1===rt(i)?t.renderbufferStorageMultisample(36161,h,c,i.width,i.height):rt(i)?R.renderbufferStorageMultisampleEXT(36161,h,c,i.width,i.height):t.renderbufferStorage(36161,c,i.width,i.height)}}t.bindRenderbuffer(36161,null)}function it(e){const r=n.get(e),s=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(s)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(i.bindFramebuffer(36160,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),Y(r.depthTexture,0);const s=n.get(r.depthTexture).__webglTexture,a=nt(r);if(r.depthTexture.format===T)rt(r)?R.framebufferTexture2DMultisampleEXT(36160,36096,3553,s,0,a):t.framebufferTexture2D(36160,36096,3553,s,0);else{if(r.depthTexture.format!==A)throw new Error("Unknown depthTexture format");rt(r)?R.framebufferTexture2DMultisampleEXT(36160,33306,3553,s,0,a):t.framebufferTexture2D(36160,33306,3553,s,0)}}(r.__webglFramebuffer,e)}else if(s){r.__webglDepthbuffer=[];for(let n=0;n<6;n++)i.bindFramebuffer(36160,r.__webglFramebuffer[n]),r.__webglDepthbuffer[n]=t.createRenderbuffer(),et(r.__webglDepthbuffer[n],e,!1)}else i.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),et(r.__webglDepthbuffer,e,!1);i.bindFramebuffer(36160,null)}function nt(t){return Math.min(L,t.samples)}function rt(t){const i=n.get(t);return o&&t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==i.__useRenderToTexture}function st(t,i){const n=t.encoding,r=t.format,s=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||t.format===pt||n!==at&&(n===ot?!1===o?!0===e.has("EXT_sRGB")&&r===S?(t.format=pt,t.minFilter=f,t.generateMipmaps=!1):i=Yt.sRGBToLinear(i):r===S&&s===x||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",n)),i}this.allocateTextureUnit=function(){const t=X;return t>=l&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+l),X+=1,t},this.resetTextureUnits=function(){X=0},this.setTexture2D=Y,this.setTexture2DArray=function(t,e){const r=n.get(t);t.version>0&&r.__version!==t.version?Q(r,t,e):i.bindTexture(35866,r.__webglTexture,33984+e)},this.setTexture3D=function(t,e){const r=n.get(t);t.version>0&&r.__version!==t.version?Q(r,t,e):i.bindTexture(32879,r.__webglTexture,33984+e)},this.setTextureCube=function(e,r){const a=n.get(e);e.version>0&&a.__version!==e.version?function(e,r,a){if(6!==r.image.length)return;const l=$(e,r),c=r.source;i.bindTexture(34067,e.__webglTexture,33984+a);const h=n.get(c);if(c.version!==h.__version||!0===l){i.activeTexture(33984+a),t.pixelStorei(37440,r.flipY),t.pixelStorei(37441,r.premultiplyAlpha),t.pixelStorei(3317,r.unpackAlignment),t.pixelStorei(37443,0);const e=r.isCompressedTexture||r.image[0].isCompressedTexture,n=r.image[0]&&r.image[0].isDataTexture,u=[];for(let t=0;t<6;t++)u[t]=e||n?n?r.image[t].image:r.image[t]:U(r.image[t],!1,!0,E),u[t]=st(r,u[t]);const d=u[0],p=B(d)||o,m=s.convert(r.format,r.encoding),f=s.convert(r.type),g=G(r.internalFormat,m,f,r.encoding),v=o&&!0!==r.isVideoTexture,x=void 0===h.__version||!0===l;let _,y=V(r,d,p);if(K(34067,r,p),e){v&&x&&i.texStorage2D(34067,y,g,d.width,d.height);for(let t=0;t<6;t++){_=u[t].mipmaps;for(let e=0;e<_.length;e++){const n=_[e];r.format!==S?null!==m?v?i.compressedTexSubImage2D(34069+t,e,0,0,n.width,n.height,m,n.data):i.compressedTexImage2D(34069+t,e,g,n.width,n.height,0,n.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):v?i.texSubImage2D(34069+t,e,0,0,n.width,n.height,m,f,n.data):i.texImage2D(34069+t,e,g,n.width,n.height,0,m,f,n.data)}}}else{_=r.mipmaps,v&&x&&(_.length>0&&y++,i.texStorage2D(34067,y,g,u[0].width,u[0].height));for(let t=0;t<6;t++)if(n){v?i.texSubImage2D(34069+t,0,0,0,u[t].width,u[t].height,m,f,u[t].data):i.texImage2D(34069+t,0,g,u[t].width,u[t].height,0,m,f,u[t].data);for(let e=0;e<_.length;e++){const n=_[e].image[t].image;v?i.texSubImage2D(34069+t,e+1,0,0,n.width,n.height,m,f,n.data):i.texImage2D(34069+t,e+1,g,n.width,n.height,0,m,f,n.data)}}else{v?i.texSubImage2D(34069+t,0,0,0,m,f,u[t]):i.texImage2D(34069+t,0,g,m,f,u[t]);for(let e=0;e<_.length;e++){const n=_[e];v?i.texSubImage2D(34069+t,e+1,0,0,m,f,n.image[t]):i.texImage2D(34069+t,e+1,g,m,f,n.image[t])}}}F(r,p)&&k(34067),h.__version=c.version,r.onUpdate&&r.onUpdate(r)}e.__version=r.version}(a,e,r):i.bindTexture(34067,a.__webglTexture,33984+r)},this.rebindTextures=function(t,e,i){const r=n.get(t);void 0!==e&&tt(r.__webglFramebuffer,t,t.texture,36064,3553),void 0!==i&&it(t)},this.setupRenderTarget=function(e){const l=e.texture,c=n.get(e),h=n.get(l);e.addEventListener("dispose",j),!0!==e.isWebGLMultipleRenderTargets&&(void 0===h.__webglTexture&&(h.__webglTexture=t.createTexture()),h.__version=l.version,a.memory.textures++);const u=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=B(e)||o;if(u){c.__webglFramebuffer=[];for(let e=0;e<6;e++)c.__webglFramebuffer[e]=t.createFramebuffer()}else{if(c.__webglFramebuffer=t.createFramebuffer(),d)if(r.drawBuffers){const i=e.texture;for(let e=0,r=i.length;e<r;e++){const r=n.get(i[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),a.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(o&&e.samples>0&&!1===rt(e)){const n=d?l:[l];c.__webglMultisampledFramebuffer=t.createFramebuffer(),c.__webglColorRenderbuffer=[],i.bindFramebuffer(36160,c.__webglMultisampledFramebuffer);for(let i=0;i<n.length;i++){const r=n[i];c.__webglColorRenderbuffer[i]=t.createRenderbuffer(),t.bindRenderbuffer(36161,c.__webglColorRenderbuffer[i]);const a=s.convert(r.format,r.encoding),o=s.convert(r.type),l=G(r.internalFormat,a,o,r.encoding,!0===e.isXRRenderTarget),h=nt(e);t.renderbufferStorageMultisample(36161,h,l,e.width,e.height),t.framebufferRenderbuffer(36160,36064+i,36161,c.__webglColorRenderbuffer[i])}t.bindRenderbuffer(36161,null),e.depthBuffer&&(c.__webglDepthRenderbuffer=t.createRenderbuffer(),et(c.__webglDepthRenderbuffer,e,!0)),i.bindFramebuffer(36160,null)}}if(u){i.bindTexture(34067,h.__webglTexture),K(34067,l,p);for(let t=0;t<6;t++)tt(c.__webglFramebuffer[t],e,l,36064,34069+t);F(l,p)&&k(34067),i.unbindTexture()}else if(d){const t=e.texture;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=n.get(s);i.bindTexture(3553,a.__webglTexture),K(3553,s,p),tt(c.__webglFramebuffer,e,s,36064+r,3553),F(s,p)&&k(3553)}i.unbindTexture()}else{let t=3553;(e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(o?t=e.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),i.bindTexture(t,h.__webglTexture),K(t,l,p),tt(c.__webglFramebuffer,e,l,36064,t),F(l,p)&&k(t),i.unbindTexture()}e.depthBuffer&&it(e)},this.updateRenderTargetMipmap=function(t){const e=B(t)||o,r=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let s=0,a=r.length;s<a;s++){const a=r[s];if(F(a,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,r=n.get(a).__webglTexture;i.bindTexture(e,r),k(e),i.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(o&&e.samples>0&&!1===rt(e)){const r=e.isWebGLMultipleRenderTargets?e.texture:[e.texture],s=e.width,a=e.height;let o=16384;const l=[],c=e.stencilBuffer?33306:36096,h=n.get(e),u=!0===e.isWebGLMultipleRenderTargets;if(u)for(let e=0;e<r.length;e++)i.bindFramebuffer(36160,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064+e,36161,null),i.bindFramebuffer(36160,h.__webglFramebuffer),t.framebufferTexture2D(36009,36064+e,3553,null,0);i.bindFramebuffer(36008,h.__webglMultisampledFramebuffer),i.bindFramebuffer(36009,h.__webglFramebuffer);for(let i=0;i<r.length;i++){l.push(36064+i),e.depthBuffer&&l.push(c);const d=void 0!==h.__ignoreDepthValues&&h.__ignoreDepthValues;if(!1===d&&(e.depthBuffer&&(o|=256),e.stencilBuffer&&(o|=1024)),u&&t.framebufferRenderbuffer(36008,36064,36161,h.__webglColorRenderbuffer[i]),!0===d&&(t.invalidateFramebuffer(36008,[c]),t.invalidateFramebuffer(36009,[c])),u){const e=n.get(r[i]).__webglTexture;t.framebufferTexture2D(36009,36064,3553,e,0)}t.blitFramebuffer(0,0,s,a,0,0,s,a,o,9728),P&&t.invalidateFramebuffer(36008,l)}if(i.bindFramebuffer(36008,null),i.bindFramebuffer(36009,null),u)for(let e=0;e<r.length;e++){i.bindFramebuffer(36160,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064+e,36161,h.__webglColorRenderbuffer[e]);const s=n.get(r[e]).__webglTexture;i.bindFramebuffer(36160,h.__webglFramebuffer),t.framebufferTexture2D(36009,36064+e,3553,s,0)}i.bindFramebuffer(36009,h.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=it,this.setupFrameBufferTexture=tt,this.useMultisampledRTT=rt}function Vs(t,e,i){const n=i.isWebGL2;return{convert:function(i,r=null){let s;if(i===x)return 5121;if(1017===i)return 32819;if(1018===i)return 32820;if(1010===i)return 5120;if(1011===i)return 5122;if(i===_)return 5123;if(1013===i)return 5124;if(i===y)return 5125;if(i===M)return 5126;if(i===b)return n?5131:(s=e.get("OES_texture_half_float"),null!==s?s.HALF_FLOAT_OES:null);if(1021===i)return 6406;if(i===S)return 6408;if(1024===i)return 6409;if(1025===i)return 6410;if(i===T)return 6402;if(i===A)return 34041;if(1022===i)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(i===pt)return s=e.get("EXT_sRGB"),null!==s?s.SRGB_ALPHA_EXT:null;if(1028===i)return 6403;if(1029===i)return 36244;if(1030===i)return 33319;if(1031===i)return 33320;if(1033===i)return 36249;if(i===E||i===C||i===L||i===R)if(r===ot){if(s=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===s)return null;if(i===E)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(i===C)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(i===L)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(i===R)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(s=e.get("WEBGL_compressed_texture_s3tc"),null===s)return null;if(i===E)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(i===C)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(i===L)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(i===R)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(i===P||i===I||i===D||i===N){if(s=e.get("WEBGL_compressed_texture_pvrtc"),null===s)return null;if(i===P)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(i===I)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(i===D)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(i===N)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===i)return s=e.get("WEBGL_compressed_texture_etc1"),null!==s?s.COMPRESSED_RGB_ETC1_WEBGL:null;if(i===O||i===z){if(s=e.get("WEBGL_compressed_texture_etc"),null===s)return null;if(i===O)return r===ot?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(i===z)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}if(i===U||i===B||i===F||i===k||i===G||i===V||i===H||i===W||i===j||i===q||i===X||i===Y||i===Z||i===J){if(s=e.get("WEBGL_compressed_texture_astc"),null===s)return null;if(i===U)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(i===B)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(i===F)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(i===k)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(i===G)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(i===V)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(i===H)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(i===W)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(i===j)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(i===q)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(i===X)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(i===Y)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(i===Z)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(i===J)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}if(i===K){if(s=e.get("EXT_texture_compression_bptc"),null===s)return null;if(i===K)return r===ot?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT}return i===w?n?34042:(s=e.get("WEBGL_depth_texture"),null!==s?s.UNSIGNED_INT_24_8_WEBGL:null):void 0!==t[i]?t[i]:null}}}class Hs extends si{constructor(){super(),this.isGroup=!0,this.type="Group"}}class Ws extends on{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}var js=new re,qs=new re;function Xs(t){var e,i,n=this,r=null,s=null,a=null,o=[],l=new Ne,c=new Ne,h=1,u="local-floor";"undefined"!=typeof window&&"VRFrameData"in window&&(s=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",y,!1));var d=new Ne,p=new ne,m=new re,f=new on;f.viewport=new Qt,f.layers.enable(1);var g=new on;g.viewport=new Qt,g.layers.enable(2);var v=new Ws([f,g]);v.layers.enable(1),v.layers.enable(2);var x,_=new Lt;function y(){if(n.isPresenting=null!==r&&!0===r.isPresenting){var s=r.getEyeParameters("left");e=2*s.renderWidth*h,i=s.renderHeight*h,x=t.getPixelRatio(),t.getSize(_),t.setDrawingBufferSize(e,i,1),f.viewport.set(0,0,e/2,i),g.viewport.set(e/2,0,e/2,i),T.start(),n.dispatchEvent({type:"sessionstart"})}else n.enabled&&t.setDrawingBufferSize(_.width,_.height,x),T.stop(),n.dispatchEvent({type:"sessionend"})}var M=[],b=[];function w(t){for(var e=navigator.getGamepads&&navigator.getGamepads(),i=0,n=e.length;i<n;i++){var r=e[i];if(r&&("Daydream Controller"===r.id||"Gear VR Controller"===r.id||"Oculus Go Controller"===r.id||"OpenVR Gamepad"===r.id||r.id.startsWith("Oculus Touch")||r.id.startsWith("HTC Vive Focus")||r.id.startsWith("Spatial Controller"))){var s=r.hand;if(0===t&&(""===s||"right"===s))return r;if(1===t&&"left"===s)return r}}}function S(t,n){null!==n&&4===n.length&&t.set(n[0]*e,n[1]*i,n[2]*e,n[3]*i)}this.enabled=!1,this.getController=function(t){var e=o[t];return void 0===e&&((e=new Hs).matrixAutoUpdate=!1,e.visible=!1,o[t]=e),e},this.getDevice=function(){return r},this.setDevice=function(t){void 0!==t&&(r=t),T.setContext(t)},this.setFramebufferScaleFactor=function(t){h=t},this.setReferenceSpaceType=function(t){u=t},this.setPoseTarget=function(t){void 0!==t&&(a=t)},this.cameraAutoUpdate=!0,this.updateCamera=function(t){var e="local-floor"===u?1.6:0;if(r.depthNear=t.near,r.depthFar=t.far,r.getFrameData(s),"local-floor"===u){var i=r.stageParameters;i?l.fromArray(i.sittingToStandingTransform):l.makeTranslation(0,e,0)}var n=s.pose,h=null!==a?a:t;h.matrix.copy(l),h.matrix.decompose(h.position,h.quaternion,h.scale),null!==n.orientation&&(p.fromArray(n.orientation),h.quaternion.multiply(p)),null!==n.position&&(p.setFromRotationMatrix(l),m.fromArray(n.position),m.applyQuaternion(p),h.position.add(m)),h.updateMatrixWorld();for(var x=h.children,_=0,y=x.length;_<y;_++)x[_].updateMatrixWorld(!0);f.near=t.near,g.near=t.near,f.far=t.far,g.far=t.far,f.matrixWorldInverse.fromArray(s.leftViewMatrix),g.matrixWorldInverse.fromArray(s.rightViewMatrix),c.copy(l).invert(),"local-floor"===u&&(f.matrixWorldInverse.multiply(c),g.matrixWorldInverse.multiply(c));var T=h.parent;null!==T&&(d.copy(T.matrixWorld).invert(),f.matrixWorldInverse.multiply(d),g.matrixWorldInverse.multiply(d)),f.matrixWorld.copy(f.matrixWorldInverse).invert(),g.matrixWorld.copy(g.matrixWorldInverse).invert(),f.projectionMatrix.fromArray(s.leftProjectionMatrix),g.projectionMatrix.fromArray(s.rightProjectionMatrix),function(t,e,i){js.setFromMatrixPosition(e.matrixWorld),qs.setFromMatrixPosition(i.matrixWorld);var n=js.distanceTo(qs),r=e.projectionMatrix.elements,s=i.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(s[8]+1)/s[0],d=a*h,p=a*u,m=n/(-h+u),f=m*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();var g=a+m,v=o+m,x=d-f,_=p+(n-f),y=l*o/v*g,M=c*o/v*g;t.projectionMatrix.makePerspective(x,_,y,M,g,v)}(v,f,g);var A=r.getLayers();if(A.length){var E=A[0];S(f.viewport,E.leftBounds),S(g.viewport,E.rightBounds)}return function(){for(var t=0;t<o.length;t++){var e=o[t],i=w(t);if(void 0!==i&&void 0!==i.pose){if(null===i.pose)return;var n=i.pose;!1===n.hasPosition&&e.position.set(.2,-.6,-.05),null!==n.position&&e.position.fromArray(n.position),null!==n.orientation&&e.quaternion.fromArray(n.orientation),e.matrix.compose(e.position,e.quaternion,e.scale),e.matrix.premultiply(l),e.matrix.decompose(e.position,e.quaternion,e.scale),e.matrixWorldNeedsUpdate=!0,e.visible=!0;var r="Daydream Controller"===i.id?0:1;void 0===M[t]&&(M[t]=!1),M[t]!==i.buttons[r].pressed&&(M[t]=i.buttons[r].pressed,!0===M[t]?e.dispatchEvent({type:"selectstart"}):(e.dispatchEvent({type:"selectend"}),e.dispatchEvent({type:"select"}))),r=2,void 0===b[t]&&(b[t]=!1),void 0!==i.buttons[r]&&b[t]!==i.buttons[r].pressed&&(b[t]=i.buttons[r].pressed,!0===b[t]?e.dispatchEvent({type:"squeezestart"}):(e.dispatchEvent({type:"squeezeend"}),e.dispatchEvent({type:"squeeze"})))}else e.visible=!1}}(),v},this.getCamera=function(){return v},this.getFoveation=function(){return 1},this.setFoveation=function(t){1!==t&&console.warn("THREE.WebVRManager: setFoveation() not used in WebVR.")},this.getStandingMatrix=function(){return l},this.isPresenting=!1;var T=new _n;this.setAnimationLoop=function(t){T.setAnimationLoop(t),this.isPresenting&&T.start()},this.submitFrame=function(){this.isPresenting&&r.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",y)},this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}Object.assign(Xs.prototype,{addEventListener:mt.prototype.addEventListener,hasEventListener:mt.prototype.hasEventListener,removeEventListener:mt.prototype.removeEventListener,dispatchEvent:mt.prototype.dispatchEvent});const Ys={type:"move"};class Zs{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new Hs,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Hs,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new re,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new re),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Hs,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new re,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new re),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const i of t.hand.values())this._getHandJoint(e,i)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,i){let n=null,r=null,s=null;const a=this._targetRay,o=this._grip,l=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState){if(l&&t.hand){s=!0;for(const n of t.hand.values()){const t=e.getJointPose(n,i),r=this._getHandJoint(l,n);null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=t.radius),r.visible=null!==t}const n=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],a=n.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&a>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!l.inputState.pinching&&a<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,i),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));null!==a&&(n=e.getPose(t.targetRaySpace,i),null===n&&null!==r&&(n=r),null!==n&&(a.matrix.fromArray(n.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),n.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(n.linearVelocity)):a.hasLinearVelocity=!1,n.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(n.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(Ys)))}return null!==a&&(a.visible=null!==n),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==s),this}_getHandJoint(t,e){if(void 0===t.joints[e.jointName]){const i=new Hs;i.matrixAutoUpdate=!1,i.visible=!1,t.joints[e.jointName]=i,t.add(i)}return t.joints[e.jointName]}}class Js extends $t{constructor(t,e,i,n,r,s,a,o,l,c){if((c=void 0!==c?c:T)!==T&&c!==A)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===i&&c===T&&(i=y),void 0===i&&c===A&&(i=w),super(null,n,r,s,a,o,c,i,l),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=void 0!==a?a:d,this.minFilter=void 0!==o?o:d,this.flipY=!1,this.generateMipmaps=!1}}class Ks extends mt{constructor(t,e){super();const i=this;let n=null,r=1;var s=null;let a=null,o="local-floor",l=null,c=null;var h=[];let u=null,d=null,p=null,m=null;const f=e.getContextAttributes();let g=null,v=null;const _=[],M=[],b=new Set,E=new Map,C=new on;C.layers.enable(1),C.viewport=new Qt;const L=new on;L.layers.enable(2),L.viewport=new Qt;const R=[C,L],P=new Ws;P.layers.enable(1),P.layers.enable(2);let I=null,D=null;function N(t){const e=M.indexOf(t.inputSource);if(-1===e)return;const i=_[e];void 0!==i&&i.dispatchEvent({type:t.type,data:t.inputSource})}function O(){n.removeEventListener("select",N),n.removeEventListener("selectstart",N),n.removeEventListener("selectend",N),n.removeEventListener("squeeze",N),n.removeEventListener("squeezestart",N),n.removeEventListener("squeezeend",N),n.removeEventListener("end",O),n.removeEventListener("inputsourceschange",z);for(let t=0;t<_.length;t++){const e=M[t];null!==e&&(M[t]=null,_[t].disconnect(e))}I=null,D=null,t.setRenderTarget(g),p=null,d=null,u=null,n=null,v=null,G.stop(),i.isPresenting=!1,i.dispatchEvent({type:"sessionend"})}function z(t){for(let e=0;e<t.removed.length;e++){const i=t.removed[e],n=M.indexOf(i);n>=0&&(M[n]=null,_[n].disconnect(i))}for(let e=0;e<t.added.length;e++){const i=t.added[e];let n=M.indexOf(i);if(-1===n){for(let t=0;t<_.length;t++){if(t>=M.length){M.push(i),n=t;break}if(null===M[t]){M[t]=i,n=t;break}}if(-1===n)break}const r=_[n];r&&r.connect(i)}}this.cameraAutoUpdate=!0,this.layersEnabled=!1,this.enabled=!1,this.isPresenting=!1,this.getCameraPose=function(){return c},this.getController=function(t){let e=_[t];return void 0===e&&(e=new Zs,_[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=_[t];return void 0===e&&(e=new Zs,_[t]=e),e.getGripSpace()},this.getHand=function(t){let e=_[t];return void 0===e&&(e=new Zs,_[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){o=t,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||a},this.setReferenceSpace=function(t){l=t},this.getBaseLayer=function(){return null!==d?d:p},this.getBinding=function(){return u},this.getFrame=function(){return m},this.getSession=function(){return n},this.setSession=async function(s){if(n=s,null!==n){if(g=t.getRenderTarget(),n.addEventListener("select",N),n.addEventListener("selectstart",N),n.addEventListener("selectend",N),n.addEventListener("squeeze",N),n.addEventListener("squeezestart",N),n.addEventListener("squeezeend",N),n.addEventListener("end",O),n.addEventListener("inputsourceschange",z),!0!==f.xrCompatible&&await e.makeXRCompatible(),void 0===n.renderState.layers||!1===t.capabilities.isWebGL2){const i={antialias:void 0!==n.renderState.layers||f.antialias,alpha:f.alpha,depth:f.depth,stencil:f.stencil,framebufferScaleFactor:r};p=new XRWebGLLayer(n,e,i),n.updateRenderState({baseLayer:p}),v=new te(p.framebufferWidth,p.framebufferHeight,{format:S,type:x,encoding:t.outputEncoding,stencilBuffer:f.stencil})}else{let i=null,s=null,a=null;f.depth&&(a=f.stencil?35056:33190,i=f.stencil?A:T,s=f.stencil?w:y);const o={colorFormat:32856,depthFormat:a,scaleFactor:r};u=new XRWebGLBinding(n,e),d=u.createProjectionLayer(o),n.updateRenderState({layers:[d]}),v=new te(d.textureWidth,d.textureHeight,{format:S,type:x,depthTexture:new Js(d.textureWidth,d.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,i),stencilBuffer:f.stencil,encoding:t.outputEncoding,samples:f.antialias?4:0});t.properties.get(v).__ignoreDepthValues=d.ignoreDepthValues}v.isXRRenderTarget=!0,this.setFoveation(1),l=null,a=await n.requestReferenceSpace(o),G.setContext(n),G.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.addLayer=function(t){window.XRWebGLBinding&&this.layersEnabled&&n&&(h.push(t),this.updateLayers())},this.removeLayer=function(t){h.splice(h.indexOf(t),1),window.XRWebGLBinding&&this.layersEnabled&&n&&this.updateLayers()},this.updateLayers=function(){var t=h.map((function(t){return t}));t.unshift(n.renderState.layers[0]),n.updateRenderState({layers:t})};const U=new re,B=new re;function F(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.setPoseTarget=function(t){void 0!==t&&(s=t)},this.updateCamera=function(t){if(null===n)return;P.near=L.near=C.near=t.near,P.far=L.far=C.far=t.far,I===P.near&&D===P.far||(n.updateRenderState({depthNear:P.near,depthFar:P.far}),I=P.near,D=P.far);const e=P.cameras;var i=s||t;const r=i.parent;F(P,r);for(let t=0;t<e.length;t++)F(e[t],r);P.matrixWorld.decompose(P.position,P.quaternion,P.scale),i.matrixWorld.copy(P.matrixWorld),i.matrix.copy(P.matrix),i.matrix.decompose(i.position,i.quaternion,i.scale);const a=i.children;for(let t=0,e=a.length;t<e;t++)a[t].updateMatrixWorld(!0);2===e.length?function(t,e,i){U.setFromMatrixPosition(e.matrixWorld),B.setFromMatrixPosition(i.matrixWorld);const n=U.distanceTo(B),r=e.projectionMatrix.elements,s=i.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(s[8]+1)/s[0],d=a*h,p=a*u,m=n/(-h+u),f=m*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=a+m,v=o+m,x=d-f,_=p+(n-f),y=l*o/v*g,M=c*o/v*g;t.projectionMatrix.makePerspective(x,_,y,M,g,v)}(P,C,L):P.projectionMatrix.copy(C.projectionMatrix)},this.getCamera=function(){return P},this.getFoveation=function(){return null!==d?d.fixedFoveation:null!==p?p.fixedFoveation:void 0},this.setFoveation=function(t){null!==d&&(d.fixedFoveation=t),null!==p&&void 0!==p.fixedFoveation&&(p.fixedFoveation=t)},this.getPlanes=function(){return b};let k=null;const G=new _n;G.setAnimationLoop((function(e,n){if(c=n.getViewerPose(l||a),m=n,null!==c){const e=c.views;null!==p&&(t.setRenderTargetFramebuffer(v,p.framebuffer),t.setRenderTarget(v));let i=!1;e.length!==P.cameras.length&&(P.cameras.length=0,i=!0);for(let n=0;n<e.length;n++){const r=e[n];let s=null;if(null!==p)s=p.getViewport(r);else{const e=u.getViewSubImage(d,r);s=e.viewport,0===n&&(t.setRenderTargetTextures(v,e.colorTexture,d.ignoreDepthValues?void 0:e.depthStencilTexture),t.setRenderTarget(v))}let a=R[n];void 0===a&&(a=new on,a.layers.enable(n),a.viewport=new Qt,R[n]=a),a.matrix.fromArray(r.transform.matrix),a.projectionMatrix.fromArray(r.projectionMatrix),a.viewport.set(s.x,s.y,s.width,s.height),0===n&&P.matrix.copy(a.matrix),!0===i&&P.cameras.push(a)}}for(let t=0;t<_.length;t++){const e=M[t],i=_[t];null!==e&&void 0!==i&&i.update(e,n,l||a)}if(k&&k(e,n),n.detectedPlanes){i.dispatchEvent({type:"planesdetected",data:n.detectedPlanes});let t=null;for(const e of b)n.detectedPlanes.has(e)||(null===t&&(t=[]),t.push(e));if(null!==t)for(const e of t)b.delete(e),E.delete(e),i.dispatchEvent({type:"planeremoved",data:e});for(const t of n.detectedPlanes)if(b.has(t)){const e=E.get(t);t.lastChangedTime>e&&(E.set(t,t.lastChangedTime),i.dispatchEvent({type:"planechanged",data:t}))}else b.add(t),E.set(t,n.lastChangedTime),i.dispatchEvent({type:"planeadded",data:t})}m=null})),this.setAnimationLoop=function(t){k=t},this.dispose=function(){}}}function $s(t,e){function i(i,n){i.opacity.value=n.opacity,n.color&&i.diffuse.value.copy(n.color),n.emissive&&i.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(i.map.value=n.map),n.alphaMap&&(i.alphaMap.value=n.alphaMap),n.bumpMap&&(i.bumpMap.value=n.bumpMap,i.bumpScale.value=n.bumpScale,1===n.side&&(i.bumpScale.value*=-1)),n.displacementMap&&(i.displacementMap.value=n.displacementMap,i.displacementScale.value=n.displacementScale,i.displacementBias.value=n.displacementBias),n.emissiveMap&&(i.emissiveMap.value=n.emissiveMap),n.normalMap&&(i.normalMap.value=n.normalMap,i.normalScale.value.copy(n.normalScale),1===n.side&&i.normalScale.value.negate()),n.specularMap&&(i.specularMap.value=n.specularMap),n.alphaTest>0&&(i.alphaTest.value=n.alphaTest);const r=e.get(n).envMap;if(r&&(i.envMap.value=r,i.flipEnvMap.value=r.isCubeTexture&&!1===r.isRenderTargetTexture?-1:1,i.reflectivity.value=n.reflectivity,i.ior.value=n.ior,i.refractionRatio.value=n.refractionRatio),n.lightMap){i.lightMap.value=n.lightMap;const e=!0!==t.physicallyCorrectLights?Math.PI:1;i.lightMapIntensity.value=n.lightMapIntensity*e}let s,a;n.aoMap&&(i.aoMap.value=n.aoMap,i.aoMapIntensity.value=n.aoMapIntensity),n.map?s=n.map:n.specularMap?s=n.specularMap:n.displacementMap?s=n.displacementMap:n.normalMap?s=n.normalMap:n.bumpMap?s=n.bumpMap:n.roughnessMap?s=n.roughnessMap:n.metalnessMap?s=n.metalnessMap:n.alphaMap?s=n.alphaMap:n.emissiveMap?s=n.emissiveMap:n.clearcoatMap?s=n.clearcoatMap:n.clearcoatNormalMap?s=n.clearcoatNormalMap:n.clearcoatRoughnessMap?s=n.clearcoatRoughnessMap:n.iridescenceMap?s=n.iridescenceMap:n.iridescenceThicknessMap?s=n.iridescenceThicknessMap:n.specularIntensityMap?s=n.specularIntensityMap:n.specularColorMap?s=n.specularColorMap:n.transmissionMap?s=n.transmissionMap:n.thicknessMap?s=n.thicknessMap:n.sheenColorMap?s=n.sheenColorMap:n.sheenRoughnessMap&&(s=n.sheenRoughnessMap),void 0!==s&&(s.isWebGLRenderTarget&&(s=s.texture),!0===s.matrixAutoUpdate&&s.updateMatrix(),i.uvTransform.value.copy(s.matrix)),n.aoMap?a=n.aoMap:n.lightMap&&(a=n.lightMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),i.uv2Transform.value.copy(a.matrix))}return{refreshFogUniforms:function(e,i){i.color.getRGB(e.fogColor.value,nn(t)),i.isFog?(e.fogNear.value=i.near,e.fogFar.value=i.far):i.isFogExp2&&(e.fogDensity.value=i.density)},refreshMaterialUniforms:function(t,n,r,s,a){n.isMeshBasicMaterial||n.isMeshLambertMaterial?i(t,n):n.isMeshToonMaterial?(i(t,n),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(t,n)):n.isMeshPhongMaterial?(i(t,n),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4)}(t,n)):n.isMeshStandardMaterial?(i(t,n),function(t,i){t.roughness.value=i.roughness,t.metalness.value=i.metalness,i.roughnessMap&&(t.roughnessMap.value=i.roughnessMap);i.metalnessMap&&(t.metalnessMap.value=i.metalnessMap);e.get(i).envMap&&(t.envMapIntensity.value=i.envMapIntensity)}(t,n),n.isMeshPhysicalMaterial&&function(t,e,i){t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap));e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate()));e.iridescence>0&&(t.iridescence.value=e.iridescence,t.iridescenceIOR.value=e.iridescenceIOR,t.iridescenceThicknessMinimum.value=e.iridescenceThicknessRange[0],t.iridescenceThicknessMaximum.value=e.iridescenceThicknessRange[1],e.iridescenceMap&&(t.iridescenceMap.value=e.iridescenceMap),e.iridescenceThicknessMap&&(t.iridescenceThicknessMap.value=e.iridescenceThicknessMap));e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor));t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap);e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap)}(t,n,a)):n.isMeshMatcapMaterial?(i(t,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap)}(t,n)):n.isMeshDepthMaterial?i(t,n):n.isMeshDistanceMaterial?(i(t,n),function(t,e){t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,n)):n.isMeshNormalMaterial?i(t,n):n.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,n)):n.isPointsMaterial?function(t,e,i,n){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*i,t.scale.value=.5*n,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);e.alphaTest>0&&(t.alphaTest.value=e.alphaTest);let r;e.map?r=e.map:e.alphaMap&&(r=e.alphaMap);void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix))}(t,n,r,s):n.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);e.alphaTest>0&&(t.alphaTest.value=e.alphaTest);let i;e.map?i=e.map:e.alphaMap&&(i=e.alphaMap);void 0!==i&&(!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}(t,n):n.isShadowMaterial?(t.color.value.copy(n.color),t.opacity.value=n.opacity):n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)}}}function Qs(t,e,i,n){let r={},s={},a=[];const o=i.isWebGL2?t.getParameter(35375):0;function l(t,e,i){const n=t.value;if(void 0===i[e])return i[e]="number"==typeof n?n:n.clone(),!0;if("number"==typeof n){if(i[e]!==n)return i[e]=n,!0}else{const t=i[e];if(!1===t.equals(n))return t.copy(n),!0}return!1}function c(t){const e=t.value,i={boundary:0,storage:0};return"number"==typeof e?(i.boundary=4,i.storage=4):e.isVector2?(i.boundary=8,i.storage=8):e.isVector3||e.isColor?(i.boundary=16,i.storage=12):e.isVector4?(i.boundary=16,i.storage=16):e.isMatrix3?(i.boundary=48,i.storage=48):e.isMatrix4?(i.boundary=64,i.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),i}function h(e){const i=e.target;i.removeEventListener("dispose",h);const n=a.indexOf(i.__bindingPointIndex);a.splice(n,1),t.deleteBuffer(r[i.id]),delete r[i.id],delete s[i.id]}return{bind:function(t,e){const i=e.program;n.uniformBlockBinding(t,i)},update:function(i,u){let d=r[i.id];void 0===d&&(!function(t){const e=t.uniforms;let i=0;const n=16;let r=0;for(let t=0,s=e.length;t<s;t++){const s=e[t],a=c(s);if(s.__data=new Float32Array(a.storage/Float32Array.BYTES_PER_ELEMENT),s.__offset=i,t>0){r=i%n;const t=n-r;0!==r&&t-a.boundary<0&&(i+=n-r,s.__offset=i)}i+=a.storage}r=i%n,r>0&&(i+=n-r);t.__size=i,t.__cache={}}(i),d=function(e){const i=function(){for(let t=0;t<o;t++)if(-1===a.indexOf(t))return a.push(t),t;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();e.__bindingPointIndex=i;const n=t.createBuffer(),r=e.__size,s=e.usage;return t.bindBuffer(35345,n),t.bufferData(35345,r,s),t.bindBuffer(35345,null),t.bindBufferBase(35345,i,n),n}(i),r[i.id]=d,i.addEventListener("dispose",h));const p=u.program;n.updateUBOMapping(i,p);const m=e.render.frame;s[i.id]!==m&&(!function(e){const i=r[e.id],n=e.uniforms,s=e.__cache;t.bindBuffer(35345,i);for(let e=0,i=n.length;e<i;e++){const i=n[e];if(!0===l(i,e,s)){const e=i.value,n=i.__offset;"number"==typeof e?(i.__data[0]=e,t.bufferSubData(35345,n,i.__data)):(i.value.isMatrix3?(i.__data[0]=i.value.elements[0],i.__data[1]=i.value.elements[1],i.__data[2]=i.value.elements[2],i.__data[3]=i.value.elements[0],i.__data[4]=i.value.elements[3],i.__data[5]=i.value.elements[4],i.__data[6]=i.value.elements[5],i.__data[7]=i.value.elements[0],i.__data[8]=i.value.elements[6],i.__data[9]=i.value.elements[7],i.__data[10]=i.value.elements[8],i.__data[11]=i.value.elements[0]):e.toArray(i.__data),t.bufferSubData(35345,n,i.__data))}}t.bindBuffer(35345,null)}(i),s[i.id]=m)},dispose:function(){for(const e in r)t.deleteBuffer(r[e]);a=[],r={},s={}}}}function ta(t={}){this.isWebGLRenderer=!0;const e=void 0!==t.canvas?t.canvas:function(){const t=Ot("canvas");return t.style.display="block",t}(),i=void 0!==t.context?t.context:null,n=void 0===t.depth||t.depth,r=void 0===t.stencil||t.stencil,s=void 0!==t.antialias&&t.antialias,a=void 0===t.premultipliedAlpha||t.premultipliedAlpha,o=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,l=void 0!==t.powerPreference?t.powerPreference:"default",c=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let h;h=null!==i?i.getContextAttributes().alpha:void 0!==t.alpha&&t.alpha;let u=null,d=null;const p=[],m=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=at,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const f=this;let g=!1,_=0,y=0,w=null,T=-1,A=null;const E=new Qt,C=new Qt;let L=null,R=e.width,P=e.height,I=1,D=null,N=null;const O=new Qt(0,0,R,P),z=new Qt(0,0,R,P);let U=!1;const B=new xn;let F=!1,k=!1,G=null;const V=new Ne,H=new Lt,W=new re,j={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function q(){return null===w?I:1}let X,Y,Z,J,K,$,Q,tt,et,it,nt,rt,st,ot,lt,ct,ht,ut,dt,pt,mt,ft,gt,vt,xt=i;function _t(t,i){for(let n=0;n<t.length;n++){const r=t[n],s=e.getContext(r,i);if(null!==s)return s}return null}try{const t={alpha:!0,depth:n,stencil:r,antialias:s,premultipliedAlpha:a,preserveDrawingBuffer:o,powerPreference:l,failIfMajorPerformanceCaveat:c};if("setAttribute"in e&&e.setAttribute("data-engine","three.js r147"),e.addEventListener("webglcontextlost",bt,!1),e.addEventListener("webglcontextrestored",wt,!1),e.addEventListener("webglcontextcreationerror",St,!1),null===xt){const e=["webgl2","webgl","experimental-webgl"];if(!0===f.isWebGL1Renderer&&e.shift(),xt=_t(e,t),null===xt)throw _t(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===xt.getShaderPrecisionFormat&&(xt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function yt(){X=new Yn(xt),Y=new Ln(xt,X,t),X.init(Y),ft=new Vs(xt,X,Y),Z=new ks(xt,X,Y),J=new Kn(xt),K=new As,$=new Gs(xt,X,Z,K,Y,ft,J),Q=new Pn(f),tt=new Xn(f),et=new yn(xt,Y),gt=new En(xt,X,et,Y),it=new Zn(xt,et,J,gt),nt=new er(xt,it,et,J),dt=new tr(xt,Y,$),ct=new Rn(K),rt=new Ts(f,Q,tt,X,Y,gt,ct),st=new $s(f,K),ot=new Rs,lt=new zs(X,Y),ut=new An(f,Q,tt,Z,nt,h,a),ht=new Fs(f,nt,Y),vt=new Qs(xt,J,Y,Z),pt=new Cn(xt,X,J,Y),mt=new Jn(xt,X,J,Y),J.programs=rt.programs,f.capabilities=Y,f.extensions=X,f.properties=K,f.renderLists=ot,f.shadowMap=ht,f.state=Z,f.info=J}yt();const Mt="undefined"!=typeof navigator&&"xr"in navigator?new Ks(f,xt):new Xs(f);function bt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),g=!0}function wt(){console.log("THREE.WebGLRenderer: Context Restored."),g=!1;const t=J.autoReset,e=ht.enabled,i=ht.autoUpdate,n=ht.needsUpdate,r=ht.type;yt(),J.autoReset=t,ht.enabled=e,ht.autoUpdate=i,ht.needsUpdate=n,ht.type=r}function St(t){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",t.statusMessage)}function At(t){const e=t.target;e.removeEventListener("dispose",At),function(t){(function(t){const e=K.get(t).programs;void 0!==e&&(e.forEach((function(t){rt.releaseProgram(t)})),t.isShaderMaterial&&rt.releaseShaderCache(t))})(t),K.remove(t)}(e)}this.xr=Mt,this.getContext=function(){return xt},this.getContextAttributes=function(){return xt.getContextAttributes()},this.forceContextLoss=function(){const t=X.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=X.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(t){void 0!==t&&(I=t,this.setSize(R,P,!1))},this.getSize=function(t){return t.set(R,P)},this.setSize=function(t,i,n){Mt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(R=t,P=i,e.width=Math.floor(t*I),e.height=Math.floor(i*I),!1!==n&&(e.style.width=t+"px",e.style.height=i+"px"),this.setViewport(0,0,t,i))},this.getDrawingBufferSize=function(t){return t.set(R*I,P*I).floor()},this.setDrawingBufferSize=function(t,i,n){R=t,P=i,I=n,e.width=Math.floor(t*n),e.height=Math.floor(i*n),this.setViewport(0,0,t,i)},this.getCurrentViewport=function(t){return t.copy(E)},this.getViewport=function(t){return t.copy(O)},this.setViewport=function(t,e,i,n){t.isVector4?O.set(t.x,t.y,t.z,t.w):O.set(t,e,i,n),Z.viewport(E.copy(O).multiplyScalar(I).floor())},this.getScissor=function(t){return t.copy(z)},this.setScissor=function(t,e,i,n){t.isVector4?z.set(t.x,t.y,t.z,t.w):z.set(t,e,i,n),Z.scissor(C.copy(z).multiplyScalar(I).floor())},this.getScissorTest=function(){return U},this.setScissorTest=function(t){Z.setScissorTest(U=t)},this.setOpaqueSort=function(t){D=t},this.setTransparentSort=function(t){N=t},this.getClearColor=function(t){return t.copy(ut.getClearColor())},this.setClearColor=function(){ut.setClearColor.apply(ut,arguments)},this.getClearAlpha=function(){return ut.getClearAlpha()},this.setClearAlpha=function(){ut.setClearAlpha.apply(ut,arguments)},this.clear=function(t=!0,e=!0,i=!0){let n=0;t&&(n|=16384),e&&(n|=256),i&&(n|=1024),xt.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",bt,!1),e.removeEventListener("webglcontextrestored",wt,!1),e.removeEventListener("webglcontextcreationerror",St,!1),ot.dispose(),lt.dispose(),K.dispose(),Q.dispose(),tt.dispose(),nt.dispose(),gt.dispose(),vt.dispose(),rt.dispose(),Mt.dispose(),Mt.removeEventListener("sessionstart",Ct),Mt.removeEventListener("sessionend",Rt),G&&(G.dispose(),G=null),Pt.stop()},this.renderBufferDirect=function(t,e,i,n,r,s){null===e&&(e=j);const a=r.isMesh&&r.matrixWorld.determinant()<0,o=function(t,e,i,n,r){!0!==e.isScene&&(e=j);$.resetTextureUnits();const s=e.fog,a=n.isMeshStandardMaterial?e.environment:null,o=null===w?f.outputEncoding:!0===w.isXRRenderTarget?w.texture.encoding:at,l=(n.isMeshStandardMaterial?tt:Q).get(n.envMap||a),c=!0===n.vertexColors&&!!i.attributes.color&&4===i.attributes.color.itemSize,h=!!n.normalMap&&!!i.attributes.tangent,u=!!i.morphAttributes.position,p=!!i.morphAttributes.normal,m=!!i.morphAttributes.color,g=n.toneMapped?f.toneMapping:0,v=i.morphAttributes.position||i.morphAttributes.normal||i.morphAttributes.color,x=void 0!==v?v.length:0,_=K.get(n),y=d.state.lights;if(!0===F&&(!0===k||t!==A)){const e=t===A&&n.id===T;ct.setState(n,t,e)}let M=!1;n.version===_.__version?_.needsLights&&_.lightsStateVersion!==y.state.version||_.outputEncoding!==o||r.isInstancedMesh&&!1===_.instancing?M=!0:r.isInstancedMesh||!0!==_.instancing?r.isSkinnedMesh&&!1===_.skinning?M=!0:r.isSkinnedMesh||!0!==_.skinning?_.envMap!==l||!0===n.fog&&_.fog!==s?M=!0:void 0===_.numClippingPlanes||_.numClippingPlanes===ct.numPlanes&&_.numIntersection===ct.numIntersection?(_.vertexAlphas!==c||_.vertexTangents!==h||_.morphTargets!==u||_.morphNormals!==p||_.morphColors!==m||_.toneMapping!==g||!0===Y.isWebGL2&&_.morphTargetsCount!==x)&&(M=!0):M=!0:M=!0:M=!0:(M=!0,_.__version=n.version);let b=_.currentProgram;!0===M&&(b=Ut(n,e,r));let S=!1,E=!1,C=!1;const L=b.getUniforms(),R=_.uniforms;Z.useProgram(b.program)&&(S=!0,E=!0,C=!0);n.id!==T&&(T=n.id,E=!0);if(S||A!==t){if(L.setValue(xt,"projectionMatrix",t.projectionMatrix),Y.logarithmicDepthBuffer&&L.setValue(xt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),A!==t&&(A=t,E=!0,C=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const e=L.map.cameraPosition;void 0!==e&&e.setValue(xt,W.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&L.setValue(xt,"isOrthographic",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||r.isSkinnedMesh)&&L.setValue(xt,"viewMatrix",t.matrixWorldInverse)}if(r.isSkinnedMesh){L.setOptional(xt,r,"bindMatrix"),L.setOptional(xt,r,"bindMatrixInverse");const t=r.skeleton;t&&(Y.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),L.setValue(xt,"boneTexture",t.boneTexture,$),L.setValue(xt,"boneTextureSize",t.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const D=i.morphAttributes;(void 0!==D.position||void 0!==D.normal||void 0!==D.color&&!0===Y.isWebGL2)&&dt.update(r,i,n,b);(E||_.receiveShadow!==r.receiveShadow)&&(_.receiveShadow=r.receiveShadow,L.setValue(xt,"receiveShadow",r.receiveShadow));n.isMeshGouraudMaterial&&null!==n.envMap&&(R.envMap.value=l,R.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1);E&&(L.setValue(xt,"toneMappingExposure",f.toneMappingExposure),_.needsLights&&(O=C,(N=R).ambientLightColor.needsUpdate=O,N.lightProbe.needsUpdate=O,N.directionalLights.needsUpdate=O,N.directionalLightShadows.needsUpdate=O,N.pointLights.needsUpdate=O,N.pointLightShadows.needsUpdate=O,N.spotLights.needsUpdate=O,N.spotLightShadows.needsUpdate=O,N.rectAreaLights.needsUpdate=O,N.hemisphereLights.needsUpdate=O),s&&!0===n.fog&&st.refreshFogUniforms(R,s),st.refreshMaterialUniforms(R,n,I,P,G),ss.upload(xt,_.uniformsList,R,$));var N,O;n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(ss.upload(xt,_.uniformsList,R,$),n.uniformsNeedUpdate=!1);n.isSpriteMaterial&&L.setValue(xt,"center",r.center);if(L.setValue(xt,"modelViewMatrix",r.modelViewMatrix),L.setValue(xt,"normalMatrix",r.normalMatrix),L.setValue(xt,"modelMatrix",r.matrixWorld),n.isShaderMaterial||n.isRawShaderMaterial){const t=n.uniformsGroups;for(let e=0,i=t.length;e<i;e++)if(Y.isWebGL2){const i=t[e];vt.update(i,b),vt.bind(i,b)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return b}(t,e,i,n,r);Z.setMaterial(n,a);let l=i.index,c=1;!0===n.wireframe&&(l=it.getWireframeAttribute(i),c=2);const h=i.drawRange,u=i.attributes.position;let p=h.start*c,m=(h.start+h.count)*c;null!==s&&(p=Math.max(p,s.start*c),m=Math.min(m,(s.start+s.count)*c)),null!==l?(p=Math.max(p,0),m=Math.min(m,l.count)):null!=u&&(p=Math.max(p,0),m=Math.min(m,u.count));const g=m-p;if(g<0||g===1/0)return;let v;gt.setup(r,n,o,i,l);let x=pt;if(null!==l&&(v=et.get(l),x=mt,x.setIndex(v)),r.isMesh)!0===n.wireframe?(Z.setLineWidth(n.wireframeLinewidth*q()),x.setMode(1)):x.setMode(4);else if(r.isLine){let t=n.linewidth;void 0===t&&(t=1),Z.setLineWidth(t*q()),r.isLineSegments?x.setMode(1):r.isLineLoop?x.setMode(2):x.setMode(3)}else r.isPoints?x.setMode(0):r.isSprite&&x.setMode(4);if(r.isInstancedMesh)x.renderInstances(p,g,r.count);else if(i.isInstancedBufferGeometry){const t=void 0!==i._maxInstanceCount?i._maxInstanceCount:1/0,e=Math.min(i.instanceCount,t);x.renderInstances(p,g,e)}else x.render(p,g)},this.compile=function(t,e){function i(t,e,i){!0===t.transparent&&2===t.side?(t.side=1,t.needsUpdate=!0,Ut(t,e,i),t.side=0,t.needsUpdate=!0,Ut(t,e,i),t.side=2):Ut(t,e,i)}d=lt.get(t),d.init(),m.push(d),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(d.pushLight(t),t.castShadow&&d.pushShadow(t))})),d.setupLights(f.physicallyCorrectLights),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let r=0;r<n.length;r++){i(n[r],t,e)}else i(n,t,e)})),m.pop(),d=null};let Et=null;function Ct(){Pt.stop()}function Rt(){Pt.start()}const Pt=new _n;function It(t,e,i,n){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)i=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)d.pushLight(t),t.castShadow&&d.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||B.intersectsSprite(t)){n&&W.setFromMatrixPosition(t.matrixWorld).applyMatrix4(V);const e=nt.update(t),r=t.material;r.visible&&u.push(t,e,r,i,W.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==J.render.frame&&(t.skeleton.update(),t.skeleton.frame=J.render.frame),!t.frustumCulled||B.intersectsObject(t))){n&&W.setFromMatrixPosition(t.matrixWorld).applyMatrix4(V);const e=nt.update(t),r=t.material;if(Array.isArray(r)){const n=e.groups;for(let s=0,a=n.length;s<a;s++){const a=n[s],o=r[a.materialIndex];o&&o.visible&&u.push(t,e,o,i,W.z,a)}}else r.visible&&u.push(t,e,r,i,W.z,null)}const r=t.children;for(let t=0,s=r.length;t<s;t++)It(r[t],e,i,n)}function Dt(t,e,i,n){const r=t.opaque,a=t.transmissive,o=t.transparent;d.setupLightsView(i),a.length>0&&function(t,e,i){const n=Y.isWebGL2;null===G&&(G=new te(1,1,{generateMipmaps:!0,type:X.has("EXT_color_buffer_half_float")?b:x,minFilter:v,samples:n&&!0===s?4:0}));f.getDrawingBufferSize(H),n?G.setSize(H.x,H.y):G.setSize(Tt(H.x),Tt(H.y));const r=f.getRenderTarget();f.setRenderTarget(G),f.clear();const a=f.toneMapping;f.toneMapping=0,Nt(t,e,i),f.toneMapping=a,$.updateMultisampleRenderTarget(G),$.updateRenderTargetMipmap(G),f.setRenderTarget(r)}(r,e,i),n&&Z.viewport(E.copy(n)),r.length>0&&Nt(r,e,i),a.length>0&&Nt(a,e,i),o.length>0&&Nt(o,e,i),Z.buffers.depth.setTest(!0),Z.buffers.depth.setMask(!0),Z.buffers.color.setMask(!0),Z.setPolygonOffset(!1)}function Nt(t,e,i){const n=!0===e.isScene?e.overrideMaterial:null;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=s.object,o=s.geometry,l=null===n?s.material:n,c=s.group;a.layers.test(i.layers)&&zt(a,e,i,o,l,c)}}function zt(t,e,i,n,r,s){t.onBeforeRender(f,e,i,n,r,s),t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),r.onBeforeRender(f,e,i,n,t,s),!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,f.renderBufferDirect(i,e,n,r,t,s),r.side=0,r.needsUpdate=!0,f.renderBufferDirect(i,e,n,r,t,s),r.side=2):f.renderBufferDirect(i,e,n,r,t,s),t.onAfterRender(f,e,i,n,r,s)}function Ut(t,e,i){!0!==e.isScene&&(e=j);const n=K.get(t),r=d.state.lights,s=d.state.shadowsArray,a=r.state.version,o=rt.getParameters(t,r.state,s,e,i),l=rt.getProgramCacheKey(o);let c=n.programs;n.environment=t.isMeshStandardMaterial?e.environment:null,n.fog=e.fog,n.envMap=(t.isMeshStandardMaterial?tt:Q).get(t.envMap||n.environment),void 0===c&&(t.addEventListener("dispose",At),c=new Map,n.programs=c);let h=c.get(l);if(void 0!==h){if(n.currentProgram===h&&n.lightsStateVersion===a)return Bt(t,o),h}else o.uniforms=rt.getUniforms(t),t.onBuild(i,o,f),t.onBeforeCompile(o,f),h=rt.acquireProgram(o,l),c.set(l,h),n.uniforms=o.uniforms;const u=n.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(u.clippingPlanes=ct.uniform),Bt(t,o),n.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),n.lightsStateVersion=a,n.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotLightMatrix.value=r.state.spotLightMatrix,u.spotLightMap.value=r.state.spotLightMap,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix);const p=h.getUniforms(),m=ss.seqWithValue(p.seq,u);return n.currentProgram=h,n.uniformsList=m,h}function Bt(t,e){const i=K.get(t);i.outputEncoding=e.outputEncoding,i.instancing=e.instancing,i.skinning=e.skinning,i.morphTargets=e.morphTargets,i.morphNormals=e.morphNormals,i.morphColors=e.morphColors,i.morphTargetsCount=e.morphTargetsCount,i.numClippingPlanes=e.numClippingPlanes,i.numIntersection=e.numClipIntersection,i.vertexAlphas=e.vertexAlphas,i.vertexTangents=e.vertexTangents,i.toneMapping=e.toneMapping}var Ft;Pt.setAnimationLoop((function(t){Et&&Et(t)})),"undefined"!=typeof self&&Pt.setContext(self),this.setAnimationLoop=function(t){Et=t,Mt.setAnimationLoop(t),null===t?Pt.stop():Pt.start()},Mt.addEventListener("sessionstart",Ct),Mt.addEventListener("sessionend",Rt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===g)return;!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),null===e.parent&&!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),!0===Mt.enabled&&!0===Mt.isPresenting&&(!0===Mt.cameraAutoUpdate&&Mt.updateCamera(e),e=Mt.getCamera()),!0===t.isScene&&t.onBeforeRender(f,t,e,w),d=lt.get(t,m.length),d.init(),m.push(d),V.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),B.setFromProjectionMatrix(V),k=this.localClippingEnabled,F=ct.init(this.clippingPlanes,k,e),u=ot.get(t,p.length),u.init(),p.push(u),It(t,e,0,f.sortObjects),u.finish(),!0===f.sortObjects&&u.sort(D,N),!0===F&&ct.beginShadows();const i=d.state.shadowsArray;if(ht.render(i,t,e),!0===F&&ct.endShadows(),!0===this.info.autoReset&&this.info.reset(),ut.render(u,t),d.setupLights(f.physicallyCorrectLights),e.isArrayCamera){const i=e.cameras;for(let e=0,n=i.length;e<n;e++){const n=i[e];Dt(u,t,n,n.viewport)}}else Dt(u,t,e);null!==w&&($.updateMultisampleRenderTarget(w),$.updateRenderTargetMipmap(w)),!0===t.isScene&&t.onAfterRender(f,t,e),Mt.enabled&&Mt.submitFrame&&Mt.submitFrame(),gt.resetDefaultState(),T=-1,A=null,m.pop(),d=m.length>0?m[m.length-1]:null,p.pop(),u=p.length>0?p[p.length-1]:null},this.setTexture2D=(Ft=!1,function(t,e){t&&t.isWebGLRenderTarget&&(Ft||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),Ft=!0),t=t.texture),$.setTexture2D(t,e)}),this.getActiveCubeFace=function(){return _},this.getActiveMipmapLevel=function(){return y},this.getRenderTarget=function(){return w},this.setRenderTargetTextures=function(t,e,i){K.get(t.texture).__webglTexture=e,K.get(t.depthTexture).__webglTexture=i;const n=K.get(t);n.__hasExternalTextures=!0,n.__hasExternalTextures&&(n.__autoAllocateDepthBuffer=void 0===i,n.__autoAllocateDepthBuffer||!0===X.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),n.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(t,e){const i=K.get(t);i.__webglFramebuffer=e,i.__useDefaultFramebuffer=void 0===e},this.setRenderTarget=function(t,e=0,i=0){w=t,_=e,y=i;let n=!0,r=null,s=!1,a=!1;if(t){const i=K.get(t);void 0!==i.__useDefaultFramebuffer?(Z.bindFramebuffer(36160,null),n=!1):void 0===i.__webglFramebuffer?$.setupRenderTarget(t):i.__hasExternalTextures&&$.rebindTextures(t,K.get(t.texture).__webglTexture,K.get(t.depthTexture).__webglTexture);const o=t.texture;(o.isData3DTexture||o.isDataArrayTexture||o.isCompressedArrayTexture)&&(a=!0);const l=K.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=l[e],s=!0):r=Y.isWebGL2&&t.samples>0&&!1===$.useMultisampledRTT(t)?K.get(t).__webglMultisampledFramebuffer:l,E.copy(t.viewport),C.copy(t.scissor),L=t.scissorTest}else E.copy(O).multiplyScalar(I).floor(),C.copy(z).multiplyScalar(I).floor(),L=U;if(Z.bindFramebuffer(36160,r)&&Y.drawBuffers&&n&&Z.drawBuffers(t,r),Z.viewport(E),Z.scissor(C),Z.setScissorTest(L),s){const n=K.get(t.texture);xt.framebufferTexture2D(36160,36064,34069+e,n.__webglTexture,i)}else if(a){const n=K.get(t.texture),r=e||0;xt.framebufferTextureLayer(36160,36064,n.__webglTexture,i||0,r)}T=-1},this.readRenderTargetPixels=function(t,e,i,n,r,s,a){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=K.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){Z.bindFramebuffer(36160,o);try{const a=t.texture,o=a.format,l=a.type;if(o!==S&&ft.convert(o)!==xt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===b&&(X.has("EXT_color_buffer_half_float")||Y.isWebGL2&&X.has("EXT_color_buffer_float"));if(!(l===x||ft.convert(l)===xt.getParameter(35738)||l===M&&(Y.isWebGL2||X.has("OES_texture_float")||X.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");e>=0&&e<=t.width-n&&i>=0&&i<=t.height-r&&xt.readPixels(e,i,n,r,ft.convert(o),ft.convert(l),s)}finally{const t=null!==w?K.get(w).__webglFramebuffer:null;Z.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,i=0){const n=Math.pow(2,-i),r=Math.floor(e.image.width*n),s=Math.floor(e.image.height*n);$.setTexture2D(e,0),xt.copyTexSubImage2D(3553,i,0,0,t.x,t.y,r,s),Z.unbindTexture()},this.copyTextureToTexture=function(t,e,i,n=0){const r=e.image.width,s=e.image.height,a=ft.convert(i.format),o=ft.convert(i.type);$.setTexture2D(i,0),xt.pixelStorei(37440,i.flipY),xt.pixelStorei(37441,i.premultiplyAlpha),xt.pixelStorei(3317,i.unpackAlignment),e.isDataTexture?xt.texSubImage2D(3553,n,t.x,t.y,r,s,a,o,e.image.data):e.isCompressedTexture?xt.compressedTexSubImage2D(3553,n,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,a,e.mipmaps[0].data):xt.texSubImage2D(3553,n,t.x,t.y,a,o,e.image),0===n&&i.generateMipmaps&&xt.generateMipmap(3553),Z.unbindTexture()},this.copyTextureToTexture3D=function(t,e,i,n,r=0){if(f.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const s=t.max.x-t.min.x+1,a=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=ft.convert(n.format),c=ft.convert(n.type);let h;if(n.isData3DTexture)$.setTexture3D(n,0),h=32879;else{if(!n.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");$.setTexture2DArray(n,0),h=35866}xt.pixelStorei(37440,n.flipY),xt.pixelStorei(37441,n.premultiplyAlpha),xt.pixelStorei(3317,n.unpackAlignment);const u=xt.getParameter(3314),d=xt.getParameter(32878),p=xt.getParameter(3316),m=xt.getParameter(3315),g=xt.getParameter(32877),v=i.isCompressedTexture?i.mipmaps[0]:i.image;xt.pixelStorei(3314,v.width),xt.pixelStorei(32878,v.height),xt.pixelStorei(3316,t.min.x),xt.pixelStorei(3315,t.min.y),xt.pixelStorei(32877,t.min.z),i.isDataTexture||i.isData3DTexture?xt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,v.data):i.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),xt.compressedTexSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,v.data)):xt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,v),xt.pixelStorei(3314,u),xt.pixelStorei(32878,d),xt.pixelStorei(3316,p),xt.pixelStorei(3315,m),xt.pixelStorei(32877,g),0===r&&n.generateMipmaps&&xt.generateMipmap(h),Z.unbindTexture()},this.initTexture=function(t){t.isCubeTexture?$.setTextureCube(t,0):t.isData3DTexture?$.setTexture3D(t,0):t.isDataArrayTexture||t.isCompressedArrayTexture?$.setTexture2DArray(t,0):$.setTexture2D(t,0),Z.unbindTexture()},this.resetState=function(){_=0,y=0,w=null,Z.reset(),gt.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class ea extends ta{}ea.prototype.isWebGL1Renderer=!0;class ia{constructor(t,e=25e-5){this.isFogExp2=!0,this.name="",this.color=new qt(t),this.density=e}clone(){return new ia(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}class na{constructor(t,e=1,i=1e3){this.isFog=!0,this.name="",this.color=new qt(t),this.near=e,this.far=i}clone(){return new na(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}class ra extends si{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(e.backgroundIntensity=this.backgroundIntensity),e}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(t){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=t}}class sa{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=ut,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=_t()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,i){t*=this.stride,i*=e.stride;for(let n=0,r=this.stride;n<r;n++)this.array[t+n]=e.array[i+n];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=_t()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(e,this.stride);return i.setUsage(this.usage),i}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=_t()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const aa=new re;class oa{constructor(t,e,i,n=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=!0===n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,i=this.data.count;e<i;e++)aa.fromBufferAttribute(this,e),aa.applyMatrix4(t),this.setXYZ(e,aa.x,aa.y,aa.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)aa.fromBufferAttribute(this,e),aa.applyNormalMatrix(t),this.setXYZ(e,aa.x,aa.y,aa.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)aa.fromBufferAttribute(this,e),aa.transformDirection(t),this.setXYZ(e,aa.x,aa.y,aa.z);return this}setX(t,e){return this.normalized&&(e=Et(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=Et(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=Et(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=Et(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=At(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=At(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=At(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=At(e,this.array)),e}setXY(t,e,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this}setXYZ(t,e,i,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array),n=Et(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this}setXYZW(t,e,i,n,r){return t=t*this.data.stride+this.offset,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array),n=Et(n,this.array),r=Et(r,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[i+e])}return new bi(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new oa(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[i+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class la extends xi{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new qt(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}let ca;const ha=new re,ua=new re,da=new re,pa=new Lt,ma=new Lt,fa=new Ne,ga=new re,va=new re,xa=new re,_a=new Lt,ya=new Lt,Ma=new Lt;class ba extends si{constructor(t){if(super(),this.isSprite=!0,this.type="Sprite",void 0===ca){ca=new Di;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new sa(t,5);ca.setIndex([0,1,2,0,2,3]),ca.setAttribute("position",new oa(e,3,0,!1)),ca.setAttribute("uv",new oa(e,2,3,!1))}this.geometry=ca,this.material=void 0!==t?t:new la,this.center=new Lt(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),ua.setFromMatrixScale(this.matrixWorld),fa.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),da.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&ua.multiplyScalar(-da.z);const i=this.material.rotation;let n,r;0!==i&&(r=Math.cos(i),n=Math.sin(i));const s=this.center;wa(ga.set(-.5,-.5,0),da,s,ua,n,r),wa(va.set(.5,-.5,0),da,s,ua,n,r),wa(xa.set(.5,.5,0),da,s,ua,n,r),_a.set(0,0),ya.set(1,0),Ma.set(1,1);let a=t.ray.intersectTriangle(ga,va,xa,!1,ha);if(null===a&&(wa(va.set(-.5,.5,0),da,s,ua,n,r),ya.set(0,1),a=t.ray.intersectTriangle(ga,xa,va,!1,ha),null===a))return;const o=t.ray.origin.distanceTo(ha);o<t.near||o>t.far||e.push({distance:o,point:ha.clone(),uv:gi.getUV(ha,ga,va,xa,_a,ya,Ma,new Lt),face:null,object:this})}copy(t,e){return super.copy(t,e),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function wa(t,e,i,n,r,s){pa.subVectors(t,i).addScalar(.5).multiply(n),void 0!==r?(ma.x=s*pa.x-r*pa.y,ma.y=r*pa.x+s*pa.y):ma.copy(pa),t.copy(e),t.x+=ma.x,t.y+=ma.y,t.applyMatrix4(fa)}const Sa=new re,Ta=new re;class Aa extends si{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(t){super.copy(t,!1);const e=t.levels;for(let t=0,i=e.length;t<i;t++){const i=e[t];this.addLevel(i.object.clone(),i.distance,i.hysteresis)}return this.autoUpdate=t.autoUpdate,this}addLevel(t,e=0,i=0){e=Math.abs(e);const n=this.levels;let r;for(r=0;r<n.length&&!(e<n[r].distance);r++);return n.splice(r,0,{distance:e,hysteresis:i,object:t}),this.add(t),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let i,n;for(i=1,n=e.length;i<n;i++){let n=e[i].distance;if(e[i].object.visible&&(n-=n*e[i].hysteresis),t<n)break}return e[i-1].object}return null}raycast(t,e){if(this.levels.length>0){Sa.setFromMatrixPosition(this.matrixWorld);const i=t.ray.origin.distanceTo(Sa);this.getObjectForDistance(i).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){Sa.setFromMatrixPosition(t.matrixWorld),Ta.setFromMatrixPosition(this.matrixWorld);const i=Sa.distanceTo(Ta)/t.zoom;let n,r;for(e[0].object.visible=!0,n=1,r=e.length;n<r;n++){let t=e[n].distance;if(e[n].object.visible&&(t-=t*e[n].hysteresis),!(i>=t))break;e[n-1].object.visible=!1,e[n].object.visible=!0}for(this._currentLevel=n-1;n<r;n++)e[n].object.visible=!1}}toJSON(t){const e=super.toJSON(t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];const i=this.levels;for(let t=0,n=i.length;t<n;t++){const n=i[t];e.object.levels.push({object:n.object.uuid,distance:n.distance,hysteresis:n.hysteresis})}return e}}const Ea=new re,Ca=new Qt,La=new Qt,Ra=new re,Pa=new Ne;class Ia extends Ki{constructor(t,e){super(t,e),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Ne,this.bindMatrixInverse=new Ne}copy(t,e){return super.copy(t,e),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new Qt,e=this.geometry.attributes.skinWeight;for(let i=0,n=e.count;i<n;i++){t.fromBufferAttribute(e,i);const n=1/t.manhattanLength();n!==1/0?t.multiplyScalar(n):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const i=this.skeleton,n=this.geometry;Ca.fromBufferAttribute(n.attributes.skinIndex,t),La.fromBufferAttribute(n.attributes.skinWeight,t),Ea.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const n=La.getComponent(t);if(0!==n){const r=Ca.getComponent(t);Pa.multiplyMatrices(i.bones[r].matrixWorld,i.boneInverses[r]),e.addScaledVector(Ra.copy(Ea).applyMatrix4(Pa),n)}}return e.applyMatrix4(this.bindMatrixInverse)}}class Da extends si{constructor(){super(),this.isBone=!0,this.type="Bone"}}class Na extends $t{constructor(t=null,e=1,i=1,n,r,s,a,o,l=1003,c=1003,h,u){super(null,s,a,o,l,c,n,r,h,u),this.isDataTexture=!0,this.image={data:t,width:e,height:i},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const Oa=new Ne,za=new Ne;class Ua{constructor(t=[],e=[]){this.uuid=_t(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new Ne)}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new Ne;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert()}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,i=this.boneMatrices,n=this.boneTexture;for(let n=0,r=t.length;n<r;n++){const r=t[n]?t[n].matrixWorld:za;Oa.multiplyMatrices(r,e[n]),Oa.toArray(i,16*n)}null!==n&&(n.needsUpdate=!0)}clone(){return new Ua(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=St(t),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const i=new Na(e,t,t,S,M);return i.needsUpdate=!0,this.boneMatrices=e,this.boneTexture=i,this.boneTextureSize=t,this}getBoneByName(t){for(let e=0,i=this.bones.length;e<i;e++){const i=this.bones[e];if(i.name===t)return i}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let i=0,n=t.bones.length;i<n;i++){const n=t.bones[i];let r=e[n];void 0===r&&(console.warn("THREE.Skeleton: No bone found with UUID:",n),r=new Da),this.bones.push(r),this.boneInverses.push((new Ne).fromArray(t.boneInverses[i]))}return this.init(),this}toJSON(){const t={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,i=this.boneInverses;for(let n=0,r=e.length;n<r;n++){const r=e[n];t.bones.push(r.uuid);const s=i[n];t.boneInverses.push(s.toArray())}return t}}class Ba extends bi{constructor(t,e,i,n=1){super(t,e,i),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Fa=new Ne,ka=new Ne,Ga=[],Va=new Ne,Ha=new Ki;class Wa extends Ki{constructor(t,e,i){super(t,e),this.isInstancedMesh=!0,this.instanceMatrix=new Ba(new Float32Array(16*i),16),this.instanceColor=null,this.count=i,this.frustumCulled=!1;for(let t=0;t<i;t++)this.setMatrixAt(t,Va)}copy(t,e){return super.copy(t,e),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const i=this.matrixWorld,n=this.count;if(Ha.geometry=this.geometry,Ha.material=this.material,void 0!==Ha.material)for(let r=0;r<n;r++){this.getMatrixAt(r,Fa),ka.multiplyMatrices(i,Fa),Ha.matrixWorld=ka,Ha.raycast(t,Ga);for(let t=0,i=Ga.length;t<i;t++){const i=Ga[t];i.instanceId=r,i.object=this,e.push(i)}Ga.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Ba(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}class ja extends xi{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new qt(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const qa=new re,Xa=new re,Ya=new Ne,Za=new De,Ja=new Te;class Ka extends si{constructor(t=new Di,e=new ja){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,i=[0];for(let t=1,n=e.count;t<n;t++)qa.fromBufferAttribute(e,t-1),Xa.fromBufferAttribute(e,t),i[t]=i[t-1],i[t]+=qa.distanceTo(Xa);t.setAttribute("lineDistance",new Ti(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const i=this.geometry,n=this.matrixWorld,r=t.params.Line.threshold,s=i.drawRange;if(null===i.boundingSphere&&i.computeBoundingSphere(),Ja.copy(i.boundingSphere),Ja.applyMatrix4(n),Ja.radius+=r,!1===t.ray.intersectsSphere(Ja))return;Ya.copy(n).invert(),Za.copy(t.ray).applyMatrix4(Ya);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=new re,c=new re,h=new re,u=new re,d=this.isLineSegments?2:1,p=i.index,m=i.attributes.position;if(null!==p){for(let i=Math.max(0,s.start),n=Math.min(p.count,s.start+s.count)-1;i<n;i+=d){const n=p.getX(i),r=p.getX(i+1);l.fromBufferAttribute(m,n),c.fromBufferAttribute(m,r);if(Za.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const s=t.ray.origin.distanceTo(u);s<t.near||s>t.far||e.push({distance:s,point:h.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}else{for(let i=Math.max(0,s.start),n=Math.min(m.count,s.start+s.count)-1;i<n;i+=d){l.fromBufferAttribute(m,i),c.fromBufferAttribute(m,i+1);if(Za.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const n=t.ray.origin.distanceTo(u);n<t.near||n>t.far||e.push({distance:n,point:h.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}const $a=new re,Qa=new re;class to extends Ka{constructor(t,e){super(t,e),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,i=[];for(let t=0,n=e.count;t<n;t+=2)$a.fromBufferAttribute(e,t),Qa.fromBufferAttribute(e,t+1),i[t]=0===t?0:i[t-1],i[t+1]=i[t]+$a.distanceTo(Qa);t.setAttribute("lineDistance",new Ti(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class eo extends Ka{constructor(t,e){super(t,e),this.isLineLoop=!0,this.type="LineLoop"}}class io extends xi{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new qt(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const no=new Ne,ro=new De,so=new Te,ao=new re;class oo extends si{constructor(t=new Di,e=new io){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const i=this.geometry,n=this.matrixWorld,r=t.params.Points.threshold,s=i.drawRange;if(null===i.boundingSphere&&i.computeBoundingSphere(),so.copy(i.boundingSphere),so.applyMatrix4(n),so.radius+=r,!1===t.ray.intersectsSphere(so))return;no.copy(n).invert(),ro.copy(t.ray).applyMatrix4(no);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=i.index,c=i.attributes.position;if(null!==l){for(let i=Math.max(0,s.start),r=Math.min(l.count,s.start+s.count);i<r;i++){const r=l.getX(i);ao.fromBufferAttribute(c,r),lo(ao,r,o,n,t,e,this)}}else{for(let i=Math.max(0,s.start),r=Math.min(c.count,s.start+s.count);i<r;i++)ao.fromBufferAttribute(c,i),lo(ao,i,o,n,t,e,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}function lo(t,e,i,n,r,s,a){const o=ro.distanceSqToPoint(t);if(o<i){const i=new re;ro.closestPointToPoint(t,i),i.applyMatrix4(n);const l=r.ray.origin.distanceTo(i);if(l<r.near||l>r.far)return;s.push({distance:l,distanceToRay:Math.sqrt(o),point:i,index:e,face:null,object:a})}}class co extends $t{constructor(t,e,i,n,r,s,a,o,l,c,h,u){super(null,s,a,o,l,c,n,r,h,u),this.isCompressedTexture=!0,this.image={width:e,height:i},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}class ho{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const i=this.getUtoTmapping(t);return this.getPoint(i,e)}getPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return e}getSpacedPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let i,n=this.getPoint(0),r=0;e.push(0);for(let s=1;s<=t;s++)i=this.getPoint(s/t),r+=i.distanceTo(n),e.push(r),n=i;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const i=this.getLengths();let n=0;const r=i.length;let s;s=e||t*i[r-1];let a,o=0,l=r-1;for(;o<=l;)if(n=Math.floor(o+(l-o)/2),a=i[n]-s,a<0)o=n+1;else{if(!(a>0)){l=n;break}l=n-1}if(n=l,i[n]===s)return n/(r-1);const c=i[n];return(n+(s-c)/(i[n+1]-c))/(r-1)}getTangent(t,e){const i=1e-4;let n=t-i,r=t+i;n<0&&(n=0),r>1&&(r=1);const s=this.getPoint(n),a=this.getPoint(r),o=e||(s.isVector2?new Lt:new re);return o.copy(a).sub(s).normalize(),o}getTangentAt(t,e){const i=this.getUtoTmapping(t);return this.getTangent(i,e)}computeFrenetFrames(t,e){const i=new re,n=[],r=[],s=[],a=new re,o=new Ne;for(let e=0;e<=t;e++){const i=e/t;n[e]=this.getTangentAt(i,new re)}r[0]=new re,s[0]=new re;let l=Number.MAX_VALUE;const c=Math.abs(n[0].x),h=Math.abs(n[0].y),u=Math.abs(n[0].z);c<=l&&(l=c,i.set(1,0,0)),h<=l&&(l=h,i.set(0,1,0)),u<=l&&i.set(0,0,1),a.crossVectors(n[0],i).normalize(),r[0].crossVectors(n[0],a),s[0].crossVectors(n[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),s[e]=s[e-1].clone(),a.crossVectors(n[e-1],n[e]),a.length()>Number.EPSILON){a.normalize();const t=Math.acos(yt(n[e-1].dot(n[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,t))}s[e].crossVectors(n[e],r[e])}if(!0===e){let e=Math.acos(yt(r[0].dot(r[t]),-1,1));e/=t,n[0].dot(a.crossVectors(r[0],r[t]))>0&&(e=-e);for(let i=1;i<=t;i++)r[i].applyMatrix4(o.makeRotationAxis(n[i],e*i)),s[i].crossVectors(n[i],r[i])}return{tangents:n,normals:r,binormals:s}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class uo extends ho{constructor(t=0,e=0,i=1,n=1,r=0,s=2*Math.PI,a=!1,o=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=i,this.yRadius=n,this.aStartAngle=r,this.aEndAngle=s,this.aClockwise=a,this.aRotation=o}getPoint(t,e){const i=e||new Lt,n=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=n;for(;r>n;)r-=n;r<Number.EPSILON&&(r=s?0:n),!0!==this.aClockwise||s||(r===n?r=-n:r-=n);const a=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),i=o-this.aX,n=l-this.aY;o=i*t-n*e+this.aX,l=i*e+n*t+this.aY}return i.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}class po extends uo{constructor(t,e,i,n,r,s){super(t,e,i,i,n,r,s),this.isArcCurve=!0,this.type="ArcCurve"}}function mo(){let t=0,e=0,i=0,n=0;function r(r,s,a,o){t=r,e=a,i=-3*r+3*s-2*a-o,n=2*r-2*s+a+o}return{initCatmullRom:function(t,e,i,n,s){r(e,i,s*(i-t),s*(n-e))},initNonuniformCatmullRom:function(t,e,i,n,s,a,o){let l=(e-t)/s-(i-t)/(s+a)+(i-e)/a,c=(i-e)/a-(n-e)/(a+o)+(n-i)/o;l*=a,c*=a,r(e,i,l,c)},calc:function(r){const s=r*r;return t+e*r+i*s+n*(s*r)}}}const fo=new re,go=new mo,vo=new mo,xo=new mo;class _o extends ho{constructor(t=[],e=!1,i="centripetal",n=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=i,this.tension=n}getPoint(t,e=new re){const i=e,n=this.points,r=n.length,s=(r-(this.closed?0:1))*t;let a,o,l=Math.floor(s),c=s-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/r)+1)*r:0===c&&l===r-1&&(l=r-2,c=1),this.closed||l>0?a=n[(l-1)%r]:(fo.subVectors(n[0],n[1]).add(n[0]),a=fo);const h=n[l%r],u=n[(l+1)%r];if(this.closed||l+2<r?o=n[(l+2)%r]:(fo.subVectors(n[r-1],n[r-2]).add(n[r-1]),o=fo),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(a.distanceToSquared(h),t),i=Math.pow(h.distanceToSquared(u),t),n=Math.pow(u.distanceToSquared(o),t);i<1e-4&&(i=1),e<1e-4&&(e=i),n<1e-4&&(n=i),go.initNonuniformCatmullRom(a.x,h.x,u.x,o.x,e,i,n),vo.initNonuniformCatmullRom(a.y,h.y,u.y,o.y,e,i,n),xo.initNonuniformCatmullRom(a.z,h.z,u.z,o.z,e,i,n)}else"catmullrom"===this.curveType&&(go.initCatmullRom(a.x,h.x,u.x,o.x,this.tension),vo.initCatmullRom(a.y,h.y,u.y,o.y,this.tension),xo.initCatmullRom(a.z,h.z,u.z,o.z,this.tension));return i.set(go.calc(c),vo.calc(c),xo.calc(c)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push(i.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const i=this.points[e];t.points.push(i.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push((new re).fromArray(i))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function yo(t,e,i,n,r){const s=.5*(n-e),a=.5*(r-i),o=t*t;return(2*i-2*n+s+a)*(t*o)+(-3*i+3*n-2*s-a)*o+s*t+i}function Mo(t,e,i,n){return function(t,e){const i=1-t;return i*i*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,i)+function(t,e){return t*t*e}(t,n)}function bo(t,e,i,n,r){return function(t,e){const i=1-t;return i*i*i*e}(t,e)+function(t,e){const i=1-t;return 3*i*i*t*e}(t,i)+function(t,e){return 3*(1-t)*t*t*e}(t,n)+function(t,e){return t*t*t*e}(t,r)}class wo extends ho{constructor(t=new Lt,e=new Lt,i=new Lt,n=new Lt){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=i,this.v3=n}getPoint(t,e=new Lt){const i=e,n=this.v0,r=this.v1,s=this.v2,a=this.v3;return i.set(bo(t,n.x,r.x,s.x,a.x),bo(t,n.y,r.y,s.y,a.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class So extends ho{constructor(t=new re,e=new re,i=new re,n=new re){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=i,this.v3=n}getPoint(t,e=new re){const i=e,n=this.v0,r=this.v1,s=this.v2,a=this.v3;return i.set(bo(t,n.x,r.x,s.x,a.x),bo(t,n.y,r.y,s.y,a.y),bo(t,n.z,r.z,s.z,a.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class To extends ho{constructor(t=new Lt,e=new Lt){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new Lt){const i=e;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const i=e||new Lt;return i.copy(this.v2).sub(this.v1).normalize(),i}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Ao extends ho{constructor(t=new re,e=new re){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=t,this.v2=e}getPoint(t,e=new re){const i=e;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Eo extends ho{constructor(t=new Lt,e=new Lt,i=new Lt){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new Lt){const i=e,n=this.v0,r=this.v1,s=this.v2;return i.set(Mo(t,n.x,r.x,s.x),Mo(t,n.y,r.y,s.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Co extends ho{constructor(t=new re,e=new re,i=new re){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new re){const i=e,n=this.v0,r=this.v1,s=this.v2;return i.set(Mo(t,n.x,r.x,s.x),Mo(t,n.y,r.y,s.y),Mo(t,n.z,r.z,s.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Lo extends ho{constructor(t=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=t}getPoint(t,e=new Lt){const i=e,n=this.points,r=(n.length-1)*t,s=Math.floor(r),a=r-s,o=n[0===s?s:s-1],l=n[s],c=n[s>n.length-2?n.length-1:s+1],h=n[s>n.length-3?n.length-1:s+2];return i.set(yo(a,o.x,l.x,c.x,h.x),yo(a,o.y,l.y,c.y,h.y)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push(i.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const i=this.points[e];t.points.push(i.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push((new Lt).fromArray(i))}return this}}var Ro=Object.freeze({__proto__:null,ArcCurve:po,CatmullRomCurve3:_o,CubicBezierCurve:wo,CubicBezierCurve3:So,EllipseCurve:uo,LineCurve:To,LineCurve3:Ao,QuadraticBezierCurve:Eo,QuadraticBezierCurve3:Co,SplineCurve:Lo});class Po extends ho{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new To(e,t))}getPoint(t,e){const i=t*this.getLength(),n=this.getCurveLengths();let r=0;for(;r<n.length;){if(n[r]>=i){const t=n[r]-i,s=this.curves[r],a=s.getLength(),o=0===a?0:1-t/a;return s.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let i=0,n=this.curves.length;i<n;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let i;for(let n=0,r=this.curves;n<r.length;n++){const s=r[n],a=s.isEllipseCurve?2*t:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?t*s.points.length:t,o=s.getPoints(a);for(let t=0;t<o.length;t++){const n=o[t];i&&i.equals(n)||(e.push(n),i=n)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const i=t.curves[e];this.curves.push(i.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,i=this.curves.length;e<i;e++){const i=this.curves[e];t.curves.push(i.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const i=t.curves[e];this.curves.push((new Ro[i.type]).fromJSON(i))}return this}}class Io extends Po{constructor(t){super(),this.type="Path",this.currentPoint=new Lt,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const i=new To(this.currentPoint.clone(),new Lt(t,e));return this.curves.push(i),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,i,n){const r=new Eo(this.currentPoint.clone(),new Lt(t,e),new Lt(i,n));return this.curves.push(r),this.currentPoint.set(i,n),this}bezierCurveTo(t,e,i,n,r,s){const a=new wo(this.currentPoint.clone(),new Lt(t,e),new Lt(i,n),new Lt(r,s));return this.curves.push(a),this.currentPoint.set(r,s),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),i=new Lo(e);return this.curves.push(i),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,i,n,r,s){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+a,e+o,i,n,r,s),this}absarc(t,e,i,n,r,s){return this.absellipse(t,e,i,i,n,r,s),this}ellipse(t,e,i,n,r,s,a,o){const l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(t+l,e+c,i,n,r,s,a,o),this}absellipse(t,e,i,n,r,s,a,o){const l=new uo(t,e,i,n,r,s,a,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Do extends Di{constructor(t=[new Lt(0,-.5),new Lt(.5,0),new Lt(0,.5)],e=12,i=0,n=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},e=Math.floor(e),n=yt(n,0,2*Math.PI);const r=[],s=[],a=[],o=[],l=[],c=1/e,h=new re,u=new Lt,d=new re,p=new re,m=new re;let f=0,g=0;for(let e=0;e<=t.length-1;e++)switch(e){case 0:f=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-f,d.z=0*g,m.copy(d),d.normalize(),o.push(d.x,d.y,d.z);break;case t.length-1:o.push(m.x,m.y,m.z);break;default:f=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-f,d.z=0*g,p.copy(d),d.x+=m.x,d.y+=m.y,d.z+=m.z,d.normalize(),o.push(d.x,d.y,d.z),m.copy(p)}for(let r=0;r<=e;r++){const d=i+r*c*n,p=Math.sin(d),m=Math.cos(d);for(let i=0;i<=t.length-1;i++){h.x=t[i].x*p,h.y=t[i].y,h.z=t[i].x*m,s.push(h.x,h.y,h.z),u.x=r/e,u.y=i/(t.length-1),a.push(u.x,u.y);const n=o[3*i+0]*p,c=o[3*i+1],d=o[3*i+0]*m;l.push(n,c,d)}}for(let i=0;i<e;i++)for(let e=0;e<t.length-1;e++){const n=e+i*t.length,s=n,a=n+t.length,o=n+t.length+1,l=n+1;r.push(s,a,l),r.push(o,l,a)}this.setIndex(r),this.setAttribute("position",new Ti(s,3)),this.setAttribute("uv",new Ti(a,2)),this.setAttribute("normal",new Ti(l,3))}static fromJSON(t){return new Do(t.points,t.segments,t.phiStart,t.phiLength)}}class No extends Do{constructor(t=1,e=1,i=4,n=8){const r=new Io;r.absarc(0,-e/2,t,1.5*Math.PI,0),r.absarc(0,e/2,t,0,.5*Math.PI),super(r.getPoints(i),n),this.type="CapsuleGeometry",this.parameters={radius:t,height:e,capSegments:i,radialSegments:n}}static fromJSON(t){return new No(t.radius,t.length,t.capSegments,t.radialSegments)}}class Oo extends Di{constructor(t=1,e=8,i=0,n=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},e=Math.max(3,e);const r=[],s=[],a=[],o=[],l=new re,c=new Lt;s.push(0,0,0),a.push(0,0,1),o.push(.5,.5);for(let r=0,h=3;r<=e;r++,h+=3){const u=i+r/e*n;l.x=t*Math.cos(u),l.y=t*Math.sin(u),s.push(l.x,l.y,l.z),a.push(0,0,1),c.x=(s[h]/t+1)/2,c.y=(s[h+1]/t+1)/2,o.push(c.x,c.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute("position",new Ti(s,3)),this.setAttribute("normal",new Ti(a,3)),this.setAttribute("uv",new Ti(o,2))}static fromJSON(t){return new Oo(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class zo extends Di{constructor(t=1,e=1,i=1,n=8,r=1,s=!1,a=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:r,openEnded:s,thetaStart:a,thetaLength:o};const l=this;n=Math.floor(n),r=Math.floor(r);const c=[],h=[],u=[],d=[];let p=0;const m=[],f=i/2;let g=0;function v(i){const r=p,s=new Lt,m=new re;let v=0;const x=!0===i?t:e,_=!0===i?1:-1;for(let t=1;t<=n;t++)h.push(0,f*_,0),u.push(0,_,0),d.push(.5,.5),p++;const y=p;for(let t=0;t<=n;t++){const e=t/n*o+a,i=Math.cos(e),r=Math.sin(e);m.x=x*r,m.y=f*_,m.z=x*i,h.push(m.x,m.y,m.z),u.push(0,_,0),s.x=.5*i+.5,s.y=.5*r*_+.5,d.push(s.x,s.y),p++}for(let t=0;t<n;t++){const e=r+t,n=y+t;!0===i?c.push(n,n+1,e):c.push(n+1,n,e),v+=3}l.addGroup(g,v,!0===i?1:2),g+=v}!function(){const s=new re,v=new re;let x=0;const _=(e-t)/i;for(let l=0;l<=r;l++){const c=[],g=l/r,x=g*(e-t)+t;for(let t=0;t<=n;t++){const e=t/n,r=e*o+a,l=Math.sin(r),m=Math.cos(r);v.x=x*l,v.y=-g*i+f,v.z=x*m,h.push(v.x,v.y,v.z),s.set(l,_,m).normalize(),u.push(s.x,s.y,s.z),d.push(e,1-g),c.push(p++)}m.push(c)}for(let t=0;t<n;t++)for(let e=0;e<r;e++){const i=m[e][t],n=m[e+1][t],r=m[e+1][t+1],s=m[e][t+1];c.push(i,n,s),c.push(n,r,s),x+=6}l.addGroup(g,x,0),g+=x}(),!1===s&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(c),this.setAttribute("position",new Ti(h,3)),this.setAttribute("normal",new Ti(u,3)),this.setAttribute("uv",new Ti(d,2))}static fromJSON(t){return new zo(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Uo extends zo{constructor(t=1,e=1,i=8,n=1,r=!1,s=0,a=2*Math.PI){super(0,t,e,i,n,r,s,a),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:s,thetaLength:a}}static fromJSON(t){return new Uo(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Bo extends Di{constructor(t=[],e=[],i=1,n=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:n};const r=[],s=[];function a(t,e,i,n){const r=n+1,s=[];for(let n=0;n<=r;n++){s[n]=[];const a=t.clone().lerp(i,n/r),o=e.clone().lerp(i,n/r),l=r-n;for(let t=0;t<=l;t++)s[n][t]=0===t&&n===r?a:a.clone().lerp(o,t/l)}for(let t=0;t<r;t++)for(let e=0;e<2*(r-t)-1;e++){const i=Math.floor(e/2);e%2==0?(o(s[t][i+1]),o(s[t+1][i]),o(s[t][i])):(o(s[t][i+1]),o(s[t+1][i+1]),o(s[t+1][i]))}}function o(t){r.push(t.x,t.y,t.z)}function l(e,i){const n=3*e;i.x=t[n+0],i.y=t[n+1],i.z=t[n+2]}function c(t,e,i,n){n<0&&1===t.x&&(s[e]=t.x-1),0===i.x&&0===i.z&&(s[e]=n/2/Math.PI+.5)}function h(t){return Math.atan2(t.z,-t.x)}!function(t){const i=new re,n=new re,r=new re;for(let s=0;s<e.length;s+=3)l(e[s+0],i),l(e[s+1],n),l(e[s+2],r),a(i,n,r,t)}(n),function(t){const e=new re;for(let i=0;i<r.length;i+=3)e.x=r[i+0],e.y=r[i+1],e.z=r[i+2],e.normalize().multiplyScalar(t),r[i+0]=e.x,r[i+1]=e.y,r[i+2]=e.z}(i),function(){const t=new re;for(let i=0;i<r.length;i+=3){t.x=r[i+0],t.y=r[i+1],t.z=r[i+2];const n=h(t)/2/Math.PI+.5,a=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);s.push(n,1-a)}var e;(function(){const t=new re,e=new re,i=new re,n=new re,a=new Lt,o=new Lt,l=new Lt;for(let u=0,d=0;u<r.length;u+=9,d+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),i.set(r[u+6],r[u+7],r[u+8]),a.set(s[d+0],s[d+1]),o.set(s[d+2],s[d+3]),l.set(s[d+4],s[d+5]),n.copy(t).add(e).add(i).divideScalar(3);const p=h(n);c(a,d+0,t,p),c(o,d+2,e,p),c(l,d+4,i,p)}})(),function(){for(let t=0;t<s.length;t+=6){const e=s[t+0],i=s[t+2],n=s[t+4],r=Math.max(e,i,n),a=Math.min(e,i,n);r>.9&&a<.1&&(e<.2&&(s[t+0]+=1),i<.2&&(s[t+2]+=1),n<.2&&(s[t+4]+=1))}}()}(),this.setAttribute("position",new Ti(r,3)),this.setAttribute("normal",new Ti(r.slice(),3)),this.setAttribute("uv",new Ti(s,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(t){return new Bo(t.vertices,t.indices,t.radius,t.details)}}class Fo extends Bo{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2,n=1/i;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-i,0,-n,i,0,n,-i,0,n,i,-n,-i,0,-n,i,0,n,-i,0,n,i,0,-i,0,-n,i,0,-n,-i,0,n,i,0,n],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new Fo(t.radius,t.detail)}}const ko=new re,Go=new re,Vo=new re,Ho=new gi;class Wo extends Di{constructor(t=null,e=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:t,thresholdAngle:e},null!==t){const i=4,n=Math.pow(10,i),r=Math.cos(vt*e),s=t.getIndex(),a=t.getAttribute("position"),o=s?s.count:a.count,l=[0,0,0],c=["a","b","c"],h=new Array(3),u={},d=[];for(let t=0;t<o;t+=3){s?(l[0]=s.getX(t),l[1]=s.getX(t+1),l[2]=s.getX(t+2)):(l[0]=t,l[1]=t+1,l[2]=t+2);const{a:e,b:i,c:o}=Ho;if(e.fromBufferAttribute(a,l[0]),i.fromBufferAttribute(a,l[1]),o.fromBufferAttribute(a,l[2]),Ho.getNormal(Vo),h[0]=`${Math.round(e.x*n)},${Math.round(e.y*n)},${Math.round(e.z*n)}`,h[1]=`${Math.round(i.x*n)},${Math.round(i.y*n)},${Math.round(i.z*n)}`,h[2]=`${Math.round(o.x*n)},${Math.round(o.y*n)},${Math.round(o.z*n)}`,h[0]!==h[1]&&h[1]!==h[2]&&h[2]!==h[0])for(let t=0;t<3;t++){const e=(t+1)%3,i=h[t],n=h[e],s=Ho[c[t]],a=Ho[c[e]],o=`${i}_${n}`,p=`${n}_${i}`;p in u&&u[p]?(Vo.dot(u[p].normal)<=r&&(d.push(s.x,s.y,s.z),d.push(a.x,a.y,a.z)),u[p]=null):o in u||(u[o]={index0:l[t],index1:l[e],normal:Vo.clone()})}}for(const t in u)if(u[t]){const{index0:e,index1:i}=u[t];ko.fromBufferAttribute(a,e),Go.fromBufferAttribute(a,i),d.push(ko.x,ko.y,ko.z),d.push(Go.x,Go.y,Go.z)}this.setAttribute("position",new Ti(d,3))}}}class jo extends Io{constructor(t){super(t),this.uuid=_t(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let i=0,n=this.holes.length;i<n;i++)e[i]=this.holes[i].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const i=t.holes[e];this.holes.push(i.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,i=this.holes.length;e<i;e++){const i=this.holes[e];t.holes.push(i.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const i=t.holes[e];this.holes.push((new Io).fromJSON(i))}return this}}const qo=function(t,e,i=2){const n=e&&e.length,r=n?e[0]*i:t.length;let s=Xo(t,0,r,i,!0);const a=[];if(!s||s.next===s.prev)return a;let o,l,c,h,u,d,p;if(n&&(s=function(t,e,i,n){const r=[];let s,a,o,l,c;for(s=0,a=e.length;s<a;s++)o=e[s]*n,l=s<a-1?e[s+1]*n:t.length,c=Xo(t,o,l,n,!1),c===c.next&&(c.steiner=!0),r.push(rl(c));for(r.sort(tl),s=0;s<r.length;s++)i=el(r[s],i);return i}(t,e,s,i)),t.length>80*i){o=c=t[0],l=h=t[1];for(let e=i;e<r;e+=i)u=t[e],d=t[e+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=0!==p?32767/p:0}return Zo(s,a,i,o,l,p,0),a};function Xo(t,e,i,n,r){let s,a;if(r===function(t,e,i,n){let r=0;for(let s=e,a=i-n;s<i;s+=n)r+=(t[a]-t[s])*(t[s+1]+t[a+1]),a=s;return r}(t,e,i,n)>0)for(s=e;s<i;s+=n)a=ml(s,t[s],t[s+1],a);else for(s=i-n;s>=e;s-=n)a=ml(s,t[s],t[s+1],a);return a&&ll(a,a.next)&&(fl(a),a=a.next),a}function Yo(t,e){if(!t)return t;e||(e=t);let i,n=t;do{if(i=!1,n.steiner||!ll(n,n.next)&&0!==ol(n.prev,n,n.next))n=n.next;else{if(fl(n),n=e=n.prev,n===n.next)break;i=!0}}while(i||n!==e);return e}function Zo(t,e,i,n,r,s,a){if(!t)return;!a&&s&&function(t,e,i,n){let r=t;do{0===r.z&&(r.z=nl(r.x,r.y,e,i,n)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,i,n,r,s,a,o,l,c=1;do{for(i=t,t=null,s=null,a=0;i;){for(a++,n=i,o=0,e=0;e<c&&(o++,n=n.nextZ,n);e++);for(l=c;o>0||l>0&&n;)0!==o&&(0===l||!n||i.z<=n.z)?(r=i,i=i.nextZ,o--):(r=n,n=n.nextZ,l--),s?s.nextZ=r:t=r,r.prevZ=s,s=r;i=n}s.nextZ=null,c*=2}while(a>1)}(r)}(t,n,r,s);let o,l,c=t;for(;t.prev!==t.next;)if(o=t.prev,l=t.next,s?Ko(t,n,r,s):Jo(t))e.push(o.i/i|0),e.push(t.i/i|0),e.push(l.i/i|0),fl(t),t=l.next,c=l.next;else if((t=l)===c){a?1===a?Zo(t=$o(Yo(t),e,i),e,i,n,r,s,2):2===a&&Qo(t,e,i,n,r,s):Zo(Yo(t),e,i,n,r,s,1);break}}function Jo(t){const e=t.prev,i=t,n=t.next;if(ol(e,i,n)>=0)return!1;const r=e.x,s=i.x,a=n.x,o=e.y,l=i.y,c=n.y,h=r<s?r<a?r:a:s<a?s:a,u=o<l?o<c?o:c:l<c?l:c,d=r>s?r>a?r:a:s>a?s:a,p=o>l?o>c?o:c:l>c?l:c;let m=n.next;for(;m!==e;){if(m.x>=h&&m.x<=d&&m.y>=u&&m.y<=p&&sl(r,o,s,l,a,c,m.x,m.y)&&ol(m.prev,m,m.next)>=0)return!1;m=m.next}return!0}function Ko(t,e,i,n){const r=t.prev,s=t,a=t.next;if(ol(r,s,a)>=0)return!1;const o=r.x,l=s.x,c=a.x,h=r.y,u=s.y,d=a.y,p=o<l?o<c?o:c:l<c?l:c,m=h<u?h<d?h:d:u<d?u:d,f=o>l?o>c?o:c:l>c?l:c,g=h>u?h>d?h:d:u>d?u:d,v=nl(p,m,e,i,n),x=nl(f,g,e,i,n);let _=t.prevZ,y=t.nextZ;for(;_&&_.z>=v&&y&&y.z<=x;){if(_.x>=p&&_.x<=f&&_.y>=m&&_.y<=g&&_!==r&&_!==a&&sl(o,h,l,u,c,d,_.x,_.y)&&ol(_.prev,_,_.next)>=0)return!1;if(_=_.prevZ,y.x>=p&&y.x<=f&&y.y>=m&&y.y<=g&&y!==r&&y!==a&&sl(o,h,l,u,c,d,y.x,y.y)&&ol(y.prev,y,y.next)>=0)return!1;y=y.nextZ}for(;_&&_.z>=v;){if(_.x>=p&&_.x<=f&&_.y>=m&&_.y<=g&&_!==r&&_!==a&&sl(o,h,l,u,c,d,_.x,_.y)&&ol(_.prev,_,_.next)>=0)return!1;_=_.prevZ}for(;y&&y.z<=x;){if(y.x>=p&&y.x<=f&&y.y>=m&&y.y<=g&&y!==r&&y!==a&&sl(o,h,l,u,c,d,y.x,y.y)&&ol(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}function $o(t,e,i){let n=t;do{const r=n.prev,s=n.next.next;!ll(r,s)&&cl(r,n,n.next,s)&&dl(r,s)&&dl(s,r)&&(e.push(r.i/i|0),e.push(n.i/i|0),e.push(s.i/i|0),fl(n),fl(n.next),n=t=s),n=n.next}while(n!==t);return Yo(n)}function Qo(t,e,i,n,r,s){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&al(a,t)){let o=pl(a,t);return a=Yo(a,a.next),o=Yo(o,o.next),Zo(a,e,i,n,r,s,0),void Zo(o,e,i,n,r,s,0)}t=t.next}a=a.next}while(a!==t)}function tl(t,e){return t.x-e.x}function el(t,e){const i=function(t,e){let i,n=e,r=-1/0;const s=t.x,a=t.y;do{if(a<=n.y&&a>=n.next.y&&n.next.y!==n.y){const t=n.x+(a-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=s&&t>r&&(r=t,i=n.x<n.next.x?n:n.next,t===s))return i}n=n.next}while(n!==e);if(!i)return null;const o=i,l=i.x,c=i.y;let h,u=1/0;n=i;do{s>=n.x&&n.x>=l&&s!==n.x&&sl(a<c?s:r,a,l,c,a<c?r:s,a,n.x,n.y)&&(h=Math.abs(a-n.y)/(s-n.x),dl(n,t)&&(h<u||h===u&&(n.x>i.x||n.x===i.x&&il(i,n)))&&(i=n,u=h)),n=n.next}while(n!==o);return i}(t,e);if(!i)return e;const n=pl(i,t);return Yo(n,n.next),Yo(i,i.next)}function il(t,e){return ol(t.prev,t,e.prev)<0&&ol(e.next,t,t.next)<0}function nl(t,e,i,n,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-i)*r|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-n)*r|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function rl(t){let e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function sl(t,e,i,n,r,s,a,o){return(r-a)*(e-o)>=(t-a)*(s-o)&&(t-a)*(n-o)>=(i-a)*(e-o)&&(i-a)*(s-o)>=(r-a)*(n-o)}function al(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&cl(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&(dl(t,e)&&dl(e,t)&&function(t,e){let i=t,n=!1;const r=(t.x+e.x)/2,s=(t.y+e.y)/2;do{i.y>s!=i.next.y>s&&i.next.y!==i.y&&r<(i.next.x-i.x)*(s-i.y)/(i.next.y-i.y)+i.x&&(n=!n),i=i.next}while(i!==t);return n}(t,e)&&(ol(t.prev,t,e.prev)||ol(t,e.prev,e))||ll(t,e)&&ol(t.prev,t,t.next)>0&&ol(e.prev,e,e.next)>0)}function ol(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function ll(t,e){return t.x===e.x&&t.y===e.y}function cl(t,e,i,n){const r=ul(ol(t,e,i)),s=ul(ol(t,e,n)),a=ul(ol(i,n,t)),o=ul(ol(i,n,e));return r!==s&&a!==o||(!(0!==r||!hl(t,i,e))||(!(0!==s||!hl(t,n,e))||(!(0!==a||!hl(i,t,n))||!(0!==o||!hl(i,e,n)))))}function hl(t,e,i){return e.x<=Math.max(t.x,i.x)&&e.x>=Math.min(t.x,i.x)&&e.y<=Math.max(t.y,i.y)&&e.y>=Math.min(t.y,i.y)}function ul(t){return t>0?1:t<0?-1:0}function dl(t,e){return ol(t.prev,t,t.next)<0?ol(t,e,t.next)>=0&&ol(t,t.prev,e)>=0:ol(t,e,t.prev)<0||ol(t,t.next,e)<0}function pl(t,e){const i=new gl(t.i,t.x,t.y),n=new gl(e.i,e.x,e.y),r=t.next,s=e.prev;return t.next=e,e.prev=t,i.next=r,r.prev=i,n.next=i,i.prev=n,s.next=n,n.prev=s,n}function ml(t,e,i,n){const r=new gl(t,e,i);return n?(r.next=n.next,r.prev=n,n.next.prev=r,n.next=r):(r.prev=r,r.next=r),r}function fl(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function gl(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}class vl{static area(t){const e=t.length;let i=0;for(let n=e-1,r=0;r<e;n=r++)i+=t[n].x*t[r].y-t[r].x*t[n].y;return.5*i}static isClockWise(t){return vl.area(t)<0}static triangulateShape(t,e){const i=[],n=[],r=[];xl(t),_l(i,t);let s=t.length;e.forEach(xl);for(let t=0;t<e.length;t++)n.push(s),s+=e[t].length,_l(i,e[t]);const a=qo(i,n);for(let t=0;t<a.length;t+=3)r.push(a.slice(t,t+3));return r}}function xl(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function _l(t,e){for(let i=0;i<e.length;i++)t.push(e[i].x),t.push(e[i].y)}class yl extends Di{constructor(t=new jo([new Lt(.5,.5),new Lt(-.5,.5),new Lt(-.5,-.5),new Lt(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const i=this,n=[],r=[];for(let e=0,i=t.length;e<i;e++){s(t[e])}function s(t){const s=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1,l=void 0!==e.depth?e.depth:1;let c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:.2,u=void 0!==e.bevelSize?e.bevelSize:h-.1,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const m=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:Ml;let g,v,x,_,y,M=!1;m&&(g=m.getSpacedPoints(o),M=!0,c=!1,v=m.computeFrenetFrames(o,!1),x=new re,_=new re,y=new re),c||(p=0,h=0,u=0,d=0);const b=t.extractPoints(a);let w=b.shape;const S=b.holes;if(!vl.isClockWise(w)){w=w.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];vl.isClockWise(e)&&(S[t]=e.reverse())}}const T=vl.triangulateShape(w,S),A=w;for(let t=0,e=S.length;t<e;t++){const e=S[t];w=w.concat(e)}function E(t,e,i){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(i).add(t)}const C=w.length,L=T.length;function R(t,e,i){let n,r,s;const a=t.x-e.x,o=t.y-e.y,l=i.x-t.x,c=i.y-t.y,h=a*a+o*o,u=a*c-o*l;if(Math.abs(u)>Number.EPSILON){const u=Math.sqrt(h),d=Math.sqrt(l*l+c*c),p=e.x-o/u,m=e.y+a/u,f=((i.x-c/d-p)*c-(i.y+l/d-m)*l)/(a*c-o*l);n=p+a*f-t.x,r=m+o*f-t.y;const g=n*n+r*r;if(g<=2)return new Lt(n,r);s=Math.sqrt(g/2)}else{let t=!1;a>Number.EPSILON?l>Number.EPSILON&&(t=!0):a<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(c)&&(t=!0),t?(n=-o,r=a,s=Math.sqrt(h)):(n=a,r=o,s=Math.sqrt(h/2))}return new Lt(n/s,r/s)}const P=[];for(let t=0,e=A.length,i=e-1,n=t+1;t<e;t++,i++,n++)i===e&&(i=0),n===e&&(n=0),P[t]=R(A[t],A[i],A[n]);const I=[];let D,N=P.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];D=[];for(let t=0,i=e.length,n=i-1,r=t+1;t<i;t++,n++,r++)n===i&&(n=0),r===i&&(r=0),D[t]=R(e[t],e[n],e[r]);I.push(D),N=N.concat(D)}for(let t=0;t<p;t++){const e=t/p,i=h*Math.cos(e*Math.PI/2),n=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=A.length;t<e;t++){const e=E(A[t],P[t],n);U(e.x,e.y,-i)}for(let t=0,e=S.length;t<e;t++){const e=S[t];D=I[t];for(let t=0,r=e.length;t<r;t++){const r=E(e[t],D[t],n);U(r.x,r.y,-i)}}}const O=u+d;for(let t=0;t<C;t++){const e=c?E(w[t],N[t],O):w[t];M?(_.copy(v.normals[0]).multiplyScalar(e.x),x.copy(v.binormals[0]).multiplyScalar(e.y),y.copy(g[0]).add(_).add(x),U(y.x,y.y,y.z)):U(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<C;e++){const i=c?E(w[e],N[e],O):w[e];M?(_.copy(v.normals[t]).multiplyScalar(i.x),x.copy(v.binormals[t]).multiplyScalar(i.y),y.copy(g[t]).add(_).add(x),U(y.x,y.y,y.z)):U(i.x,i.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,i=h*Math.cos(e*Math.PI/2),n=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=A.length;t<e;t++){const e=E(A[t],P[t],n);U(e.x,e.y,l+i)}for(let t=0,e=S.length;t<e;t++){const e=S[t];D=I[t];for(let t=0,r=e.length;t<r;t++){const r=E(e[t],D[t],n);M?U(r.x,r.y+g[o-1].y,g[o-1].x+i):U(r.x,r.y,l+i)}}}function z(t,e){let i=t.length;for(;--i>=0;){const n=i;let r=i-1;r<0&&(r=t.length-1);for(let t=0,i=o+2*p;t<i;t++){const i=C*t,s=C*(t+1);F(e+n+i,e+r+i,e+r+s,e+n+s)}}}function U(t,e,i){s.push(t),s.push(e),s.push(i)}function B(t,e,r){k(t),k(e),k(r);const s=n.length/3,a=f.generateTopUV(i,n,s-3,s-2,s-1);G(a[0]),G(a[1]),G(a[2])}function F(t,e,r,s){k(t),k(e),k(s),k(e),k(r),k(s);const a=n.length/3,o=f.generateSideWallUV(i,n,a-6,a-3,a-2,a-1);G(o[0]),G(o[1]),G(o[3]),G(o[1]),G(o[2]),G(o[3])}function k(t){n.push(s[3*t+0]),n.push(s[3*t+1]),n.push(s[3*t+2])}function G(t){r.push(t.x),r.push(t.y)}!function(){const t=n.length/3;if(c){let t=0,e=C*t;for(let t=0;t<L;t++){const i=T[t];B(i[2]+e,i[1]+e,i[0]+e)}t=o+2*p,e=C*t;for(let t=0;t<L;t++){const i=T[t];B(i[0]+e,i[1]+e,i[2]+e)}}else{for(let t=0;t<L;t++){const e=T[t];B(e[2],e[1],e[0])}for(let t=0;t<L;t++){const e=T[t];B(e[0]+C*o,e[1]+C*o,e[2]+C*o)}}i.addGroup(t,n.length/3-t,0)}(),function(){const t=n.length/3;let e=0;z(A,e),e+=A.length;for(let t=0,i=S.length;t<i;t++){const i=S[t];z(i,e),e+=i.length}i.addGroup(t,n.length/3-t,1)}()}this.setAttribute("position",new Ti(n,3)),this.setAttribute("uv",new Ti(r,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,i){if(i.shapes=[],Array.isArray(t))for(let e=0,n=t.length;e<n;e++){const n=t[e];i.shapes.push(n.uuid)}else i.shapes.push(t.uuid);i.options=Object.assign({},e),void 0!==e.extrudePath&&(i.options.extrudePath=e.extrudePath.toJSON());return i}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const i=[];for(let n=0,r=t.shapes.length;n<r;n++){const r=e[t.shapes[n]];i.push(r)}const n=t.options.extrudePath;return void 0!==n&&(t.options.extrudePath=(new Ro[n.type]).fromJSON(n)),new yl(i,t.options)}}const Ml={generateTopUV:function(t,e,i,n,r){const s=e[3*i],a=e[3*i+1],o=e[3*n],l=e[3*n+1],c=e[3*r],h=e[3*r+1];return[new Lt(s,a),new Lt(o,l),new Lt(c,h)]},generateSideWallUV:function(t,e,i,n,r,s){const a=e[3*i],o=e[3*i+1],l=e[3*i+2],c=e[3*n],h=e[3*n+1],u=e[3*n+2],d=e[3*r],p=e[3*r+1],m=e[3*r+2],f=e[3*s],g=e[3*s+1],v=e[3*s+2];return Math.abs(o-h)<Math.abs(a-c)?[new Lt(a,1-l),new Lt(c,1-u),new Lt(d,1-m),new Lt(f,1-v)]:[new Lt(o,1-l),new Lt(h,1-u),new Lt(p,1-m),new Lt(g,1-v)]}};class bl extends Bo{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2;super([-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new bl(t.radius,t.detail)}}class wl extends Bo{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new wl(t.radius,t.detail)}}class Sl extends Di{constructor(t=.5,e=1,i=8,n=1,r=0,s=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:s},i=Math.max(3,i);const a=[],o=[],l=[],c=[];let h=t;const u=(e-t)/(n=Math.max(1,n)),d=new re,p=new Lt;for(let t=0;t<=n;t++){for(let t=0;t<=i;t++){const n=r+t/i*s;d.x=h*Math.cos(n),d.y=h*Math.sin(n),o.push(d.x,d.y,d.z),l.push(0,0,1),p.x=(d.x/e+1)/2,p.y=(d.y/e+1)/2,c.push(p.x,p.y)}h+=u}for(let t=0;t<n;t++){const e=t*(i+1);for(let t=0;t<i;t++){const n=t+e,r=n,s=n+i+1,o=n+i+2,l=n+1;a.push(r,s,l),a.push(s,o,l)}}this.setIndex(a),this.setAttribute("position",new Ti(o,3)),this.setAttribute("normal",new Ti(l,3)),this.setAttribute("uv",new Ti(c,2))}static fromJSON(t){return new Sl(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class Tl extends Di{constructor(t=new jo([new Lt(0,.5),new Lt(-.5,-.5),new Lt(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const i=[],n=[],r=[],s=[];let a=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(a,o,e),a+=o,o=0;function l(t){const a=n.length/3,l=t.extractPoints(e);let c=l.shape;const h=l.holes;!1===vl.isClockWise(c)&&(c=c.reverse());for(let t=0,e=h.length;t<e;t++){const e=h[t];!0===vl.isClockWise(e)&&(h[t]=e.reverse())}const u=vl.triangulateShape(c,h);for(let t=0,e=h.length;t<e;t++){const e=h[t];c=c.concat(e)}for(let t=0,e=c.length;t<e;t++){const e=c[t];n.push(e.x,e.y,0),r.push(0,0,1),s.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t],n=e[0]+a,r=e[1]+a,s=e[2]+a;i.push(n,r,s),o+=3}}this.setIndex(i),this.setAttribute("position",new Ti(n,3)),this.setAttribute("normal",new Ti(r,3)),this.setAttribute("uv",new Ti(s,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let i=0,n=t.length;i<n;i++){const n=t[i];e.shapes.push(n.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const i=[];for(let n=0,r=t.shapes.length;n<r;n++){const r=e[t.shapes[n]];i.push(r)}return new Tl(i,t.curveSegments)}}class Al extends Di{constructor(t=1,e=32,i=16,n=0,r=2*Math.PI,s=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:r,thetaStart:s,thetaLength:a},e=Math.max(3,Math.floor(e)),i=Math.max(2,Math.floor(i));const o=Math.min(s+a,Math.PI);let l=0;const c=[],h=new re,u=new re,d=[],p=[],m=[],f=[];for(let d=0;d<=i;d++){const g=[],v=d/i;let x=0;0==d&&0==s?x=.5/e:d==i&&o==Math.PI&&(x=-.5/e);for(let i=0;i<=e;i++){const o=i/e;h.x=-t*Math.cos(n+o*r)*Math.sin(s+v*a),h.y=t*Math.cos(s+v*a),h.z=t*Math.sin(n+o*r)*Math.sin(s+v*a),p.push(h.x,h.y,h.z),u.copy(h).normalize(),m.push(u.x,u.y,u.z),f.push(o+x,1-v),g.push(l++)}c.push(g)}for(let t=0;t<i;t++)for(let n=0;n<e;n++){const e=c[t][n+1],r=c[t][n],a=c[t+1][n],l=c[t+1][n+1];(0!==t||s>0)&&d.push(e,r,l),(t!==i-1||o<Math.PI)&&d.push(r,a,l)}this.setIndex(d),this.setAttribute("position",new Ti(p,3)),this.setAttribute("normal",new Ti(m,3)),this.setAttribute("uv",new Ti(f,2))}static fromJSON(t){return new Al(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class El extends Bo{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new El(t.radius,t.detail)}}class Cl extends Di{constructor(t=1,e=.4,i=8,n=6,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:r},i=Math.floor(i),n=Math.floor(n);const s=[],a=[],o=[],l=[],c=new re,h=new re,u=new re;for(let s=0;s<=i;s++)for(let d=0;d<=n;d++){const p=d/n*r,m=s/i*Math.PI*2;h.x=(t+e*Math.cos(m))*Math.cos(p),h.y=(t+e*Math.cos(m))*Math.sin(p),h.z=e*Math.sin(m),a.push(h.x,h.y,h.z),c.x=t*Math.cos(p),c.y=t*Math.sin(p),u.subVectors(h,c).normalize(),o.push(u.x,u.y,u.z),l.push(d/n),l.push(s/i)}for(let t=1;t<=i;t++)for(let e=1;e<=n;e++){const i=(n+1)*t+e-1,r=(n+1)*(t-1)+e-1,a=(n+1)*(t-1)+e,o=(n+1)*t+e;s.push(i,r,o),s.push(r,a,o)}this.setIndex(s),this.setAttribute("position",new Ti(a,3)),this.setAttribute("normal",new Ti(o,3)),this.setAttribute("uv",new Ti(l,2))}static fromJSON(t){return new Cl(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class Ll extends Di{constructor(t=1,e=.4,i=64,n=8,r=2,s=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:r,q:s},i=Math.floor(i),n=Math.floor(n);const a=[],o=[],l=[],c=[],h=new re,u=new re,d=new re,p=new re,m=new re,f=new re,g=new re;for(let a=0;a<=i;++a){const x=a/i*r*Math.PI*2;v(x,r,s,t,d),v(x+.01,r,s,t,p),f.subVectors(p,d),g.addVectors(p,d),m.crossVectors(f,g),g.crossVectors(m,f),m.normalize(),g.normalize();for(let t=0;t<=n;++t){const r=t/n*Math.PI*2,s=-e*Math.cos(r),p=e*Math.sin(r);h.x=d.x+(s*g.x+p*m.x),h.y=d.y+(s*g.y+p*m.y),h.z=d.z+(s*g.z+p*m.z),o.push(h.x,h.y,h.z),u.subVectors(h,d).normalize(),l.push(u.x,u.y,u.z),c.push(a/i),c.push(t/n)}}for(let t=1;t<=i;t++)for(let e=1;e<=n;e++){const i=(n+1)*(t-1)+(e-1),r=(n+1)*t+(e-1),s=(n+1)*t+e,o=(n+1)*(t-1)+e;a.push(i,r,o),a.push(r,s,o)}function v(t,e,i,n,r){const s=Math.cos(t),a=Math.sin(t),o=i/e*t,l=Math.cos(o);r.x=n*(2+l)*.5*s,r.y=n*(2+l)*a*.5,r.z=n*Math.sin(o)*.5}this.setIndex(a),this.setAttribute("position",new Ti(o,3)),this.setAttribute("normal",new Ti(l,3)),this.setAttribute("uv",new Ti(c,2))}static fromJSON(t){return new Ll(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class Rl extends Di{constructor(t=new Co(new re(-1,-1,0),new re(-1,1,0),new re(1,1,0)),e=64,i=1,n=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:r};const s=t.computeFrenetFrames(e,r);this.tangents=s.tangents,this.normals=s.normals,this.binormals=s.binormals;const a=new re,o=new re,l=new Lt;let c=new re;const h=[],u=[],d=[],p=[];function m(r){c=t.getPointAt(r/e,c);const l=s.normals[r],d=s.binormals[r];for(let t=0;t<=n;t++){const e=t/n*Math.PI*2,r=Math.sin(e),s=-Math.cos(e);o.x=s*l.x+r*d.x,o.y=s*l.y+r*d.y,o.z=s*l.z+r*d.z,o.normalize(),u.push(o.x,o.y,o.z),a.x=c.x+i*o.x,a.y=c.y+i*o.y,a.z=c.z+i*o.z,h.push(a.x,a.y,a.z)}}!function(){for(let t=0;t<e;t++)m(t);m(!1===r?e:0),function(){for(let t=0;t<=e;t++)for(let i=0;i<=n;i++)l.x=t/e,l.y=i/n,d.push(l.x,l.y)}(),function(){for(let t=1;t<=e;t++)for(let e=1;e<=n;e++){const i=(n+1)*(t-1)+(e-1),r=(n+1)*t+(e-1),s=(n+1)*t+e,a=(n+1)*(t-1)+e;p.push(i,r,a),p.push(r,s,a)}}()}(),this.setIndex(p),this.setAttribute("position",new Ti(h,3)),this.setAttribute("normal",new Ti(u,3)),this.setAttribute("uv",new Ti(d,2))}toJSON(){const t=super.toJSON();return t.path=this.parameters.path.toJSON(),t}static fromJSON(t){return new Rl((new Ro[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class Pl extends Di{constructor(t=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:t},null!==t){const e=[],i=new Set,n=new re,r=new re;if(null!==t.index){const s=t.attributes.position,a=t.index;let o=t.groups;0===o.length&&(o=[{start:0,count:a.count,materialIndex:0}]);for(let t=0,l=o.length;t<l;++t){const l=o[t],c=l.start;for(let t=c,o=c+l.count;t<o;t+=3)for(let o=0;o<3;o++){const l=a.getX(t+o),c=a.getX(t+(o+1)%3);n.fromBufferAttribute(s,l),r.fromBufferAttribute(s,c),!0===Il(n,r,i)&&(e.push(n.x,n.y,n.z),e.push(r.x,r.y,r.z))}}}else{const s=t.attributes.position;for(let t=0,a=s.count/3;t<a;t++)for(let a=0;a<3;a++){const o=3*t+a,l=3*t+(a+1)%3;n.fromBufferAttribute(s,o),r.fromBufferAttribute(s,l),!0===Il(n,r,i)&&(e.push(n.x,n.y,n.z),e.push(r.x,r.y,r.z))}}this.setAttribute("position",new Ti(e,3))}}}function Il(t,e,i){const n=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`,r=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;return!0!==i.has(n)&&!0!==i.has(r)&&(i.add(n),i.add(r),!0)}var Dl=Object.freeze({__proto__:null,BoxGeometry:Qi,CapsuleGeometry:No,CircleGeometry:Oo,ConeGeometry:Uo,CylinderGeometry:zo,DodecahedronGeometry:Fo,EdgesGeometry:Wo,ExtrudeGeometry:yl,IcosahedronGeometry:bl,LatheGeometry:Do,OctahedronGeometry:wl,PlaneGeometry:Mn,PolyhedronGeometry:Bo,RingGeometry:Sl,ShapeGeometry:Tl,SphereGeometry:Al,TetrahedronGeometry:El,TorusGeometry:Cl,TorusKnotGeometry:Ll,TubeGeometry:Rl,WireframeGeometry:Pl});class Nl extends xi{constructor(t){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new qt(0),this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.fog=t.fog,this}}class Ol extends sn{constructor(t){super(t),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class zl extends xi{constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new qt(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new qt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Ul extends zl{constructor(t){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Lt(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return yt(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new qt(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new qt(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new qt(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._iridescence=0,this._transmission=0,this.setValues(t)}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){this._iridescence>0!=t>0&&this.version++,this._iridescence=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.ior=t.ior,this.iridescence=t.iridescence,this.iridescenceMap=t.iridescenceMap,this.iridescenceIOR=t.iridescenceIOR,this.iridescenceThicknessRange=[...t.iridescenceThicknessRange],this.iridescenceThicknessMap=t.iridescenceThicknessMap,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}class Bl extends xi{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new qt(16777215),this.specular=new qt(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new qt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Fl extends xi{constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new qt(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new qt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}class kl extends xi{constructor(t){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}class Gl extends xi{constructor(t){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new qt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new qt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Vl extends xi{constructor(t){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new qt(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Hl extends ja{constructor(t){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}function Wl(t,e,i){return ql(t)?new t.constructor(t.subarray(e,void 0!==i?i:t.length)):t.slice(e,i)}function jl(t,e,i){return!t||!i&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)}function ql(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Xl(t){const e=t.length,i=new Array(e);for(let t=0;t!==e;++t)i[t]=t;return i.sort((function(e,i){return t[e]-t[i]})),i}function Yl(t,e,i){const n=t.length,r=new t.constructor(n);for(let s=0,a=0;a!==n;++s){const n=i[s]*e;for(let i=0;i!==e;++i)r[a++]=t[n+i]}return r}function Zl(t,e,i,n){let r=1,s=t[0];for(;void 0!==s&&void 0===s[n];)s=t[r++];if(void 0===s)return;let a=s[n];if(void 0!==a)if(Array.isArray(a))do{a=s[n],void 0!==a&&(e.push(s.time),i.push.apply(i,a)),s=t[r++]}while(void 0!==s);else if(void 0!==a.toArray)do{a=s[n],void 0!==a&&(e.push(s.time),a.toArray(i,i.length)),s=t[r++]}while(void 0!==s);else do{a=s[n],void 0!==a&&(e.push(s.time),i.push(a)),s=t[r++]}while(void 0!==s)}var Jl=Object.freeze({__proto__:null,arraySlice:Wl,convertArray:jl,isTypedArray:ql,getKeyframeOrder:Xl,sortedArray:Yl,flattenJSON:Zl,subclip:function(t,e,i,n,r=30){const s=t.clone();s.name=e;const a=[];for(let t=0;t<s.tracks.length;++t){const e=s.tracks[t],o=e.getValueSize(),l=[],c=[];for(let t=0;t<e.times.length;++t){const s=e.times[t]*r;if(!(s<i||s>=n)){l.push(e.times[t]);for(let i=0;i<o;++i)c.push(e.values[t*o+i])}}0!==l.length&&(e.times=jl(l,e.times.constructor),e.values=jl(c,e.values.constructor),a.push(e))}s.tracks=a;let o=1/0;for(let t=0;t<s.tracks.length;++t)o>s.tracks[t].times[0]&&(o=s.tracks[t].times[0]);for(let t=0;t<s.tracks.length;++t)s.tracks[t].shift(-1*o);return s.resetDuration(),s},makeClipAdditive:function(t,e=0,i=t,n=30){n<=0&&(n=30);const r=i.tracks.length,s=e/n;for(let e=0;e<r;++e){const n=i.tracks[e],r=n.ValueTypeName;if("bool"===r||"string"===r)continue;const a=t.tracks.find((function(t){return t.name===n.name&&t.ValueTypeName===r}));if(void 0===a)continue;let o=0;const l=n.getValueSize();n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const h=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const u=n.times.length-1;let d;if(s<=n.times[0]){const t=o,e=l-o;d=Wl(n.values,t,e)}else if(s>=n.times[u]){const t=u*l+o,e=t+l-o;d=Wl(n.values,t,e)}else{const t=n.createInterpolant(),e=o,i=l-o;t.evaluate(s),d=Wl(t.resultBuffer,e,i)}if("quaternion"===r){(new ne).fromArray(d).normalize().conjugate().toArray(d)}const p=a.times.length;for(let t=0;t<p;++t){const e=t*h+c;if("quaternion"===r)ne.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e);else{const t=h-2*c;for(let i=0;i<t;++i)a.values[e+i]-=d[i]}}}return t.blendMode=st,t}});class Kl{constructor(t,e,i,n){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new e.constructor(i),this.sampleValues=e,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let i=this._cachedIndex,n=e[i],r=e[i-1];t:{e:{let s;i:{n:if(!(t<n)){for(let s=i+2;;){if(void 0===n){if(t<r)break n;return i=e.length,this._cachedIndex=i,this.copySampleValue_(i-1)}if(i===s)break;if(r=n,n=e[++i],t<n)break e}s=e.length;break i}if(t>=r)break t;{const a=e[1];t<a&&(i=2,r=a);for(let s=i-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(i===s)break;if(n=r,r=e[--i-1],t>=r)break e}s=i,i=0}}for(;i<s;){const n=i+s>>>1;t<e[n]?s=n:i=n+1}if(n=e[i],r=e[i-1],void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===n)return i=e.length,this._cachedIndex=i,this.copySampleValue_(i-1)}this._cachedIndex=i,this.intervalChanged_(i,r,n)}return this.interpolate_(i,r,t,n)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,i=this.sampleValues,n=this.valueSize,r=t*n;for(let t=0;t!==n;++t)e[t]=i[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class $l extends Kl{constructor(t,e,i,n){super(t,e,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:et,endingEnd:et}}intervalChanged_(t,e,i){const n=this.parameterPositions;let r=t-2,s=t+1,a=n[r],o=n[s];if(void 0===a)switch(this.getSettings_().endingStart){case it:r=t,a=2*e-i;break;case nt:r=n.length-2,a=e+n[r]-n[r+1];break;default:r=t,a=i}if(void 0===o)switch(this.getSettings_().endingEnd){case it:s=t,o=2*i-e;break;case nt:s=1,o=i+n[1]-n[0];break;default:s=t-1,o=e}const l=.5*(i-e),c=this.valueSize;this._weightPrev=l/(e-a),this._weightNext=l/(o-i),this._offsetPrev=r*c,this._offsetNext=s*c}interpolate_(t,e,i,n){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(i-e)/(n-e),m=p*p,f=m*p,g=-u*f+2*u*m-u*p,v=(1+u)*f+(-1.5-2*u)*m+(-.5+u)*p+1,x=(-1-d)*f+(1.5+d)*m+.5*p,_=d*f-d*m;for(let t=0;t!==a;++t)r[t]=g*s[c+t]+v*s[l+t]+x*s[o+t]+_*s[h+t];return r}}class Ql extends Kl{constructor(t,e,i,n){super(t,e,i,n)}interpolate_(t,e,i,n){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=(i-e)/(n-e),h=1-c;for(let t=0;t!==a;++t)r[t]=s[l+t]*h+s[o+t]*c;return r}}class tc extends Kl{constructor(t,e,i,n){super(t,e,i,n)}interpolate_(t){return this.copySampleValue_(t-1)}}class ec{constructor(t,e,i,n){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=jl(e,this.TimeBufferType),this.values=jl(i,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let i;if(e.toJSON!==this.toJSON)i=e.toJSON(t);else{i={name:t.name,times:jl(t.times,Array),values:jl(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(i.interpolation=e)}return i.type=t.ValueTypeName,i}InterpolantFactoryMethodDiscrete(t){return new tc(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Ql(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new $l(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case $:e=this.InterpolantFactoryMethodDiscrete;break;case Q:e=this.InterpolantFactoryMethodLinear;break;case tt:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return $;case this.InterpolantFactoryMethodLinear:return Q;case this.InterpolantFactoryMethodSmooth:return tt}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let i=0,n=e.length;i!==n;++i)e[i]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let i=0,n=e.length;i!==n;++i)e[i]*=t}return this}trim(t,e){const i=this.times,n=i.length;let r=0,s=n-1;for(;r!==n&&i[r]<t;)++r;for(;-1!==s&&i[s]>e;)--s;if(++s,0!==r||s!==n){r>=s&&(s=Math.max(s,1),r=s-1);const t=this.getValueSize();this.times=Wl(i,r,s),this.values=Wl(this.values,r*t,s*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const i=this.times,n=this.values,r=i.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let s=null;for(let e=0;e!==r;e++){const n=i[e];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,n),t=!1;break}if(null!==s&&s>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,n,s),t=!1;break}s=n}if(void 0!==n&&ql(n))for(let e=0,i=n.length;e!==i;++e){const i=n[e];if(isNaN(i)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,i),t=!1;break}}return t}optimize(){const t=Wl(this.times),e=Wl(this.values),i=this.getValueSize(),n=this.getInterpolation()===tt,r=t.length-1;let s=1;for(let a=1;a<r;++a){let r=!1;const o=t[a];if(o!==t[a+1]&&(1!==a||o!==t[0]))if(n)r=!0;else{const t=a*i,n=t-i,s=t+i;for(let a=0;a!==i;++a){const i=e[t+a];if(i!==e[n+a]||i!==e[s+a]){r=!0;break}}}if(r){if(a!==s){t[s]=t[a];const n=a*i,r=s*i;for(let t=0;t!==i;++t)e[r+t]=e[n+t]}++s}}if(r>0){t[s]=t[r];for(let t=r*i,n=s*i,a=0;a!==i;++a)e[n+a]=e[t+a];++s}return s!==t.length?(this.times=Wl(t,0,s),this.values=Wl(e,0,s*i)):(this.times=t,this.values=e),this}clone(){const t=Wl(this.times,0),e=Wl(this.values,0),i=new(0,this.constructor)(this.name,t,e);return i.createInterpolant=this.createInterpolant,i}}ec.prototype.TimeBufferType=Float32Array,ec.prototype.ValueBufferType=Float32Array,ec.prototype.DefaultInterpolation=Q;class ic extends ec{}ic.prototype.ValueTypeName="bool",ic.prototype.ValueBufferType=Array,ic.prototype.DefaultInterpolation=$,ic.prototype.InterpolantFactoryMethodLinear=void 0,ic.prototype.InterpolantFactoryMethodSmooth=void 0;class nc extends ec{}nc.prototype.ValueTypeName="color";class rc extends ec{}rc.prototype.ValueTypeName="number";class sc extends Kl{constructor(t,e,i,n){super(t,e,i,n)}interpolate_(t,e,i,n){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=(i-e)/(n-e);let l=t*a;for(let t=l+a;l!==t;l+=4)ne.slerpFlat(r,0,s,l-a,s,l,o);return r}}class ac extends ec{InterpolantFactoryMethodLinear(t){return new sc(this.times,this.values,this.getValueSize(),t)}}ac.prototype.ValueTypeName="quaternion",ac.prototype.DefaultInterpolation=Q,ac.prototype.InterpolantFactoryMethodSmooth=void 0;class oc extends ec{}oc.prototype.ValueTypeName="string",oc.prototype.ValueBufferType=Array,oc.prototype.DefaultInterpolation=$,oc.prototype.InterpolantFactoryMethodLinear=void 0,oc.prototype.InterpolantFactoryMethodSmooth=void 0;class lc extends ec{}lc.prototype.ValueTypeName="vector";class cc{constructor(t,e=-1,i,n=2500){this.name=t,this.tracks=i,this.duration=e,this.blendMode=n,this.uuid=_t(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],i=t.tracks,n=1/(t.fps||1);for(let t=0,r=i.length;t!==r;++t)e.push(hc(i[t]).scale(n));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],i=t.tracks,n={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,n=i.length;t!==n;++t)e.push(ec.toJSON(i[t]));return n}static CreateFromMorphTargetSequence(t,e,i,n){const r=e.length,s=[];for(let t=0;t<r;t++){let a=[],o=[];a.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const l=Xl(a);a=Yl(a,1,l),o=Yl(o,1,l),n||0!==a[0]||(a.push(r),o.push(o[0])),s.push(new rc(".morphTargetInfluences["+e[t].name+"]",a,o).scale(1/i))}return new this(t,-1,s)}static findByName(t,e){let i=t;if(!Array.isArray(t)){const e=t;i=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<i.length;t++)if(i[t].name===e)return i[t];return null}static CreateClipsFromMorphTargetSequences(t,e,i){const n={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,i=t.length;e<i;e++){const i=t[e],s=i.name.match(r);if(s&&s.length>1){const t=s[1];let e=n[t];e||(n[t]=e=[]),e.push(i)}}const s=[];for(const t in n)s.push(this.CreateFromMorphTargetSequence(t,n[t],e,i));return s}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const i=function(t,e,i,n,r){if(0!==i.length){const s=[],a=[];Zl(i,s,a,n),0!==s.length&&r.push(new t(e,s,a))}},n=[],r=t.name||"default",s=t.fps||30,a=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let i=0;i<r[e].morphTargets.length;i++)t[r[e].morphTargets[i]]=-1;for(const i in t){const t=[],s=[];for(let n=0;n!==r[e].morphTargets.length;++n){const n=r[e];t.push(n.time),s.push(n.morphTarget===i?1:0)}n.push(new rc(".morphTargetInfluence["+i+"]",t,s))}o=t.length*s}else{const s=".bones["+e[t].name+"]";i(lc,s+".position",r,"pos",n),i(ac,s+".quaternion",r,"rot",n),i(lc,s+".scale",r,"scl",n)}}if(0===n.length)return null;return new this(r,o,n,a)}resetDuration(){let t=0;for(let e=0,i=this.tracks.length;e!==i;++e){const i=this.tracks[e];t=Math.max(t,i.times[i.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function hc(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return rc;case"vector":case"vector2":case"vector3":case"vector4":return lc;case"color":return nc;case"quaternion":return ac;case"bool":case"boolean":return ic;case"string":return oc}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],i=[];Zl(t.keys,e,i,"value"),t.times=e,t.values=i}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const uc={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class dc{constructor(t,e,i){const n=this;let r,s=!1,a=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){o++,!1===s&&void 0!==n.onStart&&n.onStart(t,a,o),s=!0},this.itemEnd=function(t){a++,void 0!==n.onProgress&&n.onProgress(t,a,o),a===o&&(s=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(t){void 0!==n.onError&&n.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,i=l.length;e<i;e+=2){const i=l[e],n=l[e+1];if(i.global&&(i.lastIndex=0),i.test(t))return n}return null}}}const pc=new dc;class mc{constructor(t){this.manager=void 0!==t?t:pc,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const i=this;return new Promise((function(n,r){i.load(t,n,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const fc={};class gc extends Error{constructor(t,e){super(t),this.response=e}}class vc extends mc{constructor(t){super(t)}load(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=uc.get(t);if(void 0!==r)return this.manager.itemStart(t),setTimeout((()=>{e&&e(r),this.manager.itemEnd(t)}),0),r;if(void 0!==fc[t])return void fc[t].push({onLoad:e,onProgress:i,onError:n});fc[t]=[],fc[t].push({onLoad:e,onProgress:i,onError:n});const s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,o=this.responseType;fetch(s).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const i=fc[t],n=e.body.getReader(),r=e.headers.get("Content-Length")||e.headers.get("X-File-Size"),s=r?parseInt(r):0,a=0!==s;let o=0;const l=new ReadableStream({start(t){!function e(){n.read().then((({done:n,value:r})=>{if(n)t.close();else{o+=r.byteLength;const n=new ProgressEvent("progress",{lengthComputable:a,loaded:o,total:s});for(let t=0,e=i.length;t<e;t++){const e=i[t];e.onProgress&&e.onProgress(n)}t.enqueue(r),e()}}))}()}});return new Response(l)}throw new gc(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)})).then((t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,a)));case"json":return t.json();default:if(void 0===a)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(a),i=e&&e[1]?e[1].toLowerCase():void 0,n=new TextDecoder(i);return t.arrayBuffer().then((t=>n.decode(t)))}}})).then((e=>{uc.add(t,e);const i=fc[t];delete fc[t];for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onLoad&&n.onLoad(e)}})).catch((e=>{const i=fc[t];if(void 0===i)throw this.manager.itemError(t),e;delete fc[t];for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onError&&n.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class xc extends mc{constructor(t){super(t)}load(t,e,i,n){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=uc.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a=Ot("img");function o(){c(),uc.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){c(),n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,!1),a.removeEventListener("error",l,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",l,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a}}class _c extends si{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new qt(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}class yc extends _c{constructor(t,e,i){super(t,i),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(si.DefaultUp),this.updateMatrix(),this.groundColor=new qt(e)}copy(t,e){return super.copy(t,e),this.groundColor.copy(t.groundColor),this}}const Mc=new Ne,bc=new re,wc=new re;class Sc{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Lt(512,512),this.map=null,this.mapPass=null,this.matrix=new Ne,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new xn,this._frameExtents=new Lt(1,1),this._viewportCount=1,this._viewports=[new Qt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;bc.setFromMatrixPosition(t.matrixWorld),e.position.copy(bc),wc.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(wc),e.updateMatrixWorld(),Mc.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Mc),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(Mc)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class Tc extends Sc{constructor(){super(new on(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,i=2*xt*t.angle*this.focus,n=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;i===e.fov&&n===e.aspect&&r===e.far||(e.fov=i,e.aspect=n,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}class Ac extends _c{constructor(t,e,i=0,n=Math.PI/3,r=0,s=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(si.DefaultUp),this.updateMatrix(),this.target=new si,this.distance=i,this.angle=n,this.penumbra=r,this.decay=s,this.map=null,this.shadow=new Tc}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}const Ec=new Ne,Cc=new re,Lc=new re;class Rc extends Sc{constructor(){super(new on(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Lt(4,2),this._viewportCount=6,this._viewports=[new Qt(2,1,1,1),new Qt(0,1,1,1),new Qt(3,1,1,1),new Qt(1,1,1,1),new Qt(3,0,1,1),new Qt(1,0,1,1)],this._cubeDirections=[new re(1,0,0),new re(-1,0,0),new re(0,0,1),new re(0,0,-1),new re(0,1,0),new re(0,-1,0)],this._cubeUps=[new re(0,1,0),new re(0,1,0),new re(0,1,0),new re(0,1,0),new re(0,0,1),new re(0,0,-1)]}updateMatrices(t,e=0){const i=this.camera,n=this.matrix,r=t.distance||i.far;r!==i.far&&(i.far=r,i.updateProjectionMatrix()),Cc.setFromMatrixPosition(t.matrixWorld),i.position.copy(Cc),Lc.copy(i.position),Lc.add(this._cubeDirections[e]),i.up.copy(this._cubeUps[e]),i.lookAt(Lc),i.updateMatrixWorld(),n.makeTranslation(-Cc.x,-Cc.y,-Cc.z),Ec.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ec)}}class Pc extends _c{constructor(t,e,i=0,n=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=i,this.decay=n,this.shadow=new Rc}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class Ic extends Sc{constructor(){super(new In(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Dc extends _c{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(si.DefaultUp),this.updateMatrix(),this.target=new si,this.shadow=new Ic}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class Nc extends _c{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class Oc extends _c{constructor(t,e,i=10,n=10){super(t,e),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=i,this.height=n}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}class zc{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new re)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const i=t.x,n=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.282095),e.addScaledVector(s[1],.488603*n),e.addScaledVector(s[2],.488603*r),e.addScaledVector(s[3],.488603*i),e.addScaledVector(s[4],i*n*1.092548),e.addScaledVector(s[5],n*r*1.092548),e.addScaledVector(s[6],.315392*(3*r*r-1)),e.addScaledVector(s[7],i*r*1.092548),e.addScaledVector(s[8],.546274*(i*i-n*n)),e}getIrradianceAt(t,e){const i=t.x,n=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.886227),e.addScaledVector(s[1],1.023328*n),e.addScaledVector(s[2],1.023328*r),e.addScaledVector(s[3],1.023328*i),e.addScaledVector(s[4],.858086*i*n),e.addScaledVector(s[5],.858086*n*r),e.addScaledVector(s[6],.743125*r*r-.247708),e.addScaledVector(s[7],.858086*i*r),e.addScaledVector(s[8],.429043*(i*i-n*n)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const i=this.coefficients;for(let n=0;n<9;n++)i[n].fromArray(t,e+3*n);return this}toArray(t=[],e=0){const i=this.coefficients;for(let n=0;n<9;n++)i[n].toArray(t,e+3*n);return t}static getBasisAt(t,e){const i=t.x,n=t.y,r=t.z;e[0]=.282095,e[1]=.488603*n,e[2]=.488603*r,e[3]=.488603*i,e[4]=1.092548*i*n,e[5]=1.092548*n*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*i*r,e[8]=.546274*(i*i-n*n)}}class Uc extends _c{constructor(t=new zc,e=1){super(void 0,e),this.isLightProbe=!0,this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}class Bc extends mc{constructor(t){super(t),this.textures={}}load(t,e,i,n){const r=this,s=new vc(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),r.manager.itemError(t)}}),i,n)}parse(t){const e=this.textures;function i(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}const n=Bc.createMaterialFromType(t.type);if(void 0!==t.uuid&&(n.uuid=t.uuid),void 0!==t.name&&(n.name=t.name),void 0!==t.color&&void 0!==n.color&&n.color.setHex(t.color),void 0!==t.roughness&&(n.roughness=t.roughness),void 0!==t.metalness&&(n.metalness=t.metalness),void 0!==t.sheen&&(n.sheen=t.sheen),void 0!==t.sheenColor&&(n.sheenColor=(new qt).setHex(t.sheenColor)),void 0!==t.sheenRoughness&&(n.sheenRoughness=t.sheenRoughness),void 0!==t.emissive&&void 0!==n.emissive&&n.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==n.specular&&n.specular.setHex(t.specular),void 0!==t.specularIntensity&&(n.specularIntensity=t.specularIntensity),void 0!==t.specularColor&&void 0!==n.specularColor&&n.specularColor.setHex(t.specularColor),void 0!==t.shininess&&(n.shininess=t.shininess),void 0!==t.clearcoat&&(n.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(n.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.iridescence&&(n.iridescence=t.iridescence),void 0!==t.iridescenceIOR&&(n.iridescenceIOR=t.iridescenceIOR),void 0!==t.iridescenceThicknessRange&&(n.iridescenceThicknessRange=t.iridescenceThicknessRange),void 0!==t.transmission&&(n.transmission=t.transmission),void 0!==t.thickness&&(n.thickness=t.thickness),void 0!==t.attenuationDistance&&(n.attenuationDistance=t.attenuationDistance),void 0!==t.attenuationColor&&void 0!==n.attenuationColor&&n.attenuationColor.setHex(t.attenuationColor),void 0!==t.fog&&(n.fog=t.fog),void 0!==t.flatShading&&(n.flatShading=t.flatShading),void 0!==t.blending&&(n.blending=t.blending),void 0!==t.combine&&(n.combine=t.combine),void 0!==t.side&&(n.side=t.side),void 0!==t.shadowSide&&(n.shadowSide=t.shadowSide),void 0!==t.opacity&&(n.opacity=t.opacity),void 0!==t.transparent&&(n.transparent=t.transparent),void 0!==t.alphaTest&&(n.alphaTest=t.alphaTest),void 0!==t.depthTest&&(n.depthTest=t.depthTest),void 0!==t.depthWrite&&(n.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(n.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(n.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(n.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(n.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(n.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(n.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(n.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(n.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(n.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(n.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(n.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(n.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(n.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(n.rotation=t.rotation),1!==t.linewidth&&(n.linewidth=t.linewidth),void 0!==t.dashSize&&(n.dashSize=t.dashSize),void 0!==t.gapSize&&(n.gapSize=t.gapSize),void 0!==t.scale&&(n.scale=t.scale),void 0!==t.polygonOffset&&(n.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(n.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(n.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.dithering&&(n.dithering=t.dithering),void 0!==t.alphaToCoverage&&(n.alphaToCoverage=t.alphaToCoverage),void 0!==t.premultipliedAlpha&&(n.premultipliedAlpha=t.premultipliedAlpha),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.toneMapped&&(n.toneMapped=t.toneMapped),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?n.vertexColors=t.vertexColors>0:n.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const r=t.uniforms[e];switch(n.uniforms[e]={},r.type){case"t":n.uniforms[e].value=i(r.value);break;case"c":n.uniforms[e].value=(new qt).setHex(r.value);break;case"v2":n.uniforms[e].value=(new Lt).fromArray(r.value);break;case"v3":n.uniforms[e].value=(new re).fromArray(r.value);break;case"v4":n.uniforms[e].value=(new Qt).fromArray(r.value);break;case"m3":n.uniforms[e].value=(new Rt).fromArray(r.value);break;case"m4":n.uniforms[e].value=(new Ne).fromArray(r.value);break;default:n.uniforms[e].value=r.value}}if(void 0!==t.defines&&(n.defines=t.defines),void 0!==t.vertexShader&&(n.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(n.fragmentShader=t.fragmentShader),void 0!==t.glslVersion&&(n.glslVersion=t.glslVersion),void 0!==t.extensions)for(const e in t.extensions)n.extensions[e]=t.extensions[e];if(void 0!==t.size&&(n.size=t.size),void 0!==t.sizeAttenuation&&(n.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(n.map=i(t.map)),void 0!==t.matcap&&(n.matcap=i(t.matcap)),void 0!==t.alphaMap&&(n.alphaMap=i(t.alphaMap)),void 0!==t.bumpMap&&(n.bumpMap=i(t.bumpMap)),void 0!==t.bumpScale&&(n.bumpScale=t.bumpScale),void 0!==t.normalMap&&(n.normalMap=i(t.normalMap)),void 0!==t.normalMapType&&(n.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),n.normalScale=(new Lt).fromArray(e)}return void 0!==t.displacementMap&&(n.displacementMap=i(t.displacementMap)),void 0!==t.displacementScale&&(n.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(n.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(n.roughnessMap=i(t.roughnessMap)),void 0!==t.metalnessMap&&(n.metalnessMap=i(t.metalnessMap)),void 0!==t.emissiveMap&&(n.emissiveMap=i(t.emissiveMap)),void 0!==t.emissiveIntensity&&(n.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(n.specularMap=i(t.specularMap)),void 0!==t.specularIntensityMap&&(n.specularIntensityMap=i(t.specularIntensityMap)),void 0!==t.specularColorMap&&(n.specularColorMap=i(t.specularColorMap)),void 0!==t.envMap&&(n.envMap=i(t.envMap)),void 0!==t.envMapIntensity&&(n.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(n.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(n.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(n.lightMap=i(t.lightMap)),void 0!==t.lightMapIntensity&&(n.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(n.aoMap=i(t.aoMap)),void 0!==t.aoMapIntensity&&(n.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(n.gradientMap=i(t.gradientMap)),void 0!==t.clearcoatMap&&(n.clearcoatMap=i(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(n.clearcoatRoughnessMap=i(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(n.clearcoatNormalMap=i(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(n.clearcoatNormalScale=(new Lt).fromArray(t.clearcoatNormalScale)),void 0!==t.iridescenceMap&&(n.iridescenceMap=i(t.iridescenceMap)),void 0!==t.iridescenceThicknessMap&&(n.iridescenceThicknessMap=i(t.iridescenceThicknessMap)),void 0!==t.transmissionMap&&(n.transmissionMap=i(t.transmissionMap)),void 0!==t.thicknessMap&&(n.thicknessMap=i(t.thicknessMap)),void 0!==t.sheenColorMap&&(n.sheenColorMap=i(t.sheenColorMap)),void 0!==t.sheenRoughnessMap&&(n.sheenRoughnessMap=i(t.sheenRoughnessMap)),n}setTextures(t){return this.textures=t,this}static createMaterialFromType(t){return new{ShadowMaterial:Nl,SpriteMaterial:la,RawShaderMaterial:Ol,ShaderMaterial:sn,PointsMaterial:io,MeshPhysicalMaterial:Ul,MeshStandardMaterial:zl,MeshPhongMaterial:Bl,MeshToonMaterial:Fl,MeshNormalMaterial:kl,MeshLambertMaterial:Gl,MeshDepthMaterial:Us,MeshDistanceMaterial:Bs,MeshBasicMaterial:_i,MeshMatcapMaterial:Vl,LineDashedMaterial:Hl,LineBasicMaterial:ja,Material:xi}[t]}}class Fc{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let i=0,n=t.length;i<n;i++)e+=String.fromCharCode(t[i]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.slice(0,e+1)}static resolveURL(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}class kc extends Di{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}toJSON(){const t=super.toJSON();return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}class Gc extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=new vc(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),r.manager.itemError(t)}}),i,n)}parse(t){const e={},i={};function n(t,n){if(void 0!==e[n])return e[n];const r=t.interleavedBuffers[n],s=function(t,e){if(void 0!==i[e])return i[e];const n=t.arrayBuffers[e],r=new Uint32Array(n).buffer;return i[e]=r,r}(t,r.buffer),a=Nt(r.type,s),o=new sa(a,r.stride);return o.uuid=r.uuid,e[n]=o,o}const r=t.isInstancedBufferGeometry?new kc:new Di,s=t.data.index;if(void 0!==s){const t=Nt(s.type,s.array);r.setIndex(new bi(t,1))}const a=t.data.attributes;for(const e in a){const i=a[e];let s;if(i.isInterleavedBufferAttribute){const e=n(t.data,i.data);s=new oa(e,i.itemSize,i.offset,i.normalized)}else{const t=Nt(i.type,i.array);s=new(i.isInstancedBufferAttribute?Ba:bi)(t,i.itemSize,i.normalized)}void 0!==i.name&&(s.name=i.name),void 0!==i.usage&&s.setUsage(i.usage),void 0!==i.updateRange&&(s.updateRange.offset=i.updateRange.offset,s.updateRange.count=i.updateRange.count),r.setAttribute(e,s)}const o=t.data.morphAttributes;if(o)for(const e in o){const i=o[e],s=[];for(let e=0,r=i.length;e<r;e++){const r=i[e];let a;if(r.isInterleavedBufferAttribute){const e=n(t.data,r.data);a=new oa(e,r.itemSize,r.offset,r.normalized)}else{const t=Nt(r.type,r.array);a=new bi(t,r.itemSize,r.normalized)}void 0!==r.name&&(a.name=r.name),s.push(a)}r.morphAttributes[e]=s}t.data.morphTargetsRelative&&(r.morphTargetsRelative=!0);const l=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==l)for(let t=0,e=l.length;t!==e;++t){const e=l[t];r.addGroup(e.start,e.count,e.materialIndex)}const c=t.data.boundingSphere;if(void 0!==c){const t=new re;void 0!==c.center&&t.fromArray(c.center),r.boundingSphere=new Te(t,c.radius)}return t.name&&(r.name=t.name),t.userData&&(r.userData=t.userData),r}}const Vc={UVMapping:n,CubeReflectionMapping:r,CubeRefractionMapping:s,EquirectangularReflectionMapping:a,EquirectangularRefractionMapping:o,CubeUVReflectionMapping:l},Hc={RepeatWrapping:c,ClampToEdgeWrapping:h,MirroredRepeatWrapping:u},Wc={NearestFilter:d,NearestMipmapNearestFilter:p,NearestMipmapLinearFilter:m,LinearFilter:f,LinearMipmapNearestFilter:g,LinearMipmapLinearFilter:v};let jc;class qc{static getContext(){return void 0===jc&&(jc=new(window.AudioContext||window.webkitAudioContext)),jc}static setContext(t){jc=t}}const Xc=new Ne,Yc=new Ne,Zc=new Ne;class Jc{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Kc(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=Kc();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function Kc(){return("undefined"==typeof performance?Date:performance).now()}const $c=new re,Qc=new ne,th=new re,eh=new re;class ih extends si{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}const nh=new re,rh=new ne,sh=new re,ah=new re;class oh{constructor(t,e,i){let n,r,s;switch(this.binding=t,this.valueSize=i,e){case"quaternion":n=this._slerp,r=this._slerpAdditive,s=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*i),this._workIndex=5;break;case"string":case"bool":n=this._select,r=this._select,s=this._setAdditiveIdentityOther,this.buffer=new Array(5*i);break;default:n=this._lerp,r=this._lerpAdditive,s=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*i)}this._mixBufferRegion=n,this._mixBufferRegionAdditive=r,this._setIdentity=s,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const i=this.buffer,n=this.valueSize,r=t*n+n;let s=this.cumulativeWeight;if(0===s){for(let t=0;t!==n;++t)i[r+t]=i[t];s=e}else{s+=e;const t=e/s;this._mixBufferRegion(i,r,0,t,n)}this.cumulativeWeight=s}accumulateAdditive(t){const e=this.buffer,i=this.valueSize,n=i*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,n,0,t,i),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,i=this.buffer,n=t*e+e,r=this.cumulativeWeight,s=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(i,n,t,1-r,e)}s>0&&this._mixBufferRegionAdditive(i,n,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(i[t]!==i[t+e]){a.setValue(i,n);break}}saveOriginalState(){const t=this.binding,e=this.buffer,i=this.valueSize,n=i*this._origIndex;t.getValue(e,n);for(let t=i,r=n;t!==r;++t)e[t]=e[n+t%i];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let i=t;i<e;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[e+i]=this.buffer[t+i]}_select(t,e,i,n,r){if(n>=.5)for(let n=0;n!==r;++n)t[e+n]=t[i+n]}_slerp(t,e,i,n){ne.slerpFlat(t,e,t,e,t,i,n)}_slerpAdditive(t,e,i,n,r){const s=this._workIndex*r;ne.multiplyQuaternionsFlat(t,s,t,e,t,i),ne.slerpFlat(t,e,t,e,t,s,n)}_lerp(t,e,i,n,r){const s=1-n;for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]*s+t[i+a]*n}}_lerpAdditive(t,e,i,n,r){for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]+t[i+s]*n}}}const lh="\\[\\]\\.:\\/",ch=new RegExp("[\\[\\]\\.:\\/]","g"),hh="[^\\[\\]\\.:\\/]",uh="[^"+lh.replace("\\.","")+"]",dh=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",hh)+/(WCOD+)?/.source.replace("WCOD",uh)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",hh)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",hh)+"$"),ph=["material","materials","bones","map"];class mh{constructor(t,e,i){this.path=e,this.parsedPath=i||mh.parseTrackName(e),this.node=mh.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,i){return t&&t.isAnimationObjectGroup?new mh.Composite(t,e,i):new mh(t,e,i)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(ch,"")}static parseTrackName(t){const e=dh.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const i={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},n=i.nodeName&&i.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){const t=i.nodeName.substring(n+1);-1!==ph.indexOf(t)&&(i.nodeName=i.nodeName.substring(0,n),i.objectName=t)}if(null===i.propertyName||0===i.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return i}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const i=t.skeleton.getBoneByName(e);if(void 0!==i)return i}if(t.children){const i=function(t){for(let n=0;n<t.length;n++){const r=t[n];if(r.name===e||r.uuid===e)return r;const s=i(r.children);if(s)return s}return null},n=i(t.children);if(n)return n}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)t[e++]=i[n]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,i=e.objectName,n=e.propertyName;let r=e.propertyIndex;if(t||(t=mh.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(i){let n=e.objectIndex;switch(i){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===n){n=e;break}break;case"map":if("map"in t){t=t.map;break}if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);t=t.material.map;break;default:if(void 0===t[i])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[i]}if(void 0!==n){if(void 0===t[n])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[n]}}const s=t[n];if(void 0===s){const i=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+i+"."+n+" but it wasn't found.",t)}let a=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===n){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(o=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=n;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}mh.Composite=class{constructor(t,e,i){const n=i||mh.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,n)}getValue(t,e){this.bind();const i=this._targetGroup.nCachedObjects_,n=this._bindings[i];void 0!==n&&n.getValue(t,e)}setValue(t,e){const i=this._bindings;for(let n=this._targetGroup.nCachedObjects_,r=i.length;n!==r;++n)i[n].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].unbind()}},mh.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},mh.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},mh.prototype.GetterByBindingType=[mh.prototype._getValue_direct,mh.prototype._getValue_array,mh.prototype._getValue_arrayElement,mh.prototype._getValue_toArray],mh.prototype.SetterByBindingTypeAndVersioning=[[mh.prototype._setValue_direct,mh.prototype._setValue_direct_setNeedsUpdate,mh.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[mh.prototype._setValue_array,mh.prototype._setValue_array_setNeedsUpdate,mh.prototype._setValue_array_setMatrixWorldNeedsUpdate],[mh.prototype._setValue_arrayElement,mh.prototype._setValue_arrayElement_setNeedsUpdate,mh.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[mh.prototype._setValue_fromArray,mh.prototype._setValue_fromArray_setNeedsUpdate,mh.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class fh{constructor(t,e,i=null,n=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=i,this.blendMode=n;const r=e.tracks,s=r.length,a=new Array(s),o={endingStart:et,endingEnd:et};for(let t=0;t!==s;++t){const e=r[t].createInterpolant(null);a[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(s),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){const i=this._clip.duration,n=t._clip.duration,r=n/i,s=i/n;t.warp(1,r,e),this.warp(s,1,e)}return this}crossFadeTo(t,e,i){return t.crossFadeFrom(this,e,i)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,i){const n=this._mixer,r=n.time,s=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=n._lendControlInterpolant(),this._timeScaleInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=r,o[1]=r+i,l[0]=t/s,l[1]=e/s,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,i,n){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const n=(t-r)*i;n<0||0===i?e=0:(this._startTime=null,e=i*n)}e*=this._updateTimeScale(t);const s=this._updateTime(e),a=this._updateWeight(t);if(a>0){const t=this._interpolants,e=this._propertyBindings;if(this.blendMode===st)for(let i=0,n=t.length;i!==n;++i)t[i].evaluate(s),e[i].accumulateAdditive(a);else for(let i=0,r=t.length;i!==r;++i)t[i].evaluate(s),e[i].accumulate(n,a)}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const i=this._weightInterpolant;if(null!==i){const n=i.evaluate(t)[0];e*=n,t>i.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const i=this._timeScaleInterpolant;if(null!==i){e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,i=this.loop;let n=this.time+t,r=this._loopCount;const s=2202===i;if(0===t)return-1===r?n:s&&1==(1&r)?e-n:n;if(2200===i){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(n>=e)n=e;else{if(!(n<0)){this.time=n;break t}n=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,s)):this._setEndings(0===this.repetitions,!0,s)),n>=e||n<0){const i=Math.floor(n/e);n-=e*i,r+=Math.abs(i);const a=this.repetitions-r;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,n=t>0?e:0,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===a){const e=t<0;this._setEndings(e,!e,s)}else this._setEndings(!1,!1,s);this._loopCount=r,this.time=n,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:i})}}else this.time=n;if(s&&1==(1&r))return e-n}return n}_setEndings(t,e,i){const n=this._interpolantSettings;i?(n.endingStart=it,n.endingEnd=it):(n.endingStart=t?this.zeroSlopeAtStart?it:et:nt,n.endingEnd=e?this.zeroSlopeAtEnd?it:et:nt)}_scheduleFading(t,e,i){const n=this._mixer,r=n.time;let s=this._weightInterpolant;null===s&&(s=n._lendControlInterpolant(),this._weightInterpolant=s);const a=s.parameterPositions,o=s.sampleValues;return a[0]=r,o[0]=e,a[1]=r+t,o[1]=i,this}}const gh=new Float32Array(1);class vh{constructor(t){this.value=t}clone(){return new vh(void 0===this.value.clone?this.value:this.value.clone())}}let xh=0;function _h(t,e){return t.distance-e.distance}function yh(t,e,i,n){if(t.layers.test(e.layers)&&t.raycast(e,i),!0===n){const n=t.children;for(let t=0,r=n.length;t<r;t++)yh(n[t],e,i,!0)}}const Mh=new Lt;const bh=new re,wh=new re;const Sh=new re;const Th=new re,Ah=new Ne,Eh=new Ne;function Ch(t){const e=[];!0===t.isBone&&e.push(t);for(let i=0;i<t.children.length;i++)e.push.apply(e,Ch(t.children[i]));return e}const Lh=new re,Rh=new qt,Ph=new qt;const Ih=new re,Dh=new re,Nh=new re;const Oh=new re,zh=new an;function Uh(t,e,i,n,r,s,a){Oh.set(r,s,a).unproject(n);const o=e[t];if(void 0!==o){const t=i.getAttribute("position");for(let e=0,i=o.length;e<i;e++)t.setXYZ(o[e],Oh.x,Oh.y,Oh.z)}}const Bh=new oe;const Fh=new re;let kh,Gh;const Vh=Hh();function Hh(){const t=new ArrayBuffer(4),e=new Float32Array(t),i=new Uint32Array(t),n=new Uint32Array(512),r=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(n[t]=0,n[256|t]=32768,r[t]=24,r[256|t]=24):e<-14?(n[t]=1024>>-e-14,n[256|t]=1024>>-e-14|32768,r[t]=-e-1,r[256|t]=-e-1):e<=15?(n[t]=e+15<<10,n[256|t]=e+15<<10|32768,r[t]=13,r[256|t]=13):e<128?(n[t]=31744,n[256|t]=64512,r[t]=24,r[256|t]=24):(n[t]=31744,n[256|t]=64512,r[t]=13,r[256|t]=13)}const s=new Uint32Array(2048),a=new Uint32Array(64),o=new Uint32Array(64);for(let t=1;t<1024;++t){let e=t<<13,i=0;for(;0==(8388608&e);)e<<=1,i-=8388608;e&=-8388609,i+=947912704,s[t]=e|i}for(let t=1024;t<2048;++t)s[t]=939524096+(t-1024<<13);for(let t=1;t<31;++t)a[t]=t<<23;a[31]=1199570944,a[32]=2147483648;for(let t=33;t<63;++t)a[t]=2147483648+(t-32<<23);a[63]=3347054592;for(let t=1;t<64;++t)32!==t&&(o[t]=1024);return{floatView:e,uint32View:i,baseTable:n,shiftTable:r,mantissaTable:s,exponentTable:a,offsetTable:o}}var Wh=Object.freeze({__proto__:null,toHalfFloat:function(t){Math.abs(t)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),t=yt(t,-65504,65504),Vh.floatView[0]=t;const e=Vh.uint32View[0],i=e>>23&511;return Vh.baseTable[i]+((8388607&e)>>Vh.shiftTable[i])},fromHalfFloat:function(t){const e=t>>10;return Vh.uint32View[0]=Vh.mantissaTable[Vh.offsetTable[e]+(1023&t)]+Vh.exponentTable[e],Vh.floatView[0]}});"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:e}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=e),t.ACESFilmicToneMapping=4,t.AddEquation=i,t.AddOperation=2,t.AdditiveAnimationBlendMode=st,t.AdditiveBlending=2,t.AlphaFormat=1021,t.AlwaysDepth=1,t.AlwaysStencilFunc=519,t.AmbientLight=Nc,t.AmbientLightProbe=class extends Uc{constructor(t,e=1){super(void 0,e),this.isAmbientLightProbe=!0;const i=(new qt).set(t);this.sh.coefficients[0].set(i.r,i.g,i.b).multiplyScalar(2*Math.sqrt(Math.PI))}},t.AnimationClip=cc,t.AnimationLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=new vc(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),r.manager.itemError(t)}}),i,n)}parse(t){const e=[];for(let i=0;i<t.length;i++){const n=cc.parse(t[i]);e.push(n)}return e}},t.AnimationMixer=class extends mt{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const i=t._localRoot||this._root,n=t._clip.tracks,r=n.length,s=t._propertyBindings,a=t._interpolants,o=i.uuid,l=this._bindingsByRootAndName;let c=l[o];void 0===c&&(c={},l[o]=c);for(let t=0;t!==r;++t){const r=n[t],l=r.name;let h=c[l];if(void 0!==h)++h.referenceCount,s[t]=h;else{if(h=s[t],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,l));continue}const n=e&&e._propertyBindings[t].binding.parsedPath;h=new oh(mh.create(i,l,n),r.ValueTypeName,r.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,l),s[t]=h}a[t].resultBuffer=h.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,i=t._clip.uuid,n=this._actionsByClip[i];this._bindAction(t,n&&n.knownActions[0]),this._addInactiveAction(t,i,e)}const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==i.useCount++&&(this._lendBinding(i),i.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,i){const n=this._actions,r=this._actionsByClip;let s=r[e];if(void 0===s)s={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=s;else{const e=s.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=n.length,n.push(t),s.actionByRoot[i]=t}_removeInactiveAction(t){const e=this._actions,i=e[e.length-1],n=t._cacheIndex;i._cacheIndex=n,e[n]=i,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null;delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete s[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==--i.referenceCount&&this._removeInactiveBinding(i)}}_lendAction(t){const e=this._actions,i=t._cacheIndex,n=this._nActiveActions++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r}_takeBackAction(t){const e=this._actions,i=t._cacheIndex,n=--this._nActiveActions,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r}_addInactiveBinding(t,e,i){const n=this._bindingsByRootAndName,r=this._bindings;let s=n[e];void 0===s&&(s={},n[e]=s),s[i]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,i=t.binding,n=i.rootNode.uuid,r=i.path,s=this._bindingsByRootAndName,a=s[n],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete a[r],0===Object.keys(a).length&&delete s[n]}_lendBinding(t){const e=this._bindings,i=t._cacheIndex,n=this._nActiveBindings++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r}_takeBackBinding(t){const e=this._bindings,i=t._cacheIndex,n=--this._nActiveBindings,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let i=t[e];return void 0===i&&(i=new Ql(new Float32Array(2),new Float32Array(2),1,gh),i.__cacheIndex=e,t[e]=i),i}_takeBackControlInterpolant(t){const e=this._controlInterpolants,i=t.__cacheIndex,n=--this._nActiveControlInterpolants,r=e[n];t.__cacheIndex=n,e[n]=t,r.__cacheIndex=i,e[i]=r}clipAction(t,e,i){const n=e||this._root,r=n.uuid;let s="string"==typeof t?cc.findByName(n,t):t;const a=null!==s?s.uuid:t,o=this._actionsByClip[a];let l=null;if(void 0===i&&(i=null!==s?s.blendMode:rt),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===i)return t;l=o.knownActions[0],null===s&&(s=l._clip)}if(null===s)return null;const c=new fh(this,s,e,i);return this._bindAction(c,l),this._addInactiveAction(c,a,r),c}existingAction(t,e){const i=e||this._root,n=i.uuid,r="string"==typeof t?cc.findByName(i,t):t,s=r?r.uuid:t,a=this._actionsByClip[s];return void 0!==a&&a.actionByRoot[n]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,i=this._nActiveActions,n=this.time+=t,r=Math.sign(t),s=this._accuIndex^=1;for(let a=0;a!==i;++a){e[a]._update(n,t,r,s)}const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)a[t].apply(s);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,i=t.uuid,n=this._actionsByClip,r=n[i];if(void 0!==r){const t=r.knownActions;for(let i=0,n=t.length;i!==n;++i){const n=t[i];this._deactivateAction(n);const r=n._cacheIndex,s=e[e.length-1];n._cacheIndex=null,n._byClipCacheIndex=null,s._cacheIndex=r,e[r]=s,e.pop(),this._removeInactiveBindingsForAction(n)}delete n[i]}}uncacheRoot(t){const e=t.uuid,i=this._actionsByClip;for(const t in i){const n=i[t].actionByRoot[e];void 0!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}const n=this._bindingsByRootAndName[e];if(void 0!==n)for(const t in n){const e=n[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const i=this.existingAction(t,e);null!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}},t.AnimationObjectGroup=class{constructor(){this.isAnimationObjectGroup=!0,this.uuid=_t(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,i=arguments.length;e!==i;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,i=this._paths,n=this._parsedPaths,r=this._bindings,s=r.length;let a,o=t.length,l=this.nCachedObjects_;for(let c=0,h=arguments.length;c!==h;++c){const h=arguments[c],u=h.uuid;let d=e[u];if(void 0===d){d=o++,e[u]=d,t.push(h);for(let t=0,e=s;t!==e;++t)r[t].push(new mh(h,i[t],n[t]))}else if(d<l){a=t[d];const o=--l,c=t[o];e[c.uuid]=d,t[d]=c,e[u]=o,t[o]=h;for(let t=0,e=s;t!==e;++t){const e=r[t],s=e[o];let a=e[d];e[d]=s,void 0===a&&(a=new mh(h,i[t],n[t])),e[o]=a}}else t[d]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=l}remove(){const t=this._objects,e=this._indicesByUUID,i=this._bindings,n=i.length;let r=this.nCachedObjects_;for(let s=0,a=arguments.length;s!==a;++s){const a=arguments[s],o=a.uuid,l=e[o];if(void 0!==l&&l>=r){const s=r++,c=t[s];e[c.uuid]=l,t[l]=c,e[o]=s,t[s]=a;for(let t=0,e=n;t!==e;++t){const e=i[t],n=e[s],r=e[l];e[l]=n,e[s]=r}}}this.nCachedObjects_=r}uncache(){const t=this._objects,e=this._indicesByUUID,i=this._bindings,n=i.length;let r=this.nCachedObjects_,s=t.length;for(let a=0,o=arguments.length;a!==o;++a){const o=arguments[a].uuid,l=e[o];if(void 0!==l)if(delete e[o],l<r){const a=--r,o=t[a],c=--s,h=t[c];e[o.uuid]=l,t[l]=o,e[h.uuid]=a,t[a]=h,t.pop();for(let t=0,e=n;t!==e;++t){const e=i[t],n=e[a],r=e[c];e[l]=n,e[a]=r,e.pop()}}else{const r=--s,a=t[r];r>0&&(e[a.uuid]=l),t[l]=a,t.pop();for(let t=0,e=n;t!==e;++t){const e=i[t];e[l]=e[r],e.pop()}}}this.nCachedObjects_=r}subscribe_(t,e){const i=this._bindingsIndicesByPath;let n=i[t];const r=this._bindings;if(void 0!==n)return r[n];const s=this._paths,a=this._parsedPaths,o=this._objects,l=o.length,c=this.nCachedObjects_,h=new Array(l);n=r.length,i[t]=n,s.push(t),a.push(e),r.push(h);for(let i=c,n=o.length;i!==n;++i){const n=o[i];h[i]=new mh(n,t,e)}return h}unsubscribe_(t){const e=this._bindingsIndicesByPath,i=e[t];if(void 0!==i){const n=this._paths,r=this._parsedPaths,s=this._bindings,a=s.length-1,o=s[a];e[t[a]]=i,s[i]=o,s.pop(),r[i]=r[a],r.pop(),n[i]=n[a],n.pop()}}},t.AnimationUtils=Jl,t.ArcCurve=po,t.ArrayCamera=Ws,t.ArrowHelper=class extends si{constructor(t=new re(0,0,1),e=new re(0,0,0),i=1,n=16776960,r=.2*i,s=.2*r){super(),this.type="ArrowHelper",void 0===kh&&(kh=new Di,kh.setAttribute("position",new Ti([0,0,0,0,1,0],3)),Gh=new zo(0,.5,1,5,1),Gh.translate(0,-.5,0)),this.position.copy(e),this.line=new Ka(kh,new ja({color:n,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Ki(Gh,new _i({color:n,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,r,s)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{Fh.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Fh,e)}}setLength(t,e=.2*t,i=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(i,e,i),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}},t.Audio=ih,t.AudioAnalyser=class{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let i=0;i<e.length;i++)t+=e[i];return t/e.length}},t.AudioContext=qc,t.AudioListener=class extends si{constructor(){super(),this.type="AudioListener",this.context=qc.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Jc}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,i=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose($c,Qc,th),eh.set(0,0,-1).applyQuaternion(Qc),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime($c.x,t),e.positionY.linearRampToValueAtTime($c.y,t),e.positionZ.linearRampToValueAtTime($c.z,t),e.forwardX.linearRampToValueAtTime(eh.x,t),e.forwardY.linearRampToValueAtTime(eh.y,t),e.forwardZ.linearRampToValueAtTime(eh.z,t),e.upX.linearRampToValueAtTime(i.x,t),e.upY.linearRampToValueAtTime(i.y,t),e.upZ.linearRampToValueAtTime(i.z,t)}else e.setPosition($c.x,$c.y,$c.z),e.setOrientation(eh.x,eh.y,eh.z,i.x,i.y,i.z)}},t.AudioLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=new vc(this.manager);s.setResponseType("arraybuffer"),s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(i){try{const t=i.slice(0);qc.getContext().decodeAudioData(t,(function(t){e(t)}))}catch(e){n?n(e):console.error(e),r.manager.itemError(t)}}),i,n)}},t.AxesHelper=class extends to{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],i=new Di;i.setAttribute("position",new Ti(e,3)),i.setAttribute("color",new Ti([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));super(i,new ja({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(t,e,i){const n=new qt,r=this.geometry.attributes.color.array;return n.set(t),n.toArray(r,0),n.toArray(r,3),n.set(e),n.toArray(r,6),n.toArray(r,9),n.set(i),n.toArray(r,12),n.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}},t.BackSide=1,t.BasicDepthPacking=3200,t.BasicShadowMap=0,t.Bone=Da,t.BooleanKeyframeTrack=ic,t.Box2=class{constructor(t=new Lt(1/0,1/0),e=new Lt(-1/0,-1/0)){this.isBox2=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=Mh.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Mh.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}},t.Box3=oe,t.Box3Helper=class extends to{constructor(t,e=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Di;n.setIndex(new bi(i,1)),n.setAttribute("position",new Ti([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(n,new ja({color:e,toneMapped:!1})),this.box=t,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}dispose(){this.geometry.dispose(),this.material.dispose()}},t.BoxBufferGeometry=class extends Qi{constructor(t,e,i,n,r,s){console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry."),super(t,e,i,n,r,s)}},t.BoxGeometry=Qi,t.BoxHelper=class extends to{constructor(t,e=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),r=new Di;r.setIndex(new bi(i,1)),r.setAttribute("position",new bi(n,3)),super(r,new ja({color:e,toneMapped:!1})),this.object=t,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&Bh.setFromObject(this.object),Bh.isEmpty())return;const e=Bh.min,i=Bh.max,n=this.geometry.attributes.position,r=n.array;r[0]=i.x,r[1]=i.y,r[2]=i.z,r[3]=e.x,r[4]=i.y,r[5]=i.z,r[6]=e.x,r[7]=e.y,r[8]=i.z,r[9]=i.x,r[10]=e.y,r[11]=i.z,r[12]=i.x,r[13]=i.y,r[14]=e.z,r[15]=e.x,r[16]=i.y,r[17]=e.z,r[18]=e.x,r[19]=e.y,r[20]=e.z,r[21]=i.x,r[22]=e.y,r[23]=e.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(t){return this.object=t,this.update(),this}copy(t,e){return super.copy(t,e),this.object=t.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}},t.BufferAttribute=bi,t.BufferGeometry=Di,t.BufferGeometryLoader=Gc,t.ByteType=1010,t.Cache=uc,t.Camera=an,t.CameraHelper=class extends to{constructor(t){const e=new Di,i=new ja({color:16777215,vertexColors:!0,toneMapped:!1}),n=[],r=[],s={};function a(t,e){o(t),o(e)}function o(t){n.push(0,0,0),r.push(0,0,0),void 0===s[t]&&(s[t]=[]),s[t].push(n.length/3-1)}a("n1","n2"),a("n2","n4"),a("n4","n3"),a("n3","n1"),a("f1","f2"),a("f2","f4"),a("f4","f3"),a("f3","f1"),a("n1","f1"),a("n2","f2"),a("n3","f3"),a("n4","f4"),a("p","n1"),a("p","n2"),a("p","n3"),a("p","n4"),a("u1","u2"),a("u2","u3"),a("u3","u1"),a("c","t"),a("p","c"),a("cn1","cn2"),a("cn3","cn4"),a("cf1","cf2"),a("cf3","cf4"),e.setAttribute("position",new Ti(n,3)),e.setAttribute("color",new Ti(r,3)),super(e,i),this.type="CameraHelper",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=s,this.update();const l=new qt(16755200),c=new qt(16711680),h=new qt(43775),u=new qt(16777215),d=new qt(3355443);this.setColors(l,c,h,u,d)}setColors(t,e,i,n,r){const s=this.geometry.getAttribute("color");s.setXYZ(0,t.r,t.g,t.b),s.setXYZ(1,t.r,t.g,t.b),s.setXYZ(2,t.r,t.g,t.b),s.setXYZ(3,t.r,t.g,t.b),s.setXYZ(4,t.r,t.g,t.b),s.setXYZ(5,t.r,t.g,t.b),s.setXYZ(6,t.r,t.g,t.b),s.setXYZ(7,t.r,t.g,t.b),s.setXYZ(8,t.r,t.g,t.b),s.setXYZ(9,t.r,t.g,t.b),s.setXYZ(10,t.r,t.g,t.b),s.setXYZ(11,t.r,t.g,t.b),s.setXYZ(12,t.r,t.g,t.b),s.setXYZ(13,t.r,t.g,t.b),s.setXYZ(14,t.r,t.g,t.b),s.setXYZ(15,t.r,t.g,t.b),s.setXYZ(16,t.r,t.g,t.b),s.setXYZ(17,t.r,t.g,t.b),s.setXYZ(18,t.r,t.g,t.b),s.setXYZ(19,t.r,t.g,t.b),s.setXYZ(20,t.r,t.g,t.b),s.setXYZ(21,t.r,t.g,t.b),s.setXYZ(22,t.r,t.g,t.b),s.setXYZ(23,t.r,t.g,t.b),s.setXYZ(24,e.r,e.g,e.b),s.setXYZ(25,e.r,e.g,e.b),s.setXYZ(26,e.r,e.g,e.b),s.setXYZ(27,e.r,e.g,e.b),s.setXYZ(28,e.r,e.g,e.b),s.setXYZ(29,e.r,e.g,e.b),s.setXYZ(30,e.r,e.g,e.b),s.setXYZ(31,e.r,e.g,e.b),s.setXYZ(32,i.r,i.g,i.b),s.setXYZ(33,i.r,i.g,i.b),s.setXYZ(34,i.r,i.g,i.b),s.setXYZ(35,i.r,i.g,i.b),s.setXYZ(36,i.r,i.g,i.b),s.setXYZ(37,i.r,i.g,i.b),s.setXYZ(38,n.r,n.g,n.b),s.setXYZ(39,n.r,n.g,n.b),s.setXYZ(40,r.r,r.g,r.b),s.setXYZ(41,r.r,r.g,r.b),s.setXYZ(42,r.r,r.g,r.b),s.setXYZ(43,r.r,r.g,r.b),s.setXYZ(44,r.r,r.g,r.b),s.setXYZ(45,r.r,r.g,r.b),s.setXYZ(46,r.r,r.g,r.b),s.setXYZ(47,r.r,r.g,r.b),s.setXYZ(48,r.r,r.g,r.b),s.setXYZ(49,r.r,r.g,r.b),s.needsUpdate=!0}update(){const t=this.geometry,e=this.pointMap;zh.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Uh("c",e,t,zh,0,0,-1),Uh("t",e,t,zh,0,0,1),Uh("n1",e,t,zh,-1,-1,-1),Uh("n2",e,t,zh,1,-1,-1),Uh("n3",e,t,zh,-1,1,-1),Uh("n4",e,t,zh,1,1,-1),Uh("f1",e,t,zh,-1,-1,1),Uh("f2",e,t,zh,1,-1,1),Uh("f3",e,t,zh,-1,1,1),Uh("f4",e,t,zh,1,1,1),Uh("u1",e,t,zh,.7,1.1,-1),Uh("u2",e,t,zh,-.7,1.1,-1),Uh("u3",e,t,zh,0,2,-1),Uh("cf1",e,t,zh,-1,0,1),Uh("cf2",e,t,zh,1,0,1),Uh("cf3",e,t,zh,0,-1,1),Uh("cf4",e,t,zh,0,1,1),Uh("cn1",e,t,zh,-1,0,-1),Uh("cn2",e,t,zh,1,0,-1),Uh("cn3",e,t,zh,0,-1,-1),Uh("cn4",e,t,zh,0,1,-1),t.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}},t.CanvasTexture=class extends $t{constructor(t,e,i,n,r,s,a,o,l){super(t,e,i,n,r,s,a,o,l),this.isCanvasTexture=!0,this.needsUpdate=!0}},t.CapsuleBufferGeometry=class extends No{constructor(t,e,i,n){console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry."),super(t,e,i,n)}},t.CapsuleGeometry=No,t.CatmullRomCurve3=_o,t.CineonToneMapping=3,t.CircleBufferGeometry=class extends Oo{constructor(t,e,i,n){console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry."),super(t,e,i,n)}},t.CircleGeometry=Oo,t.ClampToEdgeWrapping=h,t.Clock=Jc,t.Color=qt,t.ColorKeyframeTrack=nc,t.ColorManagement=Ft,t.CompressedArrayTexture=class extends co{constructor(t,e,i,n,r,s){super(t,e,i,r,s),this.isCompressedArrayTexture=!0,this.image.depth=n,this.wrapR=h}},t.CompressedTexture=co,t.CompressedTextureLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=[],a=new co,o=new vc(this.manager);o.setPath(this.path),o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(r.withCredentials);let l=0;function c(c){o.load(t[c],(function(t){const i=r.parse(t,!0);s[c]={width:i.width,height:i.height,format:i.format,mipmaps:i.mipmaps},l+=1,6===l&&(1===i.mipmapCount&&(a.minFilter=f),a.image=s,a.format=i.format,a.needsUpdate=!0,e&&e(a))}),i,n)}if(Array.isArray(t))for(let e=0,i=t.length;e<i;++e)c(e);else o.load(t,(function(t){const i=r.parse(t,!0);if(i.isCubemap){const t=i.mipmaps.length/i.mipmapCount;for(let e=0;e<t;e++){s[e]={mipmaps:[]};for(let t=0;t<i.mipmapCount;t++)s[e].mipmaps.push(i.mipmaps[e*i.mipmapCount+t]),s[e].format=i.format,s[e].width=i.width,s[e].height=i.height}a.image=s}else a.image.width=i.width,a.image.height=i.height,a.mipmaps=i.mipmaps;1===i.mipmapCount&&(a.minFilter=f),a.format=i.format,a.needsUpdate=!0,e&&e(a)}),i,n);return a}},t.ConeBufferGeometry=class extends Uo{constructor(t,e,i,n,r,s,a){console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry."),super(t,e,i,n,r,s,a)}},t.ConeGeometry=Uo,t.CubeCamera=cn,t.CubeReflectionMapping=r,t.CubeRefractionMapping=s,t.CubeTexture=hn,t.CubeTextureLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=new hn,s=new xc(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);let a=0;function o(i){s.load(t[i],(function(t){r.images[i]=t,a++,6===a&&(r.needsUpdate=!0,e&&e(r))}),void 0,n)}for(let e=0;e<t.length;++e)o(e);return r}},t.CubeUVReflectionMapping=l,t.CubicBezierCurve=wo,t.CubicBezierCurve3=So,t.CubicInterpolant=$l,t.CullFaceBack=1,t.CullFaceFront=2,t.CullFaceFrontBack=3,t.CullFaceNone=0,t.Curve=ho,t.CurvePath=Po,t.CustomBlending=5,t.CustomToneMapping=5,t.CylinderBufferGeometry=class extends zo{constructor(t,e,i,n,r,s,a,o){console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry."),super(t,e,i,n,r,s,a,o)}},t.CylinderGeometry=zo,t.Cylindrical=class{constructor(t=1,e=0,i=0){return this.radius=t,this.theta=e,this.y=i,this}set(t,e,i){return this.radius=t,this.theta=e,this.y=i,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+i*i),this.theta=Math.atan2(t,i),this.y=e,this}clone(){return(new this.constructor).copy(this)}},t.Data3DTexture=ie,t.DataArrayTexture=ee,t.DataTexture=Na,t.DataTexture2DArray=class extends ee{constructor(t,e,i,n){console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture."),super(t,e,i,n)}},t.DataTexture3D=class extends ie{constructor(t,e,i,n){console.warn("THREE.DataTexture3D has been renamed to Data3DTexture."),super(t,e,i,n)}},t.DataTextureLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=new Na,a=new vc(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(r.withCredentials),a.load(t,(function(t){const i=r.parse(t);i&&(void 0!==i.image?s.image=i.image:void 0!==i.data&&(s.image.width=i.width,s.image.height=i.height,s.image.data=i.data),s.wrapS=void 0!==i.wrapS?i.wrapS:h,s.wrapT=void 0!==i.wrapT?i.wrapT:h,s.magFilter=void 0!==i.magFilter?i.magFilter:f,s.minFilter=void 0!==i.minFilter?i.minFilter:f,s.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,void 0!==i.encoding&&(s.encoding=i.encoding),void 0!==i.flipY&&(s.flipY=i.flipY),void 0!==i.format&&(s.format=i.format),void 0!==i.type&&(s.type=i.type),void 0!==i.mipmaps&&(s.mipmaps=i.mipmaps,s.minFilter=v),1===i.mipmapCount&&(s.minFilter=f),void 0!==i.generateMipmaps&&(s.generateMipmaps=i.generateMipmaps),s.needsUpdate=!0,e&&e(s,i))}),i,n),s}},t.DataUtils=Wh,t.DecrementStencilOp=7683,t.DecrementWrapStencilOp=34056,t.DefaultLoadingManager=pc,t.DepthFormat=T,t.DepthStencilFormat=A,t.DepthTexture=Js,t.DirectionalLight=Dc,t.DirectionalLightHelper=class extends si{constructor(t,e,i){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="DirectionalLightHelper",void 0===e&&(e=1);let n=new Di;n.setAttribute("position",new Ti([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const r=new ja({fog:!1,toneMapped:!1});this.lightPlane=new Ka(n,r),this.add(this.lightPlane),n=new Di,n.setAttribute("position",new Ti([0,0,0,0,0,1],3)),this.targetLine=new Ka(n,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),Ih.setFromMatrixPosition(this.light.matrixWorld),Dh.setFromMatrixPosition(this.light.target.matrixWorld),Nh.subVectors(Dh,Ih),this.lightPlane.lookAt(Dh),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Dh),this.targetLine.scale.z=Nh.length()}},t.DiscreteInterpolant=tc,t.DodecahedronBufferGeometry=class extends Fo{constructor(t,e){console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry."),super(t,e)}},t.DodecahedronGeometry=Fo,t.DoubleSide=2,t.DstAlphaFactor=206,t.DstColorFactor=208,t.DynamicCopyUsage=35050,t.DynamicDrawUsage=35048,t.DynamicReadUsage=35049,t.EdgesGeometry=Wo,t.EllipseCurve=uo,t.EqualDepth=4,t.EqualStencilFunc=514,t.EquirectangularReflectionMapping=a,t.EquirectangularRefractionMapping=o,t.Euler=We,t.EventDispatcher=mt,t.ExtrudeBufferGeometry=class extends yl{constructor(t,e){console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry."),super(t,e)}},t.ExtrudeGeometry=yl,t.FileLoader=vc,t.Float16BufferAttribute=class extends bi{constructor(t,e,i){super(new Uint16Array(t),e,i),this.isFloat16BufferAttribute=!0}},t.Float32BufferAttribute=Ti,t.Float64BufferAttribute=class extends bi{constructor(t,e,i){super(new Float64Array(t),e,i)}},t.FloatType=M,t.Fog=na,t.FogExp2=ia,t.FramebufferTexture=class extends $t{constructor(t,e,i){super({width:t,height:e}),this.isFramebufferTexture=!0,this.format=i,this.magFilter=d,this.minFilter=d,this.generateMipmaps=!1,this.needsUpdate=!0}},t.FrontSide=0,t.Frustum=xn,t.GLBufferAttribute=class{constructor(t,e,i,n,r){this.isGLBufferAttribute=!0,this.buffer=t,this.type=e,this.itemSize=i,this.elementSize=n,this.count=r,this.version=0}set needsUpdate(t){!0===t&&this.version++}setBuffer(t){return this.buffer=t,this}setType(t,e){return this.type=t,this.elementSize=e,this}setItemSize(t){return this.itemSize=t,this}setCount(t){return this.count=t,this}},t.GLSL1="100",t.GLSL3=dt,t.GreaterDepth=6,t.GreaterEqualDepth=5,t.GreaterEqualStencilFunc=518,t.GreaterStencilFunc=516,t.GridHelper=class extends to{constructor(t=10,e=10,i=4473924,n=8947848){i=new qt(i),n=new qt(n);const r=e/2,s=t/e,a=t/2,o=[],l=[];for(let t=0,c=0,h=-a;t<=e;t++,h+=s){o.push(-a,0,h,a,0,h),o.push(h,0,-a,h,0,a);const e=t===r?i:n;e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3}const c=new Di;c.setAttribute("position",new Ti(o,3)),c.setAttribute("color",new Ti(l,3));super(c,new ja({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}},t.Group=Hs,t.HalfFloatType=b,t.HemisphereLight=yc,t.HemisphereLightHelper=class extends si{constructor(t,e,i){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="HemisphereLightHelper";const n=new wl(e);n.rotateY(.5*Math.PI),this.material=new _i({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const r=n.getAttribute("position"),s=new Float32Array(3*r.count);n.setAttribute("color",new bi(s,3)),this.add(new Ki(n,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");Rh.copy(this.light.color),Ph.copy(this.light.groundColor);for(let t=0,i=e.count;t<i;t++){const n=t<i/2?Rh:Ph;e.setXYZ(t,n.r,n.g,n.b)}e.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),t.lookAt(Lh.setFromMatrixPosition(this.light.matrixWorld).negate())}},t.HemisphereLightProbe=class extends Uc{constructor(t,e,i=1){super(void 0,i),this.isHemisphereLightProbe=!0;const n=(new qt).set(t),r=(new qt).set(e),s=new re(n.r,n.g,n.b),a=new re(r.r,r.g,r.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(s).add(a).multiplyScalar(o),this.sh.coefficients[1].copy(s).sub(a).multiplyScalar(l)}},t.IcosahedronBufferGeometry=class extends bl{constructor(t,e){console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry."),super(t,e)}},t.IcosahedronGeometry=bl,t.ImageBitmapLoader=class extends mc{constructor(t){super(t),this.isImageBitmapLoader=!0,"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=uc.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a={};a.credentials="anonymous"===this.crossOrigin?"same-origin":"include",a.headers=this.requestHeader,fetch(t,a).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(i){uc.add(t,i),e&&e(i),r.manager.itemEnd(t)})).catch((function(e){n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}},t.ImageLoader=xc,t.ImageUtils=Yt,t.ImmediateRenderObject=function(){console.error("THREE.ImmediateRenderObject has been removed.")},t.IncrementStencilOp=7682,t.IncrementWrapStencilOp=34055,t.InstancedBufferAttribute=Ba,t.InstancedBufferGeometry=kc,t.InstancedInterleavedBuffer=class extends sa{constructor(t,e,i=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}},t.InstancedMesh=Wa,t.Int16BufferAttribute=class extends bi{constructor(t,e,i){super(new Int16Array(t),e,i)}},t.Int32BufferAttribute=class extends bi{constructor(t,e,i){super(new Int32Array(t),e,i)}},t.Int8BufferAttribute=class extends bi{constructor(t,e,i){super(new Int8Array(t),e,i)}},t.IntType=1013,t.InterleavedBuffer=sa,t.InterleavedBufferAttribute=oa,t.Interpolant=Kl,t.InterpolateDiscrete=$,t.InterpolateLinear=Q,t.InterpolateSmooth=tt,t.InvertStencilOp=5386,t.KeepStencilOp=ht,t.KeyframeTrack=ec,t.LOD=Aa,t.LatheBufferGeometry=class extends Do{constructor(t,e,i,n){console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry."),super(t,e,i,n)}},t.LatheGeometry=Do,t.Layers=je,t.LessDepth=2,t.LessEqualDepth=3,t.LessEqualStencilFunc=515,t.LessStencilFunc=513,t.Light=_c,t.LightProbe=Uc,t.Line=Ka,t.Line3=class{constructor(t=new re,e=new re){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){bh.subVectors(t,this.start),wh.subVectors(this.end,this.start);const i=wh.dot(wh);let n=wh.dot(bh)/i;return e&&(n=yt(n,0,1)),n}closestPointToPoint(t,e,i){const n=this.closestPointToPointParameter(t,e);return this.delta(i).multiplyScalar(n).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}},t.LineBasicMaterial=ja,t.LineCurve=To,t.LineCurve3=Ao,t.LineDashedMaterial=Hl,t.LineLoop=eo,t.LineSegments=to,t.LinearEncoding=at,t.LinearFilter=f,t.LinearInterpolant=Ql,t.LinearMipMapLinearFilter=1008,t.LinearMipMapNearestFilter=1007,t.LinearMipmapLinearFilter=v,t.LinearMipmapNearestFilter=g,t.LinearSRGBColorSpace=ct,t.LinearToneMapping=1,t.Loader=mc,t.LoaderUtils=Fc,t.LoadingManager=dc,t.LoopOnce=2200,t.LoopPingPong=2202,t.LoopRepeat=2201,t.LuminanceAlphaFormat=1025,t.LuminanceFormat=1024,t.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},t.Material=xi,t.MaterialLoader=Bc,t.MathUtils=Ct,t.Matrix3=Rt,t.Matrix4=Ne,t.MaxEquation=104,t.Mesh=Ki,t.MeshBasicMaterial=_i,t.MeshDepthMaterial=Us,t.MeshDistanceMaterial=Bs,t.MeshLambertMaterial=Gl,t.MeshMatcapMaterial=Vl,t.MeshNormalMaterial=kl,t.MeshPhongMaterial=Bl,t.MeshPhysicalMaterial=Ul,t.MeshStandardMaterial=zl,t.MeshToonMaterial=Fl,t.MinEquation=103,t.MirroredRepeatWrapping=u,t.MixOperation=1,t.MultiplyBlending=4,t.MultiplyOperation=0,t.NearestFilter=d,t.NearestMipMapLinearFilter=1005,t.NearestMipMapNearestFilter=1004,t.NearestMipmapLinearFilter=m,t.NearestMipmapNearestFilter=p,t.NeverDepth=0,t.NeverStencilFunc=512,t.NoBlending=0,t.NoColorSpace="",t.NoToneMapping=0,t.NormalAnimationBlendMode=rt,t.NormalBlending=1,t.NotEqualDepth=7,t.NotEqualStencilFunc=517,t.NumberKeyframeTrack=rc,t.Object3D=si,t.ObjectLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=""===this.path?Fc.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||s;const a=new vc(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(i){let s=null;try{s=JSON.parse(i)}catch(e){return void 0!==n&&n(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}const a=s.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())return void 0!==n&&n(new Error("THREE.ObjectLoader: Can't load "+t)),void console.error("THREE.ObjectLoader: Can't load "+t);r.parse(s,e)}),i,n)}async loadAsync(t,e){const i=""===this.path?Fc.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||i;const n=new vc(this.manager);n.setPath(this.path),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials);const r=await n.loadAsync(t,e),s=JSON.parse(r),a=s.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())throw new Error("THREE.ObjectLoader: Can't load "+t);return await this.parseAsync(s)}parse(t,e){const i=this.parseAnimations(t.animations),n=this.parseShapes(t.shapes),r=this.parseGeometries(t.geometries,n),s=this.parseImages(t.images,(function(){void 0!==e&&e(l)})),a=this.parseTextures(t.textures,s),o=this.parseMaterials(t.materials,a),l=this.parseObject(t.object,r,o,a,i),c=this.parseSkeletons(t.skeletons,l);if(this.bindSkeletons(l,c),void 0!==e){let t=!1;for(const e in s)if(s[e].data instanceof HTMLImageElement){t=!0;break}!1===t&&e(l)}return l}async parseAsync(t){const e=this.parseAnimations(t.animations),i=this.parseShapes(t.shapes),n=this.parseGeometries(t.geometries,i),r=await this.parseImagesAsync(t.images),s=this.parseTextures(t.textures,r),a=this.parseMaterials(t.materials,s),o=this.parseObject(t.object,n,a,s,e),l=this.parseSkeletons(t.skeletons,o);return this.bindSkeletons(o,l),o}parseShapes(t){const e={};if(void 0!==t)for(let i=0,n=t.length;i<n;i++){const n=(new jo).fromJSON(t[i]);e[n.uuid]=n}return e}parseSkeletons(t,e){const i={},n={};if(e.traverse((function(t){t.isBone&&(n[t.uuid]=t)})),void 0!==t)for(let e=0,r=t.length;e<r;e++){const r=(new Ua).fromJSON(t[e],n);i[r.uuid]=r}return i}parseGeometries(t,e){const i={};if(void 0!==t){const n=new Gc;for(let r=0,s=t.length;r<s;r++){let s;const a=t[r];switch(a.type){case"BufferGeometry":case"InstancedBufferGeometry":s=n.parse(a);break;case"Geometry":if("THREE"in window&&"LegacyJSONLoader"in THREE)s=(new THREE.LegacyJSONLoader).parse(a,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:a.type in Dl?s=Dl[a.type].fromJSON(a,e):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${a.type}"`)}s.uuid=a.uuid,void 0!==a.name&&(s.name=a.name),!0===s.isBufferGeometry&&void 0!==a.userData&&(s.userData=a.userData),i[a.uuid]=s}}return i}parseMaterials(t,e){const i={},n={};if(void 0!==t){const r=new Bc;r.setTextures(e);for(let e=0,s=t.length;e<s;e++){const s=t[e];void 0===i[s.uuid]&&(i[s.uuid]=r.parse(s)),n[s.uuid]=i[s.uuid]}}return n}parseAnimations(t){const e={};if(void 0!==t)for(let i=0;i<t.length;i++){const n=t[i],r=cc.parse(n);e[r.uuid]=r}return e}parseImages(t,e){const i=this,n={};let r;function s(t){if("string"==typeof t){const e=t;return function(t){return i.manager.itemStart(t),r.load(t,(function(){i.manager.itemEnd(t)}),void 0,(function(){i.manager.itemError(t),i.manager.itemEnd(t)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:i.resourcePath+e)}return t.data?{data:Nt(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){const i=new dc(e);r=new xc(i),r.setCrossOrigin(this.crossOrigin);for(let e=0,i=t.length;e<i;e++){const i=t[e],r=i.url;if(Array.isArray(r)){const t=[];for(let e=0,i=r.length;e<i;e++){const i=s(r[e]);null!==i&&(i instanceof HTMLImageElement?t.push(i):t.push(new Na(i.data,i.width,i.height)))}n[i.uuid]=new Zt(t)}else{const t=s(i.url);n[i.uuid]=new Zt(t)}}}return n}async parseImagesAsync(t){const e=this,i={};let n;async function r(t){if("string"==typeof t){const i=t,r=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(i)?i:e.resourcePath+i;return await n.loadAsync(r)}return t.data?{data:Nt(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){n=new xc(this.manager),n.setCrossOrigin(this.crossOrigin);for(let e=0,n=t.length;e<n;e++){const n=t[e],s=n.url;if(Array.isArray(s)){const t=[];for(let e=0,i=s.length;e<i;e++){const i=s[e],n=await r(i);null!==n&&(n instanceof HTMLImageElement?t.push(n):t.push(new Na(n.data,n.width,n.height)))}i[n.uuid]=new Zt(t)}else{const t=await r(n.url);i[n.uuid]=new Zt(t)}}}return i}parseTextures(t,e){function i(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}const n={};if(void 0!==t)for(let r=0,s=t.length;r<s;r++){const s=t[r];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image);const a=e[s.image],o=a.data;let l;Array.isArray(o)?(l=new hn,6===o.length&&(l.needsUpdate=!0)):(l=o&&o.data?new Na:new $t,o&&(l.needsUpdate=!0)),l.source=a,l.uuid=s.uuid,void 0!==s.name&&(l.name=s.name),void 0!==s.mapping&&(l.mapping=i(s.mapping,Vc)),void 0!==s.offset&&l.offset.fromArray(s.offset),void 0!==s.repeat&&l.repeat.fromArray(s.repeat),void 0!==s.center&&l.center.fromArray(s.center),void 0!==s.rotation&&(l.rotation=s.rotation),void 0!==s.wrap&&(l.wrapS=i(s.wrap[0],Hc),l.wrapT=i(s.wrap[1],Hc)),void 0!==s.format&&(l.format=s.format),void 0!==s.type&&(l.type=s.type),void 0!==s.encoding&&(l.encoding=s.encoding),void 0!==s.minFilter&&(l.minFilter=i(s.minFilter,Wc)),void 0!==s.magFilter&&(l.magFilter=i(s.magFilter,Wc)),void 0!==s.anisotropy&&(l.anisotropy=s.anisotropy),void 0!==s.flipY&&(l.flipY=s.flipY),void 0!==s.premultiplyAlpha&&(l.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(l.unpackAlignment=s.unpackAlignment),void 0!==s.userData&&(l.userData=s.userData),n[s.uuid]=l}return n}parseObject(t,e,i,n,r){let s,a,o;function l(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function c(t){if(void 0!==t){if(Array.isArray(t)){const e=[];for(let n=0,r=t.length;n<r;n++){const r=t[n];void 0===i[r]&&console.warn("THREE.ObjectLoader: Undefined material",r),e.push(i[r])}return e}return void 0===i[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),i[t]}}function h(t){return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined texture",t),n[t]}switch(t.type){case"Scene":s=new ra,void 0!==t.background&&(Number.isInteger(t.background)?s.background=new qt(t.background):s.background=h(t.background)),void 0!==t.environment&&(s.environment=h(t.environment)),void 0!==t.fog&&("Fog"===t.fog.type?s.fog=new na(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(s.fog=new ia(t.fog.color,t.fog.density))),void 0!==t.backgroundBlurriness&&(s.backgroundBlurriness=t.backgroundBlurriness);break;case"PerspectiveCamera":s=new on(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(s.focus=t.focus),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.filmGauge&&(s.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(s.filmOffset=t.filmOffset),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"OrthographicCamera":s=new In(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"AmbientLight":s=new Nc(t.color,t.intensity);break;case"DirectionalLight":s=new Dc(t.color,t.intensity);break;case"PointLight":s=new Pc(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":s=new Oc(t.color,t.intensity,t.width,t.height);break;case"SpotLight":s=new Ac(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":s=new yc(t.color,t.groundColor,t.intensity);break;case"LightProbe":s=(new Uc).fromJSON(t);break;case"SkinnedMesh":a=l(t.geometry),o=c(t.material),s=new Ia(a,o),void 0!==t.bindMode&&(s.bindMode=t.bindMode),void 0!==t.bindMatrix&&s.bindMatrix.fromArray(t.bindMatrix),void 0!==t.skeleton&&(s.skeleton=t.skeleton);break;case"Mesh":a=l(t.geometry),o=c(t.material),s=new Ki(a,o);break;case"InstancedMesh":a=l(t.geometry),o=c(t.material);const e=t.count,i=t.instanceMatrix,n=t.instanceColor;s=new Wa(a,o,e),s.instanceMatrix=new Ba(new Float32Array(i.array),16),void 0!==n&&(s.instanceColor=new Ba(new Float32Array(n.array),n.itemSize));break;case"LOD":s=new Aa;break;case"Line":s=new Ka(l(t.geometry),c(t.material));break;case"LineLoop":s=new eo(l(t.geometry),c(t.material));break;case"LineSegments":s=new to(l(t.geometry),c(t.material));break;case"PointCloud":case"Points":s=new oo(l(t.geometry),c(t.material));break;case"Sprite":s=new ba(c(t.material));break;case"Group":s=new Hs;break;case"Bone":s=new Da;break;default:s=new si}if(s.uuid=t.uuid,void 0!==t.name&&(s.name=t.name),void 0!==t.matrix?(s.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(s.matrixAutoUpdate=t.matrixAutoUpdate),s.matrixAutoUpdate&&s.matrix.decompose(s.position,s.quaternion,s.scale)):(void 0!==t.position&&s.position.fromArray(t.position),void 0!==t.rotation&&s.rotation.fromArray(t.rotation),void 0!==t.quaternion&&s.quaternion.fromArray(t.quaternion),void 0!==t.scale&&s.scale.fromArray(t.scale)),void 0!==t.castShadow&&(s.castShadow=t.castShadow),void 0!==t.receiveShadow&&(s.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(s.shadow.bias=t.shadow.bias),void 0!==t.shadow.normalBias&&(s.shadow.normalBias=t.shadow.normalBias),void 0!==t.shadow.radius&&(s.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&s.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(s.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(s.visible=t.visible),void 0!==t.frustumCulled&&(s.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(s.renderOrder=t.renderOrder),void 0!==t.userData&&(s.userData=t.userData),void 0!==t.layers&&(s.layers.mask=t.layers),void 0!==t.children){const a=t.children;for(let t=0;t<a.length;t++)s.add(this.parseObject(a[t],e,i,n,r))}if(void 0!==t.animations){const e=t.animations;for(let t=0;t<e.length;t++){const i=e[t];s.animations.push(r[i])}}if("LOD"===t.type){void 0!==t.autoUpdate&&(s.autoUpdate=t.autoUpdate);const e=t.levels;for(let t=0;t<e.length;t++){const i=e[t],n=s.getObjectByProperty("uuid",i.object);void 0!==n&&s.addLevel(n,i.distance,i.hysteresis)}}return s}bindSkeletons(t,e){0!==Object.keys(e).length&&t.traverse((function(t){if(!0===t.isSkinnedMesh&&void 0!==t.skeleton){const i=e[t.skeleton];void 0===i?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton):t.bind(i,t.bindMatrix)}}))}},t.ObjectSpaceNormalMap=1,t.OctahedronBufferGeometry=class extends wl{constructor(t,e){console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry."),super(t,e)}},t.OctahedronGeometry=wl,t.OneFactor=201,t.OneMinusDstAlphaFactor=207,t.OneMinusDstColorFactor=209,t.OneMinusSrcAlphaFactor=205,t.OneMinusSrcColorFactor=203,t.OrthographicCamera=In,t.PCFShadowMap=1,t.PCFSoftShadowMap=2,t.PMREMGenerator=Gn,t.Path=Io,t.PerspectiveCamera=on,t.Plane=fn,t.PlaneBufferGeometry=class extends Mn{constructor(t,e,i,n){console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry."),super(t,e,i,n)}},t.PlaneGeometry=Mn,t.PlaneHelper=class extends Ka{constructor(t,e=1,i=16776960){const n=i,r=new Di;r.setAttribute("position",new Ti([1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),r.computeBoundingSphere(),super(r,new ja({color:n,toneMapped:!1})),this.type="PlaneHelper",this.plane=t,this.size=e;const s=new Di;s.setAttribute("position",new Ti([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),s.computeBoundingSphere(),this.add(new Ki(s,new _i({color:n,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}},t.PointLight=Pc,t.PointLightHelper=class extends Ki{constructor(t,e,i){super(new Al(e,4,2),new _i({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.color=i,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}},t.Points=oo,t.PointsMaterial=io,t.PolarGridHelper=class extends to{constructor(t=10,e=16,i=8,n=64,r=4473924,s=8947848){r=new qt(r),s=new qt(s);const a=[],o=[];if(e>1)for(let i=0;i<e;i++){const n=i/e*(2*Math.PI),l=Math.sin(n)*t,c=Math.cos(n)*t;a.push(0,0,0),a.push(l,0,c);const h=1&i?r:s;o.push(h.r,h.g,h.b),o.push(h.r,h.g,h.b)}for(let e=0;e<i;e++){const l=1&e?r:s,c=t-t/i*e;for(let t=0;t<n;t++){let e=t/n*(2*Math.PI),i=Math.sin(e)*c,r=Math.cos(e)*c;a.push(i,0,r),o.push(l.r,l.g,l.b),e=(t+1)/n*(2*Math.PI),i=Math.sin(e)*c,r=Math.cos(e)*c,a.push(i,0,r),o.push(l.r,l.g,l.b)}}const l=new Di;l.setAttribute("position",new Ti(a,3)),l.setAttribute("color",new Ti(o,3));super(l,new ja({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}},t.PolyhedronBufferGeometry=class extends Bo{constructor(t,e,i,n){console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry."),super(t,e,i,n)}},t.PolyhedronGeometry=Bo,t.PositionalAudio=class extends ih{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,i){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=i,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(nh,rh,sh),ah.set(0,0,1).applyQuaternion(rh);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(nh.x,t),e.positionY.linearRampToValueAtTime(nh.y,t),e.positionZ.linearRampToValueAtTime(nh.z,t),e.orientationX.linearRampToValueAtTime(ah.x,t),e.orientationY.linearRampToValueAtTime(ah.y,t),e.orientationZ.linearRampToValueAtTime(ah.z,t)}else e.setPosition(nh.x,nh.y,nh.z),e.setOrientation(ah.x,ah.y,ah.z)}},t.PropertyBinding=mh,t.PropertyMixer=oh,t.QuadraticBezierCurve=Eo,t.QuadraticBezierCurve3=Co,t.Quaternion=ne,t.QuaternionKeyframeTrack=ac,t.QuaternionLinearInterpolant=sc,t.REVISION=e,t.RGBADepthPacking=3201,t.RGBAFormat=S,t.RGBAIntegerFormat=1033,t.RGBA_ASTC_10x10_Format=Y,t.RGBA_ASTC_10x5_Format=j,t.RGBA_ASTC_10x6_Format=q,t.RGBA_ASTC_10x8_Format=X,t.RGBA_ASTC_12x10_Format=Z,t.RGBA_ASTC_12x12_Format=J,t.RGBA_ASTC_4x4_Format=U,t.RGBA_ASTC_5x4_Format=B,t.RGBA_ASTC_5x5_Format=F,t.RGBA_ASTC_6x5_Format=k,t.RGBA_ASTC_6x6_Format=G,t.RGBA_ASTC_8x5_Format=V,t.RGBA_ASTC_8x6_Format=H,t.RGBA_ASTC_8x8_Format=W,t.RGBA_BPTC_Format=K,t.RGBA_ETC2_EAC_Format=z,t.RGBA_PVRTC_2BPPV1_Format=N,t.RGBA_PVRTC_4BPPV1_Format=D,t.RGBA_S3TC_DXT1_Format=C,t.RGBA_S3TC_DXT3_Format=L,t.RGBA_S3TC_DXT5_Format=R,t.RGBFormat=1022,t.RGB_ETC1_Format=36196,t.RGB_ETC2_Format=O,t.RGB_PVRTC_2BPPV1_Format=I,t.RGB_PVRTC_4BPPV1_Format=P,t.RGB_S3TC_DXT1_Format=E,t.RGFormat=1030,t.RGIntegerFormat=1031,t.RawShaderMaterial=Ol,t.Ray=De,t.Raycaster=class{constructor(t,e,i=0,n=1/0){this.ray=new De(t,e),this.near=i,this.far=n,this.camera=null,this.layers=new je,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}intersectObject(t,e=!0,i=[]){return yh(t,this,i,e),i.sort(_h),i}intersectObjects(t,e=!0,i=[]){for(let n=0,r=t.length;n<r;n++)yh(t[n],this,i,e);return i.sort(_h),i}},t.RectAreaLight=Oc,t.RedFormat=1028,t.RedIntegerFormat=1029,t.ReinhardToneMapping=2,t.RepeatWrapping=c,t.ReplaceStencilOp=7681,t.ReverseSubtractEquation=102,t.RingBufferGeometry=class extends Sl{constructor(t,e,i,n,r,s){console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry."),super(t,e,i,n,r,s)}},t.RingGeometry=Sl,t.SRGBColorSpace=lt,t.Scene=ra,t.ShaderChunk=bn,t.ShaderLib=Sn,t.ShaderMaterial=sn,t.ShadowMaterial=Nl,t.Shape=jo,t.ShapeBufferGeometry=class extends Tl{constructor(t,e){console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."),super(t,e)}},t.ShapeGeometry=Tl,t.ShapePath=class{constructor(){this.type="ShapePath",this.color=new qt,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new Io,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,i,n){return this.currentPath.quadraticCurveTo(t,e,i,n),this}bezierCurveTo(t,e,i,n,r,s){return this.currentPath.bezierCurveTo(t,e,i,n,r,s),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t){function e(t,e){const i=e.length;let n=!1;for(let r=i-1,s=0;s<i;r=s++){let i=e[r],a=e[s],o=a.x-i.x,l=a.y-i.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(i=e[s],o=-o,a=e[r],l=-l),t.y<i.y||t.y>a.y)continue;if(t.y===i.y){if(t.x===i.x)return!0}else{const e=l*(t.x-i.x)-o*(t.y-i.y);if(0===e)return!0;if(e<0)continue;n=!n}}else{if(t.y!==i.y)continue;if(a.x<=t.x&&t.x<=i.x||i.x<=t.x&&t.x<=a.x)return!0}}return n}const i=vl.isClockWise,n=this.subPaths;if(0===n.length)return[];let r,s,a;const o=[];if(1===n.length)return s=n[0],a=new jo,a.curves=s.curves,o.push(a),o;let l=!i(n[0].getPoints());l=t?!l:l;const c=[],h=[];let u,d,p=[],m=0;h[m]=void 0,p[m]=[];for(let e=0,a=n.length;e<a;e++)s=n[e],u=s.getPoints(),r=i(u),r=t?!r:r,r?(!l&&h[m]&&m++,h[m]={s:new jo,p:u},h[m].s.curves=s.curves,l&&m++,p[m]=[]):p[m].push({h:s,p:u[0]});if(!h[0])return function(t){const e=[];for(let i=0,n=t.length;i<n;i++){const n=t[i],r=new jo;r.curves=n.curves,e.push(r)}return e}(n);if(h.length>1){let t=!1,i=0;for(let t=0,e=h.length;t<e;t++)c[t]=[];for(let n=0,r=h.length;n<r;n++){const r=p[n];for(let s=0;s<r.length;s++){const a=r[s];let o=!0;for(let r=0;r<h.length;r++)e(a.p,h[r].p)&&(n!==r&&i++,o?(o=!1,c[r].push(a)):t=!0);o&&c[n].push(a)}}i>0&&!1===t&&(p=c)}for(let t=0,e=h.length;t<e;t++){a=h[t].s,o.push(a),d=p[t];for(let t=0,e=d.length;t<e;t++)a.holes.push(d[t].h)}return o}},t.ShapeUtils=vl,t.ShortType=1011,t.Skeleton=Ua,t.SkeletonHelper=class extends to{constructor(t){const e=Ch(t),i=new Di,n=[],r=[],s=new qt(0,0,1),a=new qt(0,1,0);for(let t=0;t<e.length;t++){const i=e[t];i.parent&&i.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),r.push(s.r,s.g,s.b),r.push(a.r,a.g,a.b))}i.setAttribute("position",new Ti(n,3)),i.setAttribute("color",new Ti(r,3));super(i,new ja({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,i=this.geometry,n=i.getAttribute("position");Eh.copy(this.root.matrixWorld).invert();for(let t=0,i=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(Ah.multiplyMatrices(Eh,r.matrixWorld),Th.setFromMatrixPosition(Ah),n.setXYZ(i,Th.x,Th.y,Th.z),Ah.multiplyMatrices(Eh,r.parent.matrixWorld),Th.setFromMatrixPosition(Ah),n.setXYZ(i+1,Th.x,Th.y,Th.z),i+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose()}},t.SkinnedMesh=Ia,t.Source=Zt,t.Sphere=Te,t.SphereBufferGeometry=class extends Al{constructor(t,e,i,n,r,s,a){console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry."),super(t,e,i,n,r,s,a)}},t.SphereGeometry=Al,t.Spherical=class{constructor(t=1,e=0,i=0){return this.radius=t,this.phi=e,this.theta=i,this}set(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(yt(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}},t.SphericalHarmonics3=zc,t.SplineCurve=Lo,t.SpotLight=Ac,t.SpotLightHelper=class extends si{constructor(t,e){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e,this.type="SpotLightHelper";const i=new Di,n=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,i=32;t<i;t++,e++){const r=t/i*Math.PI*2,s=e/i*Math.PI*2;n.push(Math.cos(r),Math.sin(r),1,Math.cos(s),Math.sin(s),1)}i.setAttribute("position",new Ti(n,3));const r=new ja({fog:!1,toneMapped:!1});this.cone=new to(i,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1);const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Sh.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Sh),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}},t.Sprite=ba,t.SpriteMaterial=la,t.SrcAlphaFactor=204,t.SrcAlphaSaturateFactor=210,t.SrcColorFactor=202,t.StaticCopyUsage=35046,t.StaticDrawUsage=ut,t.StaticReadUsage=35045,t.StereoCamera=class{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new on,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new on,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep,Zc.copy(t.projectionMatrix);const i=e.eyeSep/2,n=i*e.near/e.focus,r=e.near*Math.tan(vt*e.fov*.5)/e.zoom;let s,a;Yc.elements[12]=-i,Xc.elements[12]=i,s=-r*e.aspect+n,a=r*e.aspect+n,Zc.elements[0]=2*e.near/(a-s),Zc.elements[8]=(a+s)/(a-s),this.cameraL.projectionMatrix.copy(Zc),s=-r*e.aspect-n,a=r*e.aspect-n,Zc.elements[0]=2*e.near/(a-s),Zc.elements[8]=(a+s)/(a-s),this.cameraR.projectionMatrix.copy(Zc)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Yc),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Xc)}},t.StreamCopyUsage=35042,t.StreamDrawUsage=35040,t.StreamReadUsage=35041,t.StringKeyframeTrack=oc,t.SubtractEquation=101,t.SubtractiveBlending=3,t.TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},t.TangentSpaceNormalMap=0,t.TetrahedronBufferGeometry=class extends El{constructor(t,e){console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry."),super(t,e)}},t.TetrahedronGeometry=El,t.Texture=$t,t.TextureLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=new $t,s=new xc(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r)}),i,n),r}},t.TorusBufferGeometry=class extends Cl{constructor(t,e,i,n,r){console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry."),super(t,e,i,n,r)}},t.TorusGeometry=Cl,t.TorusKnotBufferGeometry=class extends Ll{constructor(t,e,i,n,r,s){console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry."),super(t,e,i,n,r,s)}},t.TorusKnotGeometry=Ll,t.Triangle=gi,t.TriangleFanDrawMode=2,t.TriangleStripDrawMode=1,t.TrianglesDrawMode=0,t.TubeBufferGeometry=class extends Rl{constructor(t,e,i,n,r){console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry."),super(t,e,i,n,r)}},t.TubeGeometry=Rl,t.UVMapping=n,t.Uint16BufferAttribute=wi,t.Uint32BufferAttribute=Si,t.Uint8BufferAttribute=class extends bi{constructor(t,e,i){super(new Uint8Array(t),e,i)}},t.Uint8ClampedBufferAttribute=class extends bi{constructor(t,e,i){super(new Uint8ClampedArray(t),e,i)}},t.Uniform=vh,t.UniformsGroup=class extends mt{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:xh++}),this.name="",this.usage=ut,this.uniforms=[]}add(t){return this.uniforms.push(t),this}remove(t){const e=this.uniforms.indexOf(t);return-1!==e&&this.uniforms.splice(e,1),this}setName(t){return this.name=t,this}setUsage(t){return this.usage=t,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(t){this.name=t.name,this.usage=t.usage;const e=t.uniforms;this.uniforms.length=0;for(let t=0,i=e.length;t<i;t++)this.uniforms.push(e[t].clone());return this}clone(){return(new this.constructor).copy(this)}},t.UniformsLib=wn,t.UniformsUtils=rn,t.UnsignedByteType=x,t.UnsignedInt248Type=w,t.UnsignedIntType=y,t.UnsignedShort4444Type=1017,t.UnsignedShort5551Type=1018,t.UnsignedShortType=_,t.VSMShadowMap=3,t.Vector2=Lt,t.Vector3=re,t.Vector4=Qt,t.VectorKeyframeTrack=lc,t.VideoTexture=class extends $t{constructor(t,e,i,n,r,s,a,o,l){super(t,e,i,n,r,s,a,o,l),this.isVideoTexture=!0,this.minFilter=void 0!==s?s:f,this.magFilter=void 0!==r?r:f,this.generateMipmaps=!1;const c=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){c.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1==="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}},t.WebGL1Renderer=ea,t.WebGL3DRenderTarget=class extends te{constructor(t=1,e=1,i=1){super(t,e),this.isWebGL3DRenderTarget=!0,this.depth=i,this.texture=new ie(null,t,e,i),this.texture.isRenderTargetTexture=!0}},t.WebGLArrayRenderTarget=class extends te{constructor(t=1,e=1,i=1){super(t,e),this.isWebGLArrayRenderTarget=!0,this.depth=i,this.texture=new ee(null,t,e,i),this.texture.isRenderTargetTexture=!0}},t.WebGLCubeRenderTarget=un,t.WebGLMultipleRenderTargets=class extends te{constructor(t=1,e=1,i=1,n={}){super(t,e,n),this.isWebGLMultipleRenderTargets=!0;const r=this.texture;this.texture=[];for(let t=0;t<i;t++)this.texture[t]=r.clone(),this.texture[t].isRenderTargetTexture=!0}setSize(t,e,i=1){if(this.width!==t||this.height!==e||this.depth!==i){this.width=t,this.height=e,this.depth=i;for(let n=0,r=this.texture.length;n<r;n++)this.texture[n].image.width=t,this.texture[n].image.height=e,this.texture[n].image.depth=i;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.texture.length=0;for(let e=0,i=t.texture.length;e<i;e++)this.texture[e]=t.texture[e].clone(),this.texture[e].isRenderTargetTexture=!0;return this}},t.WebGLMultisampleRenderTarget=class extends te{constructor(t,e,i){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.'),super(t,e,i),this.samples=4}},t.WebGLRenderTarget=te,t.WebGLRenderer=ta,t.WebGLUtils=Vs,t.WireframeGeometry=Pl,t.WrapAroundEnding=nt,t.ZeroCurvatureEnding=et,t.ZeroFactor=200,t.ZeroSlopeEnding=it,t.ZeroStencilOp=0,t._SRGBAFormat=pt,t.sRGBEncoding=ot,Object.defineProperty(t,"__esModule",{value:!0})}));
+!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).THREE={})}(this,(function(t){"use strict";const e="147",i=100,n=300,r=301,s=302,a=303,o=304,l=306,c=1e3,h=1001,u=1002,d=1003,p=1004,m=1005,f=1006,g=1007,v=1008,x=1009,_=1012,y=1014,M=1015,b=1016,w=1020,S=1023,T=1026,A=1027,E=33776,C=33777,L=33778,R=33779,P=35840,I=35841,D=35842,N=35843,O=37492,z=37496,U=37808,B=37809,F=37810,k=37811,G=37812,V=37813,H=37814,W=37815,j=37816,q=37817,X=37818,Y=37819,Z=37820,J=37821,K=36492,$=2300,Q=2301,tt=2302,et=2400,it=2401,nt=2402,rt=2500,st=2501,at=3e3,ot=3001,lt="srgb",ct="srgb-linear",ht=7680,ut=35044,dt="300 es",pt=1035;class mt{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const i=this._listeners;return void 0!==i[t]&&-1!==i[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const i=this._listeners[t];if(void 0!==i){const t=i.indexOf(e);-1!==t&&i.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const i=e.slice(0);for(let e=0,n=i.length;e<n;e++)i[e].call(this,t);t.target=null}}}const ft=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let gt=1234567;const vt=Math.PI/180,xt=180/Math.PI;function _t(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(ft[255&t]+ft[t>>8&255]+ft[t>>16&255]+ft[t>>24&255]+"-"+ft[255&e]+ft[e>>8&255]+"-"+ft[e>>16&15|64]+ft[e>>24&255]+"-"+ft[63&i|128]+ft[i>>8&255]+"-"+ft[i>>16&255]+ft[i>>24&255]+ft[255&n]+ft[n>>8&255]+ft[n>>16&255]+ft[n>>24&255]).toLowerCase()}function yt(t,e,i){return Math.max(e,Math.min(i,t))}function Mt(t,e){return(t%e+e)%e}function bt(t,e,i){return(1-i)*t+i*e}function wt(t){return 0==(t&t-1)&&0!==t}function St(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}function Tt(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}function At(t,e){switch(e.constructor){case Float32Array:return t;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function Et(t,e){switch(e.constructor){case Float32Array:return t;case Uint16Array:return Math.round(65535*t);case Uint8Array:return Math.round(255*t);case Int16Array:return Math.round(32767*t);case Int8Array:return Math.round(127*t);default:throw new Error("Invalid component type.")}}var Ct=Object.freeze({__proto__:null,DEG2RAD:vt,RAD2DEG:xt,generateUUID:_t,clamp:yt,euclideanModulo:Mt,mapLinear:function(t,e,i,n,r){return n+(t-e)*(r-n)/(i-e)},inverseLerp:function(t,e,i){return t!==e?(i-t)/(e-t):0},lerp:bt,damp:function(t,e,i,n){return bt(t,e,1-Math.exp(-i*n))},pingpong:function(t,e=1){return e-Math.abs(Mt(t,2*e)-e)},smoothstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*(3-2*t)},smootherstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){void 0!==t&&(gt=t);let e=gt+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296},degToRad:function(t){return t*vt},radToDeg:function(t){return t*xt},isPowerOfTwo:wt,ceilPowerOfTwo:St,floorPowerOfTwo:Tt,setQuaternionFromProperEuler:function(t,e,i,n,r){const s=Math.cos,a=Math.sin,o=s(i/2),l=a(i/2),c=s((e+n)/2),h=a((e+n)/2),u=s((e-n)/2),d=a((e-n)/2),p=s((n-e)/2),m=a((n-e)/2);switch(r){case"XYX":t.set(o*h,l*u,l*d,o*c);break;case"YZY":t.set(l*d,o*h,l*u,o*c);break;case"ZXZ":t.set(l*u,l*d,o*h,o*c);break;case"XZX":t.set(o*h,l*m,l*p,o*c);break;case"YXY":t.set(l*p,o*h,l*m,o*c);break;case"ZYZ":t.set(l*m,l*p,o*h,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}},normalize:Et,denormalize:At});class Lt{constructor(t=0,e=0){Lt.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),n=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.x=r*i-s*n+t.x,this.y=r*n+s*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Rt{constructor(){Rt.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(t,e,i,n,r,s,a,o,l){const c=this.elements;return c[0]=t,c[1]=n,c[2]=a,c[3]=e,c[4]=r,c[5]=o,c[6]=i,c[7]=s,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,r=this.elements,s=i[0],a=i[3],o=i[6],l=i[1],c=i[4],h=i[7],u=i[2],d=i[5],p=i[8],m=n[0],f=n[3],g=n[6],v=n[1],x=n[4],_=n[7],y=n[2],M=n[5],b=n[8];return r[0]=s*m+a*v+o*y,r[3]=s*f+a*x+o*M,r[6]=s*g+a*_+o*b,r[1]=l*m+c*v+h*y,r[4]=l*f+c*x+h*M,r[7]=l*g+c*_+h*b,r[2]=u*m+d*v+p*y,r[5]=u*f+d*x+p*M,r[8]=u*g+d*_+p*b,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8];return e*s*c-e*a*l-i*r*c+i*a*o+n*r*l-n*s*o}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=c*s-a*l,u=a*o-c*r,d=l*r-s*o,p=e*h+i*u+n*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return t[0]=h*m,t[1]=(n*l-c*i)*m,t[2]=(a*i-n*s)*m,t[3]=u*m,t[4]=(c*e-n*o)*m,t[5]=(n*r-a*e)*m,t[6]=d*m,t[7]=(i*o-l*e)*m,t[8]=(s*e-i*r)*m,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,n,r,s,a){const o=Math.cos(r),l=Math.sin(r);return this.set(i*o,i*l,-i*(o*s+l*a)+s+t,-n*l,n*o,-n*(-l*s+o*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(Pt.makeScale(t,e)),this}rotate(t){return this.premultiply(Pt.makeRotation(-t)),this}translate(t,e){return this.premultiply(Pt.makeTranslation(t,e)),this}makeTranslation(t,e){return this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,i,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,i=t.elements;for(let t=0;t<9;t++)if(e[t]!==i[t])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}const Pt=new Rt;function It(t){for(let e=t.length-1;e>=0;--e)if(t[e]>=65535)return!0;return!1}const Dt={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Nt(t,e){return new Dt[t](e)}function Ot(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function zt(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Ut(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}const Bt={[lt]:{[ct]:zt},[ct]:{[lt]:Ut}},Ft={legacyMode:!0,get workingColorSpace(){return ct},set workingColorSpace(t){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(t,e,i){if(this.legacyMode||e===i||!e||!i)return t;if(Bt[e]&&void 0!==Bt[e][i]){const n=Bt[e][i];return t.r=n(t.r),t.g=n(t.g),t.b=n(t.b),t}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(t,e){return this.convert(t,this.workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this.workingColorSpace)}},kt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Gt={r:0,g:0,b:0},Vt={h:0,s:0,l:0},Ht={h:0,s:0,l:0};function Wt(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+6*(e-t)*(2/3-i):t}function jt(t,e){return e.r=t.r,e.g=t.g,e.b=t.b,e}class qt{constructor(t,e,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,void 0===e&&void 0===i?this.set(t):this.setRGB(t,e,i)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e="srgb"){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,Ft.toWorkingColorSpace(this,e),this}setRGB(t,e,i,n=Ft.workingColorSpace){return this.r=t,this.g=e,this.b=i,Ft.toWorkingColorSpace(this,n),this}setHSL(t,e,i,n=Ft.workingColorSpace){if(t=Mt(t,1),e=yt(e,0,1),i=yt(i,0,1),0===e)this.r=this.g=this.b=i;else{const n=i<=.5?i*(1+e):i+e-i*e,r=2*i-n;this.r=Wt(r,n,t+1/3),this.g=Wt(r,n,t),this.b=Wt(r,n,t-1/3)}return Ft.toWorkingColorSpace(this,n),this}setStyle(t,e="srgb"){function i(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const r=n[1],s=n[2];switch(r){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,Ft.toWorkingColorSpace(this,e),i(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,Ft.toWorkingColorSpace(this,e),i(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s)){const n=parseFloat(t[1])/360,r=parseFloat(t[2])/100,s=parseFloat(t[3])/100;return i(t[4]),this.setHSL(n,r,s,e)}}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=n[1],i=t.length;if(3===i)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,Ft.toWorkingColorSpace(this,e),this;if(6===i)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,Ft.toWorkingColorSpace(this,e),this}return t&&t.length>0?this.setColorName(t,e):this}setColorName(t,e="srgb"){const i=kt[t.toLowerCase()];return void 0!==i?this.setHex(i,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=zt(t.r),this.g=zt(t.g),this.b=zt(t.b),this}copyLinearToSRGB(t){return this.r=Ut(t.r),this.g=Ut(t.g),this.b=Ut(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t="srgb"){return Ft.fromWorkingColorSpace(jt(this,Gt),t),yt(255*Gt.r,0,255)<<16^yt(255*Gt.g,0,255)<<8^yt(255*Gt.b,0,255)<<0}getHexString(t="srgb"){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Ft.workingColorSpace){Ft.fromWorkingColorSpace(jt(this,Gt),e);const i=Gt.r,n=Gt.g,r=Gt.b,s=Math.max(i,n,r),a=Math.min(i,n,r);let o,l;const c=(a+s)/2;if(a===s)o=0,l=0;else{const t=s-a;switch(l=c<=.5?t/(s+a):t/(2-s-a),s){case i:o=(n-r)/t+(n<r?6:0);break;case n:o=(r-i)/t+2;break;case r:o=(i-n)/t+4}o/=6}return t.h=o,t.s=l,t.l=c,t}getRGB(t,e=Ft.workingColorSpace){return Ft.fromWorkingColorSpace(jt(this,Gt),e),t.r=Gt.r,t.g=Gt.g,t.b=Gt.b,t}getStyle(t="srgb"){return Ft.fromWorkingColorSpace(jt(this,Gt),t),t!==lt?`color(${t} ${Gt.r} ${Gt.g} ${Gt.b})`:`rgb(${255*Gt.r|0},${255*Gt.g|0},${255*Gt.b|0})`}offsetHSL(t,e,i){return this.getHSL(Vt),Vt.h+=t,Vt.s+=e,Vt.l+=i,this.setHSL(Vt.h,Vt.s,Vt.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(Vt),t.getHSL(Ht);const i=bt(Vt.h,Ht.h,e),n=bt(Vt.s,Ht.s,e),r=bt(Vt.l,Ht.l,e);return this.setHSL(i,n,r),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}let Xt;qt.NAMES=kt;class Yt{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Xt&&(Xt=Ot("canvas")),Xt.width=t.width,Xt.height=t.height;const i=Xt.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=Xt}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=Ot("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");i.drawImage(t,0,0,t.width,t.height);const n=i.getImageData(0,0,t.width,t.height),r=n.data;for(let t=0;t<r.length;t++)r[t]=255*zt(r[t]/255);return i.putImageData(n,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*zt(e[t]/255)):e[t]=zt(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}class Zt{constructor(t=null){this.isSource=!0,this.uuid=_t(),this.data=t,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const i={uuid:this.uuid,url:""},n=this.data;if(null!==n){let t;if(Array.isArray(n)){t=[];for(let e=0,i=n.length;e<i;e++)n[e].isDataTexture?t.push(Jt(n[e].image)):t.push(Jt(n[e]))}else t=Jt(n);i.url=t}return e||(t.images[this.uuid]=i),i}}function Jt(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?Yt.getDataURL(t):t.data?{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Kt=0;class $t extends mt{constructor(t=$t.DEFAULT_IMAGE,e=$t.DEFAULT_MAPPING,i=1001,n=1001,r=1006,s=1008,a=1023,o=1009,l=$t.DEFAULT_ANISOTROPY,c=3e3){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Kt++}),this.uuid=_t(),this.name="",this.source=new Zt(t),this.mipmaps=[],this.mapping=e,this.wrapS=i,this.wrapT=n,this.magFilter=r,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new Lt(0,0),this.repeat=new Lt(1,1),this.center=new Lt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Rt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const i={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==n)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case c:t.x=t.x-Math.floor(t.x);break;case h:t.x=t.x<0?0:1;break;case u:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case c:t.y=t.y-Math.floor(t.y);break;case h:t.y=t.y<0?0:1;break;case u:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}}$t.DEFAULT_IMAGE=null,$t.DEFAULT_MAPPING=n,$t.DEFAULT_ANISOTROPY=1;class Qt{constructor(t=0,e=0,i=0,n=1){Qt.prototype.isVector4=!0,this.x=t,this.y=e,this.z=i,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,r=this.w,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*n+s[12]*r,this.y=s[1]*e+s[5]*i+s[9]*n+s[13]*r,this.z=s[2]*e+s[6]*i+s[10]*n+s[14]*r,this.w=s[3]*e+s[7]*i+s[11]*n+s[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,n,r;const s=.01,a=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],m=o[2],f=o[6],g=o[10];if(Math.abs(c-u)<s&&Math.abs(h-m)<s&&Math.abs(p-f)<s){if(Math.abs(c+u)<a&&Math.abs(h+m)<a&&Math.abs(p+f)<a&&Math.abs(l+d+g-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,v=(g+1)/2,x=(c+u)/4,_=(h+m)/4,y=(p+f)/4;return t>o&&t>v?t<s?(i=0,n=.707106781,r=.707106781):(i=Math.sqrt(t),n=x/i,r=_/i):o>v?o<s?(i=.707106781,n=0,r=.707106781):(n=Math.sqrt(o),i=x/n,r=y/n):v<s?(i=.707106781,n=.707106781,r=0):(r=Math.sqrt(v),i=_/r,n=y/r),this.set(i,n,r,e),this}let v=Math.sqrt((f-p)*(f-p)+(h-m)*(h-m)+(u-c)*(u-c));return Math.abs(v)<.001&&(v=1),this.x=(f-p)/v,this.y=(h-m)/v,this.z=(u-c)/v,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class te extends mt{constructor(t=1,e=1,i={}){super(),this.isWebGLRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Qt(0,0,t,e),this.scissorTest=!1,this.viewport=new Qt(0,0,t,e);const n={width:t,height:e,depth:1};this.texture=new $t(n,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=void 0!==i.generateMipmaps&&i.generateMipmaps,this.texture.internalFormat=void 0!==i.internalFormat?i.internalFormat:null,this.texture.minFilter=void 0!==i.minFilter?i.minFilter:f,this.depthBuffer=void 0===i.depthBuffer||i.depthBuffer,this.stencilBuffer=void 0!==i.stencilBuffer&&i.stencilBuffer,this.depthTexture=void 0!==i.depthTexture?i.depthTexture:null,this.samples=void 0!==i.samples?i.samples:0}setSize(t,e,i=1){this.width===t&&this.height===e&&this.depth===i||(this.width=t,this.height=e,this.depth=i,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=i,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new Zt(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class ee extends $t{constructor(t=null,e=1,i=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=d,this.minFilter=d,this.wrapR=h,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class ie extends $t{constructor(t=null,e=1,i=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=d,this.minFilter=d,this.wrapR=h,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class ne{constructor(t=0,e=0,i=0,n=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=i,this._w=n}static slerpFlat(t,e,i,n,r,s,a){let o=i[n+0],l=i[n+1],c=i[n+2],h=i[n+3];const u=r[s+0],d=r[s+1],p=r[s+2],m=r[s+3];if(0===a)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===a)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=m);if(h!==m||o!==u||l!==d||c!==p){let t=1-a;const e=o*u+l*d+c*p+h*m,i=e>=0?1:-1,n=1-e*e;if(n>Number.EPSILON){const r=Math.sqrt(n),s=Math.atan2(r,e*i);t=Math.sin(t*s)/r,a=Math.sin(a*s)/r}const r=a*i;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+m*r,t===1-a){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,i,n,r,s){const a=i[n],o=i[n+1],l=i[n+2],c=i[n+3],h=r[s],u=r[s+1],d=r[s+2],p=r[s+3];return t[e]=a*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-a*d,t[e+2]=l*p+c*d+a*u-o*h,t[e+3]=c*p-a*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){const i=t._x,n=t._y,r=t._z,s=t._order,a=Math.cos,o=Math.sin,l=a(i/2),c=a(n/2),h=a(r/2),u=o(i/2),d=o(n/2),p=o(r/2);switch(s){case"XYZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"YXZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"ZXY":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"ZYX":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"YZX":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case"XZY":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],n=e[4],r=e[8],s=e[1],a=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=i+a+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(s-n)*t}else if(i>a&&i>h){const t=2*Math.sqrt(1+i-a-h);this._w=(c-o)/t,this._x=.25*t,this._y=(n+s)/t,this._z=(r+l)/t}else if(a>h){const t=2*Math.sqrt(1+a-i-h);this._w=(r-l)/t,this._x=(n+s)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-i-a);this._w=(s-n)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(yt(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(0===i)return this;const n=Math.min(1,e/i);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,n=t._y,r=t._z,s=t._w,a=e._x,o=e._y,l=e._z,c=e._w;return this._x=i*c+s*a+n*l-r*o,this._y=n*c+s*o+r*a-i*l,this._z=r*c+s*l+i*o-n*a,this._w=s*c-i*a-n*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const i=this._x,n=this._y,r=this._z,s=this._w;let a=s*t._w+i*t._x+n*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=s,this._x=i,this._y=n,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;return this._w=t*s+e*this._w,this._x=t*i+e*this._x,this._y=t*n+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,a),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=s*h+this._w*u,this._x=i*h+this._x*u,this._y=n*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,i){return this.copy(t).slerp(e,i)}random(){const t=Math.random(),e=Math.sqrt(1-t),i=Math.sqrt(t),n=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(e*Math.cos(n),i*Math.sin(r),i*Math.cos(r),e*Math.sin(n))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class re{constructor(t=0,e=0,i=0){re.prototype.isVector3=!0,this.x=t,this.y=e,this.z=i}set(t,e,i){return void 0===i&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(ae.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ae.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6]*n,this.y=r[1]*e+r[4]*i+r[7]*n,this.z=r[2]*e+r[5]*i+r[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,r=t.elements,s=1/(r[3]*e+r[7]*i+r[11]*n+r[15]);return this.x=(r[0]*e+r[4]*i+r[8]*n+r[12])*s,this.y=(r[1]*e+r[5]*i+r[9]*n+r[13])*s,this.z=(r[2]*e+r[6]*i+r[10]*n+r[14])*s,this}applyQuaternion(t){const e=this.x,i=this.y,n=this.z,r=t.x,s=t.y,a=t.z,o=t.w,l=o*e+s*n-a*i,c=o*i+a*e-r*n,h=o*n+r*i-s*e,u=-r*e-s*i-a*n;return this.x=l*o+u*-r+c*-a-h*-s,this.y=c*o+u*-s+h*-r-l*-a,this.z=h*o+u*-a+l*-s-c*-r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[4]*i+r[8]*n,this.y=r[1]*e+r[5]*i+r[9]*n,this.z=r[2]*e+r[6]*i+r[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,n=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=n*o-r*a,this.y=r*s-i*o,this.z=i*a-n*s,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return se.copy(this).projectOnVector(t),this.sub(se)}reflect(t){return this.sub(se.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(yt(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=2*(Math.random()-.5),e=Math.random()*Math.PI*2,i=Math.sqrt(1-t**2);return this.x=i*Math.cos(e),this.y=i*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const se=new re,ae=new ne;class oe{constructor(t=new re(1/0,1/0,1/0),e=new re(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,i=1/0,n=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.length;o<l;o+=3){const l=t[o],c=t[o+1],h=t[o+2];l<e&&(e=l),c<i&&(i=c),h<n&&(n=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,i,n),this.max.set(r,s,a),this}setFromBufferAttribute(t){let e=1/0,i=1/0,n=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o),c=t.getY(o),h=t.getZ(o);l<e&&(e=l),c<i&&(i=c),h<n&&(n=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,i,n),this.max.set(r,s,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=ce.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const i=t.geometry;if(void 0!==i)if(e&&null!=i.attributes&&void 0!==i.attributes.position){const e=i.attributes.position;for(let i=0,n=e.count;i<n;i++)ce.fromBufferAttribute(e,i).applyMatrix4(t.matrixWorld),this.expandByPoint(ce)}else null===i.boundingBox&&i.computeBoundingBox(),he.copy(i.boundingBox),he.applyMatrix4(t.matrixWorld),this.union(he);const n=t.children;for(let t=0,i=n.length;t<i;t++)this.expandByObject(n[t],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,ce),ce.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(ve),xe.subVectors(this.max,ve),ue.subVectors(t.a,ve),de.subVectors(t.b,ve),pe.subVectors(t.c,ve),me.subVectors(de,ue),fe.subVectors(pe,de),ge.subVectors(ue,pe);let e=[0,-me.z,me.y,0,-fe.z,fe.y,0,-ge.z,ge.y,me.z,0,-me.x,fe.z,0,-fe.x,ge.z,0,-ge.x,-me.y,me.x,0,-fe.y,fe.x,0,-ge.y,ge.x,0];return!!Me(e,ue,de,pe,xe)&&(e=[1,0,0,0,1,0,0,0,1],!!Me(e,ue,de,pe,xe)&&(_e.crossVectors(me,fe),e=[_e.x,_e.y,_e.z],Me(e,ue,de,pe,xe)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return ce.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(ce).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(le[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),le[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),le[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),le[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),le[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),le[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),le[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),le[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(le)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const le=[new re,new re,new re,new re,new re,new re,new re,new re],ce=new re,he=new oe,ue=new re,de=new re,pe=new re,me=new re,fe=new re,ge=new re,ve=new re,xe=new re,_e=new re,ye=new re;function Me(t,e,i,n,r){for(let s=0,a=t.length-3;s<=a;s+=3){ye.fromArray(t,s);const a=r.x*Math.abs(ye.x)+r.y*Math.abs(ye.y)+r.z*Math.abs(ye.z),o=e.dot(ye),l=i.dot(ye),c=n.dot(ye);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>a)return!1}return!0}const be=new oe,we=new re,Se=new re;class Te{constructor(t=new re,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;void 0!==e?i.copy(e):be.setFromPoints(t).getCenter(i);let n=0;for(let e=0,r=t.length;e<r;e++)n=Math.max(n,i.distanceToSquared(t[e]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;we.subVectors(t,this.center);const e=we.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),i=.5*(t-this.radius);this.center.addScaledVector(we,i/t),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(!0===this.center.equals(t.center)?this.radius=Math.max(this.radius,t.radius):(Se.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(we.copy(t.center).add(Se)),this.expandByPoint(we.copy(t.center).sub(Se))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Ae=new re,Ee=new re,Ce=new re,Le=new re,Re=new re,Pe=new re,Ie=new re;class De{constructor(t=new re,e=new re(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Ae)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Ae.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Ae.copy(this.direction).multiplyScalar(e).add(this.origin),Ae.distanceToSquared(t))}distanceSqToSegment(t,e,i,n){Ee.copy(t).add(e).multiplyScalar(.5),Ce.copy(e).sub(t).normalize(),Le.copy(this.origin).sub(Ee);const r=.5*t.distanceTo(e),s=-this.direction.dot(Ce),a=Le.dot(this.direction),o=-Le.dot(Ce),l=Le.lengthSq(),c=Math.abs(1-s*s);let h,u,d,p;if(c>0)if(h=s*o-a,u=s*a-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+s*u+2*a)+u*(s*h+u+2*o)+l}else u=r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-s*r+a)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(s*r+a)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=s>0?-r:r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;return i&&i.copy(this.direction).multiplyScalar(h).add(this.origin),n&&n.copy(Ce).multiplyScalar(u).add(Ee),d}intersectSphere(t,e){Ae.subVectors(t.center,this.origin);const i=Ae.dot(this.direction),n=Ae.dot(Ae)-i*i,r=t.radius*t.radius;if(n>r)return null;const s=Math.sqrt(r-n),a=i-s,o=i+s;return a<0&&o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return null===i?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return!0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,n,r,s,a,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(i=(t.min.x-u.x)*l,n=(t.max.x-u.x)*l):(i=(t.max.x-u.x)*l,n=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,s=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,s=(t.min.y-u.y)*c),i>s||r>n?null:((r>i||isNaN(i))&&(i=r),(s<n||isNaN(n))&&(n=s),h>=0?(a=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(a=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),i>o||a>n?null:((a>i||i!=i)&&(i=a),(o<n||n!=n)&&(n=o),n<0?null:this.at(i>=0?i:n,e)))}intersectsBox(t){return null!==this.intersectBox(t,Ae)}intersectTriangle(t,e,i,n,r){Re.subVectors(e,t),Pe.subVectors(i,t),Ie.crossVectors(Re,Pe);let s,a=this.direction.dot(Ie);if(a>0){if(n)return null;s=1}else{if(!(a<0))return null;s=-1,a=-a}Le.subVectors(this.origin,t);const o=s*this.direction.dot(Pe.crossVectors(Le,Pe));if(o<0)return null;const l=s*this.direction.dot(Re.cross(Le));if(l<0)return null;if(o+l>a)return null;const c=-s*Le.dot(Ie);return c<0?null:this.at(c/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Ne{constructor(){Ne.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(t,e,i,n,r,s,a,o,l,c,h,u,d,p,m,f){const g=this.elements;return g[0]=t,g[4]=e,g[8]=i,g[12]=n,g[1]=r,g[5]=s,g[9]=a,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=m,g[15]=f,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Ne).fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,n=1/Oe.setFromMatrixColumn(t,0).length(),r=1/Oe.setFromMatrixColumn(t,1).length(),s=1/Oe.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*r,e[5]=i[5]*r,e[6]=i[6]*r,e[7]=0,e[8]=i[8]*s,e[9]=i[9]*s,e[10]=i[10]*s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,i=t.x,n=t.y,r=t.z,s=Math.cos(i),a=Math.sin(i),o=Math.cos(n),l=Math.sin(n),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){const t=s*c,i=s*h,n=a*c,r=a*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=i+n*l,e[5]=t-r*l,e[9]=-a*o,e[2]=r-t*l,e[6]=n+i*l,e[10]=s*o}else if("YXZ"===t.order){const t=o*c,i=o*h,n=l*c,r=l*h;e[0]=t+r*a,e[4]=n*a-i,e[8]=s*l,e[1]=s*h,e[5]=s*c,e[9]=-a,e[2]=i*a-n,e[6]=r+t*a,e[10]=s*o}else if("ZXY"===t.order){const t=o*c,i=o*h,n=l*c,r=l*h;e[0]=t-r*a,e[4]=-s*h,e[8]=n+i*a,e[1]=i+n*a,e[5]=s*c,e[9]=r-t*a,e[2]=-s*l,e[6]=a,e[10]=s*o}else if("ZYX"===t.order){const t=s*c,i=s*h,n=a*c,r=a*h;e[0]=o*c,e[4]=n*l-i,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=i*l-n,e[2]=-l,e[6]=a*o,e[10]=s*o}else if("YZX"===t.order){const t=s*o,i=s*l,n=a*o,r=a*l;e[0]=o*c,e[4]=r-t*h,e[8]=n*h+i,e[1]=h,e[5]=s*c,e[9]=-a*c,e[2]=-l*c,e[6]=i*h+n,e[10]=t-r*h}else if("XZY"===t.order){const t=s*o,i=s*l,n=a*o,r=a*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=s*c,e[9]=i*h-n,e[2]=n*h-i,e[6]=a*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Ue,t,Be)}lookAt(t,e,i){const n=this.elements;return Ge.subVectors(t,e),0===Ge.lengthSq()&&(Ge.z=1),Ge.normalize(),Fe.crossVectors(i,Ge),0===Fe.lengthSq()&&(1===Math.abs(i.z)?Ge.x+=1e-4:Ge.z+=1e-4,Ge.normalize(),Fe.crossVectors(i,Ge)),Fe.normalize(),ke.crossVectors(Ge,Fe),n[0]=Fe.x,n[4]=ke.x,n[8]=Ge.x,n[1]=Fe.y,n[5]=ke.y,n[9]=Ge.y,n[2]=Fe.z,n[6]=ke.z,n[10]=Ge.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,r=this.elements,s=i[0],a=i[4],o=i[8],l=i[12],c=i[1],h=i[5],u=i[9],d=i[13],p=i[2],m=i[6],f=i[10],g=i[14],v=i[3],x=i[7],_=i[11],y=i[15],M=n[0],b=n[4],w=n[8],S=n[12],T=n[1],A=n[5],E=n[9],C=n[13],L=n[2],R=n[6],P=n[10],I=n[14],D=n[3],N=n[7],O=n[11],z=n[15];return r[0]=s*M+a*T+o*L+l*D,r[4]=s*b+a*A+o*R+l*N,r[8]=s*w+a*E+o*P+l*O,r[12]=s*S+a*C+o*I+l*z,r[1]=c*M+h*T+u*L+d*D,r[5]=c*b+h*A+u*R+d*N,r[9]=c*w+h*E+u*P+d*O,r[13]=c*S+h*C+u*I+d*z,r[2]=p*M+m*T+f*L+g*D,r[6]=p*b+m*A+f*R+g*N,r[10]=p*w+m*E+f*P+g*O,r[14]=p*S+m*C+f*I+g*z,r[3]=v*M+x*T+_*L+y*D,r[7]=v*b+x*A+_*R+y*N,r[11]=v*w+x*E+_*P+y*O,r[15]=v*S+x*C+_*I+y*z,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],n=t[8],r=t[12],s=t[1],a=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-n*l*h-r*a*u+i*l*u+n*a*d-i*o*d)+t[7]*(+e*o*d-e*l*u+r*s*u-n*s*d+n*l*c-r*o*c)+t[11]*(+e*l*h-e*a*d-r*s*h+i*s*d+r*a*c-i*l*c)+t[15]*(-n*a*c-e*o*h+e*a*u+n*s*h-i*s*u+i*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],m=t[13],f=t[14],g=t[15],v=h*f*l-m*u*l+m*o*d-a*f*d-h*o*g+a*u*g,x=p*u*l-c*f*l-p*o*d+s*f*d+c*o*g-s*u*g,_=c*m*l-p*h*l+p*a*d-s*m*d-c*a*g+s*h*g,y=p*h*o-c*m*o-p*a*u+s*m*u+c*a*f-s*h*f,M=e*v+i*x+n*_+r*y;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const b=1/M;return t[0]=v*b,t[1]=(m*u*r-h*f*r-m*n*d+i*f*d+h*n*g-i*u*g)*b,t[2]=(a*f*r-m*o*r+m*n*l-i*f*l-a*n*g+i*o*g)*b,t[3]=(h*o*r-a*u*r-h*n*l+i*u*l+a*n*d-i*o*d)*b,t[4]=x*b,t[5]=(c*f*r-p*u*r+p*n*d-e*f*d-c*n*g+e*u*g)*b,t[6]=(p*o*r-s*f*r-p*n*l+e*f*l+s*n*g-e*o*g)*b,t[7]=(s*u*r-c*o*r+c*n*l-e*u*l-s*n*d+e*o*d)*b,t[8]=_*b,t[9]=(p*h*r-c*m*r-p*i*d+e*m*d+c*i*g-e*h*g)*b,t[10]=(s*m*r-p*a*r+p*i*l-e*m*l-s*i*g+e*a*g)*b,t[11]=(c*a*r-s*h*r-c*i*l+e*h*l+s*i*d-e*a*d)*b,t[12]=y*b,t[13]=(c*m*n-p*h*n+p*i*u-e*m*u-c*i*f+e*h*f)*b,t[14]=(p*a*n-s*m*n-p*i*o+e*m*o+s*i*f-e*a*f)*b,t[15]=(s*h*n-c*a*n+c*i*o-e*h*o-s*i*u+e*a*u)*b,this}scale(t){const e=this.elements,i=t.x,n=t.y,r=t.z;return e[0]*=i,e[4]*=n,e[8]*=r,e[1]*=i,e[5]*=n,e[9]*=r,e[2]*=i,e[6]*=n,e[10]*=r,e[3]*=i,e[7]*=n,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))}makeTranslation(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),n=Math.sin(e),r=1-i,s=t.x,a=t.y,o=t.z,l=r*s,c=r*a;return this.set(l*s+i,l*a-n*o,l*o+n*a,0,l*a+n*o,c*a+i,c*o-n*s,0,l*o-n*a,c*o+n*s,r*o*o+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i,n,r,s){return this.set(1,i,r,0,t,1,s,0,e,n,1,0,0,0,0,1),this}compose(t,e,i){const n=this.elements,r=e._x,s=e._y,a=e._z,o=e._w,l=r+r,c=s+s,h=a+a,u=r*l,d=r*c,p=r*h,m=s*c,f=s*h,g=a*h,v=o*l,x=o*c,_=o*h,y=i.x,M=i.y,b=i.z;return n[0]=(1-(m+g))*y,n[1]=(d+_)*y,n[2]=(p-x)*y,n[3]=0,n[4]=(d-_)*M,n[5]=(1-(u+g))*M,n[6]=(f+v)*M,n[7]=0,n[8]=(p+x)*b,n[9]=(f-v)*b,n[10]=(1-(u+m))*b,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,i){const n=this.elements;let r=Oe.set(n[0],n[1],n[2]).length();const s=Oe.set(n[4],n[5],n[6]).length(),a=Oe.set(n[8],n[9],n[10]).length();this.determinant()<0&&(r=-r),t.x=n[12],t.y=n[13],t.z=n[14],ze.copy(this);const o=1/r,l=1/s,c=1/a;return ze.elements[0]*=o,ze.elements[1]*=o,ze.elements[2]*=o,ze.elements[4]*=l,ze.elements[5]*=l,ze.elements[6]*=l,ze.elements[8]*=c,ze.elements[9]*=c,ze.elements[10]*=c,e.setFromRotationMatrix(ze),i.x=r,i.y=s,i.z=a,this}makePerspective(t,e,i,n,r,s){const a=this.elements,o=2*r/(e-t),l=2*r/(i-n),c=(e+t)/(e-t),h=(i+n)/(i-n),u=-(s+r)/(s-r),d=-2*s*r/(s-r);return a[0]=o,a[4]=0,a[8]=c,a[12]=0,a[1]=0,a[5]=l,a[9]=h,a[13]=0,a[2]=0,a[6]=0,a[10]=u,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,i,n,r,s){const a=this.elements,o=1/(e-t),l=1/(i-n),c=1/(s-r),h=(e+t)*o,u=(i+n)*l,d=(s+r)*c;return a[0]=2*o,a[4]=0,a[8]=0,a[12]=-h,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-u,a[2]=0,a[6]=0,a[10]=-2*c,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let t=0;t<16;t++)if(e[t]!==i[t])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}const Oe=new re,ze=new Ne,Ue=new re(0,0,0),Be=new re(1,1,1),Fe=new re,ke=new re,Ge=new re,Ve=new Ne,He=new ne;class We{constructor(t=0,e=0,i=0,n=We.DefaultOrder){this.isEuler=!0,this._x=t,this._y=e,this._z=i,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,n=this._order){return this._x=t,this._y=e,this._z=i,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,i=!0){const n=t.elements,r=n[0],s=n[4],a=n[8],o=n[1],l=n[5],c=n[9],h=n[2],u=n[6],d=n[10];switch(e){case"XYZ":this._y=Math.asin(yt(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-yt(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(yt(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-yt(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(yt(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-yt(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===i&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return Ve.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Ve,e,i)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return He.setFromEuler(this),this.setFromQuaternion(He,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}We.DefaultOrder="XYZ",We.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class je{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}isEnabled(t){return 0!=(this.mask&(1<<t|0))}}let qe=0;const Xe=new re,Ye=new ne,Ze=new Ne,Je=new re,Ke=new re,$e=new re,Qe=new ne,ti=new re(1,0,0),ei=new re(0,1,0),ii=new re(0,0,1),ni={type:"added"},ri={type:"removed"};class si extends mt{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:qe++}),this.uuid=_t(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=si.DefaultUp.clone();const t=new re,e=new We,i=new ne,n=new re(1,1,1);e._onChange((function(){i.setFromEuler(e,!1)})),i._onChange((function(){e.setFromQuaternion(i,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new Ne},normalMatrix:{value:new Rt}}),this.matrix=new Ne,this.matrixWorld=new Ne,this.matrixAutoUpdate=si.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=si.DefaultMatrixWorldAutoUpdate,this.layers=new je,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Ye.setFromAxisAngle(t,e),this.quaternion.multiply(Ye),this}rotateOnWorldAxis(t,e){return Ye.setFromAxisAngle(t,e),this.quaternion.premultiply(Ye),this}rotateX(t){return this.rotateOnAxis(ti,t)}rotateY(t){return this.rotateOnAxis(ei,t)}rotateZ(t){return this.rotateOnAxis(ii,t)}translateOnAxis(t,e){return Xe.copy(t).applyQuaternion(this.quaternion),this.position.add(Xe.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(ti,t)}translateY(t){return this.translateOnAxis(ei,t)}translateZ(t){return this.translateOnAxis(ii,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(Ze.copy(this.matrixWorld).invert())}lookAt(t,e,i){t.isVector3?Je.copy(t):Je.set(t,e,i);const n=this.parent;this.updateWorldMatrix(!0,!1),Ke.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ze.lookAt(Ke,Je,this.up):Ze.lookAt(Je,Ke,this.up),this.quaternion.setFromRotationMatrix(Ze),n&&(Ze.extractRotation(n.matrixWorld),Ye.setFromRotationMatrix(Ze),this.quaternion.premultiply(Ye.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(ni)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(ri)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(ri)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Ze.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Ze.multiply(t.parent.matrixWorld)),t.applyMatrix4(Ze),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,n=this.children.length;i<n;i++){const n=this.children[i].getObjectByProperty(t,e);if(void 0!==n)return n}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ke,t,$e),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ke,Qe,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,n=e.length;i<n;i++){const n=e[i];!0!==n.matrixWorldAutoUpdate&&!0!==t||n.updateMatrixWorld(t)}}updateWorldMatrix(t,e){const i=this.parent;if(!0===t&&null!==i&&!0===i.matrixWorldAutoUpdate&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,i=t.length;e<i;e++){const i=t[e];!0===i.matrixWorldAutoUpdate&&i.updateWorldMatrix(!1,!0)}}}toJSON(t){const e=void 0===t||"string"==typeof t,i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const n={};function r(e,i){return void 0===e[i.uuid]&&(e[i.uuid]=i.toJSON(t)),i.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(n.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const i=e.shapes;if(Array.isArray(i))for(let e=0,n=i.length;e<n;e++){const n=i[e];r(t.shapes,n)}else r(t.shapes,i)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let i=0,n=this.material.length;i<n;i++)e.push(r(t.materials,this.material[i]));n.material=e}else n.material=r(t.materials,this.material);if(this.children.length>0){n.children=[];for(let e=0;e<this.children.length;e++)n.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let e=0;e<this.animations.length;e++){const i=this.animations[e];n.animations.push(r(t.animations,i))}}if(e){const e=s(t.geometries),n=s(t.materials),r=s(t.textures),a=s(t.images),o=s(t.shapes),l=s(t.skeletons),c=s(t.animations),h=s(t.nodes);e.length>0&&(i.geometries=e),n.length>0&&(i.materials=n),r.length>0&&(i.textures=r),a.length>0&&(i.images=a),o.length>0&&(i.shapes=o),l.length>0&&(i.skeletons=l),c.length>0&&(i.animations=c),h.length>0&&(i.nodes=h)}return i.object=n,i;function s(t){const e=[];for(const i in t){const n=t[i];delete n.metadata,e.push(n)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const i=t.children[e];this.add(i.clone())}return this}}si.DefaultUp=new re(0,1,0),si.DefaultMatrixAutoUpdate=!0,si.DefaultMatrixWorldAutoUpdate=!0;const ai=new re,oi=new re,li=new re,ci=new re,hi=new re,ui=new re,di=new re,pi=new re,mi=new re,fi=new re;class gi{constructor(t=new re,e=new re,i=new re){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,n){n.subVectors(i,e),ai.subVectors(t,e),n.cross(ai);const r=n.lengthSq();return r>0?n.multiplyScalar(1/Math.sqrt(r)):n.set(0,0,0)}static getBarycoord(t,e,i,n,r){ai.subVectors(n,e),oi.subVectors(i,e),li.subVectors(t,e);const s=ai.dot(ai),a=ai.dot(oi),o=ai.dot(li),l=oi.dot(oi),c=oi.dot(li),h=s*l-a*a;if(0===h)return r.set(-2,-1,-1);const u=1/h,d=(l*o-a*c)*u,p=(s*c-a*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,i,n){return this.getBarycoord(t,e,i,n,ci),ci.x>=0&&ci.y>=0&&ci.x+ci.y<=1}static getUV(t,e,i,n,r,s,a,o){return this.getBarycoord(t,e,i,n,ci),o.set(0,0),o.addScaledVector(r,ci.x),o.addScaledVector(s,ci.y),o.addScaledVector(a,ci.z),o}static isFrontFacing(t,e,i,n){return ai.subVectors(i,e),oi.subVectors(t,e),ai.cross(oi).dot(n)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this}setFromAttributeAndIndices(t,e,i,n){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,i),this.c.fromBufferAttribute(t,n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return ai.subVectors(this.c,this.b),oi.subVectors(this.a,this.b),.5*ai.cross(oi).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return gi.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return gi.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,i,n,r){return gi.getUV(t,this.a,this.b,this.c,e,i,n,r)}containsPoint(t){return gi.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return gi.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const i=this.a,n=this.b,r=this.c;let s,a;hi.subVectors(n,i),ui.subVectors(r,i),pi.subVectors(t,i);const o=hi.dot(pi),l=ui.dot(pi);if(o<=0&&l<=0)return e.copy(i);mi.subVectors(t,n);const c=hi.dot(mi),h=ui.dot(mi);if(c>=0&&h<=c)return e.copy(n);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return s=o/(o-c),e.copy(i).addScaledVector(hi,s);fi.subVectors(t,r);const d=hi.dot(fi),p=ui.dot(fi);if(p>=0&&d<=p)return e.copy(r);const m=d*l-o*p;if(m<=0&&l>=0&&p<=0)return a=l/(l-p),e.copy(i).addScaledVector(ui,a);const f=c*p-d*h;if(f<=0&&h-c>=0&&d-p>=0)return di.subVectors(r,n),a=(h-c)/(h-c+(d-p)),e.copy(n).addScaledVector(di,a);const g=1/(f+m+u);return s=m*g,a=u*g,e.copy(i).addScaledVector(hi,s).addScaledVector(ui,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let vi=0;class xi extends mt{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:vi++}),this.uuid=_t(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=i,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ht,this.stencilZFail=ht,this.stencilZPass=ht,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const i=t[e];if(void 0===i){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}const n=this[e];void 0!==n?n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const i={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(t){const e=[];for(const i in t){const n=t[i];delete n.metadata,e.push(n)}return e}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),void 0!==this.sheen&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearcoat&&(i.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(i.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(i.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(i.combine=this.combine)),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(i.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(i.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(i.size=this.size),null!==this.shadowSide&&(i.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(i.blending=this.blending),0!==this.side&&(i.side=this.side),this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,i.colorWrite=this.colorWrite,i.stencilWrite=this.stencilWrite,i.stencilWriteMask=this.stencilWriteMask,i.stencilFunc=this.stencilFunc,i.stencilRef=this.stencilRef,i.stencilFuncMask=this.stencilFuncMask,i.stencilFail=this.stencilFail,i.stencilZFail=this.stencilZFail,i.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(i.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(i.flatShading=this.flatShading),!1===this.visible&&(i.visible=!1),!1===this.toneMapped&&(i.toneMapped=!1),!1===this.fog&&(i.fog=!1),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),e){const e=n(t.textures),r=n(t.images);e.length>0&&(i.textures=e),r.length>0&&(i.images=r)}return i}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(null!==e){const t=e.length;i=new Array(t);for(let n=0;n!==t;++n)i[n]=e[n].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}class _i extends xi{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new qt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const yi=new re,Mi=new Lt;class bi{constructor(t,e,i){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===i,this.usage=ut,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let n=0,r=this.itemSize;n<r;n++)this.array[t+n]=e.array[i+n];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,i=this.count;e<i;e++)Mi.fromBufferAttribute(this,e),Mi.applyMatrix3(t),this.setXY(e,Mi.x,Mi.y);else if(3===this.itemSize)for(let e=0,i=this.count;e<i;e++)yi.fromBufferAttribute(this,e),yi.applyMatrix3(t),this.setXYZ(e,yi.x,yi.y,yi.z);return this}applyMatrix4(t){for(let e=0,i=this.count;e<i;e++)yi.fromBufferAttribute(this,e),yi.applyMatrix4(t),this.setXYZ(e,yi.x,yi.y,yi.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)yi.fromBufferAttribute(this,e),yi.applyNormalMatrix(t),this.setXYZ(e,yi.x,yi.y,yi.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)yi.fromBufferAttribute(this,e),yi.transformDirection(t),this.setXYZ(e,yi.x,yi.y,yi.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=At(e,this.array)),e}setX(t,e){return this.normalized&&(e=Et(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=At(e,this.array)),e}setY(t,e){return this.normalized&&(e=Et(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=At(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Et(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=At(e,this.array)),e}setW(t,e){return this.normalized&&(e=Et(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array)),this.array[t+0]=e,this.array[t+1]=i,this}setXYZ(t,e,i,n){return t*=this.itemSize,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array),n=Et(n,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this}setXYZW(t,e,i,n,r){return t*=this.itemSize,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array),n=Et(n,this.array),r=Et(r,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==ut&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class wi extends bi{constructor(t,e,i){super(new Uint16Array(t),e,i)}}class Si extends bi{constructor(t,e,i){super(new Uint32Array(t),e,i)}}class Ti extends bi{constructor(t,e,i){super(new Float32Array(t),e,i)}}let Ai=0;const Ei=new Ne,Ci=new si,Li=new re,Ri=new oe,Pi=new oe,Ii=new re;class Di extends mt{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Ai++}),this.uuid=_t(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(It(t)?Si:wi)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(void 0!==i){const e=(new Rt).getNormalMatrix(t);i.applyNormalMatrix(e),i.needsUpdate=!0}const n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(t),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ei.makeRotationFromQuaternion(t),this.applyMatrix4(Ei),this}rotateX(t){return Ei.makeRotationX(t),this.applyMatrix4(Ei),this}rotateY(t){return Ei.makeRotationY(t),this.applyMatrix4(Ei),this}rotateZ(t){return Ei.makeRotationZ(t),this.applyMatrix4(Ei),this}translate(t,e,i){return Ei.makeTranslation(t,e,i),this.applyMatrix4(Ei),this}scale(t,e,i){return Ei.makeScale(t,e,i),this.applyMatrix4(Ei),this}lookAt(t){return Ci.lookAt(t),Ci.updateMatrix(),this.applyMatrix4(Ci.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Li).negate(),this.translate(Li.x,Li.y,Li.z),this}setFromPoints(t){const e=[];for(let i=0,n=t.length;i<n;i++){const n=t[i];e.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new Ti(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new oe);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new re(-1/0,-1/0,-1/0),new re(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,i=e.length;t<i;t++){const i=e[t];Ri.setFromBufferAttribute(i),this.morphTargetsRelative?(Ii.addVectors(this.boundingBox.min,Ri.min),this.boundingBox.expandByPoint(Ii),Ii.addVectors(this.boundingBox.max,Ri.max),this.boundingBox.expandByPoint(Ii)):(this.boundingBox.expandByPoint(Ri.min),this.boundingBox.expandByPoint(Ri.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Te);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new re,1/0);if(t){const i=this.boundingSphere.center;if(Ri.setFromBufferAttribute(t),e)for(let t=0,i=e.length;t<i;t++){const i=e[t];Pi.setFromBufferAttribute(i),this.morphTargetsRelative?(Ii.addVectors(Ri.min,Pi.min),Ri.expandByPoint(Ii),Ii.addVectors(Ri.max,Pi.max),Ri.expandByPoint(Ii)):(Ri.expandByPoint(Pi.min),Ri.expandByPoint(Pi.max))}Ri.getCenter(i);let n=0;for(let e=0,r=t.count;e<r;e++)Ii.fromBufferAttribute(t,e),n=Math.max(n,i.distanceToSquared(Ii));if(e)for(let r=0,s=e.length;r<s;r++){const s=e[r],a=this.morphTargetsRelative;for(let e=0,r=s.count;e<r;e++)Ii.fromBufferAttribute(s,e),a&&(Li.fromBufferAttribute(t,e),Ii.add(Li)),n=Math.max(n,i.distanceToSquared(Ii))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const i=t.array,n=e.position.array,r=e.normal.array,s=e.uv.array,a=n.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new bi(new Float32Array(4*a),4));const o=this.getAttribute("tangent").array,l=[],c=[];for(let t=0;t<a;t++)l[t]=new re,c[t]=new re;const h=new re,u=new re,d=new re,p=new Lt,m=new Lt,f=new Lt,g=new re,v=new re;function x(t,e,i){h.fromArray(n,3*t),u.fromArray(n,3*e),d.fromArray(n,3*i),p.fromArray(s,2*t),m.fromArray(s,2*e),f.fromArray(s,2*i),u.sub(h),d.sub(h),m.sub(p),f.sub(p);const r=1/(m.x*f.y-f.x*m.y);isFinite(r)&&(g.copy(u).multiplyScalar(f.y).addScaledVector(d,-m.y).multiplyScalar(r),v.copy(d).multiplyScalar(m.x).addScaledVector(u,-f.x).multiplyScalar(r),l[t].add(g),l[e].add(g),l[i].add(g),c[t].add(v),c[e].add(v),c[i].add(v))}let _=this.groups;0===_.length&&(_=[{start:0,count:i.length}]);for(let t=0,e=_.length;t<e;++t){const e=_[t],n=e.start;for(let t=n,r=n+e.count;t<r;t+=3)x(i[t+0],i[t+1],i[t+2])}const y=new re,M=new re,b=new re,w=new re;function S(t){b.fromArray(r,3*t),w.copy(b);const e=l[t];y.copy(e),y.sub(b.multiplyScalar(b.dot(e))).normalize(),M.crossVectors(w,e);const i=M.dot(c[t])<0?-1:1;o[4*t]=y.x,o[4*t+1]=y.y,o[4*t+2]=y.z,o[4*t+3]=i}for(let t=0,e=_.length;t<e;++t){const e=_[t],n=e.start;for(let t=n,r=n+e.count;t<r;t+=3)S(i[t+0]),S(i[t+1]),S(i[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let i=this.getAttribute("normal");if(void 0===i)i=new bi(new Float32Array(3*e.count),3),this.setAttribute("normal",i);else for(let t=0,e=i.count;t<e;t++)i.setXYZ(t,0,0,0);const n=new re,r=new re,s=new re,a=new re,o=new re,l=new re,c=new re,h=new re;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),m=t.getX(u+2);n.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),s.fromBufferAttribute(e,m),c.subVectors(s,r),h.subVectors(n,r),c.cross(h),a.fromBufferAttribute(i,d),o.fromBufferAttribute(i,p),l.fromBufferAttribute(i,m),a.add(c),o.add(c),l.add(c),i.setXYZ(d,a.x,a.y,a.z),i.setXYZ(p,o.x,o.y,o.z),i.setXYZ(m,l.x,l.y,l.z)}else for(let t=0,a=e.count;t<a;t+=3)n.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),s.fromBufferAttribute(e,t+2),c.subVectors(s,r),h.subVectors(n,r),c.cross(h),i.setXYZ(t+0,c.x,c.y,c.z),i.setXYZ(t+1,c.x,c.y,c.z),i.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),i.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."),this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)Ii.fromBufferAttribute(t,e),Ii.normalize(),t.setXYZ(e,Ii.x,Ii.y,Ii.z)}toNonIndexed(){function t(t,e){const i=t.array,n=t.itemSize,r=t.normalized,s=new i.constructor(e.length*n);let a=0,o=0;for(let r=0,l=e.length;r<l;r++){a=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*n;for(let t=0;t<n;t++)s[o++]=i[a++]}return new bi(s,n,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Di,i=this.index.array,n=this.attributes;for(const r in n){const s=t(n[r],i);e.setAttribute(r,s)}const r=this.morphAttributes;for(const n in r){const s=[],a=r[n];for(let e=0,n=a.length;e<n;e++){const n=t(a[e],i);s.push(n)}e.morphAttributes[n]=s}e.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let t=0,i=s.length;t<i;t++){const i=s[t];e.addGroup(i.start,i.count,i.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const i in e)void 0!==e[i]&&(t[i]=e[i]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const e in i){const n=i[e];t.data.attributes[e]=n.toJSON(t.data)}const n={};let r=!1;for(const e in this.morphAttributes){const i=this.morphAttributes[e],s=[];for(let e=0,n=i.length;e<n;e++){const n=i[e];s.push(n.toJSON(t.data))}s.length>0&&(n[e]=s,r=!0)}r&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return null!==a&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;null!==i&&this.setIndex(i.clone(e));const n=t.attributes;for(const t in n){const i=n[t];this.setAttribute(t,i.clone(e))}const r=t.morphAttributes;for(const t in r){const i=[],n=r[t];for(let t=0,r=n.length;t<r;t++)i.push(n[t].clone(e));this.morphAttributes[t]=i}this.morphTargetsRelative=t.morphTargetsRelative;const s=t.groups;for(let t=0,e=s.length;t<e;t++){const e=s[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,void 0!==t.parameters&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}const Ni=new Ne,Oi=new De,zi=new Te,Ui=new re,Bi=new re,Fi=new re,ki=new re,Gi=new re,Vi=new re,Hi=new re,Wi=new re,ji=new re,qi=new Lt,Xi=new Lt,Yi=new Lt,Zi=new re,Ji=new re;class Ki extends si{constructor(t=new Di,e=new _i){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}raycast(t,e){const i=this.geometry,n=this.material,r=this.matrixWorld;if(void 0===n)return;if(null===i.boundingSphere&&i.computeBoundingSphere(),zi.copy(i.boundingSphere),zi.applyMatrix4(r),!1===t.ray.intersectsSphere(zi))return;if(Ni.copy(r).invert(),Oi.copy(t.ray).applyMatrix4(Ni),null!==i.boundingBox&&!1===Oi.intersectsBox(i.boundingBox))return;let s;const a=i.index,o=i.attributes.position,l=i.morphAttributes.position,c=i.morphTargetsRelative,h=i.attributes.uv,u=i.attributes.uv2,d=i.groups,p=i.drawRange;if(null!==a)if(Array.isArray(n))for(let i=0,r=d.length;i<r;i++){const r=d[i],m=n[r.materialIndex];for(let i=Math.max(r.start,p.start),n=Math.min(a.count,Math.min(r.start+r.count,p.start+p.count));i<n;i+=3){const n=a.getX(i),d=a.getX(i+1),p=a.getX(i+2);s=$i(this,m,t,Oi,o,l,c,h,u,n,d,p),s&&(s.faceIndex=Math.floor(i/3),s.face.materialIndex=r.materialIndex,e.push(s))}}else{for(let i=Math.max(0,p.start),r=Math.min(a.count,p.start+p.count);i<r;i+=3){const r=a.getX(i),d=a.getX(i+1),p=a.getX(i+2);s=$i(this,n,t,Oi,o,l,c,h,u,r,d,p),s&&(s.faceIndex=Math.floor(i/3),e.push(s))}}else if(void 0!==o)if(Array.isArray(n))for(let i=0,r=d.length;i<r;i++){const r=d[i],a=n[r.materialIndex];for(let i=Math.max(r.start,p.start),n=Math.min(o.count,Math.min(r.start+r.count,p.start+p.count));i<n;i+=3){s=$i(this,a,t,Oi,o,l,c,h,u,i,i+1,i+2),s&&(s.faceIndex=Math.floor(i/3),s.face.materialIndex=r.materialIndex,e.push(s))}}else{for(let i=Math.max(0,p.start),r=Math.min(o.count,p.start+p.count);i<r;i+=3){s=$i(this,n,t,Oi,o,l,c,h,u,i,i+1,i+2),s&&(s.faceIndex=Math.floor(i/3),e.push(s))}}}}function $i(t,e,i,n,r,s,a,o,l,c,h,u){Ui.fromBufferAttribute(r,c),Bi.fromBufferAttribute(r,h),Fi.fromBufferAttribute(r,u);const d=t.morphTargetInfluences;if(s&&d){Hi.set(0,0,0),Wi.set(0,0,0),ji.set(0,0,0);for(let t=0,e=s.length;t<e;t++){const e=d[t],i=s[t];0!==e&&(ki.fromBufferAttribute(i,c),Gi.fromBufferAttribute(i,h),Vi.fromBufferAttribute(i,u),a?(Hi.addScaledVector(ki,e),Wi.addScaledVector(Gi,e),ji.addScaledVector(Vi,e)):(Hi.addScaledVector(ki.sub(Ui),e),Wi.addScaledVector(Gi.sub(Bi),e),ji.addScaledVector(Vi.sub(Fi),e)))}Ui.add(Hi),Bi.add(Wi),Fi.add(ji)}t.isSkinnedMesh&&(t.boneTransform(c,Ui),t.boneTransform(h,Bi),t.boneTransform(u,Fi));const p=function(t,e,i,n,r,s,a,o){let l;if(l=1===e.side?n.intersectTriangle(a,s,r,!0,o):n.intersectTriangle(r,s,a,2!==e.side,o),null===l)return null;Ji.copy(o),Ji.applyMatrix4(t.matrixWorld);const c=i.ray.origin.distanceTo(Ji);return c<i.near||c>i.far?null:{distance:c,point:Ji.clone(),object:t}}(t,e,i,n,Ui,Bi,Fi,Zi);if(p){o&&(qi.fromBufferAttribute(o,c),Xi.fromBufferAttribute(o,h),Yi.fromBufferAttribute(o,u),p.uv=gi.getUV(Zi,Ui,Bi,Fi,qi,Xi,Yi,new Lt)),l&&(qi.fromBufferAttribute(l,c),Xi.fromBufferAttribute(l,h),Yi.fromBufferAttribute(l,u),p.uv2=gi.getUV(Zi,Ui,Bi,Fi,qi,Xi,Yi,new Lt));const t={a:c,b:h,c:u,normal:new re,materialIndex:0};gi.getNormal(Ui,Bi,Fi,t.normal),p.face=t}return p}class Qi extends Di{constructor(t=1,e=1,i=1,n=1,r=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:r,depthSegments:s};const a=this;n=Math.floor(n),r=Math.floor(r),s=Math.floor(s);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,i,n,r,s,p,m,f,g,v){const x=s/f,_=p/g,y=s/2,M=p/2,b=m/2,w=f+1,S=g+1;let T=0,A=0;const E=new re;for(let s=0;s<S;s++){const a=s*_-M;for(let o=0;o<w;o++){const u=o*x-y;E[t]=u*n,E[e]=a*r,E[i]=b,l.push(E.x,E.y,E.z),E[t]=0,E[e]=0,E[i]=m>0?1:-1,c.push(E.x,E.y,E.z),h.push(o/f),h.push(1-s/g),T+=1}}for(let t=0;t<g;t++)for(let e=0;e<f;e++){const i=u+e+w*t,n=u+e+w*(t+1),r=u+(e+1)+w*(t+1),s=u+(e+1)+w*t;o.push(i,n,s),o.push(n,r,s),A+=6}a.addGroup(d,A,v),d+=A,u+=T}p("z","y","x",-1,-1,i,e,t,s,r,0),p("z","y","x",1,-1,i,e,-t,s,r,1),p("x","z","y",1,1,t,i,e,n,s,2),p("x","z","y",1,-1,t,i,-e,n,s,3),p("x","y","z",1,-1,t,e,i,n,r,4),p("x","y","z",-1,-1,t,e,-i,n,r,5),this.setIndex(o),this.setAttribute("position",new Ti(l,3)),this.setAttribute("normal",new Ti(c,3)),this.setAttribute("uv",new Ti(h,2))}static fromJSON(t){return new Qi(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function tn(t){const e={};for(const i in t){e[i]={};for(const n in t[i]){const r=t[i][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?e[i][n]=r.clone():Array.isArray(r)?e[i][n]=r.slice():e[i][n]=r}}return e}function en(t){const e={};for(let i=0;i<t.length;i++){const n=tn(t[i]);for(const t in n)e[t]=n[t]}return e}function nn(t){return null===t.getRenderTarget()&&t.outputEncoding===ot?lt:ct}const rn={clone:tn,merge:en};class sn extends xi{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=tn(t.uniforms),this.uniformsGroups=function(t){const e=[];for(let i=0;i<t.length;i++)e.push(t[i].clone());return e}(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const n=this.uniforms[i].value;n&&n.isTexture?e.uniforms[i]={type:"t",value:n.toJSON(t).uuid}:n&&n.isColor?e.uniforms[i]={type:"c",value:n.getHex()}:n&&n.isVector2?e.uniforms[i]={type:"v2",value:n.toArray()}:n&&n.isVector3?e.uniforms[i]={type:"v3",value:n.toArray()}:n&&n.isVector4?e.uniforms[i]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[i]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[i]={type:"m4",value:n.toArray()}:e.uniforms[i]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const i={};for(const t in this.extensions)!0===this.extensions[t]&&(i[t]=!0);return Object.keys(i).length>0&&(e.extensions=i),e}}class an extends si{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Ne,this.projectionMatrix=new Ne,this.projectionMatrixInverse=new Ne}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}class on extends an{constructor(t=50,e=1,i=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*xt*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*vt*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*xt*Math.atan(Math.tan(.5*vt*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,i,n,r,s){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*vt*this.fov)/this.zoom,i=2*e,n=this.aspect*i,r=-.5*n;const s=this.view;if(null!==this.view&&this.view.enabled){const t=s.fullWidth,a=s.fullHeight;r+=s.offsetX*n/t,e-=s.offsetY*i/a,n*=s.width/t,i*=s.height/a}const a=this.filmOffset;0!==a&&(r+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+n,e,e-i,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const ln=-90;class cn extends si{constructor(t,e,i){super(),this.type="CubeCamera",this.renderTarget=i;const n=new on(ln,1,t,e);n.layers=this.layers,n.up.set(0,1,0),n.lookAt(1,0,0),this.add(n);const r=new on(ln,1,t,e);r.layers=this.layers,r.up.set(0,1,0),r.lookAt(-1,0,0),this.add(r);const s=new on(ln,1,t,e);s.layers=this.layers,s.up.set(0,0,-1),s.lookAt(0,1,0),this.add(s);const a=new on(ln,1,t,e);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(0,-1,0),this.add(a);const o=new on(ln,1,t,e);o.layers=this.layers,o.up.set(0,1,0),o.lookAt(0,0,1),this.add(o);const l=new on(ln,1,t,e);l.layers=this.layers,l.up.set(0,1,0),l.lookAt(0,0,-1),this.add(l)}update(t,e){null===this.parent&&this.updateMatrixWorld();const i=this.renderTarget,[n,r,s,a,o,l]=this.children,c=t.getRenderTarget(),h=t.toneMapping,u=t.xr.enabled;t.toneMapping=0,t.xr.enabled=!1;const d=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0),t.render(e,n),t.setRenderTarget(i,1),t.render(e,r),t.setRenderTarget(i,2),t.render(e,s),t.setRenderTarget(i,3),t.render(e,a),t.setRenderTarget(i,4),t.render(e,o),i.texture.generateMipmaps=d,t.setRenderTarget(i,5),t.render(e,l),t.setRenderTarget(c),t.toneMapping=h,t.xr.enabled=u,i.texture.needsPMREMUpdate=!0}}class hn extends $t{constructor(t,e,i,n,s,a,o,l,c,h){super(t=void 0!==t?t:[],e=void 0!==e?e:r,i,n,s,a,o,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class un extends te{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const i={width:t,height:t,depth:1},n=[i,i,i,i,i,i];this.texture=new hn(n,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:f}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},n=new Qi(5,5,5),r=new sn({name:"CubemapFromEquirect",uniforms:tn(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=e;const s=new Ki(n,r),a=e.minFilter;e.minFilter===v&&(e.minFilter=f);return new cn(1,10,this).update(t,s),e.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(t,e,i,n){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,i,n);t.setRenderTarget(r)}}const dn=new re,pn=new re,mn=new Rt;class fn{constructor(t=new re(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const n=dn.subVectors(i,e).cross(pn.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const i=t.delta(dn),n=this.normal.dot(i);if(0===n)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/n;return r<0||r>1?null:e.copy(i).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||mn.getNormalMatrix(t),n=this.coplanarPoint(dn).applyMatrix4(t),r=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const gn=new Te,vn=new re;class xn{constructor(t=new fn,e=new fn,i=new fn,n=new fn,r=new fn,s=new fn){this.planes=[t,e,i,n,r,s]}set(t,e,i,n,r,s){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(n),a[4].copy(r),a[5].copy(s),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t){const e=this.planes,i=t.elements,n=i[0],r=i[1],s=i[2],a=i[3],o=i[4],l=i[5],c=i[6],h=i[7],u=i[8],d=i[9],p=i[10],m=i[11],f=i[12],g=i[13],v=i[14],x=i[15];return e[0].setComponents(a-n,h-o,m-u,x-f).normalize(),e[1].setComponents(a+n,h+o,m+u,x+f).normalize(),e[2].setComponents(a+r,h+l,m+d,x+g).normalize(),e[3].setComponents(a-r,h-l,m-d,x-g).normalize(),e[4].setComponents(a-s,h-c,m-p,x-v).normalize(),e[5].setComponents(a+s,h+c,m+p,x+v).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),gn.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(gn)}intersectsSprite(t){return gn.center.set(0,0,0),gn.radius=.7071067811865476,gn.applyMatrix4(t.matrixWorld),this.intersectsSphere(gn)}intersectsSphere(t){const e=this.planes,i=t.center,n=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(i)<n)return!1}return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const n=e[i];if(vn.x=n.normal.x>0?t.max.x:t.min.x,vn.y=n.normal.y>0?t.max.y:t.min.y,vn.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(vn)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function _n(){let t=null,e=!1,i=null,n=null;function r(e,s){i(e,s),n=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==i&&(n=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(t){i=t},setContext:function(e){t=e}}}function yn(t,e){const i=e.isWebGL2,n=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),n.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const i=n.get(e);i&&(t.deleteBuffer(i.buffer),n.delete(e))},update:function(e,r){if(e.isGLBufferAttribute){const t=n.get(e);return void((!t||t.version<e.version)&&n.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const s=n.get(e);void 0===s?n.set(e,function(e,n){const r=e.array,s=e.usage,a=t.createBuffer();let o;if(t.bindBuffer(n,a),t.bufferData(n,r,s),e.onUploadCallback(),r instanceof Float32Array)o=5126;else if(r instanceof Uint16Array)if(e.isFloat16BufferAttribute){if(!i)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");o=5131}else o=5123;else if(r instanceof Int16Array)o=5122;else if(r instanceof Uint32Array)o=5125;else if(r instanceof Int32Array)o=5124;else if(r instanceof Int8Array)o=5120;else if(r instanceof Uint8Array)o=5121;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);o=5121}return{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(e,r)):s.version<e.version&&(!function(e,n,r){const s=n.array,a=n.updateRange;t.bindBuffer(r,e),-1===a.count?t.bufferSubData(r,0,s):(i?t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s,a.offset,a.count):t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s.subarray(a.offset,a.offset+a.count)),a.count=-1),n.onUploadCallback()}(s.buffer,e,r),s.version=e.version)}}}class Mn extends Di{constructor(t=1,e=1,i=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n};const r=t/2,s=e/2,a=Math.floor(i),o=Math.floor(n),l=a+1,c=o+1,h=t/a,u=e/o,d=[],p=[],m=[],f=[];for(let t=0;t<c;t++){const e=t*u-s;for(let i=0;i<l;i++){const n=i*h-r;p.push(n,-e,0),m.push(0,0,1),f.push(i/a),f.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<a;e++){const i=e+l*t,n=e+l*(t+1),r=e+1+l*(t+1),s=e+1+l*t;d.push(i,n,s),d.push(n,r,s)}this.setIndex(d),this.setAttribute("position",new Ti(p,3)),this.setAttribute("normal",new Ti(m,3)),this.setAttribute("uv",new Ti(f,2))}static fromJSON(t){return new Mn(t.width,t.height,t.widthSegments,t.heightSegments)}}const bn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n\t\tfloat x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n\t\tfloat x2 = x * x;\n\t\tfloat x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n\t\treturn ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\n\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,\t0.0556434,\n\t\t-1.5371385,\t1.8760108, -0.2040259,\n\t\t-0.4985314,\t0.0415560,\t1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\t return vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(\t\t0, 1,\t\t0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t\tf.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t\tf.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(\t1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,\t1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,\t1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},wn={common:{diffuse:{value:new qt(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Rt},uv2Transform:{value:new Rt},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Lt(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new qt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new qt(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Rt}},sprite:{diffuse:{value:new qt(16777215)},opacity:{value:1},center:{value:new Lt(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Rt}}},Sn={basic:{uniforms:en([wn.common,wn.specularmap,wn.envmap,wn.aomap,wn.lightmap,wn.fog]),vertexShader:bn.meshbasic_vert,fragmentShader:bn.meshbasic_frag},lambert:{uniforms:en([wn.common,wn.specularmap,wn.envmap,wn.aomap,wn.lightmap,wn.emissivemap,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.fog,wn.lights,{emissive:{value:new qt(0)}}]),vertexShader:bn.meshlambert_vert,fragmentShader:bn.meshlambert_frag},phong:{uniforms:en([wn.common,wn.specularmap,wn.envmap,wn.aomap,wn.lightmap,wn.emissivemap,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.fog,wn.lights,{emissive:{value:new qt(0)},specular:{value:new qt(1118481)},shininess:{value:30}}]),vertexShader:bn.meshphong_vert,fragmentShader:bn.meshphong_frag},standard:{uniforms:en([wn.common,wn.envmap,wn.aomap,wn.lightmap,wn.emissivemap,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.roughnessmap,wn.metalnessmap,wn.fog,wn.lights,{emissive:{value:new qt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:bn.meshphysical_vert,fragmentShader:bn.meshphysical_frag},toon:{uniforms:en([wn.common,wn.aomap,wn.lightmap,wn.emissivemap,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.gradientmap,wn.fog,wn.lights,{emissive:{value:new qt(0)}}]),vertexShader:bn.meshtoon_vert,fragmentShader:bn.meshtoon_frag},matcap:{uniforms:en([wn.common,wn.bumpmap,wn.normalmap,wn.displacementmap,wn.fog,{matcap:{value:null}}]),vertexShader:bn.meshmatcap_vert,fragmentShader:bn.meshmatcap_frag},points:{uniforms:en([wn.points,wn.fog]),vertexShader:bn.points_vert,fragmentShader:bn.points_frag},dashed:{uniforms:en([wn.common,wn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:bn.linedashed_vert,fragmentShader:bn.linedashed_frag},depth:{uniforms:en([wn.common,wn.displacementmap]),vertexShader:bn.depth_vert,fragmentShader:bn.depth_frag},normal:{uniforms:en([wn.common,wn.bumpmap,wn.normalmap,wn.displacementmap,{opacity:{value:1}}]),vertexShader:bn.meshnormal_vert,fragmentShader:bn.meshnormal_frag},sprite:{uniforms:en([wn.sprite,wn.fog]),vertexShader:bn.sprite_vert,fragmentShader:bn.sprite_frag},background:{uniforms:{uvTransform:{value:new Rt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:bn.background_vert,fragmentShader:bn.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:bn.backgroundCube_vert,fragmentShader:bn.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:bn.cube_vert,fragmentShader:bn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:bn.equirect_vert,fragmentShader:bn.equirect_frag},distanceRGBA:{uniforms:en([wn.common,wn.displacementmap,{referencePosition:{value:new re},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:bn.distanceRGBA_vert,fragmentShader:bn.distanceRGBA_frag},shadow:{uniforms:en([wn.lights,wn.fog,{color:{value:new qt(0)},opacity:{value:1}}]),vertexShader:bn.shadow_vert,fragmentShader:bn.shadow_frag}};Sn.physical={uniforms:en([Sn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Lt(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new qt(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Lt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new qt(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new qt(1,1,1)},specularColorMap:{value:null}}]),vertexShader:bn.meshphysical_vert,fragmentShader:bn.meshphysical_frag};const Tn={r:0,b:0,g:0};function An(t,e,i,n,r,s,a){const o=new qt(0);let c,h,u=!0===s?0:1,d=null,p=0,m=null;function f(e,i){e.getRGB(Tn,nn(t)),n.buffers.color.setClear(Tn.r,Tn.g,Tn.b,i,a)}return{getClearColor:function(){return o},setClearColor:function(t,e=1){o.set(t),u=e,f(o,u)},getClearAlpha:function(){return u},setClearAlpha:function(t){u=t,f(o,u)},render:function(n,s){let a=!1,g=!0===s.isScene?s.background:null;if(g&&g.isTexture){g=(s.backgroundBlurriness>0?i:e).get(g)}const v=t.xr,x=v.getSession&&v.getSession();x&&"additive"===x.environmentBlendMode&&(g=null),null===g?f(o,u):g&&g.isColor&&(f(g,1),a=!0),(t.autoClear||a)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),g&&(g.isCubeTexture||g.mapping===l)?(void 0===h&&(h=new Ki(new Qi(1,1,1),new sn({name:"BackgroundCubeMaterial",uniforms:tn(Sn.backgroundCube.uniforms),vertexShader:Sn.backgroundCube.vertexShader,fragmentShader:Sn.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(t,e,i){this.matrixWorld.copyPosition(i.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(h)),h.material.uniforms.envMap.value=g,h.material.uniforms.flipEnvMap.value=g.isCubeTexture&&!1===g.isRenderTargetTexture?-1:1,h.material.uniforms.backgroundBlurriness.value=s.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=s.backgroundIntensity,d===g&&p===g.version&&m===t.toneMapping||(h.material.needsUpdate=!0,d=g,p=g.version,m=t.toneMapping),h.layers.enableAll(),n.unshift(h,h.geometry,h.material,0,0,null)):g&&g.isTexture&&(void 0===c&&(c=new Ki(new Mn(2,2),new sn({name:"BackgroundMaterial",uniforms:tn(Sn.background.uniforms),vertexShader:Sn.background.vertexShader,fragmentShader:Sn.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(c)),c.material.uniforms.t2D.value=g,c.material.uniforms.backgroundIntensity.value=s.backgroundIntensity,!0===g.matrixAutoUpdate&&g.updateMatrix(),c.material.uniforms.uvTransform.value.copy(g.matrix),d===g&&p===g.version&&m===t.toneMapping||(c.material.needsUpdate=!0,d=g,p=g.version,m=t.toneMapping),c.layers.enableAll(),n.unshift(c,c.geometry,c.material,0,0,null))}}}function En(t,e,i,n){const r=t.getParameter(34921),s=n.isWebGL2?null:e.get("OES_vertex_array_object"),a=n.isWebGL2||null!==s,o={},l=p(null);let c=l,h=!1;function u(e){return n.isWebGL2?t.bindVertexArray(e):s.bindVertexArrayOES(e)}function d(e){return n.isWebGL2?t.deleteVertexArray(e):s.deleteVertexArrayOES(e)}function p(t){const e=[],i=[],n=[];for(let t=0;t<r;t++)e[t]=0,i[t]=0,n[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:i,attributeDivisors:n,object:t,attributes:{},index:null}}function m(){const t=c.newAttributes;for(let e=0,i=t.length;e<i;e++)t[e]=0}function f(t){g(t,0)}function g(i,r){const s=c.newAttributes,a=c.enabledAttributes,o=c.attributeDivisors;if(s[i]=1,0===a[i]&&(t.enableVertexAttribArray(i),a[i]=1),o[i]!==r){(n.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](i,r),o[i]=r}}function v(){const e=c.newAttributes,i=c.enabledAttributes;for(let n=0,r=i.length;n<r;n++)i[n]!==e[n]&&(t.disableVertexAttribArray(n),i[n]=0)}function x(e,i,r,s,a,o){!0!==n.isWebGL2||5124!==r&&5125!==r?t.vertexAttribPointer(e,i,r,s,a,o):t.vertexAttribIPointer(e,i,r,a,o)}function _(){y(),h=!0,c!==l&&(c=l,u(c.object))}function y(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,d,_,y){let M=!1;if(a){const e=function(e,i,r){const a=!0===r.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let c=l[i.id];void 0===c&&(c={},l[i.id]=c);let h=c[a];void 0===h&&(h=p(n.isWebGL2?t.createVertexArray():s.createVertexArrayOES()),c[a]=h);return h}(_,d,l);c!==e&&(c=e,u(c.object)),M=function(t,e,i,n){const r=c.attributes,s=e.attributes;let a=0;const o=i.getAttributes();for(const e in o){if(o[e].location>=0){const i=r[e];let n=s[e];if(void 0===n&&("instanceMatrix"===e&&t.instanceMatrix&&(n=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(n=t.instanceColor)),void 0===i)return!0;if(i.attribute!==n)return!0;if(n&&i.data!==n.data)return!0;a++}}return c.attributesNum!==a||c.index!==n}(r,_,d,y),M&&function(t,e,i,n){const r={},s=e.attributes;let a=0;const o=i.getAttributes();for(const e in o){if(o[e].location>=0){let i=s[e];void 0===i&&("instanceMatrix"===e&&t.instanceMatrix&&(i=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(i=t.instanceColor));const n={};n.attribute=i,i&&i.data&&(n.data=i.data),r[e]=n,a++}}c.attributes=r,c.attributesNum=a,c.index=n}(r,_,d,y)}else{const t=!0===l.wireframe;c.geometry===_.id&&c.program===d.id&&c.wireframe===t||(c.geometry=_.id,c.program=d.id,c.wireframe=t,M=!0)}null!==y&&i.update(y,34963),(M||h)&&(h=!1,function(r,s,a,o){if(!1===n.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;m();const l=o.attributes,c=a.getAttributes(),h=s.defaultAttributeValues;for(const e in c){const n=c[e];if(n.location>=0){let s=l[e];if(void 0===s&&("instanceMatrix"===e&&r.instanceMatrix&&(s=r.instanceMatrix),"instanceColor"===e&&r.instanceColor&&(s=r.instanceColor)),void 0!==s){const e=s.normalized,a=s.itemSize,l=i.get(s);if(void 0===l)continue;const c=l.buffer,h=l.type,u=l.bytesPerElement;if(s.isInterleavedBufferAttribute){const i=s.data,l=i.stride,d=s.offset;if(i.isInstancedInterleavedBuffer){for(let t=0;t<n.locationSize;t++)g(n.location+t,i.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=i.meshPerAttribute*i.count)}else for(let t=0;t<n.locationSize;t++)f(n.location+t);t.bindBuffer(34962,c);for(let t=0;t<n.locationSize;t++)x(n.location+t,a/n.locationSize,h,e,l*u,(d+a/n.locationSize*t)*u)}else{if(s.isInstancedBufferAttribute){for(let t=0;t<n.locationSize;t++)g(n.location+t,s.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let t=0;t<n.locationSize;t++)f(n.location+t);t.bindBuffer(34962,c);for(let t=0;t<n.locationSize;t++)x(n.location+t,a/n.locationSize,h,e,a*u,a/n.locationSize*t*u)}}else if(void 0!==h){const i=h[e];if(void 0!==i)switch(i.length){case 2:t.vertexAttrib2fv(n.location,i);break;case 3:t.vertexAttrib3fv(n.location,i);break;case 4:t.vertexAttrib4fv(n.location,i);break;default:t.vertexAttrib1fv(n.location,i)}}}}v()}(r,l,d,_),null!==y&&t.bindBuffer(34963,i.get(y).buffer))},reset:_,resetDefaultState:y,dispose:function(){_();for(const t in o){const e=o[t];for(const t in e){const i=e[t];for(const t in i)d(i[t].object),delete i[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const i=e[t];for(const t in i)d(i[t].object),delete i[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function(t){for(const e in o){const i=o[e];if(void 0===i[t.id])continue;const n=i[t.id];for(const t in n)d(n[t].object),delete n[t];delete i[t.id]}},initAttributes:m,enableAttribute:f,disableUnusedAttributes:v}}function Cn(t,e,i,n){const r=n.isWebGL2;let s;this.setMode=function(t){s=t},this.render=function(e,n){t.drawArrays(s,e,n),i.update(n,s,1)},this.renderInstances=function(n,a,o){if(0===o)return;let l,c;if(r)l=t,c="drawArraysInstanced";else if(l=e.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](s,n,a,o),i.update(a,s,o)}}function Ln(t,e,i){let n;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const s="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let a=void 0!==i.precision?i.precision:"highp";const o=r(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);const l=s||e.has("WEBGL_draw_buffers"),c=!0===i.logarithmicDepthBuffer,h=t.getParameter(34930),u=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),m=t.getParameter(34921),f=t.getParameter(36347),g=t.getParameter(36348),v=t.getParameter(36349),x=u>0,_=s||e.has("OES_texture_float");return{isWebGL2:s,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===e.has("EXT_texture_filter_anisotropic")){const i=e.get("EXT_texture_filter_anisotropic");n=t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:r,precision:a,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:x,floatFragmentTextures:_,floatVertexTextures:x&&_,maxSamples:s?t.getParameter(36183):0}}function Rn(t){const e=this;let i=null,n=0,r=!1,s=!1;const a=new fn,o=new Rt,l={value:null,needsUpdate:!1};function c(){l.value!==i&&(l.value=i,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function h(t,i,n,r){const s=null!==t?t.length:0;let c=null;if(0!==s){if(c=l.value,!0!==r||null===c){const e=n+4*s,r=i.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,i=n;e!==s;++e,i+=4)a.copy(t[e]).applyMatrix4(r,o),a.normal.toArray(c,i),c[i+3]=a.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=s,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,s){const a=0!==t.length||e||0!==n||r;return r=e,i=h(t,s,0),n=t.length,a},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(e,a,o){const u=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,m=t.get(e);if(!r||null===u||0===u.length||s&&!p)s?h(null):c();else{const t=s?0:n,e=4*t;let r=m.clippingState||null;l.value=r,r=h(u,a,e,o);for(let t=0;t!==e;++t)r[t]=i[t];m.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function Pn(t){let e=new WeakMap;function i(t,e){return e===a?t.mapping=r:e===o&&(t.mapping=s),t}function n(t){const i=t.target;i.removeEventListener("dispose",n);const r=e.get(i);void 0!==r&&(e.delete(i),r.dispose())}return{get:function(r){if(r&&r.isTexture&&!1===r.isRenderTargetTexture){const s=r.mapping;if(s===a||s===o){if(e.has(r)){return i(e.get(r).texture,r.mapping)}{const s=r.image;if(s&&s.height>0){const a=new un(s.height/2);return a.fromEquirectangularTexture(t,r),e.set(r,a),r.addEventListener("dispose",n),i(a.texture,r.mapping)}return null}}}return r},dispose:function(){e=new WeakMap}}}class In extends an{constructor(t=-1,e=1,i=1,n=-1,r=.1,s=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=n,this.near=r,this.far=s,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,i,n,r,s){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let r=i-t,s=i+t,a=n+e,o=n-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,s=r+t*this.view.width,a-=e*this.view.offsetY,o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}const Dn=[.125,.215,.35,.446,.526,.582],Nn=20,On=new In,zn=new qt;let Un=null;const Bn=(1+Math.sqrt(5))/2,Fn=1/Bn,kn=[new re(1,1,1),new re(-1,1,1),new re(1,1,-1),new re(-1,1,-1),new re(0,Bn,Fn),new re(0,Bn,-Fn),new re(Fn,0,Bn),new re(-Fn,0,Bn),new re(Bn,Fn,0),new re(-Bn,Fn,0)];class Gn{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,i=.1,n=100){Un=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,i,n,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=jn(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Wn(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Un),t.scissorTest=!1,Hn(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===r||t.mapping===s?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Un=this._renderer.getRenderTarget();const i=e||this._allocateTargets();return this._textureToCubeUV(t,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,i={magFilter:f,minFilter:f,generateMipmaps:!1,type:b,format:S,encoding:at,depthBuffer:!1},n=Vn(t,e,i);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Vn(t,e,i);const{_lodMax:n}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],i=[],n=[];let r=t;const s=t-4+1+Dn.length;for(let a=0;a<s;a++){const s=Math.pow(2,r);i.push(s);let o=1/s;a>t-4?o=Dn[a-t+4-1]:0===a&&(o=0),n.push(o);const l=1/(s-2),c=-l,h=1+l,u=[c,c,h,c,h,h,c,c,h,h,c,h],d=6,p=6,m=3,f=2,g=1,v=new Float32Array(m*p*d),x=new Float32Array(f*p*d),_=new Float32Array(g*p*d);for(let t=0;t<d;t++){const e=t%3*2/3-1,i=t>2?0:-1,n=[e,i,0,e+2/3,i,0,e+2/3,i+1,0,e,i,0,e+2/3,i+1,0,e,i+1,0];v.set(n,m*p*t),x.set(u,f*p*t);const r=[t,t,t,t,t,t];_.set(r,g*p*t)}const y=new Di;y.setAttribute("position",new bi(v,m)),y.setAttribute("uv",new bi(x,f)),y.setAttribute("faceIndex",new bi(_,g)),e.push(y),r>4&&r--}return{lodPlanes:e,sizeLods:i,sigmas:n}}(n)),this._blurMaterial=function(t,e,i){const n=new Float32Array(Nn),r=new re(0,1,0);return new sn({name:"SphericalGaussianBlur",defines:{n:Nn,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/i,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:qn(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(n,t,e)}return n}_compileMaterial(t){const e=new Ki(this._lodPlanes[0],t);this._renderer.compile(e,On)}_sceneToCubeUV(t,e,i,n){const r=new on(90,1,e,i),s=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(zn),o.toneMapping=0,o.autoClear=!1;const h=new _i({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),u=new Ki(new Qi,h);let d=!1;const p=t.background;p?p.isColor&&(h.color.copy(p),t.background=null,d=!0):(h.color.copy(zn),d=!0);for(let e=0;e<6;e++){const i=e%3;0===i?(r.up.set(0,s[e],0),r.lookAt(a[e],0,0)):1===i?(r.up.set(0,0,s[e]),r.lookAt(0,a[e],0)):(r.up.set(0,s[e],0),r.lookAt(0,0,a[e]));const l=this._cubeSize;Hn(n,i*l,e>2?l:0,l,l),o.setRenderTarget(n),d&&o.render(u,r),o.render(t,r)}u.geometry.dispose(),u.material.dispose(),o.toneMapping=c,o.autoClear=l,t.background=p}_textureToCubeUV(t,e){const i=this._renderer,n=t.mapping===r||t.mapping===s;n?(null===this._cubemapMaterial&&(this._cubemapMaterial=jn()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=Wn());const a=n?this._cubemapMaterial:this._equirectMaterial,o=new Ki(this._lodPlanes[0],a);a.uniforms.envMap.value=t;const l=this._cubeSize;Hn(e,0,0,3*l,2*l),i.setRenderTarget(e),i.render(o,On)}_applyPMREM(t){const e=this._renderer,i=e.autoClear;e.autoClear=!1;for(let e=1;e<this._lodPlanes.length;e++){const i=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]),n=kn[(e-1)%kn.length];this._blur(t,e-1,e,i,n)}e.autoClear=i}_blur(t,e,i,n,r){const s=this._pingPongRenderTarget;this._halfBlur(t,s,e,i,n,"latitudinal",r),this._halfBlur(s,t,i,i,n,"longitudinal",r)}_halfBlur(t,e,i,n,r,s,a){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==s&&"longitudinal"!==s&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new Ki(this._lodPlanes[n],l),h=l.uniforms,u=this._sizeLods[i]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,m=isFinite(r)?1+Math.floor(3*p):Nn;m>Nn&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);const f=[];let g=0;for(let t=0;t<Nn;++t){const e=t/p,i=Math.exp(-e*e/2);f.push(i),0===t?g+=i:t<m&&(g+=2*i)}for(let t=0;t<f.length;t++)f[t]=f[t]/g;h.envMap.value=t.texture,h.samples.value=m,h.weights.value=f,h.latitudinal.value="latitudinal"===s,a&&(h.poleAxis.value=a);const{_lodMax:v}=this;h.dTheta.value=d,h.mipInt.value=v-i;const x=this._sizeLods[n];Hn(e,3*x*(n>v-4?n-v+4:0),4*(this._cubeSize-x),3*x,2*x),o.setRenderTarget(e),o.render(c,On)}}function Vn(t,e,i){const n=new te(t,e,i);return n.texture.mapping=l,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function Hn(t,e,i,n,r){t.viewport.set(e,i,n,r),t.scissor.set(e,i,n,r)}function Wn(){return new sn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:qn(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function jn(){return new sn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:qn(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function qn(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function Xn(t){let e=new WeakMap,i=null;function n(t){const i=t.target;i.removeEventListener("dispose",n);const r=e.get(i);void 0!==r&&(e.delete(i),r.dispose())}return{get:function(l){if(l&&l.isTexture){const c=l.mapping,h=c===a||c===o,u=c===r||c===s;if(h||u){if(l.isRenderTargetTexture&&!0===l.needsPMREMUpdate){l.needsPMREMUpdate=!1;let n=e.get(l);return null===i&&(i=new Gn(t)),n=h?i.fromEquirectangular(l,n):i.fromCubemap(l,n),e.set(l,n),n.texture}if(e.has(l))return e.get(l).texture;{const r=l.image;if(h&&r&&r.height>0||u&&r&&function(t){let e=0;const i=6;for(let n=0;n<i;n++)void 0!==t[n]&&e++;return e===i}(r)){null===i&&(i=new Gn(t));const r=h?i.fromEquirectangular(l):i.fromCubemap(l);return e.set(l,r),l.addEventListener("dispose",n),r.texture}return null}}}return l},dispose:function(){e=new WeakMap,null!==i&&(i.dispose(),i=null)}}}function Yn(t){const e={};function i(i){if(void 0!==e[i])return e[i];let n;switch(i){case"WEBGL_depth_texture":n=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=t.getExtension(i)}return e[i]=n,n}return{has:function(t){return null!==i(t)},init:function(t){t.isWebGL2?i("EXT_color_buffer_float"):(i("WEBGL_depth_texture"),i("OES_texture_float"),i("OES_texture_half_float"),i("OES_texture_half_float_linear"),i("OES_standard_derivatives"),i("OES_element_index_uint"),i("OES_vertex_array_object"),i("ANGLE_instanced_arrays")),i("OES_texture_float_linear"),i("EXT_color_buffer_half_float"),i("WEBGL_multisampled_render_to_texture")},get:function(t){const e=i(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function Zn(t,e,i,n){const r={},s=new WeakMap;function a(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener("dispose",a),delete r[o.id];const l=s.get(o);l&&(e.remove(l),s.delete(o)),n.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,i.memory.geometries--}function o(t){const i=[],n=t.index,r=t.attributes.position;let a=0;if(null!==n){const t=n.array;a=n.version;for(let e=0,n=t.length;e<n;e+=3){const n=t[e+0],r=t[e+1],s=t[e+2];i.push(n,r,r,s,s,n)}}else{const t=r.array;a=r.version;for(let e=0,n=t.length/3-1;e<n;e+=3){const t=e+0,n=e+1,r=e+2;i.push(t,n,n,r,r,t)}}const o=new(It(i)?Si:wi)(i,1);o.version=a;const l=s.get(t);l&&e.remove(l),s.set(t,o)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",a),r[e.id]=!0,i.memory.geometries++),e},update:function(t){const i=t.attributes;for(const t in i)e.update(i[t],34962);const n=t.morphAttributes;for(const t in n){const i=n[t];for(let t=0,n=i.length;t<n;t++)e.update(i[t],34962)}},getWireframeAttribute:function(t){const e=s.get(t);if(e){const i=t.index;null!==i&&e.version<i.version&&o(t)}else o(t);return s.get(t)}}}function Jn(t,e,i,n){const r=n.isWebGL2;let s,a,o;this.setMode=function(t){s=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,n){t.drawElements(s,n,a,e*o),i.update(n,s,1)},this.renderInstances=function(n,l,c){if(0===c)return;let h,u;if(r)h=t,u="drawElementsInstanced";else if(h=e.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[u](s,l,a,n*o,c),i.update(l,s,c)}}function Kn(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,i,n){switch(e.calls++,i){case 4:e.triangles+=n*(t/3);break;case 1:e.lines+=n*(t/2);break;case 3:e.lines+=n*(t-1);break;case 2:e.lines+=n*t;break;case 0:e.points+=n*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function $n(t,e){return t[0]-e[0]}function Qn(t,e){return Math.abs(e[1])-Math.abs(t[1])}function tr(t,e,i){const n={},r=new Float32Array(8),s=new WeakMap,a=new Qt,o=[];for(let t=0;t<8;t++)o[t]=[t,0];return{update:function(l,c,h,u){const d=l.morphTargetInfluences;if(!0===e.isWebGL2){const p=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,m=void 0!==p?p.length:0;let f=s.get(c);if(void 0===f||f.count!==m){void 0!==f&&f.texture.dispose();const x=void 0!==c.morphAttributes.position,_=void 0!==c.morphAttributes.normal,y=void 0!==c.morphAttributes.color,b=c.morphAttributes.position||[],w=c.morphAttributes.normal||[],S=c.morphAttributes.color||[];let T=0;!0===x&&(T=1),!0===_&&(T=2),!0===y&&(T=3);let A=c.attributes.position.count*T,E=1;A>e.maxTextureSize&&(E=Math.ceil(A/e.maxTextureSize),A=e.maxTextureSize);const C=new Float32Array(A*E*4*m),L=new ee(C,A,E,m);L.type=M,L.needsUpdate=!0;const R=4*T;for(let I=0;I<m;I++){const D=b[I],N=w[I],O=S[I],z=A*E*4*I;for(let U=0;U<D.count;U++){const B=U*R;!0===x&&(a.fromBufferAttribute(D,U),C[z+B+0]=a.x,C[z+B+1]=a.y,C[z+B+2]=a.z,C[z+B+3]=0),!0===_&&(a.fromBufferAttribute(N,U),C[z+B+4]=a.x,C[z+B+5]=a.y,C[z+B+6]=a.z,C[z+B+7]=0),!0===y&&(a.fromBufferAttribute(O,U),C[z+B+8]=a.x,C[z+B+9]=a.y,C[z+B+10]=a.z,C[z+B+11]=4===O.itemSize?a.w:1)}}function P(){L.dispose(),s.delete(c),c.removeEventListener("dispose",P)}f={count:m,texture:L,size:new Lt(A,E)},s.set(c,f),c.addEventListener("dispose",P)}let g=0;for(let F=0;F<d.length;F++)g+=d[F];const v=c.morphTargetsRelative?1:1-g;u.getUniforms().setValue(t,"morphTargetBaseInfluence",v),u.getUniforms().setValue(t,"morphTargetInfluences",d),u.getUniforms().setValue(t,"morphTargetsTexture",f.texture,i),u.getUniforms().setValue(t,"morphTargetsTextureSize",f.size)}else{const k=void 0===d?0:d.length;let G=n[c.id];if(void 0===G||G.length!==k){G=[];for(let q=0;q<k;q++)G[q]=[q,0];n[c.id]=G}for(let X=0;X<k;X++){const Y=G[X];Y[0]=X,Y[1]=d[X]}G.sort(Qn);for(let Z=0;Z<8;Z++)Z<k&&G[Z][1]?(o[Z][0]=G[Z][0],o[Z][1]=G[Z][1]):(o[Z][0]=Number.MAX_SAFE_INTEGER,o[Z][1]=0);o.sort($n);const V=c.morphAttributes.position,H=c.morphAttributes.normal;let W=0;for(let J=0;J<8;J++){const K=o[J],$=K[0],Q=K[1];$!==Number.MAX_SAFE_INTEGER&&Q?(V&&c.getAttribute("morphTarget"+J)!==V[$]&&c.setAttribute("morphTarget"+J,V[$]),H&&c.getAttribute("morphNormal"+J)!==H[$]&&c.setAttribute("morphNormal"+J,H[$]),r[J]=Q,W+=Q):(V&&!0===c.hasAttribute("morphTarget"+J)&&c.deleteAttribute("morphTarget"+J),H&&!0===c.hasAttribute("morphNormal"+J)&&c.deleteAttribute("morphNormal"+J),r[J]=0)}const j=c.morphTargetsRelative?1:1-W;u.getUniforms().setValue(t,"morphTargetBaseInfluence",j),u.getUniforms().setValue(t,"morphTargetInfluences",r)}}}}function er(t,e,i,n){let r=new WeakMap;function s(t){const e=t.target;e.removeEventListener("dispose",s),i.remove(e.instanceMatrix),null!==e.instanceColor&&i.remove(e.instanceColor)}return{update:function(t){const a=n.render.frame,o=t.geometry,l=e.get(t,o);return r.get(l)!==a&&(e.update(l),r.set(l,a)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",s)&&t.addEventListener("dispose",s),i.update(t.instanceMatrix,34962),null!==t.instanceColor&&i.update(t.instanceColor,34962)),l},dispose:function(){r=new WeakMap}}}const ir=new $t,nr=new ee,rr=new ie,sr=new hn,ar=[],or=[],lr=new Float32Array(16),cr=new Float32Array(9),hr=new Float32Array(4);function ur(t,e,i){const n=t[0];if(n<=0||n>0)return t;const r=e*i;let s=ar[r];if(void 0===s&&(s=new Float32Array(r),ar[r]=s),0!==e){n.toArray(s,0);for(let n=1,r=0;n!==e;++n)r+=i,t[n].toArray(s,r)}return s}function dr(t,e){if(t.length!==e.length)return!1;for(let i=0,n=t.length;i<n;i++)if(t[i]!==e[i])return!1;return!0}function pr(t,e){for(let i=0,n=e.length;i<n;i++)t[i]=e[i]}function mr(t,e){let i=or[e];void 0===i&&(i=new Int32Array(e),or[e]=i);for(let n=0;n!==e;++n)i[n]=t.allocateTextureUnit();return i}function fr(t,e){const i=this.cache;i[0]!==e&&(t.uniform1f(this.addr,e),i[0]=e)}function gr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(dr(i,e))return;t.uniform2fv(this.addr,e),pr(i,e)}}function vr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else if(void 0!==e.r)i[0]===e.r&&i[1]===e.g&&i[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),i[0]=e.r,i[1]=e.g,i[2]=e.b);else{if(dr(i,e))return;t.uniform3fv(this.addr,e),pr(i,e)}}function xr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(dr(i,e))return;t.uniform4fv(this.addr,e),pr(i,e)}}function _r(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(dr(i,e))return;t.uniformMatrix2fv(this.addr,!1,e),pr(i,e)}else{if(dr(i,n))return;hr.set(n),t.uniformMatrix2fv(this.addr,!1,hr),pr(i,n)}}function yr(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(dr(i,e))return;t.uniformMatrix3fv(this.addr,!1,e),pr(i,e)}else{if(dr(i,n))return;cr.set(n),t.uniformMatrix3fv(this.addr,!1,cr),pr(i,n)}}function Mr(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(dr(i,e))return;t.uniformMatrix4fv(this.addr,!1,e),pr(i,e)}else{if(dr(i,n))return;lr.set(n),t.uniformMatrix4fv(this.addr,!1,lr),pr(i,n)}}function br(t,e){const i=this.cache;i[0]!==e&&(t.uniform1i(this.addr,e),i[0]=e)}function wr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2i(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(dr(i,e))return;t.uniform2iv(this.addr,e),pr(i,e)}}function Sr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3i(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else{if(dr(i,e))return;t.uniform3iv(this.addr,e),pr(i,e)}}function Tr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4i(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(dr(i,e))return;t.uniform4iv(this.addr,e),pr(i,e)}}function Ar(t,e){const i=this.cache;i[0]!==e&&(t.uniform1ui(this.addr,e),i[0]=e)}function Er(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2ui(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(dr(i,e))return;t.uniform2uiv(this.addr,e),pr(i,e)}}function Cr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3ui(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else{if(dr(i,e))return;t.uniform3uiv(this.addr,e),pr(i,e)}}function Lr(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4ui(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(dr(i,e))return;t.uniform4uiv(this.addr,e),pr(i,e)}}function Rr(t,e,i){const n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture2D(e||ir,r)}function Pr(t,e,i){const n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture3D(e||rr,r)}function Ir(t,e,i){const n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTextureCube(e||sr,r)}function Dr(t,e,i){const n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture2DArray(e||nr,r)}function Nr(t,e){t.uniform1fv(this.addr,e)}function Or(t,e){const i=ur(e,this.size,2);t.uniform2fv(this.addr,i)}function zr(t,e){const i=ur(e,this.size,3);t.uniform3fv(this.addr,i)}function Ur(t,e){const i=ur(e,this.size,4);t.uniform4fv(this.addr,i)}function Br(t,e){const i=ur(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,i)}function Fr(t,e){const i=ur(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,i)}function kr(t,e){const i=ur(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,i)}function Gr(t,e){t.uniform1iv(this.addr,e)}function Vr(t,e){t.uniform2iv(this.addr,e)}function Hr(t,e){t.uniform3iv(this.addr,e)}function Wr(t,e){t.uniform4iv(this.addr,e)}function jr(t,e){t.uniform1uiv(this.addr,e)}function qr(t,e){t.uniform2uiv(this.addr,e)}function Xr(t,e){t.uniform3uiv(this.addr,e)}function Yr(t,e){t.uniform4uiv(this.addr,e)}function Zr(t,e,i){const n=this.cache,r=e.length,s=mr(i,r);dr(n,s)||(t.uniform1iv(this.addr,s),pr(n,s));for(let t=0;t!==r;++t)i.setTexture2D(e[t]||ir,s[t])}function Jr(t,e,i){const n=this.cache,r=e.length,s=mr(i,r);dr(n,s)||(t.uniform1iv(this.addr,s),pr(n,s));for(let t=0;t!==r;++t)i.setTexture3D(e[t]||rr,s[t])}function Kr(t,e,i){const n=this.cache,r=e.length,s=mr(i,r);dr(n,s)||(t.uniform1iv(this.addr,s),pr(n,s));for(let t=0;t!==r;++t)i.setTextureCube(e[t]||sr,s[t])}function $r(t,e,i){const n=this.cache,r=e.length,s=mr(i,r);dr(n,s)||(t.uniform1iv(this.addr,s),pr(n,s));for(let t=0;t!==r;++t)i.setTexture2DArray(e[t]||nr,s[t])}class Qr{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.setValue=function(t){switch(t){case 5126:return fr;case 35664:return gr;case 35665:return vr;case 35666:return xr;case 35674:return _r;case 35675:return yr;case 35676:return Mr;case 5124:case 35670:return br;case 35667:case 35671:return wr;case 35668:case 35672:return Sr;case 35669:case 35673:return Tr;case 5125:return Ar;case 36294:return Er;case 36295:return Cr;case 36296:return Lr;case 35678:case 36198:case 36298:case 36306:case 35682:return Rr;case 35679:case 36299:case 36307:return Pr;case 35680:case 36300:case 36308:case 36293:return Ir;case 36289:case 36303:case 36311:case 36292:return Dr}}(e.type)}}class ts{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Nr;case 35664:return Or;case 35665:return zr;case 35666:return Ur;case 35674:return Br;case 35675:return Fr;case 35676:return kr;case 5124:case 35670:return Gr;case 35667:case 35671:return Vr;case 35668:case 35672:return Hr;case 35669:case 35673:return Wr;case 5125:return jr;case 36294:return qr;case 36295:return Xr;case 36296:return Yr;case 35678:case 36198:case 36298:case 36306:case 35682:return Zr;case 35679:case 36299:case 36307:return Jr;case 35680:case 36300:case 36308:case 36293:return Kr;case 36289:case 36303:case 36311:case 36292:return $r}}(e.type)}}class es{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,i){const n=this.seq;for(let r=0,s=n.length;r!==s;++r){const s=n[r];s.setValue(t,e[s.id],i)}}}const is=/(\w+)(\])?(\[|\.)?/g;function ns(t,e){t.seq.push(e),t.map[e.id]=e}function rs(t,e,i){const n=t.name,r=n.length;for(is.lastIndex=0;;){const s=is.exec(n),a=is.lastIndex;let o=s[1];const l="]"===s[2],c=s[3];if(l&&(o|=0),void 0===c||"["===c&&a+2===r){ns(i,void 0===c?new Qr(o,t,e):new ts(o,t,e));break}{let t=i.map[o];void 0===t&&(t=new es(o),ns(i,t)),i=t}}}class ss{constructor(t,e){this.seq=[],this.map={};const i=t.getProgramParameter(e,35718);for(let n=0;n<i;++n){const i=t.getActiveUniform(e,n);rs(i,t.getUniformLocation(e,i.name),this)}}setValue(t,e,i,n){const r=this.map[e];void 0!==r&&r.setValue(t,i,n)}setOptional(t,e,i){const n=e[i];void 0!==n&&this.setValue(t,i,n)}static upload(t,e,i,n){for(let r=0,s=e.length;r!==s;++r){const s=e[r],a=i[s.id];!1!==a.needsUpdate&&s.setValue(t,a.value,n)}}static seqWithValue(t,e){const i=[];for(let n=0,r=t.length;n!==r;++n){const r=t[n];r.id in e&&i.push(r)}return i}}function as(t,e,i){const n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),n}let os=0;function ls(t,e,i){const n=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();if(n&&""===r)return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const n=parseInt(s[1]);return i.toUpperCase()+"\n\n"+r+"\n\n"+function(t,e){const i=t.split("\n"),n=[],r=Math.max(e-6,0),s=Math.min(e+6,i.length);for(let t=r;t<s;t++){const r=t+1;n.push(`${r===e?">":" "} ${r}: ${i[t]}`)}return n.join("\n")}(t.getShaderSource(e),n)}return r}function cs(t,e){const i=function(t){switch(t){case at:return["Linear","( value )"];case ot:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+i[0]+i[1]+"; }"}function hs(t,e){let i;switch(e){case 1:i="Linear";break;case 2:i="Reinhard";break;case 3:i="OptimizedCineon";break;case 4:i="ACESFilmic";break;case 5:i="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),i="Linear"}return"vec3 "+t+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}function us(t){return""!==t}function ds(t,e){const i=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,i).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function ps(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const ms=/^[ \t]*#include +<([\w\d./]+)>/gm;function fs(t){return t.replace(ms,gs)}function gs(t,e){const i=bn[e];if(void 0===i)throw new Error("Can not resolve #include <"+e+">");return fs(i)}const vs=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function xs(t){return t.replace(vs,_s)}function _s(t,e,i,n){let r="";for(let t=parseInt(e);t<parseInt(i);t++)r+=n.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function ys(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function Ms(t,e,i,n){const a=t.getContext(),o=i.defines;let c=i.vertexShader,h=i.fragmentShader;const u=function(t){let e="SHADOWMAP_TYPE_BASIC";return 1===t.shadowMapType?e="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?e="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(e="SHADOWMAP_TYPE_VSM"),e}(i),d=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case r:case s:e="ENVMAP_TYPE_CUBE";break;case l:e="ENVMAP_TYPE_CUBE_UV"}return e}(i),p=function(t){let e="ENVMAP_MODE_REFLECTION";t.envMap&&t.envMapMode===s&&(e="ENVMAP_MODE_REFRACTION");return e}(i),m=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:e="ENVMAP_BLENDING_MULTIPLY";break;case 1:e="ENVMAP_BLENDING_MIX";break;case 2:e="ENVMAP_BLENDING_ADD"}return e}(i),f=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const i=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,i),112)),texelHeight:n,maxMip:i}}(i),g=i.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUVHeight||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(us).join("\n")}(i),v=function(t){const e=[];for(const i in t){const n=t[i];!1!==n&&e.push("#define "+i+" "+n)}return e.join("\n")}(o),x=a.createProgram();let _,y,M=i.glslVersion?"#version "+i.glslVersion+"\n":"";i.isRawShaderMaterial?(_=[v].filter(us).join("\n"),_.length>0&&(_+="\n"),y=[g,v].filter(us).join("\n"),y.length>0&&(y+="\n")):(_=[ys(i),"#define SHADER_NAME "+i.shaderName,v,i.instancing?"#define USE_INSTANCING":"",i.instancingColor?"#define USE_INSTANCING_COLOR":"",i.supportsVertexTextures?"#define VERTEX_TEXTURES":"",i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+p:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.normalMap&&i.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.displacementMap&&i.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",i.specularColorMap?"#define USE_SPECULARCOLORMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.sheenColorMap?"#define USE_SHEENCOLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUvs?"#define USE_UV":"",i.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&!1===i.flatShading?"#define USE_MORPHNORMALS":"",i.morphColors&&i.isWebGL2?"#define USE_MORPHCOLORS":"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+i.morphTextureStride:"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_COUNT "+i.morphTargetsCount:"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+u:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(us).join("\n"),y=[g,ys(i),"#define SHADER_NAME "+i.shaderName,v,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+d:"",i.envMap?"#define "+p:"",i.envMap?"#define "+m:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.normalMap&&i.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",i.clearcoat?"#define USE_CLEARCOAT":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescence?"#define USE_IRIDESCENCE":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",i.specularColorMap?"#define USE_SPECULARCOLORMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaTest?"#define USE_ALPHATEST":"",i.sheen?"#define USE_SHEEN":"",i.sheenColorMap?"#define USE_SHEENCOLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors||i.instancingColor?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUvs?"#define USE_UV":"",i.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+u:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==i.toneMapping?"#define TONE_MAPPING":"",0!==i.toneMapping?bn.tonemapping_pars_fragment:"",0!==i.toneMapping?hs("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.opaque?"#define OPAQUE":"",bn.encodings_pars_fragment,cs("linearToOutputTexel",i.outputEncoding),i.useDepthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(us).join("\n")),c=fs(c),c=ds(c,i),c=ps(c,i),h=fs(h),h=ds(h,i),h=ps(h,i),c=xs(c),h=xs(h),i.isWebGL2&&!0!==i.isRawShaderMaterial&&(M="#version 300 es\n",_=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+_,y=["#define varying in",i.glslVersion===dt?"":"layout(location = 0) out highp vec4 pc_fragColor;",i.glslVersion===dt?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+y);const b=M+y+h,w=as(a,35633,M+_+c),S=as(a,35632,b);if(a.attachShader(x,w),a.attachShader(x,S),void 0!==i.index0AttributeName?a.bindAttribLocation(x,0,i.index0AttributeName):!0===i.morphTargets&&a.bindAttribLocation(x,0,"position"),a.linkProgram(x),t.debug.checkShaderErrors){const t=a.getProgramInfoLog(x).trim(),e=a.getShaderInfoLog(w).trim(),i=a.getShaderInfoLog(S).trim();let n=!0,r=!0;if(!1===a.getProgramParameter(x,35714)){n=!1;const e=ls(a,w,"vertex"),i=ls(a,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+a.getError()+" - VALIDATE_STATUS "+a.getProgramParameter(x,35715)+"\n\nProgram Info Log: "+t+"\n"+e+"\n"+i)}else""!==t?console.warn("THREE.WebGLProgram: Program Info Log:",t):""!==e&&""!==i||(r=!1);r&&(this.diagnostics={runnable:n,programLog:t,vertexShader:{log:e,prefix:_},fragmentShader:{log:i,prefix:y}})}let T,A;return a.deleteShader(w),a.deleteShader(S),this.getUniforms=function(){return void 0===T&&(T=new ss(a,x)),T},this.getAttributes=function(){return void 0===A&&(A=function(t,e){const i={},n=t.getProgramParameter(e,35721);for(let r=0;r<n;r++){const n=t.getActiveAttrib(e,r),s=n.name;let a=1;35674===n.type&&(a=2),35675===n.type&&(a=3),35676===n.type&&(a=4),i[s]={type:n.type,location:t.getAttribLocation(e,s),locationSize:a}}return i}(a,x)),A},this.destroy=function(){n.releaseStatesOfProgram(this),a.deleteProgram(x),this.program=void 0},this.name=i.shaderName,this.id=os++,this.cacheKey=e,this.usedTimes=1,this.program=x,this.vertexShader=w,this.fragmentShader=S,this}let bs=0;class ws{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,i=t.fragmentShader,n=this._getShaderStage(e),r=this._getShaderStage(i),s=this._getShaderCacheForMaterial(t);return!1===s.has(n)&&(s.add(n),n.usedTimes++),!1===s.has(r)&&(s.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let i=e.get(t);return void 0===i&&(i=new Set,e.set(t,i)),i}_getShaderStage(t){const e=this.shaderCache;let i=e.get(t);return void 0===i&&(i=new Ss(t),e.set(t,i)),i}}class Ss{constructor(t){this.id=bs++,this.code=t,this.usedTimes=0}}function Ts(t,e,i,n,r,s,a){const o=new je,c=new ws,h=[],u=r.isWebGL2,d=r.logarithmicDepthBuffer,p=r.vertexTextures;let m=r.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(s,o,h,g,v){const x=g.fog,_=v.geometry,y=s.isMeshStandardMaterial?g.environment:null,M=(s.isMeshStandardMaterial?i:e).get(s.envMap||y),b=M&&M.mapping===l?M.image.height:null,w=f[s.type];null!==s.precision&&(m=r.getMaxPrecision(s.precision),m!==s.precision&&console.warn("THREE.WebGLProgram.getParameters:",s.precision,"not supported, using",m,"instead."));const S=_.morphAttributes.position||_.morphAttributes.normal||_.morphAttributes.color,T=void 0!==S?S.length:0;let A,E,C,L,R=0;if(void 0!==_.morphAttributes.position&&(R=1),void 0!==_.morphAttributes.normal&&(R=2),void 0!==_.morphAttributes.color&&(R=3),w){const t=Sn[w];A=t.vertexShader,E=t.fragmentShader}else A=s.vertexShader,E=s.fragmentShader,c.update(s),C=c.getVertexShaderID(s),L=c.getFragmentShaderID(s);const P=t.getRenderTarget(),I=s.alphaTest>0,D=s.clearcoat>0,N=s.iridescence>0;return{isWebGL2:u,shaderID:w,shaderName:s.type,vertexShader:A,fragmentShader:E,defines:s.defines,customVertexShaderID:C,customFragmentShaderID:L,isRawShaderMaterial:!0===s.isRawShaderMaterial,glslVersion:s.glslVersion,precision:m,instancing:!0===v.isInstancedMesh,instancingColor:!0===v.isInstancedMesh&&null!==v.instanceColor,supportsVertexTextures:p,outputEncoding:null===P?t.outputEncoding:!0===P.isXRRenderTarget?P.texture.encoding:at,map:!!s.map,matcap:!!s.matcap,envMap:!!M,envMapMode:M&&M.mapping,envMapCubeUVHeight:b,lightMap:!!s.lightMap,aoMap:!!s.aoMap,emissiveMap:!!s.emissiveMap,bumpMap:!!s.bumpMap,normalMap:!!s.normalMap,objectSpaceNormalMap:1===s.normalMapType,tangentSpaceNormalMap:0===s.normalMapType,decodeVideoTexture:!!s.map&&!0===s.map.isVideoTexture&&s.map.encoding===ot,clearcoat:D,clearcoatMap:D&&!!s.clearcoatMap,clearcoatRoughnessMap:D&&!!s.clearcoatRoughnessMap,clearcoatNormalMap:D&&!!s.clearcoatNormalMap,iridescence:N,iridescenceMap:N&&!!s.iridescenceMap,iridescenceThicknessMap:N&&!!s.iridescenceThicknessMap,displacementMap:!!s.displacementMap,roughnessMap:!!s.roughnessMap,metalnessMap:!!s.metalnessMap,specularMap:!!s.specularMap,specularIntensityMap:!!s.specularIntensityMap,specularColorMap:!!s.specularColorMap,opaque:!1===s.transparent&&1===s.blending,alphaMap:!!s.alphaMap,alphaTest:I,gradientMap:!!s.gradientMap,sheen:s.sheen>0,sheenColorMap:!!s.sheenColorMap,sheenRoughnessMap:!!s.sheenRoughnessMap,transmission:s.transmission>0,transmissionMap:!!s.transmissionMap,thicknessMap:!!s.thicknessMap,combine:s.combine,vertexTangents:!!s.normalMap&&!!_.attributes.tangent,vertexColors:s.vertexColors,vertexAlphas:!0===s.vertexColors&&!!_.attributes.color&&4===_.attributes.color.itemSize,vertexUvs:!!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatMap||s.clearcoatRoughnessMap||s.clearcoatNormalMap||s.iridescenceMap||s.iridescenceThicknessMap||s.displacementMap||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheenColorMap||s.sheenRoughnessMap),uvsVertexOnly:!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatNormalMap||s.iridescenceMap||s.iridescenceThicknessMap||s.transmission>0||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheen>0||s.sheenColorMap||s.sheenRoughnessMap||!s.displacementMap),fog:!!x,useFog:!0===s.fog,fogExp2:x&&x.isFogExp2,flatShading:!!s.flatShading,sizeAttenuation:s.sizeAttenuation,logarithmicDepthBuffer:d,skinning:!0===v.isSkinnedMesh,morphTargets:void 0!==_.morphAttributes.position,morphNormals:void 0!==_.morphAttributes.normal,morphColors:void 0!==_.morphAttributes.color,morphTargetsCount:T,morphTextureStride:R,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:s.dithering,shadowMapEnabled:t.shadowMap.enabled&&h.length>0,shadowMapType:t.shadowMap.type,toneMapping:s.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:s.premultipliedAlpha,doubleSided:2===s.side,flipSided:1===s.side,useDepthPacking:!!s.depthPacking,depthPacking:s.depthPacking||0,index0AttributeName:s.index0AttributeName,extensionDerivatives:s.extensions&&s.extensions.derivatives,extensionFragDepth:s.extensions&&s.extensions.fragDepth,extensionDrawBuffers:s.extensions&&s.extensions.drawBuffers,extensionShaderTextureLOD:s.extensions&&s.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||n.has("EXT_shader_texture_lod"),customProgramCacheKey:s.customProgramCacheKey()}},getProgramCacheKey:function(e){const i=[];if(e.shaderID?i.push(e.shaderID):(i.push(e.customVertexShaderID),i.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)i.push(t),i.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(!function(t,e){t.push(e.precision),t.push(e.outputEncoding),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.combine),t.push(e.vertexUvs),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numSpotLightMaps),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.numSpotLightShadowsWithMaps),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection),t.push(e.depthPacking)}(i,e),function(t,e){o.disableAll(),e.isWebGL2&&o.enable(0);e.supportsVertexTextures&&o.enable(1);e.instancing&&o.enable(2);e.instancingColor&&o.enable(3);e.map&&o.enable(4);e.matcap&&o.enable(5);e.envMap&&o.enable(6);e.lightMap&&o.enable(7);e.aoMap&&o.enable(8);e.emissiveMap&&o.enable(9);e.bumpMap&&o.enable(10);e.normalMap&&o.enable(11);e.objectSpaceNormalMap&&o.enable(12);e.tangentSpaceNormalMap&&o.enable(13);e.clearcoat&&o.enable(14);e.clearcoatMap&&o.enable(15);e.clearcoatRoughnessMap&&o.enable(16);e.clearcoatNormalMap&&o.enable(17);e.iridescence&&o.enable(18);e.iridescenceMap&&o.enable(19);e.iridescenceThicknessMap&&o.enable(20);e.displacementMap&&o.enable(21);e.specularMap&&o.enable(22);e.roughnessMap&&o.enable(23);e.metalnessMap&&o.enable(24);e.gradientMap&&o.enable(25);e.alphaMap&&o.enable(26);e.alphaTest&&o.enable(27);e.vertexColors&&o.enable(28);e.vertexAlphas&&o.enable(29);e.vertexUvs&&o.enable(30);e.vertexTangents&&o.enable(31);e.uvsVertexOnly&&o.enable(32);t.push(o.mask),o.disableAll(),e.fog&&o.enable(0);e.useFog&&o.enable(1);e.flatShading&&o.enable(2);e.logarithmicDepthBuffer&&o.enable(3);e.skinning&&o.enable(4);e.morphTargets&&o.enable(5);e.morphNormals&&o.enable(6);e.morphColors&&o.enable(7);e.premultipliedAlpha&&o.enable(8);e.shadowMapEnabled&&o.enable(9);e.physicallyCorrectLights&&o.enable(10);e.doubleSided&&o.enable(11);e.flipSided&&o.enable(12);e.useDepthPacking&&o.enable(13);e.dithering&&o.enable(14);e.specularIntensityMap&&o.enable(15);e.specularColorMap&&o.enable(16);e.transmission&&o.enable(17);e.transmissionMap&&o.enable(18);e.thicknessMap&&o.enable(19);e.sheen&&o.enable(20);e.sheenColorMap&&o.enable(21);e.sheenRoughnessMap&&o.enable(22);e.decodeVideoTexture&&o.enable(23);e.opaque&&o.enable(24);t.push(o.mask)}(i,e),i.push(t.outputEncoding)),i.push(e.customProgramCacheKey),i.join()},getUniforms:function(t){const e=f[t.type];let i;if(e){const t=Sn[e];i=rn.clone(t.uniforms)}else i=t.uniforms;return i},acquireProgram:function(e,i){let n;for(let t=0,e=h.length;t<e;t++){const e=h[t];if(e.cacheKey===i){n=e,++n.usedTimes;break}}return void 0===n&&(n=new Ms(t,i,e,s),h.push(n)),n},releaseProgram:function(t){if(0==--t.usedTimes){const e=h.indexOf(t);h[e]=h[h.length-1],h.pop(),t.destroy()}},releaseShaderCache:function(t){c.remove(t)},programs:h,dispose:function(){c.dispose()}}}function As(){let t=new WeakMap;return{get:function(e){let i=t.get(e);return void 0===i&&(i={},t.set(e,i)),i},remove:function(e){t.delete(e)},update:function(e,i,n){t.get(e)[i]=n},dispose:function(){t=new WeakMap}}}function Es(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Cs(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Ls(){const t=[];let e=0;const i=[],n=[],r=[];function s(i,n,r,s,a,o){let l=t[e];return void 0===l?(l={id:i.id,object:i,geometry:n,material:r,groupOrder:s,renderOrder:i.renderOrder,z:a,group:o},t[e]=l):(l.id=i.id,l.object=i,l.geometry=n,l.material=r,l.groupOrder=s,l.renderOrder=i.renderOrder,l.z=a,l.group=o),e++,l}return{opaque:i,transmissive:n,transparent:r,init:function(){e=0,i.length=0,n.length=0,r.length=0},push:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?n.push(h):!0===a.transparent?r.push(h):i.push(h)},unshift:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?n.unshift(h):!0===a.transparent?r.unshift(h):i.unshift(h)},finish:function(){for(let i=e,n=t.length;i<n;i++){const e=t[i];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){i.length>1&&i.sort(t||Es),n.length>1&&n.sort(e||Cs),r.length>1&&r.sort(e||Cs)}}}function Rs(){let t=new WeakMap;return{get:function(e,i){const n=t.get(e);let r;return void 0===n?(r=new Ls,t.set(e,[r])):i>=n.length?(r=new Ls,n.push(r)):r=n[i],r},dispose:function(){t=new WeakMap}}}function Ps(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let i;switch(e.type){case"DirectionalLight":i={direction:new re,color:new qt};break;case"SpotLight":i={position:new re,direction:new re,color:new qt,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new re,color:new qt,distance:0,decay:0};break;case"HemisphereLight":i={direction:new re,skyColor:new qt,groundColor:new qt};break;case"RectAreaLight":i={color:new qt,position:new re,halfWidth:new re,halfHeight:new re}}return t[e.id]=i,i}}}let Is=0;function Ds(t,e){return(e.castShadow?2:0)-(t.castShadow?2:0)+(e.map?1:0)-(t.map?1:0)}function Ns(t,e){const i=new Ps,n=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let i;switch(e.type){case"DirectionalLight":case"SpotLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Lt};break;case"PointLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Lt,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=i,i}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let t=0;t<9;t++)r.probe.push(new re);const s=new re,a=new Ne,o=new Ne;return{setup:function(s,a){let o=0,l=0,c=0;for(let t=0;t<9;t++)r.probe[t].set(0,0,0);let h=0,u=0,d=0,p=0,m=0,f=0,g=0,v=0,x=0,_=0;s.sort(Ds);const y=!0!==a?Math.PI:1;for(let t=0,e=s.length;t<e;t++){const e=s[t],a=e.color,M=e.intensity,b=e.distance,w=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)o+=a.r*M*y,l+=a.g*M*y,c+=a.b*M*y;else if(e.isLightProbe)for(let t=0;t<9;t++)r.probe[t].addScaledVector(e.sh.coefficients[t],M);else if(e.isDirectionalLight){const t=i.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),e.castShadow){const t=e.shadow,i=n.get(e);i.shadowBias=t.bias,i.shadowNormalBias=t.normalBias,i.shadowRadius=t.radius,i.shadowMapSize=t.mapSize,r.directionalShadow[h]=i,r.directionalShadowMap[h]=w,r.directionalShadowMatrix[h]=e.shadow.matrix,f++}r.directional[h]=t,h++}else if(e.isSpotLight){const t=i.get(e);t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(a).multiplyScalar(M*y),t.distance=b,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,r.spot[d]=t;const s=e.shadow;if(e.map&&(r.spotLightMap[x]=e.map,x++,s.updateMatrices(e),e.castShadow&&_++),r.spotLightMatrix[d]=s.matrix,e.castShadow){const t=n.get(e);t.shadowBias=s.bias,t.shadowNormalBias=s.normalBias,t.shadowRadius=s.radius,t.shadowMapSize=s.mapSize,r.spotShadow[d]=t,r.spotShadowMap[d]=w,v++}d++}else if(e.isRectAreaLight){const t=i.get(e);t.color.copy(a).multiplyScalar(M),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),r.rectArea[p]=t,p++}else if(e.isPointLight){const t=i.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,i=n.get(e);i.shadowBias=t.bias,i.shadowNormalBias=t.normalBias,i.shadowRadius=t.radius,i.shadowMapSize=t.mapSize,i.shadowCameraNear=t.camera.near,i.shadowCameraFar=t.camera.far,r.pointShadow[u]=i,r.pointShadowMap[u]=w,r.pointShadowMatrix[u]=e.shadow.matrix,g++}r.point[u]=t,u++}else if(e.isHemisphereLight){const t=i.get(e);t.skyColor.copy(e.color).multiplyScalar(M*y),t.groundColor.copy(e.groundColor).multiplyScalar(M*y),r.hemi[m]=t,m++}}p>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(r.rectAreaLTC1=wn.LTC_FLOAT_1,r.rectAreaLTC2=wn.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=wn.LTC_HALF_1,r.rectAreaLTC2=wn.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=c;const M=r.hash;M.directionalLength===h&&M.pointLength===u&&M.spotLength===d&&M.rectAreaLength===p&&M.hemiLength===m&&M.numDirectionalShadows===f&&M.numPointShadows===g&&M.numSpotShadows===v&&M.numSpotMaps===x||(r.directional.length=h,r.spot.length=d,r.rectArea.length=p,r.point.length=u,r.hemi.length=m,r.directionalShadow.length=f,r.directionalShadowMap.length=f,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=v,r.spotShadowMap.length=v,r.directionalShadowMatrix.length=f,r.pointShadowMatrix.length=g,r.spotLightMatrix.length=v+x-_,r.spotLightMap.length=x,r.numSpotLightShadowsWithMaps=_,M.directionalLength=h,M.pointLength=u,M.spotLength=d,M.rectAreaLength=p,M.hemiLength=m,M.numDirectionalShadows=f,M.numPointShadows=g,M.numSpotShadows=v,M.numSpotMaps=x,r.version=Is++)},setupView:function(t,e){let i=0,n=0,l=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=r.directional[i];t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),i++}else if(d.isSpotLight){const t=r.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),l++}else if(d.isRectAreaLight){const t=r.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),o.identity(),a.copy(d.matrixWorld),a.premultiply(u),o.extractRotation(a),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(o),t.halfHeight.applyMatrix4(o),c++}else if(d.isPointLight){const t=r.point[n];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),n++}else if(d.isHemisphereLight){const t=r.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),h++}}},state:r}}function Os(t,e){const i=new Ns(t,e),n=[],r=[];return{init:function(){n.length=0,r.length=0},state:{lightsArray:n,shadowsArray:r,lights:i},setupLights:function(t){i.setup(n,t)},setupLightsView:function(t){i.setupView(n,t)},pushLight:function(t){n.push(t)},pushShadow:function(t){r.push(t)}}}function zs(t,e){let i=new WeakMap;return{get:function(n,r=0){const s=i.get(n);let a;return void 0===s?(a=new Os(t,e),i.set(n,[a])):r>=s.length?(a=new Os(t,e),s.push(a)):a=s[r],a},dispose:function(){i=new WeakMap}}}class Us extends xi{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class Bs extends xi{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new re,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function Fs(t,e,i){let n=new xn;const r=new Lt,s=new Lt,a=new Qt,o=new Us({depthPacking:3201}),l=new Bs,c={},h=i.maxTextureSize,u={0:1,1:0,2:2},p=new sn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Lt},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),m=p.clone();m.defines.HORIZONTAL_PASS=1;const f=new Di;f.setAttribute("position",new bi(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const g=new Ki(f,p),v=this;function x(i,n){const s=e.update(g);p.defines.VSM_SAMPLES!==i.blurSamples&&(p.defines.VSM_SAMPLES=i.blurSamples,m.defines.VSM_SAMPLES=i.blurSamples,p.needsUpdate=!0,m.needsUpdate=!0),null===i.mapPass&&(i.mapPass=new te(r.x,r.y)),p.uniforms.shadow_pass.value=i.map.texture,p.uniforms.resolution.value=i.mapSize,p.uniforms.radius.value=i.radius,t.setRenderTarget(i.mapPass),t.clear(),t.renderBufferDirect(n,null,s,p,g,null),m.uniforms.shadow_pass.value=i.mapPass.texture,m.uniforms.resolution.value=i.mapSize,m.uniforms.radius.value=i.radius,t.setRenderTarget(i.map),t.clear(),t.renderBufferDirect(n,null,s,m,g,null)}function _(e,i,n,r,s,a){let h=null;const d=!0===n.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(h=void 0!==d?d:!0===n.isPointLight?l:o,t.localClippingEnabled&&!0===i.clipShadows&&Array.isArray(i.clippingPlanes)&&0!==i.clippingPlanes.length||i.displacementMap&&0!==i.displacementScale||i.alphaMap&&i.alphaTest>0||i.map&&i.alphaTest>0){const t=h.uuid,e=i.uuid;let n=c[t];void 0===n&&(n={},c[t]=n);let r=n[e];void 0===r&&(r=h.clone(),n[e]=r),h=r}return h.visible=i.visible,h.wireframe=i.wireframe,h.side=3===a?null!==i.shadowSide?i.shadowSide:i.side:null!==i.shadowSide?i.shadowSide:u[i.side],h.alphaMap=i.alphaMap,h.alphaTest=i.alphaTest,h.map=i.map,h.clipShadows=i.clipShadows,h.clippingPlanes=i.clippingPlanes,h.clipIntersection=i.clipIntersection,h.displacementMap=i.displacementMap,h.displacementScale=i.displacementScale,h.displacementBias=i.displacementBias,h.wireframeLinewidth=i.wireframeLinewidth,h.linewidth=i.linewidth,!0===n.isPointLight&&!0===h.isMeshDistanceMaterial&&(h.referencePosition.setFromMatrixPosition(n.matrixWorld),h.nearDistance=r,h.farDistance=s),h}function y(i,r,s,a,o){if(!1===i.visible)return;if(i.layers.test(r.layers)&&(i.isMesh||i.isLine||i.isPoints)&&(i.castShadow||i.receiveShadow&&3===o)&&(!i.frustumCulled||n.intersectsObject(i))){i.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,i.matrixWorld);const n=e.update(i),r=i.material;if(Array.isArray(r)){const e=n.groups;for(let l=0,c=e.length;l<c;l++){const c=e[l],h=r[c.materialIndex];if(h&&h.visible){const e=_(i,h,a,s.near,s.far,o);t.renderBufferDirect(s,null,n,e,i,c)}}}else if(r.visible){const e=_(i,r,a,s.near,s.far,o);t.renderBufferDirect(s,null,n,e,i,null)}}const l=i.children;for(let t=0,e=l.length;t<e;t++)y(l[t],r,s,a,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,i,o){if(!1===v.enabled)return;if(!1===v.autoUpdate&&!1===v.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),c=t.getActiveCubeFace(),u=t.getActiveMipmapLevel(),p=t.state;p.setBlending(0),p.buffers.color.setClear(1,1,1,1),p.buffers.depth.setTest(!0),p.setScissorTest(!1);for(let l=0,c=e.length;l<c;l++){const c=e[l],u=c.shadow;if(void 0===u){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(!1===u.autoUpdate&&!1===u.needsUpdate)continue;r.copy(u.mapSize);const m=u.getFrameExtents();if(r.multiply(m),s.copy(u.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(s.x=Math.floor(h/m.x),r.x=s.x*m.x,u.mapSize.x=s.x),r.y>h&&(s.y=Math.floor(h/m.y),r.y=s.y*m.y,u.mapSize.y=s.y)),null===u.map){const t=3!==this.type?{minFilter:d,magFilter:d}:{};u.map=new te(r.x,r.y,t),u.map.texture.name=c.name+".shadowMap",u.camera.updateProjectionMatrix()}t.setRenderTarget(u.map),t.clear();const f=u.getViewportCount();for(let t=0;t<f;t++){const e=u.getViewport(t);a.set(s.x*e.x,s.y*e.y,s.x*e.z,s.y*e.w),p.viewport(a),u.updateMatrices(c,t),n=u.getFrustum(),y(i,o,u.camera,c,this.type)}!0!==u.isPointLightShadow&&3===this.type&&x(u,o),u.needsUpdate=!1}v.needsUpdate=!1,t.setRenderTarget(l,c,u)}}function ks(t,e,n){const r=n.isWebGL2;const s=new function(){let e=!1;const i=new Qt;let n=null;const r=new Qt(0,0,0,0);return{setMask:function(i){n===i||e||(t.colorMask(i,i,i,i),n=i)},setLocked:function(t){e=t},setClear:function(e,n,s,a,o){!0===o&&(e*=a,n*=a,s*=a),i.set(e,n,s,a),!1===r.equals(i)&&(t.clearColor(e,n,s,a),r.copy(i))},reset:function(){e=!1,n=null,r.set(-1,0,0,0)}}},a=new function(){let e=!1,i=null,n=null,r=null;return{setTest:function(t){t?G(2929):V(2929)},setMask:function(n){i===n||e||(t.depthMask(n),i=n)},setFunc:function(e){if(n!==e){switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:default:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517)}n=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,i=null,n=null,r=null}}},o=new function(){let e=!1,i=null,n=null,r=null,s=null,a=null,o=null,l=null,c=null;return{setTest:function(t){e||(t?G(2960):V(2960))},setMask:function(n){i===n||e||(t.stencilMask(n),i=n)},setFunc:function(e,i,a){n===e&&r===i&&s===a||(t.stencilFunc(e,i,a),n=e,r=i,s=a)},setOp:function(e,i,n){a===e&&o===i&&l===n||(t.stencilOp(e,i,n),a=e,o=i,l=n)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,i=null,n=null,r=null,s=null,a=null,o=null,l=null,c=null}}},l=new WeakMap,c=new WeakMap;let h={},u={},d=new WeakMap,p=[],m=null,f=!1,g=null,v=null,x=null,_=null,y=null,M=null,b=null,w=!1,S=null,T=null,A=null,E=null,C=null;const L=t.getParameter(35661);let R=!1,P=0;const I=t.getParameter(7938);-1!==I.indexOf("WebGL")?(P=parseFloat(/^WebGL (\d)/.exec(I)[1]),R=P>=1):-1!==I.indexOf("OpenGL ES")&&(P=parseFloat(/^OpenGL ES (\d)/.exec(I)[1]),R=P>=2);let D=null,N={};const O=t.getParameter(3088),z=t.getParameter(2978),U=(new Qt).fromArray(O),B=(new Qt).fromArray(z);function F(e,i,n){const r=new Uint8Array(4),s=t.createTexture();t.bindTexture(e,s),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<n;e++)t.texImage2D(i+e,0,6408,1,1,0,6408,5121,r);return s}const k={};function G(e){!0!==h[e]&&(t.enable(e),h[e]=!0)}function V(e){!1!==h[e]&&(t.disable(e),h[e]=!1)}k[3553]=F(3553,3553,1),k[34067]=F(34067,34069,6),s.setClear(0,0,0,1),a.setClear(1),o.setClear(0),G(2929),a.setFunc(3),q(!1),X(1),G(2884),j(0);const H={[i]:32774,101:32778,102:32779};if(r)H[103]=32775,H[104]=32776;else{const t=e.get("EXT_blend_minmax");null!==t&&(H[103]=t.MIN_EXT,H[104]=t.MAX_EXT)}const W={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function j(e,n,r,s,a,o,l,c){if(0!==e){if(!1===f&&(G(3042),f=!0),5===e)a=a||n,o=o||r,l=l||s,n===v&&a===y||(t.blendEquationSeparate(H[n],H[a]),v=n,y=a),r===x&&s===_&&o===M&&l===b||(t.blendFuncSeparate(W[r],W[s],W[o],W[l]),x=r,_=s,M=o,b=l),g=e,w=!1;else if(e!==g||c!==w){if(v===i&&y===i||(t.blendEquation(32774),v=i,y=i),c)switch(e){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}x=null,_=null,M=null,b=null,g=e,w=c}}else!0===f&&(V(3042),f=!1)}function q(e){S!==e&&(e?t.frontFace(2304):t.frontFace(2305),S=e)}function X(e){0!==e?(G(2884),e!==T&&(1===e?t.cullFace(1029):2===e?t.cullFace(1028):t.cullFace(1032))):V(2884),T=e}function Y(e,i,n){e?(G(32823),E===i&&C===n||(t.polygonOffset(i,n),E=i,C=n)):V(32823)}return{buffers:{color:s,depth:a,stencil:o},enable:G,disable:V,bindFramebuffer:function(e,i){return u[e]!==i&&(t.bindFramebuffer(e,i),u[e]=i,r&&(36009===e&&(u[36160]=i),36160===e&&(u[36009]=i)),!0)},drawBuffers:function(i,r){let s=p,a=!1;if(i)if(s=d.get(r),void 0===s&&(s=[],d.set(r,s)),i.isWebGLMultipleRenderTargets){const t=i.texture;if(s.length!==t.length||36064!==s[0]){for(let e=0,i=t.length;e<i;e++)s[e]=36064+e;s.length=t.length,a=!0}}else 36064!==s[0]&&(s[0]=36064,a=!0);else 1029!==s[0]&&(s[0]=1029,a=!0);a&&(n.isWebGL2?t.drawBuffers(s):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(s))},useProgram:function(e){return m!==e&&(t.useProgram(e),m=e,!0)},setBlending:j,setMaterial:function(t,e){2===t.side?V(2884):G(2884);let i=1===t.side;e&&(i=!i),q(i),1===t.blending&&!1===t.transparent?j(0):j(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),s.setMask(t.colorWrite);const n=t.stencilWrite;o.setTest(n),n&&(o.setMask(t.stencilWriteMask),o.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),o.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),Y(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?G(32926):V(32926)},setFlipSided:q,setCullFace:X,setLineWidth:function(e){e!==A&&(R&&t.lineWidth(e),A=e)},setPolygonOffset:Y,setScissorTest:function(t){t?G(3089):V(3089)},activeTexture:function(e){void 0===e&&(e=33984+L-1),D!==e&&(t.activeTexture(e),D=e)},bindTexture:function(e,i,n){void 0===n&&(n=null===D?33984+L-1:D);let r=N[n];void 0===r&&(r={type:void 0,texture:void 0},N[n]=r),r.type===e&&r.texture===i||(D!==n&&(t.activeTexture(n),D=n),t.bindTexture(e,i||k[e]),r.type=e,r.texture=i)},unbindTexture:function(){const e=N[D];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexImage3D:function(){try{t.compressedTexImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},updateUBOMapping:function(e,i){let n=c.get(i);void 0===n&&(n=new WeakMap,c.set(i,n));let r=n.get(e);void 0===r&&(r=t.getUniformBlockIndex(i,e.name),n.set(e,r))},uniformBlockBinding:function(e,i){const n=c.get(i).get(e);l.get(e)!==n&&(t.uniformBlockBinding(i,n,e.__bindingPointIndex),l.set(e,n))},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage3D:function(){try{t.compressedTexSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===U.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),U.copy(e))},viewport:function(e){!1===B.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),B.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===r&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),h={},D=null,N={},u={},d=new WeakMap,p=[],m=null,f=!1,g=null,v=null,x=null,_=null,y=null,M=null,b=null,w=!1,S=null,T=null,A=null,E=null,C=null,U.set(0,0,t.canvas.width,t.canvas.height),B.set(0,0,t.canvas.width,t.canvas.height),s.reset(),a.reset(),o.reset()}}}function Gs(t,e,i,n,r,s,a){const o=r.isWebGL2,l=r.maxTextures,E=r.maxCubemapSize,C=r.maxTextureSize,L=r.maxSamples,R=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,P="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),I=new WeakMap;let D;const N=new WeakMap;let O=!1;try{O="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function z(t,e){return O?new OffscreenCanvas(t,e):Ot("canvas")}function U(t,e,i,n){let r=1;if((t.width>n||t.height>n)&&(r=n/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const n=e?Tt:Math.floor,s=n(r*t.width),a=n(r*t.height);void 0===D&&(D=z(s,a));const o=i?z(s,a):D;o.width=s,o.height=a;return o.getContext("2d").drawImage(t,0,0,s,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+s+"x"+a+")."),o}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function B(t){return wt(t.width)&&wt(t.height)}function F(t,e){return t.generateMipmaps&&e&&t.minFilter!==d&&t.minFilter!==f}function k(e){t.generateMipmap(e)}function G(i,n,r,s,a=!1){if(!1===o)return n;if(null!==i){if(void 0!==t[i])return t[i];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+i+"'")}let l=n;return 6403===n&&(5126===r&&(l=33326),5131===r&&(l=33325),5121===r&&(l=33321)),33319===n&&(5126===r&&(l=33328),5131===r&&(l=33327),5121===r&&(l=33323)),6408===n&&(5126===r&&(l=34836),5131===r&&(l=34842),5121===r&&(l=s===ot&&!1===a?35907:32856),32819===r&&(l=32854),32820===r&&(l=32855)),33325!==l&&33326!==l&&33327!==l&&33328!==l&&34842!==l&&34836!==l||e.get("EXT_color_buffer_float"),l}function V(t,e,i){return!0===F(t,i)||t.isFramebufferTexture&&t.minFilter!==d&&t.minFilter!==f?Math.log2(Math.max(e.width,e.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?e.mipmaps.length:1}function H(t){return t===d||t===p||t===m?9728:9729}function W(t){const e=t.target;e.removeEventListener("dispose",W),function(t){const e=n.get(t);if(void 0===e.__webglInit)return;const i=t.source,r=N.get(i);if(r){const n=r[e.__cacheKey];n.usedTimes--,0===n.usedTimes&&q(t),0===Object.keys(r).length&&N.delete(i)}n.remove(t)}(e),e.isVideoTexture&&I.delete(e)}function j(e){const i=e.target;i.removeEventListener("dispose",j),function(e){const i=e.texture,r=n.get(e),s=n.get(i);void 0!==s.__webglTexture&&(t.deleteTexture(s.__webglTexture),a.memory.textures--);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e]);else{if(t.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer)for(let e=0;e<r.__webglColorRenderbuffer.length;e++)r.__webglColorRenderbuffer[e]&&t.deleteRenderbuffer(r.__webglColorRenderbuffer[e]);r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer)}if(e.isWebGLMultipleRenderTargets)for(let e=0,r=i.length;e<r;e++){const r=n.get(i[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),a.memory.textures--),n.remove(i[e])}n.remove(i),n.remove(e)}(i)}function q(e){const i=n.get(e);t.deleteTexture(i.__webglTexture);const r=e.source;delete N.get(r)[i.__cacheKey],a.memory.textures--}let X=0;function Y(t,e){const r=n.get(t);if(t.isVideoTexture&&function(t){const e=a.render.frame;I.get(t)!==e&&(I.set(t,e),t.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&r.__version!==t.version){const i=t.image;if(null===i)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==i.complete)return void Q(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}i.bindTexture(3553,r.__webglTexture,33984+e)}const Z={[c]:10497,[h]:33071,[u]:33648},J={[d]:9728,[p]:9984,[m]:9986,[f]:9729,[g]:9985,[v]:9987};function K(i,s,a){if(a?(t.texParameteri(i,10242,Z[s.wrapS]),t.texParameteri(i,10243,Z[s.wrapT]),32879!==i&&35866!==i||t.texParameteri(i,32882,Z[s.wrapR]),t.texParameteri(i,10240,J[s.magFilter]),t.texParameteri(i,10241,J[s.minFilter])):(t.texParameteri(i,10242,33071),t.texParameteri(i,10243,33071),32879!==i&&35866!==i||t.texParameteri(i,32882,33071),s.wrapS===h&&s.wrapT===h||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(i,10240,H(s.magFilter)),t.texParameteri(i,10241,H(s.minFilter)),s.minFilter!==d&&s.minFilter!==f&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const a=e.get("EXT_texture_filter_anisotropic");if(s.type===M&&!1===e.has("OES_texture_float_linear"))return;if(!1===o&&s.type===b&&!1===e.has("OES_texture_half_float_linear"))return;(s.anisotropy>1||n.get(s).__currentAnisotropy)&&(t.texParameterf(i,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(s.anisotropy,r.getMaxAnisotropy())),n.get(s).__currentAnisotropy=s.anisotropy)}}function $(e,i){let n=!1;void 0===e.__webglInit&&(e.__webglInit=!0,i.addEventListener("dispose",W));const r=i.source;let s=N.get(r);void 0===s&&(s={},N.set(r,s));const o=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.wrapR||0),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.encoding),e.join()}(i);if(o!==e.__cacheKey){void 0===s[o]&&(s[o]={texture:t.createTexture(),usedTimes:0},a.memory.textures++,n=!0),s[o].usedTimes++;const r=s[e.__cacheKey];void 0!==r&&(s[e.__cacheKey].usedTimes--,0===r.usedTimes&&q(i)),e.__cacheKey=o,e.__webglTexture=s[o].texture}return n}function Q(e,r,a){let l=3553;(r.isDataArrayTexture||r.isCompressedArrayTexture)&&(l=35866),r.isData3DTexture&&(l=32879);const c=$(e,r),u=r.source;i.bindTexture(l,e.__webglTexture,33984+a);const p=n.get(u);if(u.version!==p.__version||!0===c){i.activeTexture(33984+a),t.pixelStorei(37440,r.flipY),t.pixelStorei(37441,r.premultiplyAlpha),t.pixelStorei(3317,r.unpackAlignment),t.pixelStorei(37443,0);const e=function(t){return!o&&(t.wrapS!==h||t.wrapT!==h||t.minFilter!==d&&t.minFilter!==f)}(r)&&!1===B(r.image);let n=U(r.image,e,!1,C);n=st(r,n);const m=B(n)||o,g=s.convert(r.format,r.encoding);let v,x=s.convert(r.type),b=G(r.internalFormat,g,x,r.encoding,r.isVideoTexture);K(l,r,m);const E=r.mipmaps,L=o&&!0!==r.isVideoTexture,R=void 0===p.__version||!0===c,P=V(r,n,m);if(r.isDepthTexture)b=6402,o?b=r.type===M?36012:r.type===y?33190:r.type===w?35056:33189:r.type===M&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),r.format===T&&6402===b&&r.type!==_&&r.type!==y&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=y,x=s.convert(r.type)),r.format===A&&6402===b&&(b=34041,r.type!==w&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=w,x=s.convert(r.type))),R&&(L?i.texStorage2D(3553,1,b,n.width,n.height):i.texImage2D(3553,0,b,n.width,n.height,0,g,x,null));else if(r.isDataTexture)if(E.length>0&&m){L&&R&&i.texStorage2D(3553,P,b,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)v=E[t],L?i.texSubImage2D(3553,t,0,0,v.width,v.height,g,x,v.data):i.texImage2D(3553,t,b,v.width,v.height,0,g,x,v.data);r.generateMipmaps=!1}else L?(R&&i.texStorage2D(3553,P,b,n.width,n.height),i.texSubImage2D(3553,0,0,0,n.width,n.height,g,x,n.data)):i.texImage2D(3553,0,b,n.width,n.height,0,g,x,n.data);else if(r.isCompressedTexture)if(r.isCompressedArrayTexture){L&&R&&i.texStorage3D(35866,P,b,E[0].width,E[0].height,n.depth);for(let t=0,e=E.length;t<e;t++)v=E[t],r.format!==S?null!==g?L?i.compressedTexSubImage3D(35866,t,0,0,0,v.width,v.height,n.depth,g,v.data,0,0):i.compressedTexImage3D(35866,t,b,v.width,v.height,n.depth,0,v.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):L?i.texSubImage3D(35866,t,0,0,0,v.width,v.height,n.depth,g,x,v.data):i.texImage3D(35866,t,b,v.width,v.height,n.depth,0,g,x,v.data)}else{L&&R&&i.texStorage2D(3553,P,b,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)v=E[t],r.format!==S?null!==g?L?i.compressedTexSubImage2D(3553,t,0,0,v.width,v.height,g,v.data):i.compressedTexImage2D(3553,t,b,v.width,v.height,0,v.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):L?i.texSubImage2D(3553,t,0,0,v.width,v.height,g,x,v.data):i.texImage2D(3553,t,b,v.width,v.height,0,g,x,v.data)}else if(r.isDataArrayTexture)L?(R&&i.texStorage3D(35866,P,b,n.width,n.height,n.depth),i.texSubImage3D(35866,0,0,0,0,n.width,n.height,n.depth,g,x,n.data)):i.texImage3D(35866,0,b,n.width,n.height,n.depth,0,g,x,n.data);else if(r.isData3DTexture)L?(R&&i.texStorage3D(32879,P,b,n.width,n.height,n.depth),i.texSubImage3D(32879,0,0,0,0,n.width,n.height,n.depth,g,x,n.data)):i.texImage3D(32879,0,b,n.width,n.height,n.depth,0,g,x,n.data);else if(r.isFramebufferTexture){if(R)if(L)i.texStorage2D(3553,P,b,n.width,n.height);else{let t=n.width,e=n.height;for(let n=0;n<P;n++)i.texImage2D(3553,n,b,t,e,0,g,x,null),t>>=1,e>>=1}}else if(E.length>0&&m){L&&R&&i.texStorage2D(3553,P,b,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)v=E[t],L?i.texSubImage2D(3553,t,0,0,g,x,v):i.texImage2D(3553,t,b,g,x,v);r.generateMipmaps=!1}else L?(R&&i.texStorage2D(3553,P,b,n.width,n.height),i.texSubImage2D(3553,0,0,0,g,x,n)):i.texImage2D(3553,0,b,g,x,n);F(r,m)&&k(l),p.__version=u.version,r.onUpdate&&r.onUpdate(r)}e.__version=r.version}function tt(e,r,a,o,l){const c=s.convert(a.format,a.encoding),h=s.convert(a.type),u=G(a.internalFormat,c,h,a.encoding);n.get(r).__hasExternalTextures||(32879===l||35866===l?i.texImage3D(l,0,u,r.width,r.height,r.depth,0,c,h,null):i.texImage2D(l,0,u,r.width,r.height,0,c,h,null)),i.bindFramebuffer(36160,e),rt(r)?R.framebufferTexture2DMultisampleEXT(36160,o,l,n.get(a).__webglTexture,0,nt(r)):(3553===l||l>=34069&&l<=34074)&&t.framebufferTexture2D(36160,o,l,n.get(a).__webglTexture,0),i.bindFramebuffer(36160,null)}function et(e,i,n){if(t.bindRenderbuffer(36161,e),i.depthBuffer&&!i.stencilBuffer){let r=33189;if(n||rt(i)){const e=i.depthTexture;e&&e.isDepthTexture&&(e.type===M?r=36012:e.type===y&&(r=33190));const n=nt(i);rt(i)?R.renderbufferStorageMultisampleEXT(36161,n,r,i.width,i.height):t.renderbufferStorageMultisample(36161,n,r,i.width,i.height)}else t.renderbufferStorage(36161,r,i.width,i.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(i.depthBuffer&&i.stencilBuffer){const r=nt(i);n&&!1===rt(i)?t.renderbufferStorageMultisample(36161,r,35056,i.width,i.height):rt(i)?R.renderbufferStorageMultisampleEXT(36161,r,35056,i.width,i.height):t.renderbufferStorage(36161,34041,i.width,i.height),t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===i.isWebGLMultipleRenderTargets?i.texture:[i.texture];for(let r=0;r<e.length;r++){const a=e[r],o=s.convert(a.format,a.encoding),l=s.convert(a.type),c=G(a.internalFormat,o,l,a.encoding),h=nt(i);n&&!1===rt(i)?t.renderbufferStorageMultisample(36161,h,c,i.width,i.height):rt(i)?R.renderbufferStorageMultisampleEXT(36161,h,c,i.width,i.height):t.renderbufferStorage(36161,c,i.width,i.height)}}t.bindRenderbuffer(36161,null)}function it(e){const r=n.get(e),s=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(s)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(i.bindFramebuffer(36160,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),Y(r.depthTexture,0);const s=n.get(r.depthTexture).__webglTexture,a=nt(r);if(r.depthTexture.format===T)rt(r)?R.framebufferTexture2DMultisampleEXT(36160,36096,3553,s,0,a):t.framebufferTexture2D(36160,36096,3553,s,0);else{if(r.depthTexture.format!==A)throw new Error("Unknown depthTexture format");rt(r)?R.framebufferTexture2DMultisampleEXT(36160,33306,3553,s,0,a):t.framebufferTexture2D(36160,33306,3553,s,0)}}(r.__webglFramebuffer,e)}else if(s){r.__webglDepthbuffer=[];for(let n=0;n<6;n++)i.bindFramebuffer(36160,r.__webglFramebuffer[n]),r.__webglDepthbuffer[n]=t.createRenderbuffer(),et(r.__webglDepthbuffer[n],e,!1)}else i.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),et(r.__webglDepthbuffer,e,!1);i.bindFramebuffer(36160,null)}function nt(t){return Math.min(L,t.samples)}function rt(t){const i=n.get(t);return o&&t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==i.__useRenderToTexture}function st(t,i){const n=t.encoding,r=t.format,s=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||t.format===pt||n!==at&&(n===ot?!1===o?!0===e.has("EXT_sRGB")&&r===S?(t.format=pt,t.minFilter=f,t.generateMipmaps=!1):i=Yt.sRGBToLinear(i):r===S&&s===x||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",n)),i}this.allocateTextureUnit=function(){const t=X;return t>=l&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+l),X+=1,t},this.resetTextureUnits=function(){X=0},this.setTexture2D=Y,this.setTexture2DArray=function(t,e){const r=n.get(t);t.version>0&&r.__version!==t.version?Q(r,t,e):i.bindTexture(35866,r.__webglTexture,33984+e)},this.setTexture3D=function(t,e){const r=n.get(t);t.version>0&&r.__version!==t.version?Q(r,t,e):i.bindTexture(32879,r.__webglTexture,33984+e)},this.setTextureCube=function(e,r){const a=n.get(e);e.version>0&&a.__version!==e.version?function(e,r,a){if(6!==r.image.length)return;const l=$(e,r),c=r.source;i.bindTexture(34067,e.__webglTexture,33984+a);const h=n.get(c);if(c.version!==h.__version||!0===l){i.activeTexture(33984+a),t.pixelStorei(37440,r.flipY),t.pixelStorei(37441,r.premultiplyAlpha),t.pixelStorei(3317,r.unpackAlignment),t.pixelStorei(37443,0);const e=r.isCompressedTexture||r.image[0].isCompressedTexture,n=r.image[0]&&r.image[0].isDataTexture,u=[];for(let t=0;t<6;t++)u[t]=e||n?n?r.image[t].image:r.image[t]:U(r.image[t],!1,!0,E),u[t]=st(r,u[t]);const d=u[0],p=B(d)||o,m=s.convert(r.format,r.encoding),f=s.convert(r.type),g=G(r.internalFormat,m,f,r.encoding),v=o&&!0!==r.isVideoTexture,x=void 0===h.__version||!0===l;let _,y=V(r,d,p);if(K(34067,r,p),e){v&&x&&i.texStorage2D(34067,y,g,d.width,d.height);for(let t=0;t<6;t++){_=u[t].mipmaps;for(let e=0;e<_.length;e++){const n=_[e];r.format!==S?null!==m?v?i.compressedTexSubImage2D(34069+t,e,0,0,n.width,n.height,m,n.data):i.compressedTexImage2D(34069+t,e,g,n.width,n.height,0,n.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):v?i.texSubImage2D(34069+t,e,0,0,n.width,n.height,m,f,n.data):i.texImage2D(34069+t,e,g,n.width,n.height,0,m,f,n.data)}}}else{_=r.mipmaps,v&&x&&(_.length>0&&y++,i.texStorage2D(34067,y,g,u[0].width,u[0].height));for(let t=0;t<6;t++)if(n){v?i.texSubImage2D(34069+t,0,0,0,u[t].width,u[t].height,m,f,u[t].data):i.texImage2D(34069+t,0,g,u[t].width,u[t].height,0,m,f,u[t].data);for(let e=0;e<_.length;e++){const n=_[e].image[t].image;v?i.texSubImage2D(34069+t,e+1,0,0,n.width,n.height,m,f,n.data):i.texImage2D(34069+t,e+1,g,n.width,n.height,0,m,f,n.data)}}else{v?i.texSubImage2D(34069+t,0,0,0,m,f,u[t]):i.texImage2D(34069+t,0,g,m,f,u[t]);for(let e=0;e<_.length;e++){const n=_[e];v?i.texSubImage2D(34069+t,e+1,0,0,m,f,n.image[t]):i.texImage2D(34069+t,e+1,g,m,f,n.image[t])}}}F(r,p)&&k(34067),h.__version=c.version,r.onUpdate&&r.onUpdate(r)}e.__version=r.version}(a,e,r):i.bindTexture(34067,a.__webglTexture,33984+r)},this.rebindTextures=function(t,e,i){const r=n.get(t);void 0!==e&&tt(r.__webglFramebuffer,t,t.texture,36064,3553),void 0!==i&&it(t)},this.setupRenderTarget=function(e){const l=e.texture,c=n.get(e),h=n.get(l);e.addEventListener("dispose",j),!0!==e.isWebGLMultipleRenderTargets&&(void 0===h.__webglTexture&&(h.__webglTexture=t.createTexture()),h.__version=l.version,a.memory.textures++);const u=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=B(e)||o;if(u){c.__webglFramebuffer=[];for(let e=0;e<6;e++)c.__webglFramebuffer[e]=t.createFramebuffer()}else{if(c.__webglFramebuffer=t.createFramebuffer(),d)if(r.drawBuffers){const i=e.texture;for(let e=0,r=i.length;e<r;e++){const r=n.get(i[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),a.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(o&&e.samples>0&&!1===rt(e)){const n=d?l:[l];c.__webglMultisampledFramebuffer=t.createFramebuffer(),c.__webglColorRenderbuffer=[],i.bindFramebuffer(36160,c.__webglMultisampledFramebuffer);for(let i=0;i<n.length;i++){const r=n[i];c.__webglColorRenderbuffer[i]=t.createRenderbuffer(),t.bindRenderbuffer(36161,c.__webglColorRenderbuffer[i]);const a=s.convert(r.format,r.encoding),o=s.convert(r.type),l=G(r.internalFormat,a,o,r.encoding,!0===e.isXRRenderTarget),h=nt(e);t.renderbufferStorageMultisample(36161,h,l,e.width,e.height),t.framebufferRenderbuffer(36160,36064+i,36161,c.__webglColorRenderbuffer[i])}t.bindRenderbuffer(36161,null),e.depthBuffer&&(c.__webglDepthRenderbuffer=t.createRenderbuffer(),et(c.__webglDepthRenderbuffer,e,!0)),i.bindFramebuffer(36160,null)}}if(u){i.bindTexture(34067,h.__webglTexture),K(34067,l,p);for(let t=0;t<6;t++)tt(c.__webglFramebuffer[t],e,l,36064,34069+t);F(l,p)&&k(34067),i.unbindTexture()}else if(d){const t=e.texture;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=n.get(s);i.bindTexture(3553,a.__webglTexture),K(3553,s,p),tt(c.__webglFramebuffer,e,s,36064+r,3553),F(s,p)&&k(3553)}i.unbindTexture()}else{let t=3553;(e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(o?t=e.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),i.bindTexture(t,h.__webglTexture),K(t,l,p),tt(c.__webglFramebuffer,e,l,36064,t),F(l,p)&&k(t),i.unbindTexture()}e.depthBuffer&&it(e)},this.updateRenderTargetMipmap=function(t){const e=B(t)||o,r=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let s=0,a=r.length;s<a;s++){const a=r[s];if(F(a,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,r=n.get(a).__webglTexture;i.bindTexture(e,r),k(e),i.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(o&&e.samples>0&&!1===rt(e)){const r=e.isWebGLMultipleRenderTargets?e.texture:[e.texture],s=e.width,a=e.height;let o=16384;const l=[],c=e.stencilBuffer?33306:36096,h=n.get(e),u=!0===e.isWebGLMultipleRenderTargets;if(u)for(let e=0;e<r.length;e++)i.bindFramebuffer(36160,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064+e,36161,null),i.bindFramebuffer(36160,h.__webglFramebuffer),t.framebufferTexture2D(36009,36064+e,3553,null,0);i.bindFramebuffer(36008,h.__webglMultisampledFramebuffer),i.bindFramebuffer(36009,h.__webglFramebuffer);for(let i=0;i<r.length;i++){l.push(36064+i),e.depthBuffer&&l.push(c);const d=void 0!==h.__ignoreDepthValues&&h.__ignoreDepthValues;if(!1===d&&(e.depthBuffer&&(o|=256),e.stencilBuffer&&(o|=1024)),u&&t.framebufferRenderbuffer(36008,36064,36161,h.__webglColorRenderbuffer[i]),!0===d&&(t.invalidateFramebuffer(36008,[c]),t.invalidateFramebuffer(36009,[c])),u){const e=n.get(r[i]).__webglTexture;t.framebufferTexture2D(36009,36064,3553,e,0)}t.blitFramebuffer(0,0,s,a,0,0,s,a,o,9728),P&&t.invalidateFramebuffer(36008,l)}if(i.bindFramebuffer(36008,null),i.bindFramebuffer(36009,null),u)for(let e=0;e<r.length;e++){i.bindFramebuffer(36160,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064+e,36161,h.__webglColorRenderbuffer[e]);const s=n.get(r[e]).__webglTexture;i.bindFramebuffer(36160,h.__webglFramebuffer),t.framebufferTexture2D(36009,36064+e,3553,s,0)}i.bindFramebuffer(36009,h.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=it,this.setupFrameBufferTexture=tt,this.useMultisampledRTT=rt}function Vs(t,e,i){const n=i.isWebGL2;return{convert:function(i,r=null){let s;if(i===x)return 5121;if(1017===i)return 32819;if(1018===i)return 32820;if(1010===i)return 5120;if(1011===i)return 5122;if(i===_)return 5123;if(1013===i)return 5124;if(i===y)return 5125;if(i===M)return 5126;if(i===b)return n?5131:(s=e.get("OES_texture_half_float"),null!==s?s.HALF_FLOAT_OES:null);if(1021===i)return 6406;if(i===S)return 6408;if(1024===i)return 6409;if(1025===i)return 6410;if(i===T)return 6402;if(i===A)return 34041;if(1022===i)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(i===pt)return s=e.get("EXT_sRGB"),null!==s?s.SRGB_ALPHA_EXT:null;if(1028===i)return 6403;if(1029===i)return 36244;if(1030===i)return 33319;if(1031===i)return 33320;if(1033===i)return 36249;if(i===E||i===C||i===L||i===R)if(r===ot){if(s=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===s)return null;if(i===E)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(i===C)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(i===L)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(i===R)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(s=e.get("WEBGL_compressed_texture_s3tc"),null===s)return null;if(i===E)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(i===C)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(i===L)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(i===R)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(i===P||i===I||i===D||i===N){if(s=e.get("WEBGL_compressed_texture_pvrtc"),null===s)return null;if(i===P)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(i===I)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(i===D)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(i===N)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===i)return s=e.get("WEBGL_compressed_texture_etc1"),null!==s?s.COMPRESSED_RGB_ETC1_WEBGL:null;if(i===O||i===z){if(s=e.get("WEBGL_compressed_texture_etc"),null===s)return null;if(i===O)return r===ot?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(i===z)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}if(i===U||i===B||i===F||i===k||i===G||i===V||i===H||i===W||i===j||i===q||i===X||i===Y||i===Z||i===J){if(s=e.get("WEBGL_compressed_texture_astc"),null===s)return null;if(i===U)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(i===B)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(i===F)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(i===k)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(i===G)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(i===V)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(i===H)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(i===W)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(i===j)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(i===q)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(i===X)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(i===Y)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(i===Z)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(i===J)return r===ot?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}if(i===K){if(s=e.get("EXT_texture_compression_bptc"),null===s)return null;if(i===K)return r===ot?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT}return i===w?n?34042:(s=e.get("WEBGL_depth_texture"),null!==s?s.UNSIGNED_INT_24_8_WEBGL:null):void 0!==t[i]?t[i]:null}}}class Hs extends si{constructor(){super(),this.isGroup=!0,this.type="Group"}}class Ws extends on{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}var js=new re,qs=new re;function Xs(t){var e,i,n=this,r=null,s=null,a=null,o=[],l=new Ne,c=new Ne,h=1,u="local-floor";"undefined"!=typeof window&&"VRFrameData"in window&&(s=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",y,!1));var d=new Ne,p=new ne,m=new re,f=new on;f.viewport=new Qt,f.layers.enable(1);var g=new on;g.viewport=new Qt,g.layers.enable(2);var v=new Ws([f,g]);v.layers.enable(1),v.layers.enable(2);var x,_=new Lt;function y(){if(n.isPresenting=null!==r&&!0===r.isPresenting){var s=r.getEyeParameters("left");e=2*s.renderWidth*h,i=s.renderHeight*h,x=t.getPixelRatio(),t.getSize(_),t.setDrawingBufferSize(e,i,1),f.viewport.set(0,0,e/2,i),g.viewport.set(e/2,0,e/2,i),T.start(),n.dispatchEvent({type:"sessionstart"})}else n.enabled&&t.setDrawingBufferSize(_.width,_.height,x),T.stop(),n.dispatchEvent({type:"sessionend"})}var M=[],b=[];function w(t){for(var e=navigator.getGamepads&&navigator.getGamepads(),i=0,n=e.length;i<n;i++){var r=e[i];if(r&&("Daydream Controller"===r.id||"Gear VR Controller"===r.id||"Oculus Go Controller"===r.id||"OpenVR Gamepad"===r.id||r.id.startsWith("Oculus Touch")||r.id.startsWith("HTC Vive Focus")||r.id.startsWith("Spatial Controller"))){var s=r.hand;if(0===t&&(""===s||"right"===s))return r;if(1===t&&"left"===s)return r}}}function S(t,n){null!==n&&4===n.length&&t.set(n[0]*e,n[1]*i,n[2]*e,n[3]*i)}this.enabled=!1,this.getController=function(t){var e=o[t];return void 0===e&&((e=new Hs).matrixAutoUpdate=!1,e.visible=!1,o[t]=e),e},this.getDevice=function(){return r},this.setDevice=function(t){void 0!==t&&(r=t),T.setContext(t)},this.setFramebufferScaleFactor=function(t){h=t},this.setReferenceSpaceType=function(t){u=t},this.setPoseTarget=function(t){void 0!==t&&(a=t)},this.cameraAutoUpdate=!0,this.updateCamera=function(t){var e="local-floor"===u?1.6:0;if(r.depthNear=t.near,r.depthFar=t.far,r.getFrameData(s),"local-floor"===u){var i=r.stageParameters;i?l.fromArray(i.sittingToStandingTransform):l.makeTranslation(0,e,0)}var n=s.pose,h=null!==a?a:t;h.matrix.copy(l),h.matrix.decompose(h.position,h.quaternion,h.scale),null!==n.orientation&&(p.fromArray(n.orientation),h.quaternion.multiply(p)),null!==n.position&&(p.setFromRotationMatrix(l),m.fromArray(n.position),m.applyQuaternion(p),h.position.add(m)),h.updateMatrixWorld();for(var x=h.children,_=0,y=x.length;_<y;_++)x[_].updateMatrixWorld(!0);f.near=t.near,g.near=t.near,f.far=t.far,g.far=t.far,f.matrixWorldInverse.fromArray(s.leftViewMatrix),g.matrixWorldInverse.fromArray(s.rightViewMatrix),c.copy(l).invert(),"local-floor"===u&&(f.matrixWorldInverse.multiply(c),g.matrixWorldInverse.multiply(c));var T=h.parent;null!==T&&(d.copy(T.matrixWorld).invert(),f.matrixWorldInverse.multiply(d),g.matrixWorldInverse.multiply(d)),f.matrixWorld.copy(f.matrixWorldInverse).invert(),g.matrixWorld.copy(g.matrixWorldInverse).invert(),f.projectionMatrix.fromArray(s.leftProjectionMatrix),g.projectionMatrix.fromArray(s.rightProjectionMatrix),function(t,e,i){js.setFromMatrixPosition(e.matrixWorld),qs.setFromMatrixPosition(i.matrixWorld);var n=js.distanceTo(qs),r=e.projectionMatrix.elements,s=i.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(s[8]+1)/s[0],d=a*h,p=a*u,m=n/(-h+u),f=m*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();var g=a+m,v=o+m,x=d-f,_=p+(n-f),y=l*o/v*g,M=c*o/v*g;t.projectionMatrix.makePerspective(x,_,y,M,g,v)}(v,f,g);var A=r.getLayers();if(A.length){var E=A[0];S(f.viewport,E.leftBounds),S(g.viewport,E.rightBounds)}return function(){for(var t=0;t<o.length;t++){var e=o[t],i=w(t);if(void 0!==i&&void 0!==i.pose){if(null===i.pose)return;var n=i.pose;!1===n.hasPosition&&e.position.set(.2,-.6,-.05),null!==n.position&&e.position.fromArray(n.position),null!==n.orientation&&e.quaternion.fromArray(n.orientation),e.matrix.compose(e.position,e.quaternion,e.scale),e.matrix.premultiply(l),e.matrix.decompose(e.position,e.quaternion,e.scale),e.matrixWorldNeedsUpdate=!0,e.visible=!0;var r="Daydream Controller"===i.id?0:1;void 0===M[t]&&(M[t]=!1),M[t]!==i.buttons[r].pressed&&(M[t]=i.buttons[r].pressed,!0===M[t]?e.dispatchEvent({type:"selectstart"}):(e.dispatchEvent({type:"selectend"}),e.dispatchEvent({type:"select"}))),r=2,void 0===b[t]&&(b[t]=!1),void 0!==i.buttons[r]&&b[t]!==i.buttons[r].pressed&&(b[t]=i.buttons[r].pressed,!0===b[t]?e.dispatchEvent({type:"squeezestart"}):(e.dispatchEvent({type:"squeezeend"}),e.dispatchEvent({type:"squeeze"})))}else e.visible=!1}}(),v},this.getCamera=function(){return v},this.getFoveation=function(){return 1},this.setFoveation=function(t){1!==t&&console.warn("THREE.WebVRManager: setFoveation() not used in WebVR.")},this.getStandingMatrix=function(){return l},this.isPresenting=!1;var T=new _n;this.setAnimationLoop=function(t){T.setAnimationLoop(t),this.isPresenting&&T.start()},this.submitFrame=function(){this.isPresenting&&r.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",y)},this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}Object.assign(Xs.prototype,{addEventListener:mt.prototype.addEventListener,hasEventListener:mt.prototype.hasEventListener,removeEventListener:mt.prototype.removeEventListener,dispatchEvent:mt.prototype.dispatchEvent});const Ys={type:"move"};class Zs{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new Hs,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Hs,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new re,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new re),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Hs,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new re,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new re),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const i of t.hand.values())this._getHandJoint(e,i)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,i){let n=null,r=null,s=null;const a=this._targetRay,o=this._grip,l=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState){if(l&&t.hand){s=!0;for(const n of t.hand.values()){const t=e.getJointPose(n,i),r=this._getHandJoint(l,n);null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=t.radius),r.visible=null!==t}const n=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],a=n.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&a>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!l.inputState.pinching&&a<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,i),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));null!==a&&(n=e.getPose(t.targetRaySpace,i),null===n&&null!==r&&(n=r),null!==n&&(a.matrix.fromArray(n.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),n.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(n.linearVelocity)):a.hasLinearVelocity=!1,n.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(n.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(Ys)))}return null!==a&&(a.visible=null!==n),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==s),this}_getHandJoint(t,e){if(void 0===t.joints[e.jointName]){const i=new Hs;i.matrixAutoUpdate=!1,i.visible=!1,t.joints[e.jointName]=i,t.add(i)}return t.joints[e.jointName]}}class Js extends $t{constructor(t,e,i,n,r,s,a,o,l,c){if((c=void 0!==c?c:T)!==T&&c!==A)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===i&&c===T&&(i=y),void 0===i&&c===A&&(i=w),super(null,n,r,s,a,o,c,i,l),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=void 0!==a?a:d,this.minFilter=void 0!==o?o:d,this.flipY=!1,this.generateMipmaps=!1}}class Ks extends mt{constructor(t,e){super();const i=this;let n=null,r=1;var s=null;let a=null,o="local-floor",l=null,c=null;var h=[];let u=null,d=null,p=null,m=null;const f=e.getContextAttributes();let g=null,v=null;const _=[],M=[],b=new Set,E=new Map,C=new on;C.layers.enable(1),C.viewport=new Qt;const L=new on;L.layers.enable(2),L.viewport=new Qt;const R=[C,L],P=new Ws;P.layers.enable(1),P.layers.enable(2);let I=null,D=null;function N(t){const e=M.indexOf(t.inputSource);if(-1===e)return;const i=_[e];void 0!==i&&i.dispatchEvent({type:t.type,data:t.inputSource})}function O(){n.removeEventListener("select",N),n.removeEventListener("selectstart",N),n.removeEventListener("selectend",N),n.removeEventListener("squeeze",N),n.removeEventListener("squeezestart",N),n.removeEventListener("squeezeend",N),n.removeEventListener("end",O),n.removeEventListener("inputsourceschange",z);for(let t=0;t<_.length;t++){const e=M[t];null!==e&&(M[t]=null,_[t].disconnect(e))}I=null,D=null,t.setRenderTarget(g),p=null,d=null,u=null,n=null,v=null,G.stop(),i.isPresenting=!1,i.dispatchEvent({type:"sessionend"})}function z(t){for(let e=0;e<t.removed.length;e++){const i=t.removed[e],n=M.indexOf(i);n>=0&&(M[n]=null,_[n].disconnect(i))}for(let e=0;e<t.added.length;e++){const i=t.added[e];let n=M.indexOf(i);if(-1===n){for(let t=0;t<_.length;t++){if(t>=M.length){M.push(i),n=t;break}if(null===M[t]){M[t]=i,n=t;break}}if(-1===n)break}const r=_[n];r&&r.connect(i)}}this.cameraAutoUpdate=!0,this.layersEnabled=!1,this.enabled=!1,this.isPresenting=!1,this.getCameraPose=function(){return c},this.getController=function(t){let e=_[t];return void 0===e&&(e=new Zs,_[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=_[t];return void 0===e&&(e=new Zs,_[t]=e),e.getGripSpace()},this.getHand=function(t){let e=_[t];return void 0===e&&(e=new Zs,_[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){o=t,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||a},this.setReferenceSpace=function(t){l=t},this.getBaseLayer=function(){return null!==d?d:p},this.getBinding=function(){return u},this.getFrame=function(){return m},this.getSession=function(){return n},this.setSession=async function(s){if(n=s,null!==n){if(g=t.getRenderTarget(),n.addEventListener("select",N),n.addEventListener("selectstart",N),n.addEventListener("selectend",N),n.addEventListener("squeeze",N),n.addEventListener("squeezestart",N),n.addEventListener("squeezeend",N),n.addEventListener("end",O),n.addEventListener("inputsourceschange",z),!0!==f.xrCompatible&&await e.makeXRCompatible(),void 0===n.renderState.layers||!1===t.capabilities.isWebGL2){const i={antialias:void 0!==n.renderState.layers||f.antialias,alpha:f.alpha,depth:f.depth,stencil:f.stencil,framebufferScaleFactor:r};p=new XRWebGLLayer(n,e,i),n.updateRenderState({baseLayer:p}),v=new te(p.framebufferWidth,p.framebufferHeight,{format:S,type:x,encoding:t.outputEncoding,stencilBuffer:f.stencil})}else{let i=null,s=null,a=null;f.depth&&(a=f.stencil?35056:33190,i=f.stencil?A:T,s=f.stencil?w:y);const o={colorFormat:32856,depthFormat:a,scaleFactor:r};u=new XRWebGLBinding(n,e),d=u.createProjectionLayer(o),n.updateRenderState({layers:[d]}),v=new te(d.textureWidth,d.textureHeight,{format:S,type:x,depthTexture:new Js(d.textureWidth,d.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,i),stencilBuffer:f.stencil,encoding:t.outputEncoding,samples:f.antialias?4:0});t.properties.get(v).__ignoreDepthValues=d.ignoreDepthValues}v.isXRRenderTarget=!0,this.setFoveation(1),l=null,a=await n.requestReferenceSpace(o),G.setContext(n),G.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.addLayer=function(t){window.XRWebGLBinding&&this.layersEnabled&&n&&(h.push(t),this.updateLayers())},this.removeLayer=function(t){h.splice(h.indexOf(t),1),window.XRWebGLBinding&&this.layersEnabled&&n&&this.updateLayers()},this.updateLayers=function(){var t=h.map((function(t){return t}));t.unshift(n.renderState.layers[0]),n.updateRenderState({layers:t})};const U=new re,B=new re;function F(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.setPoseTarget=function(t){void 0!==t&&(s=t)},this.updateCamera=function(t){if(null===n)return;P.near=L.near=C.near=t.near,P.far=L.far=C.far=t.far,I===P.near&&D===P.far||(n.updateRenderState({depthNear:P.near,depthFar:P.far}),I=P.near,D=P.far);const e=P.cameras;var i=s||t;const r=i.parent;F(P,r);for(let t=0;t<e.length;t++)F(e[t],r);P.matrixWorld.decompose(P.position,P.quaternion,P.scale),i.matrixWorld.copy(P.matrixWorld),i.matrix.copy(P.matrix),i.matrix.decompose(i.position,i.quaternion,i.scale);const a=i.children;for(let t=0,e=a.length;t<e;t++)a[t].updateMatrixWorld(!0);2===e.length?function(t,e,i){U.setFromMatrixPosition(e.matrixWorld),B.setFromMatrixPosition(i.matrixWorld);const n=U.distanceTo(B),r=e.projectionMatrix.elements,s=i.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(s[8]+1)/s[0],d=a*h,p=a*u,m=n/(-h+u),f=m*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=a+m,v=o+m,x=d-f,_=p+(n-f),y=l*o/v*g,M=c*o/v*g;t.projectionMatrix.makePerspective(x,_,y,M,g,v)}(P,C,L):P.projectionMatrix.copy(C.projectionMatrix)},this.getCamera=function(){return P},this.getFoveation=function(){return null!==d?d.fixedFoveation:null!==p?p.fixedFoveation:void 0},this.setFoveation=function(t){null!==d&&(d.fixedFoveation=t),null!==p&&void 0!==p.fixedFoveation&&(p.fixedFoveation=t)},this.getPlanes=function(){return b};let k=null;const G=new _n;G.setAnimationLoop((function(e,n){if(c=n.getViewerPose(l||a),m=n,null!==c){const e=c.views;null!==p&&(t.setRenderTargetFramebuffer(v,p.framebuffer),t.setRenderTarget(v));let i=!1;e.length!==P.cameras.length&&(P.cameras.length=0,i=!0);for(let n=0;n<e.length;n++){const r=e[n];let s=null;if(null!==p)s=p.getViewport(r);else{const e=u.getViewSubImage(d,r);s=e.viewport,0===n&&(t.setRenderTargetTextures(v,e.colorTexture,d.ignoreDepthValues?void 0:e.depthStencilTexture),t.setRenderTarget(v))}let a=R[n];void 0===a&&(a=new on,a.layers.enable(n),a.viewport=new Qt,R[n]=a),a.matrix.fromArray(r.transform.matrix),a.projectionMatrix.fromArray(r.projectionMatrix),a.viewport.set(s.x,s.y,s.width,s.height),0===n&&P.matrix.copy(a.matrix),!0===i&&P.cameras.push(a)}}for(let t=0;t<_.length;t++){const e=M[t],i=_[t];null!==e&&void 0!==i&&i.update(e,n,l||a)}if(k&&k(e,n),n.detectedPlanes){i.dispatchEvent({type:"planesdetected",data:n.detectedPlanes});let t=null;for(const e of b)n.detectedPlanes.has(e)||(null===t&&(t=[]),t.push(e));if(null!==t)for(const e of t)b.delete(e),E.delete(e),i.dispatchEvent({type:"planeremoved",data:e});for(const t of n.detectedPlanes)if(b.has(t)){const e=E.get(t);t.lastChangedTime>e&&(E.set(t,t.lastChangedTime),i.dispatchEvent({type:"planechanged",data:t}))}else b.add(t),E.set(t,n.lastChangedTime),i.dispatchEvent({type:"planeadded",data:t})}m=null})),this.setAnimationLoop=function(t){k=t},this.dispose=function(){}}}function $s(t,e){function i(i,n){i.opacity.value=n.opacity,n.color&&i.diffuse.value.copy(n.color),n.emissive&&i.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(i.map.value=n.map),n.alphaMap&&(i.alphaMap.value=n.alphaMap),n.bumpMap&&(i.bumpMap.value=n.bumpMap,i.bumpScale.value=n.bumpScale,1===n.side&&(i.bumpScale.value*=-1)),n.displacementMap&&(i.displacementMap.value=n.displacementMap,i.displacementScale.value=n.displacementScale,i.displacementBias.value=n.displacementBias),n.emissiveMap&&(i.emissiveMap.value=n.emissiveMap),n.normalMap&&(i.normalMap.value=n.normalMap,i.normalScale.value.copy(n.normalScale),1===n.side&&i.normalScale.value.negate()),n.specularMap&&(i.specularMap.value=n.specularMap),n.alphaTest>0&&(i.alphaTest.value=n.alphaTest);const r=e.get(n).envMap;if(r&&(i.envMap.value=r,i.flipEnvMap.value=r.isCubeTexture&&!1===r.isRenderTargetTexture?-1:1,i.reflectivity.value=n.reflectivity,i.ior.value=n.ior,i.refractionRatio.value=n.refractionRatio),n.lightMap){i.lightMap.value=n.lightMap;const e=!0!==t.physicallyCorrectLights?Math.PI:1;i.lightMapIntensity.value=n.lightMapIntensity*e}let s,a;n.aoMap&&(i.aoMap.value=n.aoMap,i.aoMapIntensity.value=n.aoMapIntensity),n.map?s=n.map:n.specularMap?s=n.specularMap:n.displacementMap?s=n.displacementMap:n.normalMap?s=n.normalMap:n.bumpMap?s=n.bumpMap:n.roughnessMap?s=n.roughnessMap:n.metalnessMap?s=n.metalnessMap:n.alphaMap?s=n.alphaMap:n.emissiveMap?s=n.emissiveMap:n.clearcoatMap?s=n.clearcoatMap:n.clearcoatNormalMap?s=n.clearcoatNormalMap:n.clearcoatRoughnessMap?s=n.clearcoatRoughnessMap:n.iridescenceMap?s=n.iridescenceMap:n.iridescenceThicknessMap?s=n.iridescenceThicknessMap:n.specularIntensityMap?s=n.specularIntensityMap:n.specularColorMap?s=n.specularColorMap:n.transmissionMap?s=n.transmissionMap:n.thicknessMap?s=n.thicknessMap:n.sheenColorMap?s=n.sheenColorMap:n.sheenRoughnessMap&&(s=n.sheenRoughnessMap),void 0!==s&&(s.isWebGLRenderTarget&&(s=s.texture),!0===s.matrixAutoUpdate&&s.updateMatrix(),i.uvTransform.value.copy(s.matrix)),n.aoMap?a=n.aoMap:n.lightMap&&(a=n.lightMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),i.uv2Transform.value.copy(a.matrix))}return{refreshFogUniforms:function(e,i){i.color.getRGB(e.fogColor.value,nn(t)),i.isFog?(e.fogNear.value=i.near,e.fogFar.value=i.far):i.isFogExp2&&(e.fogDensity.value=i.density)},refreshMaterialUniforms:function(t,n,r,s,a){n.isMeshBasicMaterial||n.isMeshLambertMaterial?i(t,n):n.isMeshToonMaterial?(i(t,n),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(t,n)):n.isMeshPhongMaterial?(i(t,n),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4)}(t,n)):n.isMeshStandardMaterial?(i(t,n),function(t,i){t.roughness.value=i.roughness,t.metalness.value=i.metalness,i.roughnessMap&&(t.roughnessMap.value=i.roughnessMap);i.metalnessMap&&(t.metalnessMap.value=i.metalnessMap);e.get(i).envMap&&(t.envMapIntensity.value=i.envMapIntensity)}(t,n),n.isMeshPhysicalMaterial&&function(t,e,i){t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap));e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate()));e.iridescence>0&&(t.iridescence.value=e.iridescence,t.iridescenceIOR.value=e.iridescenceIOR,t.iridescenceThicknessMinimum.value=e.iridescenceThicknessRange[0],t.iridescenceThicknessMaximum.value=e.iridescenceThicknessRange[1],e.iridescenceMap&&(t.iridescenceMap.value=e.iridescenceMap),e.iridescenceThicknessMap&&(t.iridescenceThicknessMap.value=e.iridescenceThicknessMap));e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor));t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap);e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap)}(t,n,a)):n.isMeshMatcapMaterial?(i(t,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap)}(t,n)):n.isMeshDepthMaterial?i(t,n):n.isMeshDistanceMaterial?(i(t,n),function(t,e){t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,n)):n.isMeshNormalMaterial?i(t,n):n.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,n)):n.isPointsMaterial?function(t,e,i,n){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*i,t.scale.value=.5*n,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);e.alphaTest>0&&(t.alphaTest.value=e.alphaTest);let r;e.map?r=e.map:e.alphaMap&&(r=e.alphaMap);void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix))}(t,n,r,s):n.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);e.alphaTest>0&&(t.alphaTest.value=e.alphaTest);let i;e.map?i=e.map:e.alphaMap&&(i=e.alphaMap);void 0!==i&&(!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}(t,n):n.isShadowMaterial?(t.color.value.copy(n.color),t.opacity.value=n.opacity):n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)}}}function Qs(t,e,i,n){let r={},s={},a=[];const o=i.isWebGL2?t.getParameter(35375):0;function l(t,e,i){const n=t.value;if(void 0===i[e])return i[e]="number"==typeof n?n:n.clone(),!0;if("number"==typeof n){if(i[e]!==n)return i[e]=n,!0}else{const t=i[e];if(!1===t.equals(n))return t.copy(n),!0}return!1}function c(t){const e=t.value,i={boundary:0,storage:0};return"number"==typeof e?(i.boundary=4,i.storage=4):e.isVector2?(i.boundary=8,i.storage=8):e.isVector3||e.isColor?(i.boundary=16,i.storage=12):e.isVector4?(i.boundary=16,i.storage=16):e.isMatrix3?(i.boundary=48,i.storage=48):e.isMatrix4?(i.boundary=64,i.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),i}function h(e){const i=e.target;i.removeEventListener("dispose",h);const n=a.indexOf(i.__bindingPointIndex);a.splice(n,1),t.deleteBuffer(r[i.id]),delete r[i.id],delete s[i.id]}return{bind:function(t,e){const i=e.program;n.uniformBlockBinding(t,i)},update:function(i,u){let d=r[i.id];void 0===d&&(!function(t){const e=t.uniforms;let i=0;const n=16;let r=0;for(let t=0,s=e.length;t<s;t++){const s=e[t],a=c(s);if(s.__data=new Float32Array(a.storage/Float32Array.BYTES_PER_ELEMENT),s.__offset=i,t>0){r=i%n;const t=n-r;0!==r&&t-a.boundary<0&&(i+=n-r,s.__offset=i)}i+=a.storage}r=i%n,r>0&&(i+=n-r);t.__size=i,t.__cache={}}(i),d=function(e){const i=function(){for(let t=0;t<o;t++)if(-1===a.indexOf(t))return a.push(t),t;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();e.__bindingPointIndex=i;const n=t.createBuffer(),r=e.__size,s=e.usage;return t.bindBuffer(35345,n),t.bufferData(35345,r,s),t.bindBuffer(35345,null),t.bindBufferBase(35345,i,n),n}(i),r[i.id]=d,i.addEventListener("dispose",h));const p=u.program;n.updateUBOMapping(i,p);const m=e.render.frame;s[i.id]!==m&&(!function(e){const i=r[e.id],n=e.uniforms,s=e.__cache;t.bindBuffer(35345,i);for(let e=0,i=n.length;e<i;e++){const i=n[e];if(!0===l(i,e,s)){const e=i.value,n=i.__offset;"number"==typeof e?(i.__data[0]=e,t.bufferSubData(35345,n,i.__data)):(i.value.isMatrix3?(i.__data[0]=i.value.elements[0],i.__data[1]=i.value.elements[1],i.__data[2]=i.value.elements[2],i.__data[3]=i.value.elements[0],i.__data[4]=i.value.elements[3],i.__data[5]=i.value.elements[4],i.__data[6]=i.value.elements[5],i.__data[7]=i.value.elements[0],i.__data[8]=i.value.elements[6],i.__data[9]=i.value.elements[7],i.__data[10]=i.value.elements[8],i.__data[11]=i.value.elements[0]):e.toArray(i.__data),t.bufferSubData(35345,n,i.__data))}}t.bindBuffer(35345,null)}(i),s[i.id]=m)},dispose:function(){for(const e in r)t.deleteBuffer(r[e]);a=[],r={},s={}}}}function ta(t={}){this.isWebGLRenderer=!0;const e=void 0!==t.canvas?t.canvas:function(){const t=Ot("canvas");return t.style.display="block",t}(),i=void 0!==t.context?t.context:null,n=void 0===t.depth||t.depth,r=void 0===t.stencil||t.stencil,s=void 0!==t.antialias&&t.antialias,a=void 0===t.premultipliedAlpha||t.premultipliedAlpha,o=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,l=void 0!==t.powerPreference?t.powerPreference:"default",c=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let h;h=null!==i?i.getContextAttributes().alpha:void 0!==t.alpha&&t.alpha;let u=null,d=null;const p=[],m=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=at,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const f=this;let g=!1,_=0,y=0,w=null,T=-1,A=null;const E=new Qt,C=new Qt;let L=null,R=e.width,P=e.height,I=1,D=null,N=null;const O=new Qt(0,0,R,P),z=new Qt(0,0,R,P);let U=!1;const B=new xn;let F=!1,k=!1,G=null;const V=new Ne,H=new Lt,W=new re,j={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function q(){return null===w?I:1}let X,Y,Z,J,K,$,Q,tt,et,it,nt,rt,st,ot,lt,ct,ht,ut,dt,pt,mt,ft,gt,vt,xt=i;function _t(t,i){for(let n=0;n<t.length;n++){const r=t[n],s=e.getContext(r,i);if(null!==s)return s}return null}try{const t={alpha:!0,depth:n,stencil:r,antialias:s,premultipliedAlpha:a,preserveDrawingBuffer:o,powerPreference:l,failIfMajorPerformanceCaveat:c};if("setAttribute"in e&&e.setAttribute("data-engine","three.js r147"),e.addEventListener("webglcontextlost",bt,!1),e.addEventListener("webglcontextrestored",wt,!1),e.addEventListener("webglcontextcreationerror",St,!1),null===xt){const e=["webgl2","webgl","experimental-webgl"];if(!0===f.isWebGL1Renderer&&e.shift(),xt=_t(e,t),null===xt)throw _t(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===xt.getShaderPrecisionFormat&&(xt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function yt(){X=new Yn(xt),Y=new Ln(xt,X,t),X.init(Y),ft=new Vs(xt,X,Y),Z=new ks(xt,X,Y),J=new Kn,K=new As,$=new Gs(xt,X,Z,K,Y,ft,J),Q=new Pn(f),tt=new Xn(f),et=new yn(xt,Y),gt=new En(xt,X,et,Y),it=new Zn(xt,et,J,gt),nt=new er(xt,it,et,J),dt=new tr(xt,Y,$),ct=new Rn(K),rt=new Ts(f,Q,tt,X,Y,gt,ct),st=new $s(f,K),ot=new Rs,lt=new zs(X,Y),ut=new An(f,Q,tt,Z,nt,h,a),ht=new Fs(f,nt,Y),vt=new Qs(xt,J,Y,Z),pt=new Cn(xt,X,J,Y),mt=new Jn(xt,X,J,Y),J.programs=rt.programs,f.capabilities=Y,f.extensions=X,f.properties=K,f.renderLists=ot,f.shadowMap=ht,f.state=Z,f.info=J}yt();const Mt="undefined"!=typeof navigator&&"xr"in navigator?new Ks(f,xt):new Xs(f);function bt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),g=!0}function wt(){console.log("THREE.WebGLRenderer: Context Restored."),g=!1;const t=J.autoReset,e=ht.enabled,i=ht.autoUpdate,n=ht.needsUpdate,r=ht.type;yt(),J.autoReset=t,ht.enabled=e,ht.autoUpdate=i,ht.needsUpdate=n,ht.type=r}function St(t){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",t.statusMessage)}function At(t){const e=t.target;e.removeEventListener("dispose",At),function(t){(function(t){const e=K.get(t).programs;void 0!==e&&(e.forEach((function(t){rt.releaseProgram(t)})),t.isShaderMaterial&&rt.releaseShaderCache(t))})(t),K.remove(t)}(e)}this.xr=Mt,this.getContext=function(){return xt},this.getContextAttributes=function(){return xt.getContextAttributes()},this.forceContextLoss=function(){const t=X.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=X.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(t){void 0!==t&&(I=t,this.setSize(R,P,!1))},this.getSize=function(t){return t.set(R,P)},this.setSize=function(t,i,n){Mt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(R=t,P=i,e.width=Math.floor(t*I),e.height=Math.floor(i*I),!1!==n&&(e.style.width=t+"px",e.style.height=i+"px"),this.setViewport(0,0,t,i))},this.getDrawingBufferSize=function(t){return t.set(R*I,P*I).floor()},this.setDrawingBufferSize=function(t,i,n){R=t,P=i,I=n,e.width=Math.floor(t*n),e.height=Math.floor(i*n),this.setViewport(0,0,t,i)},this.getCurrentViewport=function(t){return t.copy(E)},this.getViewport=function(t){return t.copy(O)},this.setViewport=function(t,e,i,n){t.isVector4?O.set(t.x,t.y,t.z,t.w):O.set(t,e,i,n),Z.viewport(E.copy(O).multiplyScalar(I).floor())},this.getScissor=function(t){return t.copy(z)},this.setScissor=function(t,e,i,n){t.isVector4?z.set(t.x,t.y,t.z,t.w):z.set(t,e,i,n),Z.scissor(C.copy(z).multiplyScalar(I).floor())},this.getScissorTest=function(){return U},this.setScissorTest=function(t){Z.setScissorTest(U=t)},this.setOpaqueSort=function(t){D=t},this.setTransparentSort=function(t){N=t},this.getClearColor=function(t){return t.copy(ut.getClearColor())},this.setClearColor=function(){ut.setClearColor.apply(ut,arguments)},this.getClearAlpha=function(){return ut.getClearAlpha()},this.setClearAlpha=function(){ut.setClearAlpha.apply(ut,arguments)},this.clear=function(t=!0,e=!0,i=!0){let n=0;t&&(n|=16384),e&&(n|=256),i&&(n|=1024),xt.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",bt,!1),e.removeEventListener("webglcontextrestored",wt,!1),e.removeEventListener("webglcontextcreationerror",St,!1),ot.dispose(),lt.dispose(),K.dispose(),Q.dispose(),tt.dispose(),nt.dispose(),gt.dispose(),vt.dispose(),rt.dispose(),Mt.dispose(),Mt.removeEventListener("sessionstart",Ct),Mt.removeEventListener("sessionend",Rt),G&&(G.dispose(),G=null),Pt.stop()},this.renderBufferDirect=function(t,e,i,n,r,s){null===e&&(e=j);const a=r.isMesh&&r.matrixWorld.determinant()<0,o=function(t,e,i,n,r){!0!==e.isScene&&(e=j);$.resetTextureUnits();const s=e.fog,a=n.isMeshStandardMaterial?e.environment:null,o=null===w?f.outputEncoding:!0===w.isXRRenderTarget?w.texture.encoding:at,l=(n.isMeshStandardMaterial?tt:Q).get(n.envMap||a),c=!0===n.vertexColors&&!!i.attributes.color&&4===i.attributes.color.itemSize,h=!!n.normalMap&&!!i.attributes.tangent,u=!!i.morphAttributes.position,p=!!i.morphAttributes.normal,m=!!i.morphAttributes.color,g=n.toneMapped?f.toneMapping:0,v=i.morphAttributes.position||i.morphAttributes.normal||i.morphAttributes.color,x=void 0!==v?v.length:0,_=K.get(n),y=d.state.lights;if(!0===F&&(!0===k||t!==A)){const e=t===A&&n.id===T;ct.setState(n,t,e)}let M=!1;n.version===_.__version?_.needsLights&&_.lightsStateVersion!==y.state.version||_.outputEncoding!==o||r.isInstancedMesh&&!1===_.instancing?M=!0:r.isInstancedMesh||!0!==_.instancing?r.isSkinnedMesh&&!1===_.skinning?M=!0:r.isSkinnedMesh||!0!==_.skinning?_.envMap!==l||!0===n.fog&&_.fog!==s?M=!0:void 0===_.numClippingPlanes||_.numClippingPlanes===ct.numPlanes&&_.numIntersection===ct.numIntersection?(_.vertexAlphas!==c||_.vertexTangents!==h||_.morphTargets!==u||_.morphNormals!==p||_.morphColors!==m||_.toneMapping!==g||!0===Y.isWebGL2&&_.morphTargetsCount!==x)&&(M=!0):M=!0:M=!0:M=!0:(M=!0,_.__version=n.version);let b=_.currentProgram;!0===M&&(b=Ut(n,e,r));let S=!1,E=!1,C=!1;const L=b.getUniforms(),R=_.uniforms;Z.useProgram(b.program)&&(S=!0,E=!0,C=!0);n.id!==T&&(T=n.id,E=!0);if(S||A!==t){if(L.setValue(xt,"projectionMatrix",t.projectionMatrix),Y.logarithmicDepthBuffer&&L.setValue(xt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),A!==t&&(A=t,E=!0,C=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const e=L.map.cameraPosition;void 0!==e&&e.setValue(xt,W.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&L.setValue(xt,"isOrthographic",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||r.isSkinnedMesh)&&L.setValue(xt,"viewMatrix",t.matrixWorldInverse)}if(r.isSkinnedMesh){L.setOptional(xt,r,"bindMatrix"),L.setOptional(xt,r,"bindMatrixInverse");const t=r.skeleton;t&&(Y.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),L.setValue(xt,"boneTexture",t.boneTexture,$),L.setValue(xt,"boneTextureSize",t.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const D=i.morphAttributes;(void 0!==D.position||void 0!==D.normal||void 0!==D.color&&!0===Y.isWebGL2)&&dt.update(r,i,n,b);(E||_.receiveShadow!==r.receiveShadow)&&(_.receiveShadow=r.receiveShadow,L.setValue(xt,"receiveShadow",r.receiveShadow));n.isMeshGouraudMaterial&&null!==n.envMap&&(R.envMap.value=l,R.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1);E&&(L.setValue(xt,"toneMappingExposure",f.toneMappingExposure),_.needsLights&&(O=C,(N=R).ambientLightColor.needsUpdate=O,N.lightProbe.needsUpdate=O,N.directionalLights.needsUpdate=O,N.directionalLightShadows.needsUpdate=O,N.pointLights.needsUpdate=O,N.pointLightShadows.needsUpdate=O,N.spotLights.needsUpdate=O,N.spotLightShadows.needsUpdate=O,N.rectAreaLights.needsUpdate=O,N.hemisphereLights.needsUpdate=O),s&&!0===n.fog&&st.refreshFogUniforms(R,s),st.refreshMaterialUniforms(R,n,I,P,G),ss.upload(xt,_.uniformsList,R,$));var N,O;n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(ss.upload(xt,_.uniformsList,R,$),n.uniformsNeedUpdate=!1);n.isSpriteMaterial&&L.setValue(xt,"center",r.center);if(L.setValue(xt,"modelViewMatrix",r.modelViewMatrix),L.setValue(xt,"normalMatrix",r.normalMatrix),L.setValue(xt,"modelMatrix",r.matrixWorld),n.isShaderMaterial||n.isRawShaderMaterial){const t=n.uniformsGroups;for(let e=0,i=t.length;e<i;e++)if(Y.isWebGL2){const i=t[e];vt.update(i,b),vt.bind(i,b)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return b}(t,e,i,n,r);Z.setMaterial(n,a);let l=i.index,c=1;!0===n.wireframe&&(l=it.getWireframeAttribute(i),c=2);const h=i.drawRange,u=i.attributes.position;let p=h.start*c,m=(h.start+h.count)*c;null!==s&&(p=Math.max(p,s.start*c),m=Math.min(m,(s.start+s.count)*c)),null!==l?(p=Math.max(p,0),m=Math.min(m,l.count)):null!=u&&(p=Math.max(p,0),m=Math.min(m,u.count));const g=m-p;if(g<0||g===1/0)return;let v;gt.setup(r,n,o,i,l);let x=pt;if(null!==l&&(v=et.get(l),x=mt,x.setIndex(v)),r.isMesh)!0===n.wireframe?(Z.setLineWidth(n.wireframeLinewidth*q()),x.setMode(1)):x.setMode(4);else if(r.isLine){let t=n.linewidth;void 0===t&&(t=1),Z.setLineWidth(t*q()),r.isLineSegments?x.setMode(1):r.isLineLoop?x.setMode(2):x.setMode(3)}else r.isPoints?x.setMode(0):r.isSprite&&x.setMode(4);if(r.isInstancedMesh)x.renderInstances(p,g,r.count);else if(i.isInstancedBufferGeometry){const t=void 0!==i._maxInstanceCount?i._maxInstanceCount:1/0,e=Math.min(i.instanceCount,t);x.renderInstances(p,g,e)}else x.render(p,g)},this.compile=function(t,e){function i(t,e,i){!0===t.transparent&&2===t.side?(t.side=1,t.needsUpdate=!0,Ut(t,e,i),t.side=0,t.needsUpdate=!0,Ut(t,e,i),t.side=2):Ut(t,e,i)}d=lt.get(t),d.init(),m.push(d),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(d.pushLight(t),t.castShadow&&d.pushShadow(t))})),d.setupLights(f.physicallyCorrectLights),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let r=0;r<n.length;r++){i(n[r],t,e)}else i(n,t,e)})),m.pop(),d=null};let Et=null;function Ct(){Pt.stop()}function Rt(){Pt.start()}const Pt=new _n;function It(t,e,i,n){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)i=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)d.pushLight(t),t.castShadow&&d.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||B.intersectsSprite(t)){n&&W.setFromMatrixPosition(t.matrixWorld).applyMatrix4(V);const e=nt.update(t),r=t.material;r.visible&&u.push(t,e,r,i,W.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==J.render.frame&&(t.skeleton.update(),t.skeleton.frame=J.render.frame),!t.frustumCulled||B.intersectsObject(t))){n&&W.setFromMatrixPosition(t.matrixWorld).applyMatrix4(V);const e=nt.update(t),r=t.material;if(Array.isArray(r)){const n=e.groups;for(let s=0,a=n.length;s<a;s++){const a=n[s],o=r[a.materialIndex];o&&o.visible&&u.push(t,e,o,i,W.z,a)}}else r.visible&&u.push(t,e,r,i,W.z,null)}const r=t.children;for(let t=0,s=r.length;t<s;t++)It(r[t],e,i,n)}function Dt(t,e,i,n){const r=t.opaque,a=t.transmissive,o=t.transparent;d.setupLightsView(i),a.length>0&&function(t,e,i){const n=Y.isWebGL2;null===G&&(G=new te(1,1,{generateMipmaps:!0,type:X.has("EXT_color_buffer_half_float")?b:x,minFilter:v,samples:n&&!0===s?4:0}));f.getDrawingBufferSize(H),n?G.setSize(H.x,H.y):G.setSize(Tt(H.x),Tt(H.y));const r=f.getRenderTarget();f.setRenderTarget(G),f.clear();const a=f.toneMapping;f.toneMapping=0,Nt(t,e,i),f.toneMapping=a,$.updateMultisampleRenderTarget(G),$.updateRenderTargetMipmap(G),f.setRenderTarget(r)}(r,e,i),n&&Z.viewport(E.copy(n)),r.length>0&&Nt(r,e,i),a.length>0&&Nt(a,e,i),o.length>0&&Nt(o,e,i),Z.buffers.depth.setTest(!0),Z.buffers.depth.setMask(!0),Z.buffers.color.setMask(!0),Z.setPolygonOffset(!1)}function Nt(t,e,i){const n=!0===e.isScene?e.overrideMaterial:null;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=s.object,o=s.geometry,l=null===n?s.material:n,c=s.group;a.layers.test(i.layers)&&zt(a,e,i,o,l,c)}}function zt(t,e,i,n,r,s){t.onBeforeRender(f,e,i,n,r,s),t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),r.onBeforeRender(f,e,i,n,t,s),!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,f.renderBufferDirect(i,e,n,r,t,s),r.side=0,r.needsUpdate=!0,f.renderBufferDirect(i,e,n,r,t,s),r.side=2):f.renderBufferDirect(i,e,n,r,t,s),t.onAfterRender(f,e,i,n,r,s)}function Ut(t,e,i){!0!==e.isScene&&(e=j);const n=K.get(t),r=d.state.lights,s=d.state.shadowsArray,a=r.state.version,o=rt.getParameters(t,r.state,s,e,i),l=rt.getProgramCacheKey(o);let c=n.programs;n.environment=t.isMeshStandardMaterial?e.environment:null,n.fog=e.fog,n.envMap=(t.isMeshStandardMaterial?tt:Q).get(t.envMap||n.environment),void 0===c&&(t.addEventListener("dispose",At),c=new Map,n.programs=c);let h=c.get(l);if(void 0!==h){if(n.currentProgram===h&&n.lightsStateVersion===a)return Bt(t,o),h}else o.uniforms=rt.getUniforms(t),t.onBuild(i,o,f),t.onBeforeCompile(o,f),h=rt.acquireProgram(o,l),c.set(l,h),n.uniforms=o.uniforms;const u=n.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(u.clippingPlanes=ct.uniform),Bt(t,o),n.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),n.lightsStateVersion=a,n.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotLightMatrix.value=r.state.spotLightMatrix,u.spotLightMap.value=r.state.spotLightMap,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix);const p=h.getUniforms(),m=ss.seqWithValue(p.seq,u);return n.currentProgram=h,n.uniformsList=m,h}function Bt(t,e){const i=K.get(t);i.outputEncoding=e.outputEncoding,i.instancing=e.instancing,i.skinning=e.skinning,i.morphTargets=e.morphTargets,i.morphNormals=e.morphNormals,i.morphColors=e.morphColors,i.morphTargetsCount=e.morphTargetsCount,i.numClippingPlanes=e.numClippingPlanes,i.numIntersection=e.numClipIntersection,i.vertexAlphas=e.vertexAlphas,i.vertexTangents=e.vertexTangents,i.toneMapping=e.toneMapping}var Ft;Pt.setAnimationLoop((function(t){Et&&Et(t)})),"undefined"!=typeof self&&Pt.setContext(self),this.setAnimationLoop=function(t){Et=t,Mt.setAnimationLoop(t),null===t?Pt.stop():Pt.start()},Mt.addEventListener("sessionstart",Ct),Mt.addEventListener("sessionend",Rt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===g)return;!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),null===e.parent&&!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),!0===Mt.enabled&&!0===Mt.isPresenting&&(!0===Mt.cameraAutoUpdate&&Mt.updateCamera(e),e=Mt.getCamera()),!0===t.isScene&&t.onBeforeRender(f,t,e,w),d=lt.get(t,m.length),d.init(),m.push(d),V.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),B.setFromProjectionMatrix(V),k=this.localClippingEnabled,F=ct.init(this.clippingPlanes,k,e),u=ot.get(t,p.length),u.init(),p.push(u),It(t,e,0,f.sortObjects),u.finish(),!0===f.sortObjects&&u.sort(D,N),!0===F&&ct.beginShadows();const i=d.state.shadowsArray;if(ht.render(i,t,e),!0===F&&ct.endShadows(),!0===this.info.autoReset&&this.info.reset(),ut.render(u,t),d.setupLights(f.physicallyCorrectLights),e.isArrayCamera){const i=e.cameras;for(let e=0,n=i.length;e<n;e++){const n=i[e];Dt(u,t,n,n.viewport)}}else Dt(u,t,e);null!==w&&($.updateMultisampleRenderTarget(w),$.updateRenderTargetMipmap(w)),!0===t.isScene&&t.onAfterRender(f,t,e),Mt.enabled&&Mt.submitFrame&&Mt.submitFrame(),gt.resetDefaultState(),T=-1,A=null,m.pop(),d=m.length>0?m[m.length-1]:null,p.pop(),u=p.length>0?p[p.length-1]:null},this.setTexture2D=(Ft=!1,function(t,e){t&&t.isWebGLRenderTarget&&(Ft||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),Ft=!0),t=t.texture),$.setTexture2D(t,e)}),this.getActiveCubeFace=function(){return _},this.getActiveMipmapLevel=function(){return y},this.getRenderTarget=function(){return w},this.setRenderTargetTextures=function(t,e,i){K.get(t.texture).__webglTexture=e,K.get(t.depthTexture).__webglTexture=i;const n=K.get(t);n.__hasExternalTextures=!0,n.__hasExternalTextures&&(n.__autoAllocateDepthBuffer=void 0===i,n.__autoAllocateDepthBuffer||!0===X.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),n.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(t,e){const i=K.get(t);i.__webglFramebuffer=e,i.__useDefaultFramebuffer=void 0===e},this.setRenderTarget=function(t,e=0,i=0){w=t,_=e,y=i;let n=!0,r=null,s=!1,a=!1;if(t){const i=K.get(t);void 0!==i.__useDefaultFramebuffer?(Z.bindFramebuffer(36160,null),n=!1):void 0===i.__webglFramebuffer?$.setupRenderTarget(t):i.__hasExternalTextures&&$.rebindTextures(t,K.get(t.texture).__webglTexture,K.get(t.depthTexture).__webglTexture);const o=t.texture;(o.isData3DTexture||o.isDataArrayTexture||o.isCompressedArrayTexture)&&(a=!0);const l=K.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=l[e],s=!0):r=Y.isWebGL2&&t.samples>0&&!1===$.useMultisampledRTT(t)?K.get(t).__webglMultisampledFramebuffer:l,E.copy(t.viewport),C.copy(t.scissor),L=t.scissorTest}else E.copy(O).multiplyScalar(I).floor(),C.copy(z).multiplyScalar(I).floor(),L=U;if(Z.bindFramebuffer(36160,r)&&Y.drawBuffers&&n&&Z.drawBuffers(t,r),Z.viewport(E),Z.scissor(C),Z.setScissorTest(L),s){const n=K.get(t.texture);xt.framebufferTexture2D(36160,36064,34069+e,n.__webglTexture,i)}else if(a){const n=K.get(t.texture),r=e||0;xt.framebufferTextureLayer(36160,36064,n.__webglTexture,i||0,r)}T=-1},this.readRenderTargetPixels=function(t,e,i,n,r,s,a){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=K.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){Z.bindFramebuffer(36160,o);try{const a=t.texture,o=a.format,l=a.type;if(o!==S&&ft.convert(o)!==xt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===b&&(X.has("EXT_color_buffer_half_float")||Y.isWebGL2&&X.has("EXT_color_buffer_float"));if(!(l===x||ft.convert(l)===xt.getParameter(35738)||l===M&&(Y.isWebGL2||X.has("OES_texture_float")||X.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");e>=0&&e<=t.width-n&&i>=0&&i<=t.height-r&&xt.readPixels(e,i,n,r,ft.convert(o),ft.convert(l),s)}finally{const t=null!==w?K.get(w).__webglFramebuffer:null;Z.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,i=0){const n=Math.pow(2,-i),r=Math.floor(e.image.width*n),s=Math.floor(e.image.height*n);$.setTexture2D(e,0),xt.copyTexSubImage2D(3553,i,0,0,t.x,t.y,r,s),Z.unbindTexture()},this.copyTextureToTexture=function(t,e,i,n=0){const r=e.image.width,s=e.image.height,a=ft.convert(i.format),o=ft.convert(i.type);$.setTexture2D(i,0),xt.pixelStorei(37440,i.flipY),xt.pixelStorei(37441,i.premultiplyAlpha),xt.pixelStorei(3317,i.unpackAlignment),e.isDataTexture?xt.texSubImage2D(3553,n,t.x,t.y,r,s,a,o,e.image.data):e.isCompressedTexture?xt.compressedTexSubImage2D(3553,n,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,a,e.mipmaps[0].data):xt.texSubImage2D(3553,n,t.x,t.y,a,o,e.image),0===n&&i.generateMipmaps&&xt.generateMipmap(3553),Z.unbindTexture()},this.copyTextureToTexture3D=function(t,e,i,n,r=0){if(f.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const s=t.max.x-t.min.x+1,a=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=ft.convert(n.format),c=ft.convert(n.type);let h;if(n.isData3DTexture)$.setTexture3D(n,0),h=32879;else{if(!n.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");$.setTexture2DArray(n,0),h=35866}xt.pixelStorei(37440,n.flipY),xt.pixelStorei(37441,n.premultiplyAlpha),xt.pixelStorei(3317,n.unpackAlignment);const u=xt.getParameter(3314),d=xt.getParameter(32878),p=xt.getParameter(3316),m=xt.getParameter(3315),g=xt.getParameter(32877),v=i.isCompressedTexture?i.mipmaps[0]:i.image;xt.pixelStorei(3314,v.width),xt.pixelStorei(32878,v.height),xt.pixelStorei(3316,t.min.x),xt.pixelStorei(3315,t.min.y),xt.pixelStorei(32877,t.min.z),i.isDataTexture||i.isData3DTexture?xt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,v.data):i.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),xt.compressedTexSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,v.data)):xt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,v),xt.pixelStorei(3314,u),xt.pixelStorei(32878,d),xt.pixelStorei(3316,p),xt.pixelStorei(3315,m),xt.pixelStorei(32877,g),0===r&&n.generateMipmaps&&xt.generateMipmap(h),Z.unbindTexture()},this.initTexture=function(t){t.isCubeTexture?$.setTextureCube(t,0):t.isData3DTexture?$.setTexture3D(t,0):t.isDataArrayTexture||t.isCompressedArrayTexture?$.setTexture2DArray(t,0):$.setTexture2D(t,0),Z.unbindTexture()},this.resetState=function(){_=0,y=0,w=null,Z.reset(),gt.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class ea extends ta{}ea.prototype.isWebGL1Renderer=!0;class ia{constructor(t,e=25e-5){this.isFogExp2=!0,this.name="",this.color=new qt(t),this.density=e}clone(){return new ia(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}class na{constructor(t,e=1,i=1e3){this.isFog=!0,this.name="",this.color=new qt(t),this.near=e,this.far=i}clone(){return new na(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}class ra extends si{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(e.backgroundIntensity=this.backgroundIntensity),e}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(t){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=t}}class sa{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=ut,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=_t()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,i){t*=this.stride,i*=e.stride;for(let n=0,r=this.stride;n<r;n++)this.array[t+n]=e.array[i+n];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=_t()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(e,this.stride);return i.setUsage(this.usage),i}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=_t()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const aa=new re;class oa{constructor(t,e,i,n=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=!0===n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,i=this.data.count;e<i;e++)aa.fromBufferAttribute(this,e),aa.applyMatrix4(t),this.setXYZ(e,aa.x,aa.y,aa.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)aa.fromBufferAttribute(this,e),aa.applyNormalMatrix(t),this.setXYZ(e,aa.x,aa.y,aa.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)aa.fromBufferAttribute(this,e),aa.transformDirection(t),this.setXYZ(e,aa.x,aa.y,aa.z);return this}setX(t,e){return this.normalized&&(e=Et(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=Et(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=Et(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=Et(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=At(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=At(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=At(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=At(e,this.array)),e}setXY(t,e,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this}setXYZ(t,e,i,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array),n=Et(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this}setXYZW(t,e,i,n,r){return t=t*this.data.stride+this.offset,this.normalized&&(e=Et(e,this.array),i=Et(i,this.array),n=Et(n,this.array),r=Et(r,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[i+e])}return new bi(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new oa(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[i+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class la extends xi{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new qt(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}let ca;const ha=new re,ua=new re,da=new re,pa=new Lt,ma=new Lt,fa=new Ne,ga=new re,va=new re,xa=new re,_a=new Lt,ya=new Lt,Ma=new Lt;class ba extends si{constructor(t){if(super(),this.isSprite=!0,this.type="Sprite",void 0===ca){ca=new Di;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new sa(t,5);ca.setIndex([0,1,2,0,2,3]),ca.setAttribute("position",new oa(e,3,0,!1)),ca.setAttribute("uv",new oa(e,2,3,!1))}this.geometry=ca,this.material=void 0!==t?t:new la,this.center=new Lt(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),ua.setFromMatrixScale(this.matrixWorld),fa.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),da.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&ua.multiplyScalar(-da.z);const i=this.material.rotation;let n,r;0!==i&&(r=Math.cos(i),n=Math.sin(i));const s=this.center;wa(ga.set(-.5,-.5,0),da,s,ua,n,r),wa(va.set(.5,-.5,0),da,s,ua,n,r),wa(xa.set(.5,.5,0),da,s,ua,n,r),_a.set(0,0),ya.set(1,0),Ma.set(1,1);let a=t.ray.intersectTriangle(ga,va,xa,!1,ha);if(null===a&&(wa(va.set(-.5,.5,0),da,s,ua,n,r),ya.set(0,1),a=t.ray.intersectTriangle(ga,xa,va,!1,ha),null===a))return;const o=t.ray.origin.distanceTo(ha);o<t.near||o>t.far||e.push({distance:o,point:ha.clone(),uv:gi.getUV(ha,ga,va,xa,_a,ya,Ma,new Lt),face:null,object:this})}copy(t,e){return super.copy(t,e),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function wa(t,e,i,n,r,s){pa.subVectors(t,i).addScalar(.5).multiply(n),void 0!==r?(ma.x=s*pa.x-r*pa.y,ma.y=r*pa.x+s*pa.y):ma.copy(pa),t.copy(e),t.x+=ma.x,t.y+=ma.y,t.applyMatrix4(fa)}const Sa=new re,Ta=new re;class Aa extends si{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(t){super.copy(t,!1);const e=t.levels;for(let t=0,i=e.length;t<i;t++){const i=e[t];this.addLevel(i.object.clone(),i.distance,i.hysteresis)}return this.autoUpdate=t.autoUpdate,this}addLevel(t,e=0,i=0){e=Math.abs(e);const n=this.levels;let r;for(r=0;r<n.length&&!(e<n[r].distance);r++);return n.splice(r,0,{distance:e,hysteresis:i,object:t}),this.add(t),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let i,n;for(i=1,n=e.length;i<n;i++){let n=e[i].distance;if(e[i].object.visible&&(n-=n*e[i].hysteresis),t<n)break}return e[i-1].object}return null}raycast(t,e){if(this.levels.length>0){Sa.setFromMatrixPosition(this.matrixWorld);const i=t.ray.origin.distanceTo(Sa);this.getObjectForDistance(i).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){Sa.setFromMatrixPosition(t.matrixWorld),Ta.setFromMatrixPosition(this.matrixWorld);const i=Sa.distanceTo(Ta)/t.zoom;let n,r;for(e[0].object.visible=!0,n=1,r=e.length;n<r;n++){let t=e[n].distance;if(e[n].object.visible&&(t-=t*e[n].hysteresis),!(i>=t))break;e[n-1].object.visible=!1,e[n].object.visible=!0}for(this._currentLevel=n-1;n<r;n++)e[n].object.visible=!1}}toJSON(t){const e=super.toJSON(t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];const i=this.levels;for(let t=0,n=i.length;t<n;t++){const n=i[t];e.object.levels.push({object:n.object.uuid,distance:n.distance,hysteresis:n.hysteresis})}return e}}const Ea=new re,Ca=new Qt,La=new Qt,Ra=new re,Pa=new Ne;class Ia extends Ki{constructor(t,e){super(t,e),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Ne,this.bindMatrixInverse=new Ne}copy(t,e){return super.copy(t,e),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new Qt,e=this.geometry.attributes.skinWeight;for(let i=0,n=e.count;i<n;i++){t.fromBufferAttribute(e,i);const n=1/t.manhattanLength();n!==1/0?t.multiplyScalar(n):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const i=this.skeleton,n=this.geometry;Ca.fromBufferAttribute(n.attributes.skinIndex,t),La.fromBufferAttribute(n.attributes.skinWeight,t),Ea.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const n=La.getComponent(t);if(0!==n){const r=Ca.getComponent(t);Pa.multiplyMatrices(i.bones[r].matrixWorld,i.boneInverses[r]),e.addScaledVector(Ra.copy(Ea).applyMatrix4(Pa),n)}}return e.applyMatrix4(this.bindMatrixInverse)}}class Da extends si{constructor(){super(),this.isBone=!0,this.type="Bone"}}class Na extends $t{constructor(t=null,e=1,i=1,n,r,s,a,o,l=1003,c=1003,h,u){super(null,s,a,o,l,c,n,r,h,u),this.isDataTexture=!0,this.image={data:t,width:e,height:i},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const Oa=new Ne,za=new Ne;class Ua{constructor(t=[],e=[]){this.uuid=_t(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new Ne)}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new Ne;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert()}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,i=this.boneMatrices,n=this.boneTexture;for(let n=0,r=t.length;n<r;n++){const r=t[n]?t[n].matrixWorld:za;Oa.multiplyMatrices(r,e[n]),Oa.toArray(i,16*n)}null!==n&&(n.needsUpdate=!0)}clone(){return new Ua(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=St(t),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const i=new Na(e,t,t,S,M);return i.needsUpdate=!0,this.boneMatrices=e,this.boneTexture=i,this.boneTextureSize=t,this}getBoneByName(t){for(let e=0,i=this.bones.length;e<i;e++){const i=this.bones[e];if(i.name===t)return i}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let i=0,n=t.bones.length;i<n;i++){const n=t.bones[i];let r=e[n];void 0===r&&(console.warn("THREE.Skeleton: No bone found with UUID:",n),r=new Da),this.bones.push(r),this.boneInverses.push((new Ne).fromArray(t.boneInverses[i]))}return this.init(),this}toJSON(){const t={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,i=this.boneInverses;for(let n=0,r=e.length;n<r;n++){const r=e[n];t.bones.push(r.uuid);const s=i[n];t.boneInverses.push(s.toArray())}return t}}class Ba extends bi{constructor(t,e,i,n=1){super(t,e,i),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Fa=new Ne,ka=new Ne,Ga=[],Va=new Ne,Ha=new Ki;class Wa extends Ki{constructor(t,e,i){super(t,e),this.isInstancedMesh=!0,this.instanceMatrix=new Ba(new Float32Array(16*i),16),this.instanceColor=null,this.count=i,this.frustumCulled=!1;for(let t=0;t<i;t++)this.setMatrixAt(t,Va)}copy(t,e){return super.copy(t,e),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const i=this.matrixWorld,n=this.count;if(Ha.geometry=this.geometry,Ha.material=this.material,void 0!==Ha.material)for(let r=0;r<n;r++){this.getMatrixAt(r,Fa),ka.multiplyMatrices(i,Fa),Ha.matrixWorld=ka,Ha.raycast(t,Ga);for(let t=0,i=Ga.length;t<i;t++){const i=Ga[t];i.instanceId=r,i.object=this,e.push(i)}Ga.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Ba(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}class ja extends xi{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new qt(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const qa=new re,Xa=new re,Ya=new Ne,Za=new De,Ja=new Te;class Ka extends si{constructor(t=new Di,e=new ja){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,i=[0];for(let t=1,n=e.count;t<n;t++)qa.fromBufferAttribute(e,t-1),Xa.fromBufferAttribute(e,t),i[t]=i[t-1],i[t]+=qa.distanceTo(Xa);t.setAttribute("lineDistance",new Ti(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const i=this.geometry,n=this.matrixWorld,r=t.params.Line.threshold,s=i.drawRange;if(null===i.boundingSphere&&i.computeBoundingSphere(),Ja.copy(i.boundingSphere),Ja.applyMatrix4(n),Ja.radius+=r,!1===t.ray.intersectsSphere(Ja))return;Ya.copy(n).invert(),Za.copy(t.ray).applyMatrix4(Ya);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=new re,c=new re,h=new re,u=new re,d=this.isLineSegments?2:1,p=i.index,m=i.attributes.position;if(null!==p){for(let i=Math.max(0,s.start),n=Math.min(p.count,s.start+s.count)-1;i<n;i+=d){const n=p.getX(i),r=p.getX(i+1);l.fromBufferAttribute(m,n),c.fromBufferAttribute(m,r);if(Za.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const s=t.ray.origin.distanceTo(u);s<t.near||s>t.far||e.push({distance:s,point:h.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}else{for(let i=Math.max(0,s.start),n=Math.min(m.count,s.start+s.count)-1;i<n;i+=d){l.fromBufferAttribute(m,i),c.fromBufferAttribute(m,i+1);if(Za.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const n=t.ray.origin.distanceTo(u);n<t.near||n>t.far||e.push({distance:n,point:h.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}const $a=new re,Qa=new re;class to extends Ka{constructor(t,e){super(t,e),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,i=[];for(let t=0,n=e.count;t<n;t+=2)$a.fromBufferAttribute(e,t),Qa.fromBufferAttribute(e,t+1),i[t]=0===t?0:i[t-1],i[t+1]=i[t]+$a.distanceTo(Qa);t.setAttribute("lineDistance",new Ti(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class eo extends Ka{constructor(t,e){super(t,e),this.isLineLoop=!0,this.type="LineLoop"}}class io extends xi{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new qt(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const no=new Ne,ro=new De,so=new Te,ao=new re;class oo extends si{constructor(t=new Di,e=new io){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const i=this.geometry,n=this.matrixWorld,r=t.params.Points.threshold,s=i.drawRange;if(null===i.boundingSphere&&i.computeBoundingSphere(),so.copy(i.boundingSphere),so.applyMatrix4(n),so.radius+=r,!1===t.ray.intersectsSphere(so))return;no.copy(n).invert(),ro.copy(t.ray).applyMatrix4(no);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=i.index,c=i.attributes.position;if(null!==l){for(let i=Math.max(0,s.start),r=Math.min(l.count,s.start+s.count);i<r;i++){const r=l.getX(i);ao.fromBufferAttribute(c,r),lo(ao,r,o,n,t,e,this)}}else{for(let i=Math.max(0,s.start),r=Math.min(c.count,s.start+s.count);i<r;i++)ao.fromBufferAttribute(c,i),lo(ao,i,o,n,t,e,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}function lo(t,e,i,n,r,s,a){const o=ro.distanceSqToPoint(t);if(o<i){const i=new re;ro.closestPointToPoint(t,i),i.applyMatrix4(n);const l=r.ray.origin.distanceTo(i);if(l<r.near||l>r.far)return;s.push({distance:l,distanceToRay:Math.sqrt(o),point:i,index:e,face:null,object:a})}}class co extends $t{constructor(t,e,i,n,r,s,a,o,l,c,h,u){super(null,s,a,o,l,c,n,r,h,u),this.isCompressedTexture=!0,this.image={width:e,height:i},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}class ho{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const i=this.getUtoTmapping(t);return this.getPoint(i,e)}getPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return e}getSpacedPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let i,n=this.getPoint(0),r=0;e.push(0);for(let s=1;s<=t;s++)i=this.getPoint(s/t),r+=i.distanceTo(n),e.push(r),n=i;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const i=this.getLengths();let n=0;const r=i.length;let s;s=e||t*i[r-1];let a,o=0,l=r-1;for(;o<=l;)if(n=Math.floor(o+(l-o)/2),a=i[n]-s,a<0)o=n+1;else{if(!(a>0)){l=n;break}l=n-1}if(n=l,i[n]===s)return n/(r-1);const c=i[n];return(n+(s-c)/(i[n+1]-c))/(r-1)}getTangent(t,e){const i=1e-4;let n=t-i,r=t+i;n<0&&(n=0),r>1&&(r=1);const s=this.getPoint(n),a=this.getPoint(r),o=e||(s.isVector2?new Lt:new re);return o.copy(a).sub(s).normalize(),o}getTangentAt(t,e){const i=this.getUtoTmapping(t);return this.getTangent(i,e)}computeFrenetFrames(t,e){const i=new re,n=[],r=[],s=[],a=new re,o=new Ne;for(let e=0;e<=t;e++){const i=e/t;n[e]=this.getTangentAt(i,new re)}r[0]=new re,s[0]=new re;let l=Number.MAX_VALUE;const c=Math.abs(n[0].x),h=Math.abs(n[0].y),u=Math.abs(n[0].z);c<=l&&(l=c,i.set(1,0,0)),h<=l&&(l=h,i.set(0,1,0)),u<=l&&i.set(0,0,1),a.crossVectors(n[0],i).normalize(),r[0].crossVectors(n[0],a),s[0].crossVectors(n[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),s[e]=s[e-1].clone(),a.crossVectors(n[e-1],n[e]),a.length()>Number.EPSILON){a.normalize();const t=Math.acos(yt(n[e-1].dot(n[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,t))}s[e].crossVectors(n[e],r[e])}if(!0===e){let e=Math.acos(yt(r[0].dot(r[t]),-1,1));e/=t,n[0].dot(a.crossVectors(r[0],r[t]))>0&&(e=-e);for(let i=1;i<=t;i++)r[i].applyMatrix4(o.makeRotationAxis(n[i],e*i)),s[i].crossVectors(n[i],r[i])}return{tangents:n,normals:r,binormals:s}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class uo extends ho{constructor(t=0,e=0,i=1,n=1,r=0,s=2*Math.PI,a=!1,o=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=i,this.yRadius=n,this.aStartAngle=r,this.aEndAngle=s,this.aClockwise=a,this.aRotation=o}getPoint(t,e){const i=e||new Lt,n=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=n;for(;r>n;)r-=n;r<Number.EPSILON&&(r=s?0:n),!0!==this.aClockwise||s||(r===n?r=-n:r-=n);const a=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),i=o-this.aX,n=l-this.aY;o=i*t-n*e+this.aX,l=i*e+n*t+this.aY}return i.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}class po extends uo{constructor(t,e,i,n,r,s){super(t,e,i,i,n,r,s),this.isArcCurve=!0,this.type="ArcCurve"}}function mo(){let t=0,e=0,i=0,n=0;function r(r,s,a,o){t=r,e=a,i=-3*r+3*s-2*a-o,n=2*r-2*s+a+o}return{initCatmullRom:function(t,e,i,n,s){r(e,i,s*(i-t),s*(n-e))},initNonuniformCatmullRom:function(t,e,i,n,s,a,o){let l=(e-t)/s-(i-t)/(s+a)+(i-e)/a,c=(i-e)/a-(n-e)/(a+o)+(n-i)/o;l*=a,c*=a,r(e,i,l,c)},calc:function(r){const s=r*r;return t+e*r+i*s+n*(s*r)}}}const fo=new re,go=new mo,vo=new mo,xo=new mo;class _o extends ho{constructor(t=[],e=!1,i="centripetal",n=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=i,this.tension=n}getPoint(t,e=new re){const i=e,n=this.points,r=n.length,s=(r-(this.closed?0:1))*t;let a,o,l=Math.floor(s),c=s-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/r)+1)*r:0===c&&l===r-1&&(l=r-2,c=1),this.closed||l>0?a=n[(l-1)%r]:(fo.subVectors(n[0],n[1]).add(n[0]),a=fo);const h=n[l%r],u=n[(l+1)%r];if(this.closed||l+2<r?o=n[(l+2)%r]:(fo.subVectors(n[r-1],n[r-2]).add(n[r-1]),o=fo),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(a.distanceToSquared(h),t),i=Math.pow(h.distanceToSquared(u),t),n=Math.pow(u.distanceToSquared(o),t);i<1e-4&&(i=1),e<1e-4&&(e=i),n<1e-4&&(n=i),go.initNonuniformCatmullRom(a.x,h.x,u.x,o.x,e,i,n),vo.initNonuniformCatmullRom(a.y,h.y,u.y,o.y,e,i,n),xo.initNonuniformCatmullRom(a.z,h.z,u.z,o.z,e,i,n)}else"catmullrom"===this.curveType&&(go.initCatmullRom(a.x,h.x,u.x,o.x,this.tension),vo.initCatmullRom(a.y,h.y,u.y,o.y,this.tension),xo.initCatmullRom(a.z,h.z,u.z,o.z,this.tension));return i.set(go.calc(c),vo.calc(c),xo.calc(c)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push(i.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const i=this.points[e];t.points.push(i.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push((new re).fromArray(i))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function yo(t,e,i,n,r){const s=.5*(n-e),a=.5*(r-i),o=t*t;return(2*i-2*n+s+a)*(t*o)+(-3*i+3*n-2*s-a)*o+s*t+i}function Mo(t,e,i,n){return function(t,e){const i=1-t;return i*i*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,i)+function(t,e){return t*t*e}(t,n)}function bo(t,e,i,n,r){return function(t,e){const i=1-t;return i*i*i*e}(t,e)+function(t,e){const i=1-t;return 3*i*i*t*e}(t,i)+function(t,e){return 3*(1-t)*t*t*e}(t,n)+function(t,e){return t*t*t*e}(t,r)}class wo extends ho{constructor(t=new Lt,e=new Lt,i=new Lt,n=new Lt){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=i,this.v3=n}getPoint(t,e=new Lt){const i=e,n=this.v0,r=this.v1,s=this.v2,a=this.v3;return i.set(bo(t,n.x,r.x,s.x,a.x),bo(t,n.y,r.y,s.y,a.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class So extends ho{constructor(t=new re,e=new re,i=new re,n=new re){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=i,this.v3=n}getPoint(t,e=new re){const i=e,n=this.v0,r=this.v1,s=this.v2,a=this.v3;return i.set(bo(t,n.x,r.x,s.x,a.x),bo(t,n.y,r.y,s.y,a.y),bo(t,n.z,r.z,s.z,a.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class To extends ho{constructor(t=new Lt,e=new Lt){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new Lt){const i=e;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const i=e||new Lt;return i.copy(this.v2).sub(this.v1).normalize(),i}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Ao extends ho{constructor(t=new re,e=new re){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=t,this.v2=e}getPoint(t,e=new re){const i=e;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Eo extends ho{constructor(t=new Lt,e=new Lt,i=new Lt){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new Lt){const i=e,n=this.v0,r=this.v1,s=this.v2;return i.set(Mo(t,n.x,r.x,s.x),Mo(t,n.y,r.y,s.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Co extends ho{constructor(t=new re,e=new re,i=new re){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new re){const i=e,n=this.v0,r=this.v1,s=this.v2;return i.set(Mo(t,n.x,r.x,s.x),Mo(t,n.y,r.y,s.y),Mo(t,n.z,r.z,s.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Lo extends ho{constructor(t=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=t}getPoint(t,e=new Lt){const i=e,n=this.points,r=(n.length-1)*t,s=Math.floor(r),a=r-s,o=n[0===s?s:s-1],l=n[s],c=n[s>n.length-2?n.length-1:s+1],h=n[s>n.length-3?n.length-1:s+2];return i.set(yo(a,o.x,l.x,c.x,h.x),yo(a,o.y,l.y,c.y,h.y)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push(i.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const i=this.points[e];t.points.push(i.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push((new Lt).fromArray(i))}return this}}var Ro=Object.freeze({__proto__:null,ArcCurve:po,CatmullRomCurve3:_o,CubicBezierCurve:wo,CubicBezierCurve3:So,EllipseCurve:uo,LineCurve:To,LineCurve3:Ao,QuadraticBezierCurve:Eo,QuadraticBezierCurve3:Co,SplineCurve:Lo});class Po extends ho{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new To(e,t))}getPoint(t,e){const i=t*this.getLength(),n=this.getCurveLengths();let r=0;for(;r<n.length;){if(n[r]>=i){const t=n[r]-i,s=this.curves[r],a=s.getLength(),o=0===a?0:1-t/a;return s.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let i=0,n=this.curves.length;i<n;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let i;for(let n=0,r=this.curves;n<r.length;n++){const s=r[n],a=s.isEllipseCurve?2*t:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?t*s.points.length:t,o=s.getPoints(a);for(let t=0;t<o.length;t++){const n=o[t];i&&i.equals(n)||(e.push(n),i=n)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const i=t.curves[e];this.curves.push(i.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,i=this.curves.length;e<i;e++){const i=this.curves[e];t.curves.push(i.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const i=t.curves[e];this.curves.push((new Ro[i.type]).fromJSON(i))}return this}}class Io extends Po{constructor(t){super(),this.type="Path",this.currentPoint=new Lt,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const i=new To(this.currentPoint.clone(),new Lt(t,e));return this.curves.push(i),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,i,n){const r=new Eo(this.currentPoint.clone(),new Lt(t,e),new Lt(i,n));return this.curves.push(r),this.currentPoint.set(i,n),this}bezierCurveTo(t,e,i,n,r,s){const a=new wo(this.currentPoint.clone(),new Lt(t,e),new Lt(i,n),new Lt(r,s));return this.curves.push(a),this.currentPoint.set(r,s),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),i=new Lo(e);return this.curves.push(i),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,i,n,r,s){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+a,e+o,i,n,r,s),this}absarc(t,e,i,n,r,s){return this.absellipse(t,e,i,i,n,r,s),this}ellipse(t,e,i,n,r,s,a,o){const l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(t+l,e+c,i,n,r,s,a,o),this}absellipse(t,e,i,n,r,s,a,o){const l=new uo(t,e,i,n,r,s,a,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Do extends Di{constructor(t=[new Lt(0,-.5),new Lt(.5,0),new Lt(0,.5)],e=12,i=0,n=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},e=Math.floor(e),n=yt(n,0,2*Math.PI);const r=[],s=[],a=[],o=[],l=[],c=1/e,h=new re,u=new Lt,d=new re,p=new re,m=new re;let f=0,g=0;for(let e=0;e<=t.length-1;e++)switch(e){case 0:f=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-f,d.z=0*g,m.copy(d),d.normalize(),o.push(d.x,d.y,d.z);break;case t.length-1:o.push(m.x,m.y,m.z);break;default:f=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-f,d.z=0*g,p.copy(d),d.x+=m.x,d.y+=m.y,d.z+=m.z,d.normalize(),o.push(d.x,d.y,d.z),m.copy(p)}for(let r=0;r<=e;r++){const d=i+r*c*n,p=Math.sin(d),m=Math.cos(d);for(let i=0;i<=t.length-1;i++){h.x=t[i].x*p,h.y=t[i].y,h.z=t[i].x*m,s.push(h.x,h.y,h.z),u.x=r/e,u.y=i/(t.length-1),a.push(u.x,u.y);const n=o[3*i+0]*p,c=o[3*i+1],d=o[3*i+0]*m;l.push(n,c,d)}}for(let i=0;i<e;i++)for(let e=0;e<t.length-1;e++){const n=e+i*t.length,s=n,a=n+t.length,o=n+t.length+1,l=n+1;r.push(s,a,l),r.push(o,l,a)}this.setIndex(r),this.setAttribute("position",new Ti(s,3)),this.setAttribute("uv",new Ti(a,2)),this.setAttribute("normal",new Ti(l,3))}static fromJSON(t){return new Do(t.points,t.segments,t.phiStart,t.phiLength)}}class No extends Do{constructor(t=1,e=1,i=4,n=8){const r=new Io;r.absarc(0,-e/2,t,1.5*Math.PI,0),r.absarc(0,e/2,t,0,.5*Math.PI),super(r.getPoints(i),n),this.type="CapsuleGeometry",this.parameters={radius:t,height:e,capSegments:i,radialSegments:n}}static fromJSON(t){return new No(t.radius,t.length,t.capSegments,t.radialSegments)}}class Oo extends Di{constructor(t=1,e=8,i=0,n=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},e=Math.max(3,e);const r=[],s=[],a=[],o=[],l=new re,c=new Lt;s.push(0,0,0),a.push(0,0,1),o.push(.5,.5);for(let r=0,h=3;r<=e;r++,h+=3){const u=i+r/e*n;l.x=t*Math.cos(u),l.y=t*Math.sin(u),s.push(l.x,l.y,l.z),a.push(0,0,1),c.x=(s[h]/t+1)/2,c.y=(s[h+1]/t+1)/2,o.push(c.x,c.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute("position",new Ti(s,3)),this.setAttribute("normal",new Ti(a,3)),this.setAttribute("uv",new Ti(o,2))}static fromJSON(t){return new Oo(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class zo extends Di{constructor(t=1,e=1,i=1,n=8,r=1,s=!1,a=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:r,openEnded:s,thetaStart:a,thetaLength:o};const l=this;n=Math.floor(n),r=Math.floor(r);const c=[],h=[],u=[],d=[];let p=0;const m=[],f=i/2;let g=0;function v(i){const r=p,s=new Lt,m=new re;let v=0;const x=!0===i?t:e,_=!0===i?1:-1;for(let t=1;t<=n;t++)h.push(0,f*_,0),u.push(0,_,0),d.push(.5,.5),p++;const y=p;for(let t=0;t<=n;t++){const e=t/n*o+a,i=Math.cos(e),r=Math.sin(e);m.x=x*r,m.y=f*_,m.z=x*i,h.push(m.x,m.y,m.z),u.push(0,_,0),s.x=.5*i+.5,s.y=.5*r*_+.5,d.push(s.x,s.y),p++}for(let t=0;t<n;t++){const e=r+t,n=y+t;!0===i?c.push(n,n+1,e):c.push(n+1,n,e),v+=3}l.addGroup(g,v,!0===i?1:2),g+=v}!function(){const s=new re,v=new re;let x=0;const _=(e-t)/i;for(let l=0;l<=r;l++){const c=[],g=l/r,x=g*(e-t)+t;for(let t=0;t<=n;t++){const e=t/n,r=e*o+a,l=Math.sin(r),m=Math.cos(r);v.x=x*l,v.y=-g*i+f,v.z=x*m,h.push(v.x,v.y,v.z),s.set(l,_,m).normalize(),u.push(s.x,s.y,s.z),d.push(e,1-g),c.push(p++)}m.push(c)}for(let t=0;t<n;t++)for(let e=0;e<r;e++){const i=m[e][t],n=m[e+1][t],r=m[e+1][t+1],s=m[e][t+1];c.push(i,n,s),c.push(n,r,s),x+=6}l.addGroup(g,x,0),g+=x}(),!1===s&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(c),this.setAttribute("position",new Ti(h,3)),this.setAttribute("normal",new Ti(u,3)),this.setAttribute("uv",new Ti(d,2))}static fromJSON(t){return new zo(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Uo extends zo{constructor(t=1,e=1,i=8,n=1,r=!1,s=0,a=2*Math.PI){super(0,t,e,i,n,r,s,a),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:s,thetaLength:a}}static fromJSON(t){return new Uo(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Bo extends Di{constructor(t=[],e=[],i=1,n=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:n};const r=[],s=[];function a(t,e,i,n){const r=n+1,s=[];for(let n=0;n<=r;n++){s[n]=[];const a=t.clone().lerp(i,n/r),o=e.clone().lerp(i,n/r),l=r-n;for(let t=0;t<=l;t++)s[n][t]=0===t&&n===r?a:a.clone().lerp(o,t/l)}for(let t=0;t<r;t++)for(let e=0;e<2*(r-t)-1;e++){const i=Math.floor(e/2);e%2==0?(o(s[t][i+1]),o(s[t+1][i]),o(s[t][i])):(o(s[t][i+1]),o(s[t+1][i+1]),o(s[t+1][i]))}}function o(t){r.push(t.x,t.y,t.z)}function l(e,i){const n=3*e;i.x=t[n+0],i.y=t[n+1],i.z=t[n+2]}function c(t,e,i,n){n<0&&1===t.x&&(s[e]=t.x-1),0===i.x&&0===i.z&&(s[e]=n/2/Math.PI+.5)}function h(t){return Math.atan2(t.z,-t.x)}!function(t){const i=new re,n=new re,r=new re;for(let s=0;s<e.length;s+=3)l(e[s+0],i),l(e[s+1],n),l(e[s+2],r),a(i,n,r,t)}(n),function(t){const e=new re;for(let i=0;i<r.length;i+=3)e.x=r[i+0],e.y=r[i+1],e.z=r[i+2],e.normalize().multiplyScalar(t),r[i+0]=e.x,r[i+1]=e.y,r[i+2]=e.z}(i),function(){const t=new re;for(let i=0;i<r.length;i+=3){t.x=r[i+0],t.y=r[i+1],t.z=r[i+2];const n=h(t)/2/Math.PI+.5,a=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);s.push(n,1-a)}var e;(function(){const t=new re,e=new re,i=new re,n=new re,a=new Lt,o=new Lt,l=new Lt;for(let u=0,d=0;u<r.length;u+=9,d+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),i.set(r[u+6],r[u+7],r[u+8]),a.set(s[d+0],s[d+1]),o.set(s[d+2],s[d+3]),l.set(s[d+4],s[d+5]),n.copy(t).add(e).add(i).divideScalar(3);const p=h(n);c(a,d+0,t,p),c(o,d+2,e,p),c(l,d+4,i,p)}})(),function(){for(let t=0;t<s.length;t+=6){const e=s[t+0],i=s[t+2],n=s[t+4],r=Math.max(e,i,n),a=Math.min(e,i,n);r>.9&&a<.1&&(e<.2&&(s[t+0]+=1),i<.2&&(s[t+2]+=1),n<.2&&(s[t+4]+=1))}}()}(),this.setAttribute("position",new Ti(r,3)),this.setAttribute("normal",new Ti(r.slice(),3)),this.setAttribute("uv",new Ti(s,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(t){return new Bo(t.vertices,t.indices,t.radius,t.details)}}class Fo extends Bo{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2,n=1/i;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-i,0,-n,i,0,n,-i,0,n,i,-n,-i,0,-n,i,0,n,-i,0,n,i,0,-i,0,-n,i,0,-n,-i,0,n,i,0,n],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new Fo(t.radius,t.detail)}}const ko=new re,Go=new re,Vo=new re,Ho=new gi;class Wo extends Di{constructor(t=null,e=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:t,thresholdAngle:e},null!==t){const i=4,n=Math.pow(10,i),r=Math.cos(vt*e),s=t.getIndex(),a=t.getAttribute("position"),o=s?s.count:a.count,l=[0,0,0],c=["a","b","c"],h=new Array(3),u={},d=[];for(let t=0;t<o;t+=3){s?(l[0]=s.getX(t),l[1]=s.getX(t+1),l[2]=s.getX(t+2)):(l[0]=t,l[1]=t+1,l[2]=t+2);const{a:e,b:i,c:o}=Ho;if(e.fromBufferAttribute(a,l[0]),i.fromBufferAttribute(a,l[1]),o.fromBufferAttribute(a,l[2]),Ho.getNormal(Vo),h[0]=`${Math.round(e.x*n)},${Math.round(e.y*n)},${Math.round(e.z*n)}`,h[1]=`${Math.round(i.x*n)},${Math.round(i.y*n)},${Math.round(i.z*n)}`,h[2]=`${Math.round(o.x*n)},${Math.round(o.y*n)},${Math.round(o.z*n)}`,h[0]!==h[1]&&h[1]!==h[2]&&h[2]!==h[0])for(let t=0;t<3;t++){const e=(t+1)%3,i=h[t],n=h[e],s=Ho[c[t]],a=Ho[c[e]],o=`${i}_${n}`,p=`${n}_${i}`;p in u&&u[p]?(Vo.dot(u[p].normal)<=r&&(d.push(s.x,s.y,s.z),d.push(a.x,a.y,a.z)),u[p]=null):o in u||(u[o]={index0:l[t],index1:l[e],normal:Vo.clone()})}}for(const t in u)if(u[t]){const{index0:e,index1:i}=u[t];ko.fromBufferAttribute(a,e),Go.fromBufferAttribute(a,i),d.push(ko.x,ko.y,ko.z),d.push(Go.x,Go.y,Go.z)}this.setAttribute("position",new Ti(d,3))}}}class jo extends Io{constructor(t){super(t),this.uuid=_t(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let i=0,n=this.holes.length;i<n;i++)e[i]=this.holes[i].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const i=t.holes[e];this.holes.push(i.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,i=this.holes.length;e<i;e++){const i=this.holes[e];t.holes.push(i.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const i=t.holes[e];this.holes.push((new Io).fromJSON(i))}return this}}const qo=function(t,e,i=2){const n=e&&e.length,r=n?e[0]*i:t.length;let s=Xo(t,0,r,i,!0);const a=[];if(!s||s.next===s.prev)return a;let o,l,c,h,u,d,p;if(n&&(s=function(t,e,i,n){const r=[];let s,a,o,l,c;for(s=0,a=e.length;s<a;s++)o=e[s]*n,l=s<a-1?e[s+1]*n:t.length,c=Xo(t,o,l,n,!1),c===c.next&&(c.steiner=!0),r.push(rl(c));for(r.sort(tl),s=0;s<r.length;s++)i=el(r[s],i);return i}(t,e,s,i)),t.length>80*i){o=c=t[0],l=h=t[1];for(let e=i;e<r;e+=i)u=t[e],d=t[e+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=0!==p?32767/p:0}return Zo(s,a,i,o,l,p,0),a};function Xo(t,e,i,n,r){let s,a;if(r===function(t,e,i,n){let r=0;for(let s=e,a=i-n;s<i;s+=n)r+=(t[a]-t[s])*(t[s+1]+t[a+1]),a=s;return r}(t,e,i,n)>0)for(s=e;s<i;s+=n)a=ml(s,t[s],t[s+1],a);else for(s=i-n;s>=e;s-=n)a=ml(s,t[s],t[s+1],a);return a&&ll(a,a.next)&&(fl(a),a=a.next),a}function Yo(t,e){if(!t)return t;e||(e=t);let i,n=t;do{if(i=!1,n.steiner||!ll(n,n.next)&&0!==ol(n.prev,n,n.next))n=n.next;else{if(fl(n),n=e=n.prev,n===n.next)break;i=!0}}while(i||n!==e);return e}function Zo(t,e,i,n,r,s,a){if(!t)return;!a&&s&&function(t,e,i,n){let r=t;do{0===r.z&&(r.z=nl(r.x,r.y,e,i,n)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,i,n,r,s,a,o,l,c=1;do{for(i=t,t=null,s=null,a=0;i;){for(a++,n=i,o=0,e=0;e<c&&(o++,n=n.nextZ,n);e++);for(l=c;o>0||l>0&&n;)0!==o&&(0===l||!n||i.z<=n.z)?(r=i,i=i.nextZ,o--):(r=n,n=n.nextZ,l--),s?s.nextZ=r:t=r,r.prevZ=s,s=r;i=n}s.nextZ=null,c*=2}while(a>1)}(r)}(t,n,r,s);let o,l,c=t;for(;t.prev!==t.next;)if(o=t.prev,l=t.next,s?Ko(t,n,r,s):Jo(t))e.push(o.i/i|0),e.push(t.i/i|0),e.push(l.i/i|0),fl(t),t=l.next,c=l.next;else if((t=l)===c){a?1===a?Zo(t=$o(Yo(t),e,i),e,i,n,r,s,2):2===a&&Qo(t,e,i,n,r,s):Zo(Yo(t),e,i,n,r,s,1);break}}function Jo(t){const e=t.prev,i=t,n=t.next;if(ol(e,i,n)>=0)return!1;const r=e.x,s=i.x,a=n.x,o=e.y,l=i.y,c=n.y,h=r<s?r<a?r:a:s<a?s:a,u=o<l?o<c?o:c:l<c?l:c,d=r>s?r>a?r:a:s>a?s:a,p=o>l?o>c?o:c:l>c?l:c;let m=n.next;for(;m!==e;){if(m.x>=h&&m.x<=d&&m.y>=u&&m.y<=p&&sl(r,o,s,l,a,c,m.x,m.y)&&ol(m.prev,m,m.next)>=0)return!1;m=m.next}return!0}function Ko(t,e,i,n){const r=t.prev,s=t,a=t.next;if(ol(r,s,a)>=0)return!1;const o=r.x,l=s.x,c=a.x,h=r.y,u=s.y,d=a.y,p=o<l?o<c?o:c:l<c?l:c,m=h<u?h<d?h:d:u<d?u:d,f=o>l?o>c?o:c:l>c?l:c,g=h>u?h>d?h:d:u>d?u:d,v=nl(p,m,e,i,n),x=nl(f,g,e,i,n);let _=t.prevZ,y=t.nextZ;for(;_&&_.z>=v&&y&&y.z<=x;){if(_.x>=p&&_.x<=f&&_.y>=m&&_.y<=g&&_!==r&&_!==a&&sl(o,h,l,u,c,d,_.x,_.y)&&ol(_.prev,_,_.next)>=0)return!1;if(_=_.prevZ,y.x>=p&&y.x<=f&&y.y>=m&&y.y<=g&&y!==r&&y!==a&&sl(o,h,l,u,c,d,y.x,y.y)&&ol(y.prev,y,y.next)>=0)return!1;y=y.nextZ}for(;_&&_.z>=v;){if(_.x>=p&&_.x<=f&&_.y>=m&&_.y<=g&&_!==r&&_!==a&&sl(o,h,l,u,c,d,_.x,_.y)&&ol(_.prev,_,_.next)>=0)return!1;_=_.prevZ}for(;y&&y.z<=x;){if(y.x>=p&&y.x<=f&&y.y>=m&&y.y<=g&&y!==r&&y!==a&&sl(o,h,l,u,c,d,y.x,y.y)&&ol(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}function $o(t,e,i){let n=t;do{const r=n.prev,s=n.next.next;!ll(r,s)&&cl(r,n,n.next,s)&&dl(r,s)&&dl(s,r)&&(e.push(r.i/i|0),e.push(n.i/i|0),e.push(s.i/i|0),fl(n),fl(n.next),n=t=s),n=n.next}while(n!==t);return Yo(n)}function Qo(t,e,i,n,r,s){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&al(a,t)){let o=pl(a,t);return a=Yo(a,a.next),o=Yo(o,o.next),Zo(a,e,i,n,r,s,0),void Zo(o,e,i,n,r,s,0)}t=t.next}a=a.next}while(a!==t)}function tl(t,e){return t.x-e.x}function el(t,e){const i=function(t,e){let i,n=e,r=-1/0;const s=t.x,a=t.y;do{if(a<=n.y&&a>=n.next.y&&n.next.y!==n.y){const t=n.x+(a-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=s&&t>r&&(r=t,i=n.x<n.next.x?n:n.next,t===s))return i}n=n.next}while(n!==e);if(!i)return null;const o=i,l=i.x,c=i.y;let h,u=1/0;n=i;do{s>=n.x&&n.x>=l&&s!==n.x&&sl(a<c?s:r,a,l,c,a<c?r:s,a,n.x,n.y)&&(h=Math.abs(a-n.y)/(s-n.x),dl(n,t)&&(h<u||h===u&&(n.x>i.x||n.x===i.x&&il(i,n)))&&(i=n,u=h)),n=n.next}while(n!==o);return i}(t,e);if(!i)return e;const n=pl(i,t);return Yo(n,n.next),Yo(i,i.next)}function il(t,e){return ol(t.prev,t,e.prev)<0&&ol(e.next,t,t.next)<0}function nl(t,e,i,n,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-i)*r|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-n)*r|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function rl(t){let e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function sl(t,e,i,n,r,s,a,o){return(r-a)*(e-o)>=(t-a)*(s-o)&&(t-a)*(n-o)>=(i-a)*(e-o)&&(i-a)*(s-o)>=(r-a)*(n-o)}function al(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&cl(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&(dl(t,e)&&dl(e,t)&&function(t,e){let i=t,n=!1;const r=(t.x+e.x)/2,s=(t.y+e.y)/2;do{i.y>s!=i.next.y>s&&i.next.y!==i.y&&r<(i.next.x-i.x)*(s-i.y)/(i.next.y-i.y)+i.x&&(n=!n),i=i.next}while(i!==t);return n}(t,e)&&(ol(t.prev,t,e.prev)||ol(t,e.prev,e))||ll(t,e)&&ol(t.prev,t,t.next)>0&&ol(e.prev,e,e.next)>0)}function ol(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function ll(t,e){return t.x===e.x&&t.y===e.y}function cl(t,e,i,n){const r=ul(ol(t,e,i)),s=ul(ol(t,e,n)),a=ul(ol(i,n,t)),o=ul(ol(i,n,e));return r!==s&&a!==o||(!(0!==r||!hl(t,i,e))||(!(0!==s||!hl(t,n,e))||(!(0!==a||!hl(i,t,n))||!(0!==o||!hl(i,e,n)))))}function hl(t,e,i){return e.x<=Math.max(t.x,i.x)&&e.x>=Math.min(t.x,i.x)&&e.y<=Math.max(t.y,i.y)&&e.y>=Math.min(t.y,i.y)}function ul(t){return t>0?1:t<0?-1:0}function dl(t,e){return ol(t.prev,t,t.next)<0?ol(t,e,t.next)>=0&&ol(t,t.prev,e)>=0:ol(t,e,t.prev)<0||ol(t,t.next,e)<0}function pl(t,e){const i=new gl(t.i,t.x,t.y),n=new gl(e.i,e.x,e.y),r=t.next,s=e.prev;return t.next=e,e.prev=t,i.next=r,r.prev=i,n.next=i,i.prev=n,s.next=n,n.prev=s,n}function ml(t,e,i,n){const r=new gl(t,e,i);return n?(r.next=n.next,r.prev=n,n.next.prev=r,n.next=r):(r.prev=r,r.next=r),r}function fl(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function gl(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}class vl{static area(t){const e=t.length;let i=0;for(let n=e-1,r=0;r<e;n=r++)i+=t[n].x*t[r].y-t[r].x*t[n].y;return.5*i}static isClockWise(t){return vl.area(t)<0}static triangulateShape(t,e){const i=[],n=[],r=[];xl(t),_l(i,t);let s=t.length;e.forEach(xl);for(let t=0;t<e.length;t++)n.push(s),s+=e[t].length,_l(i,e[t]);const a=qo(i,n);for(let t=0;t<a.length;t+=3)r.push(a.slice(t,t+3));return r}}function xl(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function _l(t,e){for(let i=0;i<e.length;i++)t.push(e[i].x),t.push(e[i].y)}class yl extends Di{constructor(t=new jo([new Lt(.5,.5),new Lt(-.5,.5),new Lt(-.5,-.5),new Lt(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const i=this,n=[],r=[];for(let e=0,i=t.length;e<i;e++){s(t[e])}function s(t){const s=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1,l=void 0!==e.depth?e.depth:1;let c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:.2,u=void 0!==e.bevelSize?e.bevelSize:h-.1,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const m=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:Ml;let g,v,x,_,y,M=!1;m&&(g=m.getSpacedPoints(o),M=!0,c=!1,v=m.computeFrenetFrames(o,!1),x=new re,_=new re,y=new re),c||(p=0,h=0,u=0,d=0);const b=t.extractPoints(a);let w=b.shape;const S=b.holes;if(!vl.isClockWise(w)){w=w.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];vl.isClockWise(e)&&(S[t]=e.reverse())}}const T=vl.triangulateShape(w,S),A=w;for(let t=0,e=S.length;t<e;t++){const e=S[t];w=w.concat(e)}function E(t,e,i){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(i).add(t)}const C=w.length,L=T.length;function R(t,e,i){let n,r,s;const a=t.x-e.x,o=t.y-e.y,l=i.x-t.x,c=i.y-t.y,h=a*a+o*o,u=a*c-o*l;if(Math.abs(u)>Number.EPSILON){const u=Math.sqrt(h),d=Math.sqrt(l*l+c*c),p=e.x-o/u,m=e.y+a/u,f=((i.x-c/d-p)*c-(i.y+l/d-m)*l)/(a*c-o*l);n=p+a*f-t.x,r=m+o*f-t.y;const g=n*n+r*r;if(g<=2)return new Lt(n,r);s=Math.sqrt(g/2)}else{let t=!1;a>Number.EPSILON?l>Number.EPSILON&&(t=!0):a<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(c)&&(t=!0),t?(n=-o,r=a,s=Math.sqrt(h)):(n=a,r=o,s=Math.sqrt(h/2))}return new Lt(n/s,r/s)}const P=[];for(let t=0,e=A.length,i=e-1,n=t+1;t<e;t++,i++,n++)i===e&&(i=0),n===e&&(n=0),P[t]=R(A[t],A[i],A[n]);const I=[];let D,N=P.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];D=[];for(let t=0,i=e.length,n=i-1,r=t+1;t<i;t++,n++,r++)n===i&&(n=0),r===i&&(r=0),D[t]=R(e[t],e[n],e[r]);I.push(D),N=N.concat(D)}for(let t=0;t<p;t++){const e=t/p,i=h*Math.cos(e*Math.PI/2),n=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=A.length;t<e;t++){const e=E(A[t],P[t],n);U(e.x,e.y,-i)}for(let t=0,e=S.length;t<e;t++){const e=S[t];D=I[t];for(let t=0,r=e.length;t<r;t++){const r=E(e[t],D[t],n);U(r.x,r.y,-i)}}}const O=u+d;for(let t=0;t<C;t++){const e=c?E(w[t],N[t],O):w[t];M?(_.copy(v.normals[0]).multiplyScalar(e.x),x.copy(v.binormals[0]).multiplyScalar(e.y),y.copy(g[0]).add(_).add(x),U(y.x,y.y,y.z)):U(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<C;e++){const i=c?E(w[e],N[e],O):w[e];M?(_.copy(v.normals[t]).multiplyScalar(i.x),x.copy(v.binormals[t]).multiplyScalar(i.y),y.copy(g[t]).add(_).add(x),U(y.x,y.y,y.z)):U(i.x,i.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,i=h*Math.cos(e*Math.PI/2),n=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=A.length;t<e;t++){const e=E(A[t],P[t],n);U(e.x,e.y,l+i)}for(let t=0,e=S.length;t<e;t++){const e=S[t];D=I[t];for(let t=0,r=e.length;t<r;t++){const r=E(e[t],D[t],n);M?U(r.x,r.y+g[o-1].y,g[o-1].x+i):U(r.x,r.y,l+i)}}}function z(t,e){let i=t.length;for(;--i>=0;){const n=i;let r=i-1;r<0&&(r=t.length-1);for(let t=0,i=o+2*p;t<i;t++){const i=C*t,s=C*(t+1);F(e+n+i,e+r+i,e+r+s,e+n+s)}}}function U(t,e,i){s.push(t),s.push(e),s.push(i)}function B(t,e,r){k(t),k(e),k(r);const s=n.length/3,a=f.generateTopUV(i,n,s-3,s-2,s-1);G(a[0]),G(a[1]),G(a[2])}function F(t,e,r,s){k(t),k(e),k(s),k(e),k(r),k(s);const a=n.length/3,o=f.generateSideWallUV(i,n,a-6,a-3,a-2,a-1);G(o[0]),G(o[1]),G(o[3]),G(o[1]),G(o[2]),G(o[3])}function k(t){n.push(s[3*t+0]),n.push(s[3*t+1]),n.push(s[3*t+2])}function G(t){r.push(t.x),r.push(t.y)}!function(){const t=n.length/3;if(c){let t=0,e=C*t;for(let t=0;t<L;t++){const i=T[t];B(i[2]+e,i[1]+e,i[0]+e)}t=o+2*p,e=C*t;for(let t=0;t<L;t++){const i=T[t];B(i[0]+e,i[1]+e,i[2]+e)}}else{for(let t=0;t<L;t++){const e=T[t];B(e[2],e[1],e[0])}for(let t=0;t<L;t++){const e=T[t];B(e[0]+C*o,e[1]+C*o,e[2]+C*o)}}i.addGroup(t,n.length/3-t,0)}(),function(){const t=n.length/3;let e=0;z(A,e),e+=A.length;for(let t=0,i=S.length;t<i;t++){const i=S[t];z(i,e),e+=i.length}i.addGroup(t,n.length/3-t,1)}()}this.setAttribute("position",new Ti(n,3)),this.setAttribute("uv",new Ti(r,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,i){if(i.shapes=[],Array.isArray(t))for(let e=0,n=t.length;e<n;e++){const n=t[e];i.shapes.push(n.uuid)}else i.shapes.push(t.uuid);i.options=Object.assign({},e),void 0!==e.extrudePath&&(i.options.extrudePath=e.extrudePath.toJSON());return i}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const i=[];for(let n=0,r=t.shapes.length;n<r;n++){const r=e[t.shapes[n]];i.push(r)}const n=t.options.extrudePath;return void 0!==n&&(t.options.extrudePath=(new Ro[n.type]).fromJSON(n)),new yl(i,t.options)}}const Ml={generateTopUV:function(t,e,i,n,r){const s=e[3*i],a=e[3*i+1],o=e[3*n],l=e[3*n+1],c=e[3*r],h=e[3*r+1];return[new Lt(s,a),new Lt(o,l),new Lt(c,h)]},generateSideWallUV:function(t,e,i,n,r,s){const a=e[3*i],o=e[3*i+1],l=e[3*i+2],c=e[3*n],h=e[3*n+1],u=e[3*n+2],d=e[3*r],p=e[3*r+1],m=e[3*r+2],f=e[3*s],g=e[3*s+1],v=e[3*s+2];return Math.abs(o-h)<Math.abs(a-c)?[new Lt(a,1-l),new Lt(c,1-u),new Lt(d,1-m),new Lt(f,1-v)]:[new Lt(o,1-l),new Lt(h,1-u),new Lt(p,1-m),new Lt(g,1-v)]}};class bl extends Bo{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2;super([-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new bl(t.radius,t.detail)}}class wl extends Bo{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new wl(t.radius,t.detail)}}class Sl extends Di{constructor(t=.5,e=1,i=8,n=1,r=0,s=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:s},i=Math.max(3,i);const a=[],o=[],l=[],c=[];let h=t;const u=(e-t)/(n=Math.max(1,n)),d=new re,p=new Lt;for(let t=0;t<=n;t++){for(let t=0;t<=i;t++){const n=r+t/i*s;d.x=h*Math.cos(n),d.y=h*Math.sin(n),o.push(d.x,d.y,d.z),l.push(0,0,1),p.x=(d.x/e+1)/2,p.y=(d.y/e+1)/2,c.push(p.x,p.y)}h+=u}for(let t=0;t<n;t++){const e=t*(i+1);for(let t=0;t<i;t++){const n=t+e,r=n,s=n+i+1,o=n+i+2,l=n+1;a.push(r,s,l),a.push(s,o,l)}}this.setIndex(a),this.setAttribute("position",new Ti(o,3)),this.setAttribute("normal",new Ti(l,3)),this.setAttribute("uv",new Ti(c,2))}static fromJSON(t){return new Sl(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class Tl extends Di{constructor(t=new jo([new Lt(0,.5),new Lt(-.5,-.5),new Lt(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const i=[],n=[],r=[],s=[];let a=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(a,o,e),a+=o,o=0;function l(t){const a=n.length/3,l=t.extractPoints(e);let c=l.shape;const h=l.holes;!1===vl.isClockWise(c)&&(c=c.reverse());for(let t=0,e=h.length;t<e;t++){const e=h[t];!0===vl.isClockWise(e)&&(h[t]=e.reverse())}const u=vl.triangulateShape(c,h);for(let t=0,e=h.length;t<e;t++){const e=h[t];c=c.concat(e)}for(let t=0,e=c.length;t<e;t++){const e=c[t];n.push(e.x,e.y,0),r.push(0,0,1),s.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t],n=e[0]+a,r=e[1]+a,s=e[2]+a;i.push(n,r,s),o+=3}}this.setIndex(i),this.setAttribute("position",new Ti(n,3)),this.setAttribute("normal",new Ti(r,3)),this.setAttribute("uv",new Ti(s,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let i=0,n=t.length;i<n;i++){const n=t[i];e.shapes.push(n.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const i=[];for(let n=0,r=t.shapes.length;n<r;n++){const r=e[t.shapes[n]];i.push(r)}return new Tl(i,t.curveSegments)}}class Al extends Di{constructor(t=1,e=32,i=16,n=0,r=2*Math.PI,s=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:r,thetaStart:s,thetaLength:a},e=Math.max(3,Math.floor(e)),i=Math.max(2,Math.floor(i));const o=Math.min(s+a,Math.PI);let l=0;const c=[],h=new re,u=new re,d=[],p=[],m=[],f=[];for(let d=0;d<=i;d++){const g=[],v=d/i;let x=0;0==d&&0==s?x=.5/e:d==i&&o==Math.PI&&(x=-.5/e);for(let i=0;i<=e;i++){const o=i/e;h.x=-t*Math.cos(n+o*r)*Math.sin(s+v*a),h.y=t*Math.cos(s+v*a),h.z=t*Math.sin(n+o*r)*Math.sin(s+v*a),p.push(h.x,h.y,h.z),u.copy(h).normalize(),m.push(u.x,u.y,u.z),f.push(o+x,1-v),g.push(l++)}c.push(g)}for(let t=0;t<i;t++)for(let n=0;n<e;n++){const e=c[t][n+1],r=c[t][n],a=c[t+1][n],l=c[t+1][n+1];(0!==t||s>0)&&d.push(e,r,l),(t!==i-1||o<Math.PI)&&d.push(r,a,l)}this.setIndex(d),this.setAttribute("position",new Ti(p,3)),this.setAttribute("normal",new Ti(m,3)),this.setAttribute("uv",new Ti(f,2))}static fromJSON(t){return new Al(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class El extends Bo{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new El(t.radius,t.detail)}}class Cl extends Di{constructor(t=1,e=.4,i=8,n=6,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:r},i=Math.floor(i),n=Math.floor(n);const s=[],a=[],o=[],l=[],c=new re,h=new re,u=new re;for(let s=0;s<=i;s++)for(let d=0;d<=n;d++){const p=d/n*r,m=s/i*Math.PI*2;h.x=(t+e*Math.cos(m))*Math.cos(p),h.y=(t+e*Math.cos(m))*Math.sin(p),h.z=e*Math.sin(m),a.push(h.x,h.y,h.z),c.x=t*Math.cos(p),c.y=t*Math.sin(p),u.subVectors(h,c).normalize(),o.push(u.x,u.y,u.z),l.push(d/n),l.push(s/i)}for(let t=1;t<=i;t++)for(let e=1;e<=n;e++){const i=(n+1)*t+e-1,r=(n+1)*(t-1)+e-1,a=(n+1)*(t-1)+e,o=(n+1)*t+e;s.push(i,r,o),s.push(r,a,o)}this.setIndex(s),this.setAttribute("position",new Ti(a,3)),this.setAttribute("normal",new Ti(o,3)),this.setAttribute("uv",new Ti(l,2))}static fromJSON(t){return new Cl(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class Ll extends Di{constructor(t=1,e=.4,i=64,n=8,r=2,s=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:r,q:s},i=Math.floor(i),n=Math.floor(n);const a=[],o=[],l=[],c=[],h=new re,u=new re,d=new re,p=new re,m=new re,f=new re,g=new re;for(let a=0;a<=i;++a){const x=a/i*r*Math.PI*2;v(x,r,s,t,d),v(x+.01,r,s,t,p),f.subVectors(p,d),g.addVectors(p,d),m.crossVectors(f,g),g.crossVectors(m,f),m.normalize(),g.normalize();for(let t=0;t<=n;++t){const r=t/n*Math.PI*2,s=-e*Math.cos(r),p=e*Math.sin(r);h.x=d.x+(s*g.x+p*m.x),h.y=d.y+(s*g.y+p*m.y),h.z=d.z+(s*g.z+p*m.z),o.push(h.x,h.y,h.z),u.subVectors(h,d).normalize(),l.push(u.x,u.y,u.z),c.push(a/i),c.push(t/n)}}for(let t=1;t<=i;t++)for(let e=1;e<=n;e++){const i=(n+1)*(t-1)+(e-1),r=(n+1)*t+(e-1),s=(n+1)*t+e,o=(n+1)*(t-1)+e;a.push(i,r,o),a.push(r,s,o)}function v(t,e,i,n,r){const s=Math.cos(t),a=Math.sin(t),o=i/e*t,l=Math.cos(o);r.x=n*(2+l)*.5*s,r.y=n*(2+l)*a*.5,r.z=n*Math.sin(o)*.5}this.setIndex(a),this.setAttribute("position",new Ti(o,3)),this.setAttribute("normal",new Ti(l,3)),this.setAttribute("uv",new Ti(c,2))}static fromJSON(t){return new Ll(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class Rl extends Di{constructor(t=new Co(new re(-1,-1,0),new re(-1,1,0),new re(1,1,0)),e=64,i=1,n=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:r};const s=t.computeFrenetFrames(e,r);this.tangents=s.tangents,this.normals=s.normals,this.binormals=s.binormals;const a=new re,o=new re,l=new Lt;let c=new re;const h=[],u=[],d=[],p=[];function m(r){c=t.getPointAt(r/e,c);const l=s.normals[r],d=s.binormals[r];for(let t=0;t<=n;t++){const e=t/n*Math.PI*2,r=Math.sin(e),s=-Math.cos(e);o.x=s*l.x+r*d.x,o.y=s*l.y+r*d.y,o.z=s*l.z+r*d.z,o.normalize(),u.push(o.x,o.y,o.z),a.x=c.x+i*o.x,a.y=c.y+i*o.y,a.z=c.z+i*o.z,h.push(a.x,a.y,a.z)}}!function(){for(let t=0;t<e;t++)m(t);m(!1===r?e:0),function(){for(let t=0;t<=e;t++)for(let i=0;i<=n;i++)l.x=t/e,l.y=i/n,d.push(l.x,l.y)}(),function(){for(let t=1;t<=e;t++)for(let e=1;e<=n;e++){const i=(n+1)*(t-1)+(e-1),r=(n+1)*t+(e-1),s=(n+1)*t+e,a=(n+1)*(t-1)+e;p.push(i,r,a),p.push(r,s,a)}}()}(),this.setIndex(p),this.setAttribute("position",new Ti(h,3)),this.setAttribute("normal",new Ti(u,3)),this.setAttribute("uv",new Ti(d,2))}toJSON(){const t=super.toJSON();return t.path=this.parameters.path.toJSON(),t}static fromJSON(t){return new Rl((new Ro[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class Pl extends Di{constructor(t=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:t},null!==t){const e=[],i=new Set,n=new re,r=new re;if(null!==t.index){const s=t.attributes.position,a=t.index;let o=t.groups;0===o.length&&(o=[{start:0,count:a.count,materialIndex:0}]);for(let t=0,l=o.length;t<l;++t){const l=o[t],c=l.start;for(let t=c,o=c+l.count;t<o;t+=3)for(let o=0;o<3;o++){const l=a.getX(t+o),c=a.getX(t+(o+1)%3);n.fromBufferAttribute(s,l),r.fromBufferAttribute(s,c),!0===Il(n,r,i)&&(e.push(n.x,n.y,n.z),e.push(r.x,r.y,r.z))}}}else{const s=t.attributes.position;for(let t=0,a=s.count/3;t<a;t++)for(let a=0;a<3;a++){const o=3*t+a,l=3*t+(a+1)%3;n.fromBufferAttribute(s,o),r.fromBufferAttribute(s,l),!0===Il(n,r,i)&&(e.push(n.x,n.y,n.z),e.push(r.x,r.y,r.z))}}this.setAttribute("position",new Ti(e,3))}}}function Il(t,e,i){const n=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`,r=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;return!0!==i.has(n)&&!0!==i.has(r)&&(i.add(n),i.add(r),!0)}var Dl=Object.freeze({__proto__:null,BoxGeometry:Qi,CapsuleGeometry:No,CircleGeometry:Oo,ConeGeometry:Uo,CylinderGeometry:zo,DodecahedronGeometry:Fo,EdgesGeometry:Wo,ExtrudeGeometry:yl,IcosahedronGeometry:bl,LatheGeometry:Do,OctahedronGeometry:wl,PlaneGeometry:Mn,PolyhedronGeometry:Bo,RingGeometry:Sl,ShapeGeometry:Tl,SphereGeometry:Al,TetrahedronGeometry:El,TorusGeometry:Cl,TorusKnotGeometry:Ll,TubeGeometry:Rl,WireframeGeometry:Pl});class Nl extends xi{constructor(t){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new qt(0),this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.fog=t.fog,this}}class Ol extends sn{constructor(t){super(t),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class zl extends xi{constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new qt(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new qt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Ul extends zl{constructor(t){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Lt(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return yt(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new qt(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new qt(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new qt(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._iridescence=0,this._transmission=0,this.setValues(t)}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){this._iridescence>0!=t>0&&this.version++,this._iridescence=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.ior=t.ior,this.iridescence=t.iridescence,this.iridescenceMap=t.iridescenceMap,this.iridescenceIOR=t.iridescenceIOR,this.iridescenceThicknessRange=[...t.iridescenceThicknessRange],this.iridescenceThicknessMap=t.iridescenceThicknessMap,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}class Bl extends xi{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new qt(16777215),this.specular=new qt(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new qt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Fl extends xi{constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new qt(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new qt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}class kl extends xi{constructor(t){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}class Gl extends xi{constructor(t){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new qt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new qt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Vl extends xi{constructor(t){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new qt(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Lt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Hl extends ja{constructor(t){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}function Wl(t,e,i){return ql(t)?new t.constructor(t.subarray(e,void 0!==i?i:t.length)):t.slice(e,i)}function jl(t,e,i){return!t||!i&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)}function ql(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Xl(t){const e=t.length,i=new Array(e);for(let t=0;t!==e;++t)i[t]=t;return i.sort((function(e,i){return t[e]-t[i]})),i}function Yl(t,e,i){const n=t.length,r=new t.constructor(n);for(let s=0,a=0;a!==n;++s){const n=i[s]*e;for(let i=0;i!==e;++i)r[a++]=t[n+i]}return r}function Zl(t,e,i,n){let r=1,s=t[0];for(;void 0!==s&&void 0===s[n];)s=t[r++];if(void 0===s)return;let a=s[n];if(void 0!==a)if(Array.isArray(a))do{a=s[n],void 0!==a&&(e.push(s.time),i.push.apply(i,a)),s=t[r++]}while(void 0!==s);else if(void 0!==a.toArray)do{a=s[n],void 0!==a&&(e.push(s.time),a.toArray(i,i.length)),s=t[r++]}while(void 0!==s);else do{a=s[n],void 0!==a&&(e.push(s.time),i.push(a)),s=t[r++]}while(void 0!==s)}var Jl=Object.freeze({__proto__:null,arraySlice:Wl,convertArray:jl,isTypedArray:ql,getKeyframeOrder:Xl,sortedArray:Yl,flattenJSON:Zl,subclip:function(t,e,i,n,r=30){const s=t.clone();s.name=e;const a=[];for(let t=0;t<s.tracks.length;++t){const e=s.tracks[t],o=e.getValueSize(),l=[],c=[];for(let t=0;t<e.times.length;++t){const s=e.times[t]*r;if(!(s<i||s>=n)){l.push(e.times[t]);for(let i=0;i<o;++i)c.push(e.values[t*o+i])}}0!==l.length&&(e.times=jl(l,e.times.constructor),e.values=jl(c,e.values.constructor),a.push(e))}s.tracks=a;let o=1/0;for(let t=0;t<s.tracks.length;++t)o>s.tracks[t].times[0]&&(o=s.tracks[t].times[0]);for(let t=0;t<s.tracks.length;++t)s.tracks[t].shift(-1*o);return s.resetDuration(),s},makeClipAdditive:function(t,e=0,i=t,n=30){n<=0&&(n=30);const r=i.tracks.length,s=e/n;for(let e=0;e<r;++e){const n=i.tracks[e],r=n.ValueTypeName;if("bool"===r||"string"===r)continue;const a=t.tracks.find((function(t){return t.name===n.name&&t.ValueTypeName===r}));if(void 0===a)continue;let o=0;const l=n.getValueSize();n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const h=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const u=n.times.length-1;let d;if(s<=n.times[0]){const t=o,e=l-o;d=Wl(n.values,t,e)}else if(s>=n.times[u]){const t=u*l+o,e=t+l-o;d=Wl(n.values,t,e)}else{const t=n.createInterpolant(),e=o,i=l-o;t.evaluate(s),d=Wl(t.resultBuffer,e,i)}if("quaternion"===r){(new ne).fromArray(d).normalize().conjugate().toArray(d)}const p=a.times.length;for(let t=0;t<p;++t){const e=t*h+c;if("quaternion"===r)ne.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e);else{const t=h-2*c;for(let i=0;i<t;++i)a.values[e+i]-=d[i]}}}return t.blendMode=st,t}});class Kl{constructor(t,e,i,n){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new e.constructor(i),this.sampleValues=e,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let i=this._cachedIndex,n=e[i],r=e[i-1];t:{e:{let s;i:{n:if(!(t<n)){for(let s=i+2;;){if(void 0===n){if(t<r)break n;return i=e.length,this._cachedIndex=i,this.copySampleValue_(i-1)}if(i===s)break;if(r=n,n=e[++i],t<n)break e}s=e.length;break i}if(t>=r)break t;{const a=e[1];t<a&&(i=2,r=a);for(let s=i-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(i===s)break;if(n=r,r=e[--i-1],t>=r)break e}s=i,i=0}}for(;i<s;){const n=i+s>>>1;t<e[n]?s=n:i=n+1}if(n=e[i],r=e[i-1],void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===n)return i=e.length,this._cachedIndex=i,this.copySampleValue_(i-1)}this._cachedIndex=i,this.intervalChanged_(i,r,n)}return this.interpolate_(i,r,t,n)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,i=this.sampleValues,n=this.valueSize,r=t*n;for(let t=0;t!==n;++t)e[t]=i[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class $l extends Kl{constructor(t,e,i,n){super(t,e,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:et,endingEnd:et}}intervalChanged_(t,e,i){const n=this.parameterPositions;let r=t-2,s=t+1,a=n[r],o=n[s];if(void 0===a)switch(this.getSettings_().endingStart){case it:r=t,a=2*e-i;break;case nt:r=n.length-2,a=e+n[r]-n[r+1];break;default:r=t,a=i}if(void 0===o)switch(this.getSettings_().endingEnd){case it:s=t,o=2*i-e;break;case nt:s=1,o=i+n[1]-n[0];break;default:s=t-1,o=e}const l=.5*(i-e),c=this.valueSize;this._weightPrev=l/(e-a),this._weightNext=l/(o-i),this._offsetPrev=r*c,this._offsetNext=s*c}interpolate_(t,e,i,n){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(i-e)/(n-e),m=p*p,f=m*p,g=-u*f+2*u*m-u*p,v=(1+u)*f+(-1.5-2*u)*m+(-.5+u)*p+1,x=(-1-d)*f+(1.5+d)*m+.5*p,_=d*f-d*m;for(let t=0;t!==a;++t)r[t]=g*s[c+t]+v*s[l+t]+x*s[o+t]+_*s[h+t];return r}}class Ql extends Kl{constructor(t,e,i,n){super(t,e,i,n)}interpolate_(t,e,i,n){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=(i-e)/(n-e),h=1-c;for(let t=0;t!==a;++t)r[t]=s[l+t]*h+s[o+t]*c;return r}}class tc extends Kl{constructor(t,e,i,n){super(t,e,i,n)}interpolate_(t){return this.copySampleValue_(t-1)}}class ec{constructor(t,e,i,n){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=jl(e,this.TimeBufferType),this.values=jl(i,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let i;if(e.toJSON!==this.toJSON)i=e.toJSON(t);else{i={name:t.name,times:jl(t.times,Array),values:jl(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(i.interpolation=e)}return i.type=t.ValueTypeName,i}InterpolantFactoryMethodDiscrete(t){return new tc(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Ql(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new $l(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case $:e=this.InterpolantFactoryMethodDiscrete;break;case Q:e=this.InterpolantFactoryMethodLinear;break;case tt:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return $;case this.InterpolantFactoryMethodLinear:return Q;case this.InterpolantFactoryMethodSmooth:return tt}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let i=0,n=e.length;i!==n;++i)e[i]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let i=0,n=e.length;i!==n;++i)e[i]*=t}return this}trim(t,e){const i=this.times,n=i.length;let r=0,s=n-1;for(;r!==n&&i[r]<t;)++r;for(;-1!==s&&i[s]>e;)--s;if(++s,0!==r||s!==n){r>=s&&(s=Math.max(s,1),r=s-1);const t=this.getValueSize();this.times=Wl(i,r,s),this.values=Wl(this.values,r*t,s*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const i=this.times,n=this.values,r=i.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let s=null;for(let e=0;e!==r;e++){const n=i[e];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,n),t=!1;break}if(null!==s&&s>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,n,s),t=!1;break}s=n}if(void 0!==n&&ql(n))for(let e=0,i=n.length;e!==i;++e){const i=n[e];if(isNaN(i)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,i),t=!1;break}}return t}optimize(){const t=Wl(this.times),e=Wl(this.values),i=this.getValueSize(),n=this.getInterpolation()===tt,r=t.length-1;let s=1;for(let a=1;a<r;++a){let r=!1;const o=t[a];if(o!==t[a+1]&&(1!==a||o!==t[0]))if(n)r=!0;else{const t=a*i,n=t-i,s=t+i;for(let a=0;a!==i;++a){const i=e[t+a];if(i!==e[n+a]||i!==e[s+a]){r=!0;break}}}if(r){if(a!==s){t[s]=t[a];const n=a*i,r=s*i;for(let t=0;t!==i;++t)e[r+t]=e[n+t]}++s}}if(r>0){t[s]=t[r];for(let t=r*i,n=s*i,a=0;a!==i;++a)e[n+a]=e[t+a];++s}return s!==t.length?(this.times=Wl(t,0,s),this.values=Wl(e,0,s*i)):(this.times=t,this.values=e),this}clone(){const t=Wl(this.times,0),e=Wl(this.values,0),i=new(0,this.constructor)(this.name,t,e);return i.createInterpolant=this.createInterpolant,i}}ec.prototype.TimeBufferType=Float32Array,ec.prototype.ValueBufferType=Float32Array,ec.prototype.DefaultInterpolation=Q;class ic extends ec{}ic.prototype.ValueTypeName="bool",ic.prototype.ValueBufferType=Array,ic.prototype.DefaultInterpolation=$,ic.prototype.InterpolantFactoryMethodLinear=void 0,ic.prototype.InterpolantFactoryMethodSmooth=void 0;class nc extends ec{}nc.prototype.ValueTypeName="color";class rc extends ec{}rc.prototype.ValueTypeName="number";class sc extends Kl{constructor(t,e,i,n){super(t,e,i,n)}interpolate_(t,e,i,n){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=(i-e)/(n-e);let l=t*a;for(let t=l+a;l!==t;l+=4)ne.slerpFlat(r,0,s,l-a,s,l,o);return r}}class ac extends ec{InterpolantFactoryMethodLinear(t){return new sc(this.times,this.values,this.getValueSize(),t)}}ac.prototype.ValueTypeName="quaternion",ac.prototype.DefaultInterpolation=Q,ac.prototype.InterpolantFactoryMethodSmooth=void 0;class oc extends ec{}oc.prototype.ValueTypeName="string",oc.prototype.ValueBufferType=Array,oc.prototype.DefaultInterpolation=$,oc.prototype.InterpolantFactoryMethodLinear=void 0,oc.prototype.InterpolantFactoryMethodSmooth=void 0;class lc extends ec{}lc.prototype.ValueTypeName="vector";class cc{constructor(t,e=-1,i,n=2500){this.name=t,this.tracks=i,this.duration=e,this.blendMode=n,this.uuid=_t(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],i=t.tracks,n=1/(t.fps||1);for(let t=0,r=i.length;t!==r;++t)e.push(hc(i[t]).scale(n));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],i=t.tracks,n={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,n=i.length;t!==n;++t)e.push(ec.toJSON(i[t]));return n}static CreateFromMorphTargetSequence(t,e,i,n){const r=e.length,s=[];for(let t=0;t<r;t++){let a=[],o=[];a.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const l=Xl(a);a=Yl(a,1,l),o=Yl(o,1,l),n||0!==a[0]||(a.push(r),o.push(o[0])),s.push(new rc(".morphTargetInfluences["+e[t].name+"]",a,o).scale(1/i))}return new this(t,-1,s)}static findByName(t,e){let i=t;if(!Array.isArray(t)){const e=t;i=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<i.length;t++)if(i[t].name===e)return i[t];return null}static CreateClipsFromMorphTargetSequences(t,e,i){const n={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,i=t.length;e<i;e++){const i=t[e],s=i.name.match(r);if(s&&s.length>1){const t=s[1];let e=n[t];e||(n[t]=e=[]),e.push(i)}}const s=[];for(const t in n)s.push(this.CreateFromMorphTargetSequence(t,n[t],e,i));return s}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const i=function(t,e,i,n,r){if(0!==i.length){const s=[],a=[];Zl(i,s,a,n),0!==s.length&&r.push(new t(e,s,a))}},n=[],r=t.name||"default",s=t.fps||30,a=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let i=0;i<r[e].morphTargets.length;i++)t[r[e].morphTargets[i]]=-1;for(const i in t){const t=[],s=[];for(let n=0;n!==r[e].morphTargets.length;++n){const n=r[e];t.push(n.time),s.push(n.morphTarget===i?1:0)}n.push(new rc(".morphTargetInfluence["+i+"]",t,s))}o=t.length*s}else{const s=".bones["+e[t].name+"]";i(lc,s+".position",r,"pos",n),i(ac,s+".quaternion",r,"rot",n),i(lc,s+".scale",r,"scl",n)}}if(0===n.length)return null;return new this(r,o,n,a)}resetDuration(){let t=0;for(let e=0,i=this.tracks.length;e!==i;++e){const i=this.tracks[e];t=Math.max(t,i.times[i.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function hc(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return rc;case"vector":case"vector2":case"vector3":case"vector4":return lc;case"color":return nc;case"quaternion":return ac;case"bool":case"boolean":return ic;case"string":return oc}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],i=[];Zl(t.keys,e,i,"value"),t.times=e,t.values=i}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const uc={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class dc{constructor(t,e,i){const n=this;let r,s=!1,a=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){o++,!1===s&&void 0!==n.onStart&&n.onStart(t,a,o),s=!0},this.itemEnd=function(t){a++,void 0!==n.onProgress&&n.onProgress(t,a,o),a===o&&(s=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(t){void 0!==n.onError&&n.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,i=l.length;e<i;e+=2){const i=l[e],n=l[e+1];if(i.global&&(i.lastIndex=0),i.test(t))return n}return null}}}const pc=new dc;class mc{constructor(t){this.manager=void 0!==t?t:pc,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const i=this;return new Promise((function(n,r){i.load(t,n,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const fc={};class gc extends Error{constructor(t,e){super(t),this.response=e}}class vc extends mc{constructor(t){super(t)}load(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=uc.get(t);if(void 0!==r)return this.manager.itemStart(t),setTimeout((()=>{e&&e(r),this.manager.itemEnd(t)}),0),r;if(void 0!==fc[t])return void fc[t].push({onLoad:e,onProgress:i,onError:n});fc[t]=[],fc[t].push({onLoad:e,onProgress:i,onError:n});const s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,o=this.responseType;fetch(s).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const i=fc[t],n=e.body.getReader(),r=e.headers.get("Content-Length")||e.headers.get("X-File-Size"),s=r?parseInt(r):0,a=0!==s;let o=0;const l=new ReadableStream({start(t){!function e(){n.read().then((({done:n,value:r})=>{if(n)t.close();else{o+=r.byteLength;const n=new ProgressEvent("progress",{lengthComputable:a,loaded:o,total:s});for(let t=0,e=i.length;t<e;t++){const e=i[t];e.onProgress&&e.onProgress(n)}t.enqueue(r),e()}}))}()}});return new Response(l)}throw new gc(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)})).then((t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,a)));case"json":return t.json();default:if(void 0===a)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(a),i=e&&e[1]?e[1].toLowerCase():void 0,n=new TextDecoder(i);return t.arrayBuffer().then((t=>n.decode(t)))}}})).then((e=>{uc.add(t,e);const i=fc[t];delete fc[t];for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onLoad&&n.onLoad(e)}})).catch((e=>{const i=fc[t];if(void 0===i)throw this.manager.itemError(t),e;delete fc[t];for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onError&&n.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class xc extends mc{constructor(t){super(t)}load(t,e,i,n){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=uc.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a=Ot("img");function o(){c(),uc.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){c(),n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,!1),a.removeEventListener("error",l,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",l,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a}}class _c extends si{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new qt(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}class yc extends _c{constructor(t,e,i){super(t,i),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(si.DefaultUp),this.updateMatrix(),this.groundColor=new qt(e)}copy(t,e){return super.copy(t,e),this.groundColor.copy(t.groundColor),this}}const Mc=new Ne,bc=new re,wc=new re;class Sc{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Lt(512,512),this.map=null,this.mapPass=null,this.matrix=new Ne,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new xn,this._frameExtents=new Lt(1,1),this._viewportCount=1,this._viewports=[new Qt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;bc.setFromMatrixPosition(t.matrixWorld),e.position.copy(bc),wc.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(wc),e.updateMatrixWorld(),Mc.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Mc),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(Mc)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class Tc extends Sc{constructor(){super(new on(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,i=2*xt*t.angle*this.focus,n=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;i===e.fov&&n===e.aspect&&r===e.far||(e.fov=i,e.aspect=n,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}class Ac extends _c{constructor(t,e,i=0,n=Math.PI/3,r=0,s=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(si.DefaultUp),this.updateMatrix(),this.target=new si,this.distance=i,this.angle=n,this.penumbra=r,this.decay=s,this.map=null,this.shadow=new Tc}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}const Ec=new Ne,Cc=new re,Lc=new re;class Rc extends Sc{constructor(){super(new on(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Lt(4,2),this._viewportCount=6,this._viewports=[new Qt(2,1,1,1),new Qt(0,1,1,1),new Qt(3,1,1,1),new Qt(1,1,1,1),new Qt(3,0,1,1),new Qt(1,0,1,1)],this._cubeDirections=[new re(1,0,0),new re(-1,0,0),new re(0,0,1),new re(0,0,-1),new re(0,1,0),new re(0,-1,0)],this._cubeUps=[new re(0,1,0),new re(0,1,0),new re(0,1,0),new re(0,1,0),new re(0,0,1),new re(0,0,-1)]}updateMatrices(t,e=0){const i=this.camera,n=this.matrix,r=t.distance||i.far;r!==i.far&&(i.far=r,i.updateProjectionMatrix()),Cc.setFromMatrixPosition(t.matrixWorld),i.position.copy(Cc),Lc.copy(i.position),Lc.add(this._cubeDirections[e]),i.up.copy(this._cubeUps[e]),i.lookAt(Lc),i.updateMatrixWorld(),n.makeTranslation(-Cc.x,-Cc.y,-Cc.z),Ec.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ec)}}class Pc extends _c{constructor(t,e,i=0,n=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=i,this.decay=n,this.shadow=new Rc}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class Ic extends Sc{constructor(){super(new In(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Dc extends _c{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(si.DefaultUp),this.updateMatrix(),this.target=new si,this.shadow=new Ic}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class Nc extends _c{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class Oc extends _c{constructor(t,e,i=10,n=10){super(t,e),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=i,this.height=n}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}class zc{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new re)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const i=t.x,n=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.282095),e.addScaledVector(s[1],.488603*n),e.addScaledVector(s[2],.488603*r),e.addScaledVector(s[3],.488603*i),e.addScaledVector(s[4],i*n*1.092548),e.addScaledVector(s[5],n*r*1.092548),e.addScaledVector(s[6],.315392*(3*r*r-1)),e.addScaledVector(s[7],i*r*1.092548),e.addScaledVector(s[8],.546274*(i*i-n*n)),e}getIrradianceAt(t,e){const i=t.x,n=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.886227),e.addScaledVector(s[1],1.023328*n),e.addScaledVector(s[2],1.023328*r),e.addScaledVector(s[3],1.023328*i),e.addScaledVector(s[4],.858086*i*n),e.addScaledVector(s[5],.858086*n*r),e.addScaledVector(s[6],.743125*r*r-.247708),e.addScaledVector(s[7],.858086*i*r),e.addScaledVector(s[8],.429043*(i*i-n*n)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const i=this.coefficients;for(let n=0;n<9;n++)i[n].fromArray(t,e+3*n);return this}toArray(t=[],e=0){const i=this.coefficients;for(let n=0;n<9;n++)i[n].toArray(t,e+3*n);return t}static getBasisAt(t,e){const i=t.x,n=t.y,r=t.z;e[0]=.282095,e[1]=.488603*n,e[2]=.488603*r,e[3]=.488603*i,e[4]=1.092548*i*n,e[5]=1.092548*n*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*i*r,e[8]=.546274*(i*i-n*n)}}class Uc extends _c{constructor(t=new zc,e=1){super(void 0,e),this.isLightProbe=!0,this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}class Bc extends mc{constructor(t){super(t),this.textures={}}load(t,e,i,n){const r=this,s=new vc(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),r.manager.itemError(t)}}),i,n)}parse(t){const e=this.textures;function i(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}const n=Bc.createMaterialFromType(t.type);if(void 0!==t.uuid&&(n.uuid=t.uuid),void 0!==t.name&&(n.name=t.name),void 0!==t.color&&void 0!==n.color&&n.color.setHex(t.color),void 0!==t.roughness&&(n.roughness=t.roughness),void 0!==t.metalness&&(n.metalness=t.metalness),void 0!==t.sheen&&(n.sheen=t.sheen),void 0!==t.sheenColor&&(n.sheenColor=(new qt).setHex(t.sheenColor)),void 0!==t.sheenRoughness&&(n.sheenRoughness=t.sheenRoughness),void 0!==t.emissive&&void 0!==n.emissive&&n.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==n.specular&&n.specular.setHex(t.specular),void 0!==t.specularIntensity&&(n.specularIntensity=t.specularIntensity),void 0!==t.specularColor&&void 0!==n.specularColor&&n.specularColor.setHex(t.specularColor),void 0!==t.shininess&&(n.shininess=t.shininess),void 0!==t.clearcoat&&(n.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(n.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.iridescence&&(n.iridescence=t.iridescence),void 0!==t.iridescenceIOR&&(n.iridescenceIOR=t.iridescenceIOR),void 0!==t.iridescenceThicknessRange&&(n.iridescenceThicknessRange=t.iridescenceThicknessRange),void 0!==t.transmission&&(n.transmission=t.transmission),void 0!==t.thickness&&(n.thickness=t.thickness),void 0!==t.attenuationDistance&&(n.attenuationDistance=t.attenuationDistance),void 0!==t.attenuationColor&&void 0!==n.attenuationColor&&n.attenuationColor.setHex(t.attenuationColor),void 0!==t.fog&&(n.fog=t.fog),void 0!==t.flatShading&&(n.flatShading=t.flatShading),void 0!==t.blending&&(n.blending=t.blending),void 0!==t.combine&&(n.combine=t.combine),void 0!==t.side&&(n.side=t.side),void 0!==t.shadowSide&&(n.shadowSide=t.shadowSide),void 0!==t.opacity&&(n.opacity=t.opacity),void 0!==t.transparent&&(n.transparent=t.transparent),void 0!==t.alphaTest&&(n.alphaTest=t.alphaTest),void 0!==t.depthTest&&(n.depthTest=t.depthTest),void 0!==t.depthWrite&&(n.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(n.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(n.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(n.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(n.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(n.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(n.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(n.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(n.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(n.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(n.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(n.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(n.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(n.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(n.rotation=t.rotation),1!==t.linewidth&&(n.linewidth=t.linewidth),void 0!==t.dashSize&&(n.dashSize=t.dashSize),void 0!==t.gapSize&&(n.gapSize=t.gapSize),void 0!==t.scale&&(n.scale=t.scale),void 0!==t.polygonOffset&&(n.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(n.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(n.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.dithering&&(n.dithering=t.dithering),void 0!==t.alphaToCoverage&&(n.alphaToCoverage=t.alphaToCoverage),void 0!==t.premultipliedAlpha&&(n.premultipliedAlpha=t.premultipliedAlpha),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.toneMapped&&(n.toneMapped=t.toneMapped),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?n.vertexColors=t.vertexColors>0:n.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const r=t.uniforms[e];switch(n.uniforms[e]={},r.type){case"t":n.uniforms[e].value=i(r.value);break;case"c":n.uniforms[e].value=(new qt).setHex(r.value);break;case"v2":n.uniforms[e].value=(new Lt).fromArray(r.value);break;case"v3":n.uniforms[e].value=(new re).fromArray(r.value);break;case"v4":n.uniforms[e].value=(new Qt).fromArray(r.value);break;case"m3":n.uniforms[e].value=(new Rt).fromArray(r.value);break;case"m4":n.uniforms[e].value=(new Ne).fromArray(r.value);break;default:n.uniforms[e].value=r.value}}if(void 0!==t.defines&&(n.defines=t.defines),void 0!==t.vertexShader&&(n.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(n.fragmentShader=t.fragmentShader),void 0!==t.glslVersion&&(n.glslVersion=t.glslVersion),void 0!==t.extensions)for(const e in t.extensions)n.extensions[e]=t.extensions[e];if(void 0!==t.size&&(n.size=t.size),void 0!==t.sizeAttenuation&&(n.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(n.map=i(t.map)),void 0!==t.matcap&&(n.matcap=i(t.matcap)),void 0!==t.alphaMap&&(n.alphaMap=i(t.alphaMap)),void 0!==t.bumpMap&&(n.bumpMap=i(t.bumpMap)),void 0!==t.bumpScale&&(n.bumpScale=t.bumpScale),void 0!==t.normalMap&&(n.normalMap=i(t.normalMap)),void 0!==t.normalMapType&&(n.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),n.normalScale=(new Lt).fromArray(e)}return void 0!==t.displacementMap&&(n.displacementMap=i(t.displacementMap)),void 0!==t.displacementScale&&(n.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(n.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(n.roughnessMap=i(t.roughnessMap)),void 0!==t.metalnessMap&&(n.metalnessMap=i(t.metalnessMap)),void 0!==t.emissiveMap&&(n.emissiveMap=i(t.emissiveMap)),void 0!==t.emissiveIntensity&&(n.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(n.specularMap=i(t.specularMap)),void 0!==t.specularIntensityMap&&(n.specularIntensityMap=i(t.specularIntensityMap)),void 0!==t.specularColorMap&&(n.specularColorMap=i(t.specularColorMap)),void 0!==t.envMap&&(n.envMap=i(t.envMap)),void 0!==t.envMapIntensity&&(n.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(n.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(n.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(n.lightMap=i(t.lightMap)),void 0!==t.lightMapIntensity&&(n.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(n.aoMap=i(t.aoMap)),void 0!==t.aoMapIntensity&&(n.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(n.gradientMap=i(t.gradientMap)),void 0!==t.clearcoatMap&&(n.clearcoatMap=i(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(n.clearcoatRoughnessMap=i(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(n.clearcoatNormalMap=i(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(n.clearcoatNormalScale=(new Lt).fromArray(t.clearcoatNormalScale)),void 0!==t.iridescenceMap&&(n.iridescenceMap=i(t.iridescenceMap)),void 0!==t.iridescenceThicknessMap&&(n.iridescenceThicknessMap=i(t.iridescenceThicknessMap)),void 0!==t.transmissionMap&&(n.transmissionMap=i(t.transmissionMap)),void 0!==t.thicknessMap&&(n.thicknessMap=i(t.thicknessMap)),void 0!==t.sheenColorMap&&(n.sheenColorMap=i(t.sheenColorMap)),void 0!==t.sheenRoughnessMap&&(n.sheenRoughnessMap=i(t.sheenRoughnessMap)),n}setTextures(t){return this.textures=t,this}static createMaterialFromType(t){return new{ShadowMaterial:Nl,SpriteMaterial:la,RawShaderMaterial:Ol,ShaderMaterial:sn,PointsMaterial:io,MeshPhysicalMaterial:Ul,MeshStandardMaterial:zl,MeshPhongMaterial:Bl,MeshToonMaterial:Fl,MeshNormalMaterial:kl,MeshLambertMaterial:Gl,MeshDepthMaterial:Us,MeshDistanceMaterial:Bs,MeshBasicMaterial:_i,MeshMatcapMaterial:Vl,LineDashedMaterial:Hl,LineBasicMaterial:ja,Material:xi}[t]}}class Fc{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let i=0,n=t.length;i<n;i++)e+=String.fromCharCode(t[i]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.slice(0,e+1)}static resolveURL(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}class kc extends Di{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}toJSON(){const t=super.toJSON();return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}class Gc extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=new vc(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),r.manager.itemError(t)}}),i,n)}parse(t){const e={},i={};function n(t,n){if(void 0!==e[n])return e[n];const r=t.interleavedBuffers[n],s=function(t,e){if(void 0!==i[e])return i[e];const n=t.arrayBuffers[e],r=new Uint32Array(n).buffer;return i[e]=r,r}(t,r.buffer),a=Nt(r.type,s),o=new sa(a,r.stride);return o.uuid=r.uuid,e[n]=o,o}const r=t.isInstancedBufferGeometry?new kc:new Di,s=t.data.index;if(void 0!==s){const t=Nt(s.type,s.array);r.setIndex(new bi(t,1))}const a=t.data.attributes;for(const e in a){const i=a[e];let s;if(i.isInterleavedBufferAttribute){const e=n(t.data,i.data);s=new oa(e,i.itemSize,i.offset,i.normalized)}else{const t=Nt(i.type,i.array);s=new(i.isInstancedBufferAttribute?Ba:bi)(t,i.itemSize,i.normalized)}void 0!==i.name&&(s.name=i.name),void 0!==i.usage&&s.setUsage(i.usage),void 0!==i.updateRange&&(s.updateRange.offset=i.updateRange.offset,s.updateRange.count=i.updateRange.count),r.setAttribute(e,s)}const o=t.data.morphAttributes;if(o)for(const e in o){const i=o[e],s=[];for(let e=0,r=i.length;e<r;e++){const r=i[e];let a;if(r.isInterleavedBufferAttribute){const e=n(t.data,r.data);a=new oa(e,r.itemSize,r.offset,r.normalized)}else{const t=Nt(r.type,r.array);a=new bi(t,r.itemSize,r.normalized)}void 0!==r.name&&(a.name=r.name),s.push(a)}r.morphAttributes[e]=s}t.data.morphTargetsRelative&&(r.morphTargetsRelative=!0);const l=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==l)for(let t=0,e=l.length;t!==e;++t){const e=l[t];r.addGroup(e.start,e.count,e.materialIndex)}const c=t.data.boundingSphere;if(void 0!==c){const t=new re;void 0!==c.center&&t.fromArray(c.center),r.boundingSphere=new Te(t,c.radius)}return t.name&&(r.name=t.name),t.userData&&(r.userData=t.userData),r}}const Vc={UVMapping:n,CubeReflectionMapping:r,CubeRefractionMapping:s,EquirectangularReflectionMapping:a,EquirectangularRefractionMapping:o,CubeUVReflectionMapping:l},Hc={RepeatWrapping:c,ClampToEdgeWrapping:h,MirroredRepeatWrapping:u},Wc={NearestFilter:d,NearestMipmapNearestFilter:p,NearestMipmapLinearFilter:m,LinearFilter:f,LinearMipmapNearestFilter:g,LinearMipmapLinearFilter:v};let jc;class qc{static getContext(){return void 0===jc&&(jc=new(window.AudioContext||window.webkitAudioContext)),jc}static setContext(t){jc=t}}const Xc=new Ne,Yc=new Ne,Zc=new Ne;class Jc{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Kc(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=Kc();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function Kc(){return("undefined"==typeof performance?Date:performance).now()}const $c=new re,Qc=new ne,th=new re,eh=new re;class ih extends si{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}const nh=new re,rh=new ne,sh=new re,ah=new re;class oh{constructor(t,e,i){let n,r,s;switch(this.binding=t,this.valueSize=i,e){case"quaternion":n=this._slerp,r=this._slerpAdditive,s=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*i),this._workIndex=5;break;case"string":case"bool":n=this._select,r=this._select,s=this._setAdditiveIdentityOther,this.buffer=new Array(5*i);break;default:n=this._lerp,r=this._lerpAdditive,s=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*i)}this._mixBufferRegion=n,this._mixBufferRegionAdditive=r,this._setIdentity=s,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const i=this.buffer,n=this.valueSize,r=t*n+n;let s=this.cumulativeWeight;if(0===s){for(let t=0;t!==n;++t)i[r+t]=i[t];s=e}else{s+=e;const t=e/s;this._mixBufferRegion(i,r,0,t,n)}this.cumulativeWeight=s}accumulateAdditive(t){const e=this.buffer,i=this.valueSize,n=i*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,n,0,t,i),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,i=this.buffer,n=t*e+e,r=this.cumulativeWeight,s=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(i,n,t,1-r,e)}s>0&&this._mixBufferRegionAdditive(i,n,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(i[t]!==i[t+e]){a.setValue(i,n);break}}saveOriginalState(){const t=this.binding,e=this.buffer,i=this.valueSize,n=i*this._origIndex;t.getValue(e,n);for(let t=i,r=n;t!==r;++t)e[t]=e[n+t%i];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let i=t;i<e;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[e+i]=this.buffer[t+i]}_select(t,e,i,n,r){if(n>=.5)for(let n=0;n!==r;++n)t[e+n]=t[i+n]}_slerp(t,e,i,n){ne.slerpFlat(t,e,t,e,t,i,n)}_slerpAdditive(t,e,i,n,r){const s=this._workIndex*r;ne.multiplyQuaternionsFlat(t,s,t,e,t,i),ne.slerpFlat(t,e,t,e,t,s,n)}_lerp(t,e,i,n,r){const s=1-n;for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]*s+t[i+a]*n}}_lerpAdditive(t,e,i,n,r){for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]+t[i+s]*n}}}const lh="\\[\\]\\.:\\/",ch=new RegExp("[\\[\\]\\.:\\/]","g"),hh="[^\\[\\]\\.:\\/]",uh="[^"+lh.replace("\\.","")+"]",dh=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",hh)+/(WCOD+)?/.source.replace("WCOD",uh)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",hh)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",hh)+"$"),ph=["material","materials","bones","map"];class mh{constructor(t,e,i){this.path=e,this.parsedPath=i||mh.parseTrackName(e),this.node=mh.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,i){return t&&t.isAnimationObjectGroup?new mh.Composite(t,e,i):new mh(t,e,i)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(ch,"")}static parseTrackName(t){const e=dh.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const i={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},n=i.nodeName&&i.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){const t=i.nodeName.substring(n+1);-1!==ph.indexOf(t)&&(i.nodeName=i.nodeName.substring(0,n),i.objectName=t)}if(null===i.propertyName||0===i.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return i}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const i=t.skeleton.getBoneByName(e);if(void 0!==i)return i}if(t.children){const i=function(t){for(let n=0;n<t.length;n++){const r=t[n];if(r.name===e||r.uuid===e)return r;const s=i(r.children);if(s)return s}return null},n=i(t.children);if(n)return n}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)t[e++]=i[n]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,i=e.objectName,n=e.propertyName;let r=e.propertyIndex;if(t||(t=mh.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(i){let n=e.objectIndex;switch(i){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===n){n=e;break}break;case"map":if("map"in t){t=t.map;break}if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);t=t.material.map;break;default:if(void 0===t[i])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[i]}if(void 0!==n){if(void 0===t[n])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[n]}}const s=t[n];if(void 0===s){const i=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+i+"."+n+" but it wasn't found.",t)}let a=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===n){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(o=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=n;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}mh.Composite=class{constructor(t,e,i){const n=i||mh.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,n)}getValue(t,e){this.bind();const i=this._targetGroup.nCachedObjects_,n=this._bindings[i];void 0!==n&&n.getValue(t,e)}setValue(t,e){const i=this._bindings;for(let n=this._targetGroup.nCachedObjects_,r=i.length;n!==r;++n)i[n].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].unbind()}},mh.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},mh.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},mh.prototype.GetterByBindingType=[mh.prototype._getValue_direct,mh.prototype._getValue_array,mh.prototype._getValue_arrayElement,mh.prototype._getValue_toArray],mh.prototype.SetterByBindingTypeAndVersioning=[[mh.prototype._setValue_direct,mh.prototype._setValue_direct_setNeedsUpdate,mh.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[mh.prototype._setValue_array,mh.prototype._setValue_array_setNeedsUpdate,mh.prototype._setValue_array_setMatrixWorldNeedsUpdate],[mh.prototype._setValue_arrayElement,mh.prototype._setValue_arrayElement_setNeedsUpdate,mh.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[mh.prototype._setValue_fromArray,mh.prototype._setValue_fromArray_setNeedsUpdate,mh.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class fh{constructor(t,e,i=null,n=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=i,this.blendMode=n;const r=e.tracks,s=r.length,a=new Array(s),o={endingStart:et,endingEnd:et};for(let t=0;t!==s;++t){const e=r[t].createInterpolant(null);a[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(s),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){const i=this._clip.duration,n=t._clip.duration,r=n/i,s=i/n;t.warp(1,r,e),this.warp(s,1,e)}return this}crossFadeTo(t,e,i){return t.crossFadeFrom(this,e,i)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,i){const n=this._mixer,r=n.time,s=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=n._lendControlInterpolant(),this._timeScaleInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=r,o[1]=r+i,l[0]=t/s,l[1]=e/s,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,i,n){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const n=(t-r)*i;n<0||0===i?e=0:(this._startTime=null,e=i*n)}e*=this._updateTimeScale(t);const s=this._updateTime(e),a=this._updateWeight(t);if(a>0){const t=this._interpolants,e=this._propertyBindings;if(this.blendMode===st)for(let i=0,n=t.length;i!==n;++i)t[i].evaluate(s),e[i].accumulateAdditive(a);else for(let i=0,r=t.length;i!==r;++i)t[i].evaluate(s),e[i].accumulate(n,a)}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const i=this._weightInterpolant;if(null!==i){const n=i.evaluate(t)[0];e*=n,t>i.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const i=this._timeScaleInterpolant;if(null!==i){e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,i=this.loop;let n=this.time+t,r=this._loopCount;const s=2202===i;if(0===t)return-1===r?n:s&&1==(1&r)?e-n:n;if(2200===i){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(n>=e)n=e;else{if(!(n<0)){this.time=n;break t}n=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,s)):this._setEndings(0===this.repetitions,!0,s)),n>=e||n<0){const i=Math.floor(n/e);n-=e*i,r+=Math.abs(i);const a=this.repetitions-r;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,n=t>0?e:0,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===a){const e=t<0;this._setEndings(e,!e,s)}else this._setEndings(!1,!1,s);this._loopCount=r,this.time=n,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:i})}}else this.time=n;if(s&&1==(1&r))return e-n}return n}_setEndings(t,e,i){const n=this._interpolantSettings;i?(n.endingStart=it,n.endingEnd=it):(n.endingStart=t?this.zeroSlopeAtStart?it:et:nt,n.endingEnd=e?this.zeroSlopeAtEnd?it:et:nt)}_scheduleFading(t,e,i){const n=this._mixer,r=n.time;let s=this._weightInterpolant;null===s&&(s=n._lendControlInterpolant(),this._weightInterpolant=s);const a=s.parameterPositions,o=s.sampleValues;return a[0]=r,o[0]=e,a[1]=r+t,o[1]=i,this}}const gh=new Float32Array(1);class vh{constructor(t){this.value=t}clone(){return new vh(void 0===this.value.clone?this.value:this.value.clone())}}let xh=0;function _h(t,e){return t.distance-e.distance}function yh(t,e,i,n){if(t.layers.test(e.layers)&&t.raycast(e,i),!0===n){const n=t.children;for(let t=0,r=n.length;t<r;t++)yh(n[t],e,i,!0)}}const Mh=new Lt;const bh=new re,wh=new re;const Sh=new re;const Th=new re,Ah=new Ne,Eh=new Ne;function Ch(t){const e=[];!0===t.isBone&&e.push(t);for(let i=0;i<t.children.length;i++)e.push.apply(e,Ch(t.children[i]));return e}const Lh=new re,Rh=new qt,Ph=new qt;const Ih=new re,Dh=new re,Nh=new re;const Oh=new re,zh=new an;function Uh(t,e,i,n,r,s,a){Oh.set(r,s,a).unproject(n);const o=e[t];if(void 0!==o){const t=i.getAttribute("position");for(let e=0,i=o.length;e<i;e++)t.setXYZ(o[e],Oh.x,Oh.y,Oh.z)}}const Bh=new oe;const Fh=new re;let kh,Gh;const Vh=Hh();function Hh(){const t=new ArrayBuffer(4),e=new Float32Array(t),i=new Uint32Array(t),n=new Uint32Array(512),r=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(n[t]=0,n[256|t]=32768,r[t]=24,r[256|t]=24):e<-14?(n[t]=1024>>-e-14,n[256|t]=1024>>-e-14|32768,r[t]=-e-1,r[256|t]=-e-1):e<=15?(n[t]=e+15<<10,n[256|t]=e+15<<10|32768,r[t]=13,r[256|t]=13):e<128?(n[t]=31744,n[256|t]=64512,r[t]=24,r[256|t]=24):(n[t]=31744,n[256|t]=64512,r[t]=13,r[256|t]=13)}const s=new Uint32Array(2048),a=new Uint32Array(64),o=new Uint32Array(64);for(let t=1;t<1024;++t){let e=t<<13,i=0;for(;0==(8388608&e);)e<<=1,i-=8388608;e&=-8388609,i+=947912704,s[t]=e|i}for(let t=1024;t<2048;++t)s[t]=939524096+(t-1024<<13);for(let t=1;t<31;++t)a[t]=t<<23;a[31]=1199570944,a[32]=2147483648;for(let t=33;t<63;++t)a[t]=2147483648+(t-32<<23);a[63]=3347054592;for(let t=1;t<64;++t)32!==t&&(o[t]=1024);return{floatView:e,uint32View:i,baseTable:n,shiftTable:r,mantissaTable:s,exponentTable:a,offsetTable:o}}var Wh=Object.freeze({__proto__:null,toHalfFloat:function(t){Math.abs(t)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),t=yt(t,-65504,65504),Vh.floatView[0]=t;const e=Vh.uint32View[0],i=e>>23&511;return Vh.baseTable[i]+((8388607&e)>>Vh.shiftTable[i])},fromHalfFloat:function(t){const e=t>>10;return Vh.uint32View[0]=Vh.mantissaTable[Vh.offsetTable[e]+(1023&t)]+Vh.exponentTable[e],Vh.floatView[0]}});"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:e}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=e),t.ACESFilmicToneMapping=4,t.AddEquation=i,t.AddOperation=2,t.AdditiveAnimationBlendMode=st,t.AdditiveBlending=2,t.AlphaFormat=1021,t.AlwaysDepth=1,t.AlwaysStencilFunc=519,t.AmbientLight=Nc,t.AmbientLightProbe=class extends Uc{constructor(t,e=1){super(void 0,e),this.isAmbientLightProbe=!0;const i=(new qt).set(t);this.sh.coefficients[0].set(i.r,i.g,i.b).multiplyScalar(2*Math.sqrt(Math.PI))}},t.AnimationClip=cc,t.AnimationLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=new vc(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),r.manager.itemError(t)}}),i,n)}parse(t){const e=[];for(let i=0;i<t.length;i++){const n=cc.parse(t[i]);e.push(n)}return e}},t.AnimationMixer=class extends mt{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const i=t._localRoot||this._root,n=t._clip.tracks,r=n.length,s=t._propertyBindings,a=t._interpolants,o=i.uuid,l=this._bindingsByRootAndName;let c=l[o];void 0===c&&(c={},l[o]=c);for(let t=0;t!==r;++t){const r=n[t],l=r.name;let h=c[l];if(void 0!==h)++h.referenceCount,s[t]=h;else{if(h=s[t],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,l));continue}const n=e&&e._propertyBindings[t].binding.parsedPath;h=new oh(mh.create(i,l,n),r.ValueTypeName,r.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,l),s[t]=h}a[t].resultBuffer=h.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,i=t._clip.uuid,n=this._actionsByClip[i];this._bindAction(t,n&&n.knownActions[0]),this._addInactiveAction(t,i,e)}const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==i.useCount++&&(this._lendBinding(i),i.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,i){const n=this._actions,r=this._actionsByClip;let s=r[e];if(void 0===s)s={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=s;else{const e=s.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=n.length,n.push(t),s.actionByRoot[i]=t}_removeInactiveAction(t){const e=this._actions,i=e[e.length-1],n=t._cacheIndex;i._cacheIndex=n,e[n]=i,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null;delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete s[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==--i.referenceCount&&this._removeInactiveBinding(i)}}_lendAction(t){const e=this._actions,i=t._cacheIndex,n=this._nActiveActions++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r}_takeBackAction(t){const e=this._actions,i=t._cacheIndex,n=--this._nActiveActions,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r}_addInactiveBinding(t,e,i){const n=this._bindingsByRootAndName,r=this._bindings;let s=n[e];void 0===s&&(s={},n[e]=s),s[i]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,i=t.binding,n=i.rootNode.uuid,r=i.path,s=this._bindingsByRootAndName,a=s[n],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete a[r],0===Object.keys(a).length&&delete s[n]}_lendBinding(t){const e=this._bindings,i=t._cacheIndex,n=this._nActiveBindings++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r}_takeBackBinding(t){const e=this._bindings,i=t._cacheIndex,n=--this._nActiveBindings,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let i=t[e];return void 0===i&&(i=new Ql(new Float32Array(2),new Float32Array(2),1,gh),i.__cacheIndex=e,t[e]=i),i}_takeBackControlInterpolant(t){const e=this._controlInterpolants,i=t.__cacheIndex,n=--this._nActiveControlInterpolants,r=e[n];t.__cacheIndex=n,e[n]=t,r.__cacheIndex=i,e[i]=r}clipAction(t,e,i){const n=e||this._root,r=n.uuid;let s="string"==typeof t?cc.findByName(n,t):t;const a=null!==s?s.uuid:t,o=this._actionsByClip[a];let l=null;if(void 0===i&&(i=null!==s?s.blendMode:rt),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===i)return t;l=o.knownActions[0],null===s&&(s=l._clip)}if(null===s)return null;const c=new fh(this,s,e,i);return this._bindAction(c,l),this._addInactiveAction(c,a,r),c}existingAction(t,e){const i=e||this._root,n=i.uuid,r="string"==typeof t?cc.findByName(i,t):t,s=r?r.uuid:t,a=this._actionsByClip[s];return void 0!==a&&a.actionByRoot[n]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,i=this._nActiveActions,n=this.time+=t,r=Math.sign(t),s=this._accuIndex^=1;for(let a=0;a!==i;++a){e[a]._update(n,t,r,s)}const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)a[t].apply(s);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,i=t.uuid,n=this._actionsByClip,r=n[i];if(void 0!==r){const t=r.knownActions;for(let i=0,n=t.length;i!==n;++i){const n=t[i];this._deactivateAction(n);const r=n._cacheIndex,s=e[e.length-1];n._cacheIndex=null,n._byClipCacheIndex=null,s._cacheIndex=r,e[r]=s,e.pop(),this._removeInactiveBindingsForAction(n)}delete n[i]}}uncacheRoot(t){const e=t.uuid,i=this._actionsByClip;for(const t in i){const n=i[t].actionByRoot[e];void 0!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}const n=this._bindingsByRootAndName[e];if(void 0!==n)for(const t in n){const e=n[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const i=this.existingAction(t,e);null!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}},t.AnimationObjectGroup=class{constructor(){this.isAnimationObjectGroup=!0,this.uuid=_t(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,i=arguments.length;e!==i;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,i=this._paths,n=this._parsedPaths,r=this._bindings,s=r.length;let a,o=t.length,l=this.nCachedObjects_;for(let c=0,h=arguments.length;c!==h;++c){const h=arguments[c],u=h.uuid;let d=e[u];if(void 0===d){d=o++,e[u]=d,t.push(h);for(let t=0,e=s;t!==e;++t)r[t].push(new mh(h,i[t],n[t]))}else if(d<l){a=t[d];const o=--l,c=t[o];e[c.uuid]=d,t[d]=c,e[u]=o,t[o]=h;for(let t=0,e=s;t!==e;++t){const e=r[t],s=e[o];let a=e[d];e[d]=s,void 0===a&&(a=new mh(h,i[t],n[t])),e[o]=a}}else t[d]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=l}remove(){const t=this._objects,e=this._indicesByUUID,i=this._bindings,n=i.length;let r=this.nCachedObjects_;for(let s=0,a=arguments.length;s!==a;++s){const a=arguments[s],o=a.uuid,l=e[o];if(void 0!==l&&l>=r){const s=r++,c=t[s];e[c.uuid]=l,t[l]=c,e[o]=s,t[s]=a;for(let t=0,e=n;t!==e;++t){const e=i[t],n=e[s],r=e[l];e[l]=n,e[s]=r}}}this.nCachedObjects_=r}uncache(){const t=this._objects,e=this._indicesByUUID,i=this._bindings,n=i.length;let r=this.nCachedObjects_,s=t.length;for(let a=0,o=arguments.length;a!==o;++a){const o=arguments[a].uuid,l=e[o];if(void 0!==l)if(delete e[o],l<r){const a=--r,o=t[a],c=--s,h=t[c];e[o.uuid]=l,t[l]=o,e[h.uuid]=a,t[a]=h,t.pop();for(let t=0,e=n;t!==e;++t){const e=i[t],n=e[a],r=e[c];e[l]=n,e[a]=r,e.pop()}}else{const r=--s,a=t[r];r>0&&(e[a.uuid]=l),t[l]=a,t.pop();for(let t=0,e=n;t!==e;++t){const e=i[t];e[l]=e[r],e.pop()}}}this.nCachedObjects_=r}subscribe_(t,e){const i=this._bindingsIndicesByPath;let n=i[t];const r=this._bindings;if(void 0!==n)return r[n];const s=this._paths,a=this._parsedPaths,o=this._objects,l=o.length,c=this.nCachedObjects_,h=new Array(l);n=r.length,i[t]=n,s.push(t),a.push(e),r.push(h);for(let i=c,n=o.length;i!==n;++i){const n=o[i];h[i]=new mh(n,t,e)}return h}unsubscribe_(t){const e=this._bindingsIndicesByPath,i=e[t];if(void 0!==i){const n=this._paths,r=this._parsedPaths,s=this._bindings,a=s.length-1,o=s[a];e[t[a]]=i,s[i]=o,s.pop(),r[i]=r[a],r.pop(),n[i]=n[a],n.pop()}}},t.AnimationUtils=Jl,t.ArcCurve=po,t.ArrayCamera=Ws,t.ArrowHelper=class extends si{constructor(t=new re(0,0,1),e=new re(0,0,0),i=1,n=16776960,r=.2*i,s=.2*r){super(),this.type="ArrowHelper",void 0===kh&&(kh=new Di,kh.setAttribute("position",new Ti([0,0,0,0,1,0],3)),Gh=new zo(0,.5,1,5,1),Gh.translate(0,-.5,0)),this.position.copy(e),this.line=new Ka(kh,new ja({color:n,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Ki(Gh,new _i({color:n,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,r,s)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{Fh.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Fh,e)}}setLength(t,e=.2*t,i=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(i,e,i),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}},t.Audio=ih,t.AudioAnalyser=class{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let i=0;i<e.length;i++)t+=e[i];return t/e.length}},t.AudioContext=qc,t.AudioListener=class extends si{constructor(){super(),this.type="AudioListener",this.context=qc.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Jc}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,i=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose($c,Qc,th),eh.set(0,0,-1).applyQuaternion(Qc),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime($c.x,t),e.positionY.linearRampToValueAtTime($c.y,t),e.positionZ.linearRampToValueAtTime($c.z,t),e.forwardX.linearRampToValueAtTime(eh.x,t),e.forwardY.linearRampToValueAtTime(eh.y,t),e.forwardZ.linearRampToValueAtTime(eh.z,t),e.upX.linearRampToValueAtTime(i.x,t),e.upY.linearRampToValueAtTime(i.y,t),e.upZ.linearRampToValueAtTime(i.z,t)}else e.setPosition($c.x,$c.y,$c.z),e.setOrientation(eh.x,eh.y,eh.z,i.x,i.y,i.z)}},t.AudioLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=new vc(this.manager);s.setResponseType("arraybuffer"),s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(i){try{const t=i.slice(0);qc.getContext().decodeAudioData(t,(function(t){e(t)}))}catch(e){n?n(e):console.error(e),r.manager.itemError(t)}}),i,n)}},t.AxesHelper=class extends to{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],i=new Di;i.setAttribute("position",new Ti(e,3)),i.setAttribute("color",new Ti([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));super(i,new ja({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(t,e,i){const n=new qt,r=this.geometry.attributes.color.array;return n.set(t),n.toArray(r,0),n.toArray(r,3),n.set(e),n.toArray(r,6),n.toArray(r,9),n.set(i),n.toArray(r,12),n.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}},t.BackSide=1,t.BasicDepthPacking=3200,t.BasicShadowMap=0,t.Bone=Da,t.BooleanKeyframeTrack=ic,t.Box2=class{constructor(t=new Lt(1/0,1/0),e=new Lt(-1/0,-1/0)){this.isBox2=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=Mh.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Mh.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}},t.Box3=oe,t.Box3Helper=class extends to{constructor(t,e=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Di;n.setIndex(new bi(i,1)),n.setAttribute("position",new Ti([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(n,new ja({color:e,toneMapped:!1})),this.box=t,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}dispose(){this.geometry.dispose(),this.material.dispose()}},t.BoxBufferGeometry=class extends Qi{constructor(t,e,i,n,r,s){console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry."),super(t,e,i,n,r,s)}},t.BoxGeometry=Qi,t.BoxHelper=class extends to{constructor(t,e=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),r=new Di;r.setIndex(new bi(i,1)),r.setAttribute("position",new bi(n,3)),super(r,new ja({color:e,toneMapped:!1})),this.object=t,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&Bh.setFromObject(this.object),Bh.isEmpty())return;const e=Bh.min,i=Bh.max,n=this.geometry.attributes.position,r=n.array;r[0]=i.x,r[1]=i.y,r[2]=i.z,r[3]=e.x,r[4]=i.y,r[5]=i.z,r[6]=e.x,r[7]=e.y,r[8]=i.z,r[9]=i.x,r[10]=e.y,r[11]=i.z,r[12]=i.x,r[13]=i.y,r[14]=e.z,r[15]=e.x,r[16]=i.y,r[17]=e.z,r[18]=e.x,r[19]=e.y,r[20]=e.z,r[21]=i.x,r[22]=e.y,r[23]=e.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(t){return this.object=t,this.update(),this}copy(t,e){return super.copy(t,e),this.object=t.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}},t.BufferAttribute=bi,t.BufferGeometry=Di,t.BufferGeometryLoader=Gc,t.ByteType=1010,t.Cache=uc,t.Camera=an,t.CameraHelper=class extends to{constructor(t){const e=new Di,i=new ja({color:16777215,vertexColors:!0,toneMapped:!1}),n=[],r=[],s={};function a(t,e){o(t),o(e)}function o(t){n.push(0,0,0),r.push(0,0,0),void 0===s[t]&&(s[t]=[]),s[t].push(n.length/3-1)}a("n1","n2"),a("n2","n4"),a("n4","n3"),a("n3","n1"),a("f1","f2"),a("f2","f4"),a("f4","f3"),a("f3","f1"),a("n1","f1"),a("n2","f2"),a("n3","f3"),a("n4","f4"),a("p","n1"),a("p","n2"),a("p","n3"),a("p","n4"),a("u1","u2"),a("u2","u3"),a("u3","u1"),a("c","t"),a("p","c"),a("cn1","cn2"),a("cn3","cn4"),a("cf1","cf2"),a("cf3","cf4"),e.setAttribute("position",new Ti(n,3)),e.setAttribute("color",new Ti(r,3)),super(e,i),this.type="CameraHelper",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=s,this.update();const l=new qt(16755200),c=new qt(16711680),h=new qt(43775),u=new qt(16777215),d=new qt(3355443);this.setColors(l,c,h,u,d)}setColors(t,e,i,n,r){const s=this.geometry.getAttribute("color");s.setXYZ(0,t.r,t.g,t.b),s.setXYZ(1,t.r,t.g,t.b),s.setXYZ(2,t.r,t.g,t.b),s.setXYZ(3,t.r,t.g,t.b),s.setXYZ(4,t.r,t.g,t.b),s.setXYZ(5,t.r,t.g,t.b),s.setXYZ(6,t.r,t.g,t.b),s.setXYZ(7,t.r,t.g,t.b),s.setXYZ(8,t.r,t.g,t.b),s.setXYZ(9,t.r,t.g,t.b),s.setXYZ(10,t.r,t.g,t.b),s.setXYZ(11,t.r,t.g,t.b),s.setXYZ(12,t.r,t.g,t.b),s.setXYZ(13,t.r,t.g,t.b),s.setXYZ(14,t.r,t.g,t.b),s.setXYZ(15,t.r,t.g,t.b),s.setXYZ(16,t.r,t.g,t.b),s.setXYZ(17,t.r,t.g,t.b),s.setXYZ(18,t.r,t.g,t.b),s.setXYZ(19,t.r,t.g,t.b),s.setXYZ(20,t.r,t.g,t.b),s.setXYZ(21,t.r,t.g,t.b),s.setXYZ(22,t.r,t.g,t.b),s.setXYZ(23,t.r,t.g,t.b),s.setXYZ(24,e.r,e.g,e.b),s.setXYZ(25,e.r,e.g,e.b),s.setXYZ(26,e.r,e.g,e.b),s.setXYZ(27,e.r,e.g,e.b),s.setXYZ(28,e.r,e.g,e.b),s.setXYZ(29,e.r,e.g,e.b),s.setXYZ(30,e.r,e.g,e.b),s.setXYZ(31,e.r,e.g,e.b),s.setXYZ(32,i.r,i.g,i.b),s.setXYZ(33,i.r,i.g,i.b),s.setXYZ(34,i.r,i.g,i.b),s.setXYZ(35,i.r,i.g,i.b),s.setXYZ(36,i.r,i.g,i.b),s.setXYZ(37,i.r,i.g,i.b),s.setXYZ(38,n.r,n.g,n.b),s.setXYZ(39,n.r,n.g,n.b),s.setXYZ(40,r.r,r.g,r.b),s.setXYZ(41,r.r,r.g,r.b),s.setXYZ(42,r.r,r.g,r.b),s.setXYZ(43,r.r,r.g,r.b),s.setXYZ(44,r.r,r.g,r.b),s.setXYZ(45,r.r,r.g,r.b),s.setXYZ(46,r.r,r.g,r.b),s.setXYZ(47,r.r,r.g,r.b),s.setXYZ(48,r.r,r.g,r.b),s.setXYZ(49,r.r,r.g,r.b),s.needsUpdate=!0}update(){const t=this.geometry,e=this.pointMap;zh.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Uh("c",e,t,zh,0,0,-1),Uh("t",e,t,zh,0,0,1),Uh("n1",e,t,zh,-1,-1,-1),Uh("n2",e,t,zh,1,-1,-1),Uh("n3",e,t,zh,-1,1,-1),Uh("n4",e,t,zh,1,1,-1),Uh("f1",e,t,zh,-1,-1,1),Uh("f2",e,t,zh,1,-1,1),Uh("f3",e,t,zh,-1,1,1),Uh("f4",e,t,zh,1,1,1),Uh("u1",e,t,zh,.7,1.1,-1),Uh("u2",e,t,zh,-.7,1.1,-1),Uh("u3",e,t,zh,0,2,-1),Uh("cf1",e,t,zh,-1,0,1),Uh("cf2",e,t,zh,1,0,1),Uh("cf3",e,t,zh,0,-1,1),Uh("cf4",e,t,zh,0,1,1),Uh("cn1",e,t,zh,-1,0,-1),Uh("cn2",e,t,zh,1,0,-1),Uh("cn3",e,t,zh,0,-1,-1),Uh("cn4",e,t,zh,0,1,-1),t.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}},t.CanvasTexture=class extends $t{constructor(t,e,i,n,r,s,a,o,l){super(t,e,i,n,r,s,a,o,l),this.isCanvasTexture=!0,this.needsUpdate=!0}},t.CapsuleBufferGeometry=class extends No{constructor(t,e,i,n){console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry."),super(t,e,i,n)}},t.CapsuleGeometry=No,t.CatmullRomCurve3=_o,t.CineonToneMapping=3,t.CircleBufferGeometry=class extends Oo{constructor(t,e,i,n){console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry."),super(t,e,i,n)}},t.CircleGeometry=Oo,t.ClampToEdgeWrapping=h,t.Clock=Jc,t.Color=qt,t.ColorKeyframeTrack=nc,t.ColorManagement=Ft,t.CompressedArrayTexture=class extends co{constructor(t,e,i,n,r,s){super(t,e,i,r,s),this.isCompressedArrayTexture=!0,this.image.depth=n,this.wrapR=h}},t.CompressedTexture=co,t.CompressedTextureLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=[],a=new co,o=new vc(this.manager);o.setPath(this.path),o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(r.withCredentials);let l=0;function c(c){o.load(t[c],(function(t){const i=r.parse(t,!0);s[c]={width:i.width,height:i.height,format:i.format,mipmaps:i.mipmaps},l+=1,6===l&&(1===i.mipmapCount&&(a.minFilter=f),a.image=s,a.format=i.format,a.needsUpdate=!0,e&&e(a))}),i,n)}if(Array.isArray(t))for(let e=0,i=t.length;e<i;++e)c(e);else o.load(t,(function(t){const i=r.parse(t,!0);if(i.isCubemap){const t=i.mipmaps.length/i.mipmapCount;for(let e=0;e<t;e++){s[e]={mipmaps:[]};for(let t=0;t<i.mipmapCount;t++)s[e].mipmaps.push(i.mipmaps[e*i.mipmapCount+t]),s[e].format=i.format,s[e].width=i.width,s[e].height=i.height}a.image=s}else a.image.width=i.width,a.image.height=i.height,a.mipmaps=i.mipmaps;1===i.mipmapCount&&(a.minFilter=f),a.format=i.format,a.needsUpdate=!0,e&&e(a)}),i,n);return a}},t.ConeBufferGeometry=class extends Uo{constructor(t,e,i,n,r,s,a){console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry."),super(t,e,i,n,r,s,a)}},t.ConeGeometry=Uo,t.CubeCamera=cn,t.CubeReflectionMapping=r,t.CubeRefractionMapping=s,t.CubeTexture=hn,t.CubeTextureLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=new hn,s=new xc(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);let a=0;function o(i){s.load(t[i],(function(t){r.images[i]=t,a++,6===a&&(r.needsUpdate=!0,e&&e(r))}),void 0,n)}for(let e=0;e<t.length;++e)o(e);return r}},t.CubeUVReflectionMapping=l,t.CubicBezierCurve=wo,t.CubicBezierCurve3=So,t.CubicInterpolant=$l,t.CullFaceBack=1,t.CullFaceFront=2,t.CullFaceFrontBack=3,t.CullFaceNone=0,t.Curve=ho,t.CurvePath=Po,t.CustomBlending=5,t.CustomToneMapping=5,t.CylinderBufferGeometry=class extends zo{constructor(t,e,i,n,r,s,a,o){console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry."),super(t,e,i,n,r,s,a,o)}},t.CylinderGeometry=zo,t.Cylindrical=class{constructor(t=1,e=0,i=0){return this.radius=t,this.theta=e,this.y=i,this}set(t,e,i){return this.radius=t,this.theta=e,this.y=i,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+i*i),this.theta=Math.atan2(t,i),this.y=e,this}clone(){return(new this.constructor).copy(this)}},t.Data3DTexture=ie,t.DataArrayTexture=ee,t.DataTexture=Na,t.DataTexture2DArray=class extends ee{constructor(t,e,i,n){console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture."),super(t,e,i,n)}},t.DataTexture3D=class extends ie{constructor(t,e,i,n){console.warn("THREE.DataTexture3D has been renamed to Data3DTexture."),super(t,e,i,n)}},t.DataTextureLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=new Na,a=new vc(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(r.withCredentials),a.load(t,(function(t){const i=r.parse(t);i&&(void 0!==i.image?s.image=i.image:void 0!==i.data&&(s.image.width=i.width,s.image.height=i.height,s.image.data=i.data),s.wrapS=void 0!==i.wrapS?i.wrapS:h,s.wrapT=void 0!==i.wrapT?i.wrapT:h,s.magFilter=void 0!==i.magFilter?i.magFilter:f,s.minFilter=void 0!==i.minFilter?i.minFilter:f,s.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,void 0!==i.encoding&&(s.encoding=i.encoding),void 0!==i.flipY&&(s.flipY=i.flipY),void 0!==i.format&&(s.format=i.format),void 0!==i.type&&(s.type=i.type),void 0!==i.mipmaps&&(s.mipmaps=i.mipmaps,s.minFilter=v),1===i.mipmapCount&&(s.minFilter=f),void 0!==i.generateMipmaps&&(s.generateMipmaps=i.generateMipmaps),s.needsUpdate=!0,e&&e(s,i))}),i,n),s}},t.DataUtils=Wh,t.DecrementStencilOp=7683,t.DecrementWrapStencilOp=34056,t.DefaultLoadingManager=pc,t.DepthFormat=T,t.DepthStencilFormat=A,t.DepthTexture=Js,t.DirectionalLight=Dc,t.DirectionalLightHelper=class extends si{constructor(t,e,i){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="DirectionalLightHelper",void 0===e&&(e=1);let n=new Di;n.setAttribute("position",new Ti([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const r=new ja({fog:!1,toneMapped:!1});this.lightPlane=new Ka(n,r),this.add(this.lightPlane),n=new Di,n.setAttribute("position",new Ti([0,0,0,0,0,1],3)),this.targetLine=new Ka(n,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),Ih.setFromMatrixPosition(this.light.matrixWorld),Dh.setFromMatrixPosition(this.light.target.matrixWorld),Nh.subVectors(Dh,Ih),this.lightPlane.lookAt(Dh),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Dh),this.targetLine.scale.z=Nh.length()}},t.DiscreteInterpolant=tc,t.DodecahedronBufferGeometry=class extends Fo{constructor(t,e){console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry."),super(t,e)}},t.DodecahedronGeometry=Fo,t.DoubleSide=2,t.DstAlphaFactor=206,t.DstColorFactor=208,t.DynamicCopyUsage=35050,t.DynamicDrawUsage=35048,t.DynamicReadUsage=35049,t.EdgesGeometry=Wo,t.EllipseCurve=uo,t.EqualDepth=4,t.EqualStencilFunc=514,t.EquirectangularReflectionMapping=a,t.EquirectangularRefractionMapping=o,t.Euler=We,t.EventDispatcher=mt,t.ExtrudeBufferGeometry=class extends yl{constructor(t,e){console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry."),super(t,e)}},t.ExtrudeGeometry=yl,t.FileLoader=vc,t.Float16BufferAttribute=class extends bi{constructor(t,e,i){super(new Uint16Array(t),e,i),this.isFloat16BufferAttribute=!0}},t.Float32BufferAttribute=Ti,t.Float64BufferAttribute=class extends bi{constructor(t,e,i){super(new Float64Array(t),e,i)}},t.FloatType=M,t.Fog=na,t.FogExp2=ia,t.FramebufferTexture=class extends $t{constructor(t,e,i){super({width:t,height:e}),this.isFramebufferTexture=!0,this.format=i,this.magFilter=d,this.minFilter=d,this.generateMipmaps=!1,this.needsUpdate=!0}},t.FrontSide=0,t.Frustum=xn,t.GLBufferAttribute=class{constructor(t,e,i,n,r){this.isGLBufferAttribute=!0,this.buffer=t,this.type=e,this.itemSize=i,this.elementSize=n,this.count=r,this.version=0}set needsUpdate(t){!0===t&&this.version++}setBuffer(t){return this.buffer=t,this}setType(t,e){return this.type=t,this.elementSize=e,this}setItemSize(t){return this.itemSize=t,this}setCount(t){return this.count=t,this}},t.GLSL1="100",t.GLSL3=dt,t.GreaterDepth=6,t.GreaterEqualDepth=5,t.GreaterEqualStencilFunc=518,t.GreaterStencilFunc=516,t.GridHelper=class extends to{constructor(t=10,e=10,i=4473924,n=8947848){i=new qt(i),n=new qt(n);const r=e/2,s=t/e,a=t/2,o=[],l=[];for(let t=0,c=0,h=-a;t<=e;t++,h+=s){o.push(-a,0,h,a,0,h),o.push(h,0,-a,h,0,a);const e=t===r?i:n;e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3}const c=new Di;c.setAttribute("position",new Ti(o,3)),c.setAttribute("color",new Ti(l,3));super(c,new ja({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}},t.Group=Hs,t.HalfFloatType=b,t.HemisphereLight=yc,t.HemisphereLightHelper=class extends si{constructor(t,e,i){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="HemisphereLightHelper";const n=new wl(e);n.rotateY(.5*Math.PI),this.material=new _i({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const r=n.getAttribute("position"),s=new Float32Array(3*r.count);n.setAttribute("color",new bi(s,3)),this.add(new Ki(n,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");Rh.copy(this.light.color),Ph.copy(this.light.groundColor);for(let t=0,i=e.count;t<i;t++){const n=t<i/2?Rh:Ph;e.setXYZ(t,n.r,n.g,n.b)}e.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),t.lookAt(Lh.setFromMatrixPosition(this.light.matrixWorld).negate())}},t.HemisphereLightProbe=class extends Uc{constructor(t,e,i=1){super(void 0,i),this.isHemisphereLightProbe=!0;const n=(new qt).set(t),r=(new qt).set(e),s=new re(n.r,n.g,n.b),a=new re(r.r,r.g,r.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(s).add(a).multiplyScalar(o),this.sh.coefficients[1].copy(s).sub(a).multiplyScalar(l)}},t.IcosahedronBufferGeometry=class extends bl{constructor(t,e){console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry."),super(t,e)}},t.IcosahedronGeometry=bl,t.ImageBitmapLoader=class extends mc{constructor(t){super(t),this.isImageBitmapLoader=!0,"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=uc.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a={};a.credentials="anonymous"===this.crossOrigin?"same-origin":"include",a.headers=this.requestHeader,fetch(t,a).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(i){uc.add(t,i),e&&e(i),r.manager.itemEnd(t)})).catch((function(e){n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}},t.ImageLoader=xc,t.ImageUtils=Yt,t.ImmediateRenderObject=function(){console.error("THREE.ImmediateRenderObject has been removed.")},t.IncrementStencilOp=7682,t.IncrementWrapStencilOp=34055,t.InstancedBufferAttribute=Ba,t.InstancedBufferGeometry=kc,t.InstancedInterleavedBuffer=class extends sa{constructor(t,e,i=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}},t.InstancedMesh=Wa,t.Int16BufferAttribute=class extends bi{constructor(t,e,i){super(new Int16Array(t),e,i)}},t.Int32BufferAttribute=class extends bi{constructor(t,e,i){super(new Int32Array(t),e,i)}},t.Int8BufferAttribute=class extends bi{constructor(t,e,i){super(new Int8Array(t),e,i)}},t.IntType=1013,t.InterleavedBuffer=sa,t.InterleavedBufferAttribute=oa,t.Interpolant=Kl,t.InterpolateDiscrete=$,t.InterpolateLinear=Q,t.InterpolateSmooth=tt,t.InvertStencilOp=5386,t.KeepStencilOp=ht,t.KeyframeTrack=ec,t.LOD=Aa,t.LatheBufferGeometry=class extends Do{constructor(t,e,i,n){console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry."),super(t,e,i,n)}},t.LatheGeometry=Do,t.Layers=je,t.LessDepth=2,t.LessEqualDepth=3,t.LessEqualStencilFunc=515,t.LessStencilFunc=513,t.Light=_c,t.LightProbe=Uc,t.Line=Ka,t.Line3=class{constructor(t=new re,e=new re){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){bh.subVectors(t,this.start),wh.subVectors(this.end,this.start);const i=wh.dot(wh);let n=wh.dot(bh)/i;return e&&(n=yt(n,0,1)),n}closestPointToPoint(t,e,i){const n=this.closestPointToPointParameter(t,e);return this.delta(i).multiplyScalar(n).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}},t.LineBasicMaterial=ja,t.LineCurve=To,t.LineCurve3=Ao,t.LineDashedMaterial=Hl,t.LineLoop=eo,t.LineSegments=to,t.LinearEncoding=at,t.LinearFilter=f,t.LinearInterpolant=Ql,t.LinearMipMapLinearFilter=1008,t.LinearMipMapNearestFilter=1007,t.LinearMipmapLinearFilter=v,t.LinearMipmapNearestFilter=g,t.LinearSRGBColorSpace=ct,t.LinearToneMapping=1,t.Loader=mc,t.LoaderUtils=Fc,t.LoadingManager=dc,t.LoopOnce=2200,t.LoopPingPong=2202,t.LoopRepeat=2201,t.LuminanceAlphaFormat=1025,t.LuminanceFormat=1024,t.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},t.Material=xi,t.MaterialLoader=Bc,t.MathUtils=Ct,t.Matrix3=Rt,t.Matrix4=Ne,t.MaxEquation=104,t.Mesh=Ki,t.MeshBasicMaterial=_i,t.MeshDepthMaterial=Us,t.MeshDistanceMaterial=Bs,t.MeshLambertMaterial=Gl,t.MeshMatcapMaterial=Vl,t.MeshNormalMaterial=kl,t.MeshPhongMaterial=Bl,t.MeshPhysicalMaterial=Ul,t.MeshStandardMaterial=zl,t.MeshToonMaterial=Fl,t.MinEquation=103,t.MirroredRepeatWrapping=u,t.MixOperation=1,t.MultiplyBlending=4,t.MultiplyOperation=0,t.NearestFilter=d,t.NearestMipMapLinearFilter=1005,t.NearestMipMapNearestFilter=1004,t.NearestMipmapLinearFilter=m,t.NearestMipmapNearestFilter=p,t.NeverDepth=0,t.NeverStencilFunc=512,t.NoBlending=0,t.NoColorSpace="",t.NoToneMapping=0,t.NormalAnimationBlendMode=rt,t.NormalBlending=1,t.NotEqualDepth=7,t.NotEqualStencilFunc=517,t.NumberKeyframeTrack=rc,t.Object3D=si,t.ObjectLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=this,s=""===this.path?Fc.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||s;const a=new vc(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(i){let s=null;try{s=JSON.parse(i)}catch(e){return void 0!==n&&n(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}const a=s.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())return void 0!==n&&n(new Error("THREE.ObjectLoader: Can't load "+t)),void console.error("THREE.ObjectLoader: Can't load "+t);r.parse(s,e)}),i,n)}async loadAsync(t,e){const i=""===this.path?Fc.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||i;const n=new vc(this.manager);n.setPath(this.path),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials);const r=await n.loadAsync(t,e),s=JSON.parse(r),a=s.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())throw new Error("THREE.ObjectLoader: Can't load "+t);return await this.parseAsync(s)}parse(t,e){const i=this.parseAnimations(t.animations),n=this.parseShapes(t.shapes),r=this.parseGeometries(t.geometries,n),s=this.parseImages(t.images,(function(){void 0!==e&&e(l)})),a=this.parseTextures(t.textures,s),o=this.parseMaterials(t.materials,a),l=this.parseObject(t.object,r,o,a,i),c=this.parseSkeletons(t.skeletons,l);if(this.bindSkeletons(l,c),void 0!==e){let t=!1;for(const e in s)if(s[e].data instanceof HTMLImageElement){t=!0;break}!1===t&&e(l)}return l}async parseAsync(t){const e=this.parseAnimations(t.animations),i=this.parseShapes(t.shapes),n=this.parseGeometries(t.geometries,i),r=await this.parseImagesAsync(t.images),s=this.parseTextures(t.textures,r),a=this.parseMaterials(t.materials,s),o=this.parseObject(t.object,n,a,s,e),l=this.parseSkeletons(t.skeletons,o);return this.bindSkeletons(o,l),o}parseShapes(t){const e={};if(void 0!==t)for(let i=0,n=t.length;i<n;i++){const n=(new jo).fromJSON(t[i]);e[n.uuid]=n}return e}parseSkeletons(t,e){const i={},n={};if(e.traverse((function(t){t.isBone&&(n[t.uuid]=t)})),void 0!==t)for(let e=0,r=t.length;e<r;e++){const r=(new Ua).fromJSON(t[e],n);i[r.uuid]=r}return i}parseGeometries(t,e){const i={};if(void 0!==t){const n=new Gc;for(let r=0,s=t.length;r<s;r++){let s;const a=t[r];switch(a.type){case"BufferGeometry":case"InstancedBufferGeometry":s=n.parse(a);break;case"Geometry":if("THREE"in window&&"LegacyJSONLoader"in THREE)s=(new THREE.LegacyJSONLoader).parse(a,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:a.type in Dl?s=Dl[a.type].fromJSON(a,e):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${a.type}"`)}s.uuid=a.uuid,void 0!==a.name&&(s.name=a.name),!0===s.isBufferGeometry&&void 0!==a.userData&&(s.userData=a.userData),i[a.uuid]=s}}return i}parseMaterials(t,e){const i={},n={};if(void 0!==t){const r=new Bc;r.setTextures(e);for(let e=0,s=t.length;e<s;e++){const s=t[e];void 0===i[s.uuid]&&(i[s.uuid]=r.parse(s)),n[s.uuid]=i[s.uuid]}}return n}parseAnimations(t){const e={};if(void 0!==t)for(let i=0;i<t.length;i++){const n=t[i],r=cc.parse(n);e[r.uuid]=r}return e}parseImages(t,e){const i=this,n={};let r;function s(t){if("string"==typeof t){const e=t;return function(t){return i.manager.itemStart(t),r.load(t,(function(){i.manager.itemEnd(t)}),void 0,(function(){i.manager.itemError(t),i.manager.itemEnd(t)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:i.resourcePath+e)}return t.data?{data:Nt(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){const i=new dc(e);r=new xc(i),r.setCrossOrigin(this.crossOrigin);for(let e=0,i=t.length;e<i;e++){const i=t[e],r=i.url;if(Array.isArray(r)){const t=[];for(let e=0,i=r.length;e<i;e++){const i=s(r[e]);null!==i&&(i instanceof HTMLImageElement?t.push(i):t.push(new Na(i.data,i.width,i.height)))}n[i.uuid]=new Zt(t)}else{const t=s(i.url);n[i.uuid]=new Zt(t)}}}return n}async parseImagesAsync(t){const e=this,i={};let n;async function r(t){if("string"==typeof t){const i=t,r=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(i)?i:e.resourcePath+i;return await n.loadAsync(r)}return t.data?{data:Nt(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){n=new xc(this.manager),n.setCrossOrigin(this.crossOrigin);for(let e=0,n=t.length;e<n;e++){const n=t[e],s=n.url;if(Array.isArray(s)){const t=[];for(let e=0,i=s.length;e<i;e++){const i=s[e],n=await r(i);null!==n&&(n instanceof HTMLImageElement?t.push(n):t.push(new Na(n.data,n.width,n.height)))}i[n.uuid]=new Zt(t)}else{const t=await r(n.url);i[n.uuid]=new Zt(t)}}}return i}parseTextures(t,e){function i(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}const n={};if(void 0!==t)for(let r=0,s=t.length;r<s;r++){const s=t[r];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image);const a=e[s.image],o=a.data;let l;Array.isArray(o)?(l=new hn,6===o.length&&(l.needsUpdate=!0)):(l=o&&o.data?new Na:new $t,o&&(l.needsUpdate=!0)),l.source=a,l.uuid=s.uuid,void 0!==s.name&&(l.name=s.name),void 0!==s.mapping&&(l.mapping=i(s.mapping,Vc)),void 0!==s.offset&&l.offset.fromArray(s.offset),void 0!==s.repeat&&l.repeat.fromArray(s.repeat),void 0!==s.center&&l.center.fromArray(s.center),void 0!==s.rotation&&(l.rotation=s.rotation),void 0!==s.wrap&&(l.wrapS=i(s.wrap[0],Hc),l.wrapT=i(s.wrap[1],Hc)),void 0!==s.format&&(l.format=s.format),void 0!==s.type&&(l.type=s.type),void 0!==s.encoding&&(l.encoding=s.encoding),void 0!==s.minFilter&&(l.minFilter=i(s.minFilter,Wc)),void 0!==s.magFilter&&(l.magFilter=i(s.magFilter,Wc)),void 0!==s.anisotropy&&(l.anisotropy=s.anisotropy),void 0!==s.flipY&&(l.flipY=s.flipY),void 0!==s.premultiplyAlpha&&(l.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(l.unpackAlignment=s.unpackAlignment),void 0!==s.userData&&(l.userData=s.userData),n[s.uuid]=l}return n}parseObject(t,e,i,n,r){let s,a,o;function l(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function c(t){if(void 0!==t){if(Array.isArray(t)){const e=[];for(let n=0,r=t.length;n<r;n++){const r=t[n];void 0===i[r]&&console.warn("THREE.ObjectLoader: Undefined material",r),e.push(i[r])}return e}return void 0===i[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),i[t]}}function h(t){return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined texture",t),n[t]}switch(t.type){case"Scene":s=new ra,void 0!==t.background&&(Number.isInteger(t.background)?s.background=new qt(t.background):s.background=h(t.background)),void 0!==t.environment&&(s.environment=h(t.environment)),void 0!==t.fog&&("Fog"===t.fog.type?s.fog=new na(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(s.fog=new ia(t.fog.color,t.fog.density))),void 0!==t.backgroundBlurriness&&(s.backgroundBlurriness=t.backgroundBlurriness);break;case"PerspectiveCamera":s=new on(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(s.focus=t.focus),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.filmGauge&&(s.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(s.filmOffset=t.filmOffset),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"OrthographicCamera":s=new In(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"AmbientLight":s=new Nc(t.color,t.intensity);break;case"DirectionalLight":s=new Dc(t.color,t.intensity);break;case"PointLight":s=new Pc(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":s=new Oc(t.color,t.intensity,t.width,t.height);break;case"SpotLight":s=new Ac(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":s=new yc(t.color,t.groundColor,t.intensity);break;case"LightProbe":s=(new Uc).fromJSON(t);break;case"SkinnedMesh":a=l(t.geometry),o=c(t.material),s=new Ia(a,o),void 0!==t.bindMode&&(s.bindMode=t.bindMode),void 0!==t.bindMatrix&&s.bindMatrix.fromArray(t.bindMatrix),void 0!==t.skeleton&&(s.skeleton=t.skeleton);break;case"Mesh":a=l(t.geometry),o=c(t.material),s=new Ki(a,o);break;case"InstancedMesh":a=l(t.geometry),o=c(t.material);const e=t.count,i=t.instanceMatrix,n=t.instanceColor;s=new Wa(a,o,e),s.instanceMatrix=new Ba(new Float32Array(i.array),16),void 0!==n&&(s.instanceColor=new Ba(new Float32Array(n.array),n.itemSize));break;case"LOD":s=new Aa;break;case"Line":s=new Ka(l(t.geometry),c(t.material));break;case"LineLoop":s=new eo(l(t.geometry),c(t.material));break;case"LineSegments":s=new to(l(t.geometry),c(t.material));break;case"PointCloud":case"Points":s=new oo(l(t.geometry),c(t.material));break;case"Sprite":s=new ba(c(t.material));break;case"Group":s=new Hs;break;case"Bone":s=new Da;break;default:s=new si}if(s.uuid=t.uuid,void 0!==t.name&&(s.name=t.name),void 0!==t.matrix?(s.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(s.matrixAutoUpdate=t.matrixAutoUpdate),s.matrixAutoUpdate&&s.matrix.decompose(s.position,s.quaternion,s.scale)):(void 0!==t.position&&s.position.fromArray(t.position),void 0!==t.rotation&&s.rotation.fromArray(t.rotation),void 0!==t.quaternion&&s.quaternion.fromArray(t.quaternion),void 0!==t.scale&&s.scale.fromArray(t.scale)),void 0!==t.castShadow&&(s.castShadow=t.castShadow),void 0!==t.receiveShadow&&(s.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(s.shadow.bias=t.shadow.bias),void 0!==t.shadow.normalBias&&(s.shadow.normalBias=t.shadow.normalBias),void 0!==t.shadow.radius&&(s.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&s.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(s.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(s.visible=t.visible),void 0!==t.frustumCulled&&(s.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(s.renderOrder=t.renderOrder),void 0!==t.userData&&(s.userData=t.userData),void 0!==t.layers&&(s.layers.mask=t.layers),void 0!==t.children){const a=t.children;for(let t=0;t<a.length;t++)s.add(this.parseObject(a[t],e,i,n,r))}if(void 0!==t.animations){const e=t.animations;for(let t=0;t<e.length;t++){const i=e[t];s.animations.push(r[i])}}if("LOD"===t.type){void 0!==t.autoUpdate&&(s.autoUpdate=t.autoUpdate);const e=t.levels;for(let t=0;t<e.length;t++){const i=e[t],n=s.getObjectByProperty("uuid",i.object);void 0!==n&&s.addLevel(n,i.distance,i.hysteresis)}}return s}bindSkeletons(t,e){0!==Object.keys(e).length&&t.traverse((function(t){if(!0===t.isSkinnedMesh&&void 0!==t.skeleton){const i=e[t.skeleton];void 0===i?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton):t.bind(i,t.bindMatrix)}}))}},t.ObjectSpaceNormalMap=1,t.OctahedronBufferGeometry=class extends wl{constructor(t,e){console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry."),super(t,e)}},t.OctahedronGeometry=wl,t.OneFactor=201,t.OneMinusDstAlphaFactor=207,t.OneMinusDstColorFactor=209,t.OneMinusSrcAlphaFactor=205,t.OneMinusSrcColorFactor=203,t.OrthographicCamera=In,t.PCFShadowMap=1,t.PCFSoftShadowMap=2,t.PMREMGenerator=Gn,t.Path=Io,t.PerspectiveCamera=on,t.Plane=fn,t.PlaneBufferGeometry=class extends Mn{constructor(t,e,i,n){console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry."),super(t,e,i,n)}},t.PlaneGeometry=Mn,t.PlaneHelper=class extends Ka{constructor(t,e=1,i=16776960){const n=i,r=new Di;r.setAttribute("position",new Ti([1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),r.computeBoundingSphere(),super(r,new ja({color:n,toneMapped:!1})),this.type="PlaneHelper",this.plane=t,this.size=e;const s=new Di;s.setAttribute("position",new Ti([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),s.computeBoundingSphere(),this.add(new Ki(s,new _i({color:n,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}},t.PointLight=Pc,t.PointLightHelper=class extends Ki{constructor(t,e,i){super(new Al(e,4,2),new _i({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.color=i,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}},t.Points=oo,t.PointsMaterial=io,t.PolarGridHelper=class extends to{constructor(t=10,e=16,i=8,n=64,r=4473924,s=8947848){r=new qt(r),s=new qt(s);const a=[],o=[];if(e>1)for(let i=0;i<e;i++){const n=i/e*(2*Math.PI),l=Math.sin(n)*t,c=Math.cos(n)*t;a.push(0,0,0),a.push(l,0,c);const h=1&i?r:s;o.push(h.r,h.g,h.b),o.push(h.r,h.g,h.b)}for(let e=0;e<i;e++){const l=1&e?r:s,c=t-t/i*e;for(let t=0;t<n;t++){let e=t/n*(2*Math.PI),i=Math.sin(e)*c,r=Math.cos(e)*c;a.push(i,0,r),o.push(l.r,l.g,l.b),e=(t+1)/n*(2*Math.PI),i=Math.sin(e)*c,r=Math.cos(e)*c,a.push(i,0,r),o.push(l.r,l.g,l.b)}}const l=new Di;l.setAttribute("position",new Ti(a,3)),l.setAttribute("color",new Ti(o,3));super(l,new ja({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}},t.PolyhedronBufferGeometry=class extends Bo{constructor(t,e,i,n){console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry."),super(t,e,i,n)}},t.PolyhedronGeometry=Bo,t.PositionalAudio=class extends ih{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,i){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=i,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(nh,rh,sh),ah.set(0,0,1).applyQuaternion(rh);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(nh.x,t),e.positionY.linearRampToValueAtTime(nh.y,t),e.positionZ.linearRampToValueAtTime(nh.z,t),e.orientationX.linearRampToValueAtTime(ah.x,t),e.orientationY.linearRampToValueAtTime(ah.y,t),e.orientationZ.linearRampToValueAtTime(ah.z,t)}else e.setPosition(nh.x,nh.y,nh.z),e.setOrientation(ah.x,ah.y,ah.z)}},t.PropertyBinding=mh,t.PropertyMixer=oh,t.QuadraticBezierCurve=Eo,t.QuadraticBezierCurve3=Co,t.Quaternion=ne,t.QuaternionKeyframeTrack=ac,t.QuaternionLinearInterpolant=sc,t.REVISION=e,t.RGBADepthPacking=3201,t.RGBAFormat=S,t.RGBAIntegerFormat=1033,t.RGBA_ASTC_10x10_Format=Y,t.RGBA_ASTC_10x5_Format=j,t.RGBA_ASTC_10x6_Format=q,t.RGBA_ASTC_10x8_Format=X,t.RGBA_ASTC_12x10_Format=Z,t.RGBA_ASTC_12x12_Format=J,t.RGBA_ASTC_4x4_Format=U,t.RGBA_ASTC_5x4_Format=B,t.RGBA_ASTC_5x5_Format=F,t.RGBA_ASTC_6x5_Format=k,t.RGBA_ASTC_6x6_Format=G,t.RGBA_ASTC_8x5_Format=V,t.RGBA_ASTC_8x6_Format=H,t.RGBA_ASTC_8x8_Format=W,t.RGBA_BPTC_Format=K,t.RGBA_ETC2_EAC_Format=z,t.RGBA_PVRTC_2BPPV1_Format=N,t.RGBA_PVRTC_4BPPV1_Format=D,t.RGBA_S3TC_DXT1_Format=C,t.RGBA_S3TC_DXT3_Format=L,t.RGBA_S3TC_DXT5_Format=R,t.RGBFormat=1022,t.RGB_ETC1_Format=36196,t.RGB_ETC2_Format=O,t.RGB_PVRTC_2BPPV1_Format=I,t.RGB_PVRTC_4BPPV1_Format=P,t.RGB_S3TC_DXT1_Format=E,t.RGFormat=1030,t.RGIntegerFormat=1031,t.RawShaderMaterial=Ol,t.Ray=De,t.Raycaster=class{constructor(t,e,i=0,n=1/0){this.ray=new De(t,e),this.near=i,this.far=n,this.camera=null,this.layers=new je,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}intersectObject(t,e=!0,i=[]){return yh(t,this,i,e),i.sort(_h),i}intersectObjects(t,e=!0,i=[]){for(let n=0,r=t.length;n<r;n++)yh(t[n],this,i,e);return i.sort(_h),i}},t.RectAreaLight=Oc,t.RedFormat=1028,t.RedIntegerFormat=1029,t.ReinhardToneMapping=2,t.RepeatWrapping=c,t.ReplaceStencilOp=7681,t.ReverseSubtractEquation=102,t.RingBufferGeometry=class extends Sl{constructor(t,e,i,n,r,s){console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry."),super(t,e,i,n,r,s)}},t.RingGeometry=Sl,t.SRGBColorSpace=lt,t.Scene=ra,t.ShaderChunk=bn,t.ShaderLib=Sn,t.ShaderMaterial=sn,t.ShadowMaterial=Nl,t.Shape=jo,t.ShapeBufferGeometry=class extends Tl{constructor(t,e){console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."),super(t,e)}},t.ShapeGeometry=Tl,t.ShapePath=class{constructor(){this.type="ShapePath",this.color=new qt,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new Io,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,i,n){return this.currentPath.quadraticCurveTo(t,e,i,n),this}bezierCurveTo(t,e,i,n,r,s){return this.currentPath.bezierCurveTo(t,e,i,n,r,s),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t){function e(t,e){const i=e.length;let n=!1;for(let r=i-1,s=0;s<i;r=s++){let i=e[r],a=e[s],o=a.x-i.x,l=a.y-i.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(i=e[s],o=-o,a=e[r],l=-l),t.y<i.y||t.y>a.y)continue;if(t.y===i.y){if(t.x===i.x)return!0}else{const e=l*(t.x-i.x)-o*(t.y-i.y);if(0===e)return!0;if(e<0)continue;n=!n}}else{if(t.y!==i.y)continue;if(a.x<=t.x&&t.x<=i.x||i.x<=t.x&&t.x<=a.x)return!0}}return n}const i=vl.isClockWise,n=this.subPaths;if(0===n.length)return[];let r,s,a;const o=[];if(1===n.length)return s=n[0],a=new jo,a.curves=s.curves,o.push(a),o;let l=!i(n[0].getPoints());l=t?!l:l;const c=[],h=[];let u,d,p=[],m=0;h[m]=void 0,p[m]=[];for(let e=0,a=n.length;e<a;e++)s=n[e],u=s.getPoints(),r=i(u),r=t?!r:r,r?(!l&&h[m]&&m++,h[m]={s:new jo,p:u},h[m].s.curves=s.curves,l&&m++,p[m]=[]):p[m].push({h:s,p:u[0]});if(!h[0])return function(t){const e=[];for(let i=0,n=t.length;i<n;i++){const n=t[i],r=new jo;r.curves=n.curves,e.push(r)}return e}(n);if(h.length>1){let t=!1,i=0;for(let t=0,e=h.length;t<e;t++)c[t]=[];for(let n=0,r=h.length;n<r;n++){const r=p[n];for(let s=0;s<r.length;s++){const a=r[s];let o=!0;for(let r=0;r<h.length;r++)e(a.p,h[r].p)&&(n!==r&&i++,o?(o=!1,c[r].push(a)):t=!0);o&&c[n].push(a)}}i>0&&!1===t&&(p=c)}for(let t=0,e=h.length;t<e;t++){a=h[t].s,o.push(a),d=p[t];for(let t=0,e=d.length;t<e;t++)a.holes.push(d[t].h)}return o}},t.ShapeUtils=vl,t.ShortType=1011,t.Skeleton=Ua,t.SkeletonHelper=class extends to{constructor(t){const e=Ch(t),i=new Di,n=[],r=[],s=new qt(0,0,1),a=new qt(0,1,0);for(let t=0;t<e.length;t++){const i=e[t];i.parent&&i.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),r.push(s.r,s.g,s.b),r.push(a.r,a.g,a.b))}i.setAttribute("position",new Ti(n,3)),i.setAttribute("color",new Ti(r,3));super(i,new ja({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,i=this.geometry,n=i.getAttribute("position");Eh.copy(this.root.matrixWorld).invert();for(let t=0,i=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(Ah.multiplyMatrices(Eh,r.matrixWorld),Th.setFromMatrixPosition(Ah),n.setXYZ(i,Th.x,Th.y,Th.z),Ah.multiplyMatrices(Eh,r.parent.matrixWorld),Th.setFromMatrixPosition(Ah),n.setXYZ(i+1,Th.x,Th.y,Th.z),i+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose()}},t.SkinnedMesh=Ia,t.Source=Zt,t.Sphere=Te,t.SphereBufferGeometry=class extends Al{constructor(t,e,i,n,r,s,a){console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry."),super(t,e,i,n,r,s,a)}},t.SphereGeometry=Al,t.Spherical=class{constructor(t=1,e=0,i=0){return this.radius=t,this.phi=e,this.theta=i,this}set(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(yt(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}},t.SphericalHarmonics3=zc,t.SplineCurve=Lo,t.SpotLight=Ac,t.SpotLightHelper=class extends si{constructor(t,e){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e,this.type="SpotLightHelper";const i=new Di,n=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,i=32;t<i;t++,e++){const r=t/i*Math.PI*2,s=e/i*Math.PI*2;n.push(Math.cos(r),Math.sin(r),1,Math.cos(s),Math.sin(s),1)}i.setAttribute("position",new Ti(n,3));const r=new ja({fog:!1,toneMapped:!1});this.cone=new to(i,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1);const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Sh.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Sh),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}},t.Sprite=ba,t.SpriteMaterial=la,t.SrcAlphaFactor=204,t.SrcAlphaSaturateFactor=210,t.SrcColorFactor=202,t.StaticCopyUsage=35046,t.StaticDrawUsage=ut,t.StaticReadUsage=35045,t.StereoCamera=class{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new on,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new on,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep,Zc.copy(t.projectionMatrix);const i=e.eyeSep/2,n=i*e.near/e.focus,r=e.near*Math.tan(vt*e.fov*.5)/e.zoom;let s,a;Yc.elements[12]=-i,Xc.elements[12]=i,s=-r*e.aspect+n,a=r*e.aspect+n,Zc.elements[0]=2*e.near/(a-s),Zc.elements[8]=(a+s)/(a-s),this.cameraL.projectionMatrix.copy(Zc),s=-r*e.aspect-n,a=r*e.aspect-n,Zc.elements[0]=2*e.near/(a-s),Zc.elements[8]=(a+s)/(a-s),this.cameraR.projectionMatrix.copy(Zc)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Yc),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Xc)}},t.StreamCopyUsage=35042,t.StreamDrawUsage=35040,t.StreamReadUsage=35041,t.StringKeyframeTrack=oc,t.SubtractEquation=101,t.SubtractiveBlending=3,t.TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},t.TangentSpaceNormalMap=0,t.TetrahedronBufferGeometry=class extends El{constructor(t,e){console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry."),super(t,e)}},t.TetrahedronGeometry=El,t.Texture=$t,t.TextureLoader=class extends mc{constructor(t){super(t)}load(t,e,i,n){const r=new $t,s=new xc(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r)}),i,n),r}},t.TorusBufferGeometry=class extends Cl{constructor(t,e,i,n,r){console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry."),super(t,e,i,n,r)}},t.TorusGeometry=Cl,t.TorusKnotBufferGeometry=class extends Ll{constructor(t,e,i,n,r,s){console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry."),super(t,e,i,n,r,s)}},t.TorusKnotGeometry=Ll,t.Triangle=gi,t.TriangleFanDrawMode=2,t.TriangleStripDrawMode=1,t.TrianglesDrawMode=0,t.TubeBufferGeometry=class extends Rl{constructor(t,e,i,n,r){console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry."),super(t,e,i,n,r)}},t.TubeGeometry=Rl,t.UVMapping=n,t.Uint16BufferAttribute=wi,t.Uint32BufferAttribute=Si,t.Uint8BufferAttribute=class extends bi{constructor(t,e,i){super(new Uint8Array(t),e,i)}},t.Uint8ClampedBufferAttribute=class extends bi{constructor(t,e,i){super(new Uint8ClampedArray(t),e,i)}},t.Uniform=vh,t.UniformsGroup=class extends mt{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:xh++}),this.name="",this.usage=ut,this.uniforms=[]}add(t){return this.uniforms.push(t),this}remove(t){const e=this.uniforms.indexOf(t);return-1!==e&&this.uniforms.splice(e,1),this}setName(t){return this.name=t,this}setUsage(t){return this.usage=t,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(t){this.name=t.name,this.usage=t.usage;const e=t.uniforms;this.uniforms.length=0;for(let t=0,i=e.length;t<i;t++)this.uniforms.push(e[t].clone());return this}clone(){return(new this.constructor).copy(this)}},t.UniformsLib=wn,t.UniformsUtils=rn,t.UnsignedByteType=x,t.UnsignedInt248Type=w,t.UnsignedIntType=y,t.UnsignedShort4444Type=1017,t.UnsignedShort5551Type=1018,t.UnsignedShortType=_,t.VSMShadowMap=3,t.Vector2=Lt,t.Vector3=re,t.Vector4=Qt,t.VectorKeyframeTrack=lc,t.VideoTexture=class extends $t{constructor(t,e,i,n,r,s,a,o,l){super(t,e,i,n,r,s,a,o,l),this.isVideoTexture=!0,this.minFilter=void 0!==s?s:f,this.magFilter=void 0!==r?r:f,this.generateMipmaps=!1;const c=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){c.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1==="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}},t.WebGL1Renderer=ea,t.WebGL3DRenderTarget=class extends te{constructor(t=1,e=1,i=1){super(t,e),this.isWebGL3DRenderTarget=!0,this.depth=i,this.texture=new ie(null,t,e,i),this.texture.isRenderTargetTexture=!0}},t.WebGLArrayRenderTarget=class extends te{constructor(t=1,e=1,i=1){super(t,e),this.isWebGLArrayRenderTarget=!0,this.depth=i,this.texture=new ee(null,t,e,i),this.texture.isRenderTargetTexture=!0}},t.WebGLCubeRenderTarget=un,t.WebGLMultipleRenderTargets=class extends te{constructor(t=1,e=1,i=1,n={}){super(t,e,n),this.isWebGLMultipleRenderTargets=!0;const r=this.texture;this.texture=[];for(let t=0;t<i;t++)this.texture[t]=r.clone(),this.texture[t].isRenderTargetTexture=!0}setSize(t,e,i=1){if(this.width!==t||this.height!==e||this.depth!==i){this.width=t,this.height=e,this.depth=i;for(let n=0,r=this.texture.length;n<r;n++)this.texture[n].image.width=t,this.texture[n].image.height=e,this.texture[n].image.depth=i;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.texture.length=0;for(let e=0,i=t.texture.length;e<i;e++)this.texture[e]=t.texture[e].clone(),this.texture[e].isRenderTargetTexture=!0;return this}},t.WebGLMultisampleRenderTarget=class extends te{constructor(t,e,i){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.'),super(t,e,i),this.samples=4}},t.WebGLRenderTarget=te,t.WebGLRenderer=ta,t.WebGLUtils=Vs,t.WireframeGeometry=Pl,t.WrapAroundEnding=nt,t.ZeroCurvatureEnding=et,t.ZeroFactor=200,t.ZeroSlopeEnding=it,t.ZeroStencilOp=0,t._SRGBAFormat=pt,t.sRGBEncoding=ot,Object.defineProperty(t,"__esModule",{value:!0})}));
diff --git a/node_modules/super-three/build/three.module.js b/node_modules/super-three/build/three.module.js
index 3aea48d..062b0be 100644
--- a/node_modules/super-three/build/three.module.js
+++ b/node_modules/super-three/build/three.module.js
@@ -27741,7 +27741,7 @@ function WebGLRenderer( parameters = {} ) {
 
 		state = new WebGLState( _gl, extensions, capabilities );
 
-		info = new WebGLInfo( _gl );
+		info = new WebGLInfo();
 		properties = new WebGLProperties();
 		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
 		cubemaps = new WebGLCubeMaps( _this );
