diff --git a/node_modules/super-three/build/three.js b/node_modules/super-three/build/three.js
index 76cc32d..4b12ee3 100644
--- a/node_modules/super-three/build/three.js
+++ b/node_modules/super-three/build/three.js
@@ -19215,7 +19215,16 @@

 				const cameras = cameraVR.cameras;
 				var object = poseTarget || camera;
-				const parent = object.parent;
+				// const parent = object.parent;
+				// Object is the Group Three.js node that contains the virtual camera.  In 1.3.0, the
+				// original code for getting the parent is:
+				//   const parent = object.parent;
+				// In 1.2.0, the code for setting the parent local variable is:
+				//   const parent = camera.parent
+				// Therefore, in 1.3.0 the parent was the scene, where as in 1.2.0 the parent is the Group
+				// Three.js node.  We want to continue the 1.2.0 behavior in order for xr-aframe to work
+				// with both 1.2.0 and 1.3.0.
+				const parent = camera.parent;
 				updateCamera(cameraVR, parent);

 				for (let i = 0; i < cameras.length; i++) {
@@ -19225,8 +19234,13 @@
 				cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale); // update user camera and its children

 				object.matrixWorld.copy(cameraVR.matrixWorld);
-				object.matrix.copy(cameraVR.matrix);
-				object.matrix.decompose(object.position, object.quaternion, object.scale);
+				// AFrame 1.2.0 only copies over matrixWorld which is giving us the correct result.
+				// Otherwise we are setting the group node to the origin since cameraVR local matrix is
+				// the identity matrix.  We then do futher work in xr-aframe to scale and correct both
+				// cameraVR and object (which is sceneCamObj).  By mirror 1.2.0 we are able to have our
+				// code work for both. So we are removing version 1.3.0 logic here:
+				// object.matrix.copy(cameraVR.matrix);
+				// object.matrix.decompose(object.position, object.quaternion, object.scale);
 				const children = object.children;

 				for (let i = 0, l = children.length; i < l; i++) {
@@ -20323,6 +20337,8 @@
 			indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
 			info.programs = programCache.programs;
 			_this.capabilities = capabilities;
+			_this.attributes = attributes;
+			_this.geometries = geometries;
 			_this.extensions = extensions;
 			_this.properties = properties;
 			_this.renderLists = renderLists;
